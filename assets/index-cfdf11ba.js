import { visit, EXIT, SKIP } from 'https://jspm.dev/unist-util-visit@5.0.0';
import { c as commonjsGlobal, d as dist, b as buffer, g as getDefaultExportFromCjs } from './index-d3a7b17c.js';
import 'https://jspm.dev/postcss@8.4.31';

/**
 * @typedef {'html'|'js'} Style
 *
 * @typedef Options
 *   Configuration.
 * @property {Style} [style='js']
 *   Style of white space to support.
 * @property {boolean} [preserveLineEndings=false]
 *   Whether to collapse white space containing a line ending to that line
 *   ending.
 *   The default is to collapse to a single space.
 * @property {boolean} [trim=false]
 *   Whether to drop white space at the start and end of `value`.
 *   The default is to keep it.
 */

const js = /\s+/g;
const html$2 = /[\t\n\v\f\r ]+/g;

/**
 * Collapse white space.
 *
 * @param {string} value
 *   Value to collapse white space in.
 * @param {Style|Options} [options='js']
 *   Configuration.
 * @returns {string}
 *   Value with collapsed white space.
 */
function collapseWhiteSpace(value, options) {
  if (!options) {
    options = {};
  } else if (typeof options === 'string') {
    options = {style: options};
  }

  const replace = options.preserveLineEndings ? replaceLineEnding : replaceSpace;

  return String(value).replace(
    options.style === 'html' ? html$2 : js,
    options.trim ? trimFactory(replace) : replace
  )
}

/**
 * Replace white space with a line ending as that line ending and otherwise a
 * space.
 *
 * @param {string} value
 * @returns {string}
 */
function replaceLineEnding(value) {
  const match = /\r?\n|\r/.exec(value);
  return match ? match[0] : ' '
}

/**
 * Replace white space with a space.
 *
 * @returns {string}
 */
function replaceSpace() {
  return ' '
}

/**
 * @param {(value: string) => string} replace
 */
function trimFactory(replace) {
  return dropOrReplace

  /**
   * Replace white space with nothing if it starts or ends the string.
   * Calls `replace` otherwise.
   *
   * @param {string} value
   * @param {number} index
   * @param {string} all
   * @returns {string}
   */
  function dropOrReplace(value, index, all) {
    return index === 0 || index + value.length === all.length
      ? ''
      : replace(value)
  }
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Parents} Parents
 */

/**
 * @template Fn
 * @template Fallback
 * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate
 */

/**
 * @callback Check
 *   Check that an arbitrary value is an element.
 * @param {unknown} this
 *   Context object (`this`) to call `test` with
 * @param {unknown} [element]
 *   Anything (typically a node).
 * @param {number | null | undefined} [index]
 *   Position of `element` in its parent.
 * @param {Parents | null | undefined} [parent]
 *   Parent of `element`.
 * @returns {boolean}
 *   Whether this is an element and passes a test.
 *
 * @typedef {Array<TestFunction | string> | TestFunction | string | null | undefined} Test
 *   Check for an arbitrary element.
 *
 *   * when `string`, checks that the element has that tag name
 *   * when `function`, see `TestFunction`
 *   * when `Array`, checks if one of the subtests pass
 *
 * @callback TestFunction
 *   Check if an element passes a test.
 * @param {unknown} this
 *   The given context.
 * @param {Element} element
 *   An element.
 * @param {number | undefined} [index]
 *   Position of `element` in its parent.
 * @param {Parents | undefined} [parent]
 *   Parent of `element`.
 * @returns {boolean | undefined | void}
 *   Whether this element passes the test.
 *
 *   Note: `void` is included until TS sees no return as `undefined`.
 */

/**
 * Check if `element` is an `Element` and whether it passes the given test.
 *
 * @param element
 *   Thing to check, typically `element`.
 * @param test
 *   Check for a specific element.
 * @param index
 *   Position of `element` in its parent.
 * @param parent
 *   Parent of `element`.
 * @param context
 *   Context object (`this`) to call `test` with.
 * @returns
 *   Whether `element` is an `Element` and passes a test.
 * @throws
 *   When an incorrect `test`, `index`, or `parent` is given; there is no error
 *   thrown when `element` is not a node or not an element.
 */
const isElement =
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends TestFunction>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &
   *   (<Condition extends string>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &
   *   ((element?: null | undefined) => false) &
   *   ((element: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &
   *   ((element: unknown, test?: Test, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => boolean)
   * )}
   */
  (
    /**
     * @param {unknown} [element]
     * @param {Test | undefined} [test]
     * @param {number | null | undefined} [index]
     * @param {Parents | null | undefined} [parent]
     * @param {unknown} [context]
     * @returns {boolean}
     */
    // eslint-disable-next-line max-params
    function (element, test, index, parent, context) {
      const check = convertElement(test);

      if (
        index !== null &&
        index !== undefined &&
        (typeof index !== 'number' ||
          index < 0 ||
          index === Number.POSITIVE_INFINITY)
      ) {
        throw new Error('Expected positive finite `index`')
      }

      if (
        parent !== null &&
        parent !== undefined &&
        (!parent.type || !parent.children)
      ) {
        throw new Error('Expected valid `parent`')
      }

      if (
        (index === null || index === undefined) !==
        (parent === null || parent === undefined)
      ) {
        throw new Error('Expected both `index` and `parent`')
      }

      return looksLikeAnElement(element)
        ? check.call(context, element, index, parent)
        : false
    }
  );

/**
 * Generate a check from a test.
 *
 * Useful if you’re going to test many nodes, for example when creating a
 * utility where something else passes a compatible test.
 *
 * The created function is a bit faster because it expects valid input only:
 * an `element`, `index`, and `parent`.
 *
 * @param test
 *   A test for a specific element.
 * @returns
 *   A check.
 */
const convertElement =
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &
   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &
   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &
   *   ((test?: Test) => Check)
   * )}
   */
  (
    /**
     * @param {Test | null | undefined} [test]
     * @returns {Check}
     */
    function (test) {
      if (test === null || test === undefined) {
        return element
      }

      if (typeof test === 'string') {
        return tagNameFactory(test)
      }

      // Assume array.
      if (typeof test === 'object') {
        return anyFactory$1(test)
      }

      if (typeof test === 'function') {
        return castFactory$1(test)
      }

      throw new Error('Expected function, string, or array as `test`')
    }
  );

/**
 * Handle multiple tests.
 *
 * @param {Array<TestFunction | string>} tests
 * @returns {Check}
 */
function anyFactory$1(tests) {
  /** @type {Array<Check>} */
  const checks = [];
  let index = -1;

  while (++index < tests.length) {
    checks[index] = convertElement(tests[index]);
  }

  return castFactory$1(any)

  /**
   * @this {unknown}
   * @type {TestFunction}
   */
  function any(...parameters) {
    let index = -1;

    while (++index < checks.length) {
      if (checks[index].apply(this, parameters)) return true
    }

    return false
  }
}

/**
 * Turn a string into a test for an element with a certain type.
 *
 * @param {string} check
 * @returns {Check}
 */
function tagNameFactory(check) {
  return castFactory$1(tagName)

  /**
   * @param {Element} element
   * @returns {boolean}
   */
  function tagName(element) {
    return element.tagName === check
  }
}

/**
 * Turn a custom test into a test for an element that passes that test.
 *
 * @param {TestFunction} testFunction
 * @returns {Check}
 */
function castFactory$1(testFunction) {
  return check

  /**
   * @this {unknown}
   * @type {Check}
   */
  function check(value, index, parent) {
    return Boolean(
      looksLikeAnElement(value) &&
        testFunction.call(
          this,
          value,
          typeof index === 'number' ? index : undefined,
          parent || undefined
        )
    )
  }
}

/**
 * Make sure something is an element.
 *
 * @param {unknown} element
 * @returns {element is Element}
 */
function element(element) {
  return Boolean(
    element &&
      typeof element === 'object' &&
      'type' in element &&
      element.type === 'element' &&
      'tagName' in element &&
      typeof element.tagName === 'string'
  )
}

/**
 * @param {unknown} value
 * @returns {value is Element}
 */
function looksLikeAnElement(value) {
  return (
    value !== null &&
    typeof value === 'object' &&
    'type' in value &&
    'tagName' in value
  )
}

/**
 * Check if a property is an event handler.
 *
 * Returns `true` when starting with `'on'` and its `length` is `5` or more.
 *
 * @param {string} name
 *   Property name to check.
 * @returns {boolean}
 *   Whether `name` is an event handler.
 */
function isEventHandler(name) {
  return Boolean(
    name &&
      name.slice &&
      name.slice(0, 2).toLowerCase() === 'on' &&
      name.length >= 5
  )
}

// Note: Don’t include non-strings (such as `boolean`s) here, they are handled
// by `rehype-stringify`.

/**
 * Map of property names to tag names.
 * `null` means all tag names.
 *
 * @type {Record<string, Array<string> | null>}
 */
const schema$4 = {
  accept: ['input'],
  acceptCharset: ['form'],
  accessKey: null,
  action: ['form'],
  cite: ['blockquote', 'del', 'ins', 'q'],
  className: null,
  cols: ['textarea'],
  colSpan: ['td', 'th'],
  data: ['object'],
  dropzone: null,
  formAction: ['button', 'input'],
  height: ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video'],
  high: ['meter'],
  href: ['a', 'area', 'base', 'link'],
  htmlFor: ['output'],
  icon: ['menuitem'],
  itemId: null,
  low: ['meter'],
  manifest: ['html'],
  max: ['meter', 'progress'],
  maxLength: ['input', 'textarea'],
  media: ['source'],
  min: ['meter'],
  minLength: ['input', 'textarea'],
  optimum: ['meter'],
  ping: ['a', 'area'],
  poster: ['video'],
  profile: ['head'],
  rows: ['textarea'],
  rowSpan: ['td', 'th'],
  size: ['input', 'select'],
  span: ['col', 'colgroup'],
  src: [
    'audio',
    'embed',
    'iframe',
    'img',
    'input',
    'script',
    'source',
    'track',
    'video'
  ],
  start: ['ol'],
  step: ['input'],
  style: null,
  tabIndex: null,
  useMap: ['img', 'object'],
  value: ['li', 'meter', 'progress'],
  width: ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video']
};

/**
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('hast').Root} Root
 */


/**
 * Minify whitespace in attributes.
 *
 * @returns
 *   Transform.
 */
function rehypeMinifyAttributeWhitespace() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      /** @type {string} */
      let prop;

      for (prop in node.properties) {
        if (
          Object.hasOwn(node.properties, prop) &&
          (isEventHandler(prop) ||
            (Object.hasOwn(schema$4, prop) && isElement(node, schema$4[prop])))
        ) {
          node.properties[prop] = minify$5(node.properties[prop]);
        }
      }
    });
  }
}

/**
 * @param {PropertyValue} value
 *   Property value.
 * @returns {PropertyValue}
 *   Trimmed value.
 */
function minify$5(value) {
  return Array.isArray(value) ? all$a(value) : one$3(value)
}

/**
 * @param {Objects} value
 *   Objects.
 * @returns {Objects}
 *   Trimmed copy.
 */
function all$a(value) {
  let index = -1;
  /** @type {Objects} */
  const result = [];

  while (++index < value.length) {
    // @ts-expect-error: value in -> value out.
    result[index] = one$3(value[index]);
  }

  return result
}

/**
 * @param {Primitives} value
 *   Primitive.
 * @returns {Primitives}
 *   Trimmed.
 */
function one$3(value) {
  return typeof value === 'string'
    ? collapseWhiteSpace(value, {style: 'html', trim: true})
    : value
}

var clean$4 = {exports: {}};

function level0Optimize$1(tokens) {
  // noop as level 0 means no optimizations!
  return tokens;
}

var optimize$4 = level0Optimize$1;

// adapted from http://nedbatchelder.com/blog/200712.html#e20071211T054956

var NUMBER_PATTERN = /([0-9]+)/;

function naturalCompare$1(value1, value2) {
  var keys1 = ('' + value1).split(NUMBER_PATTERN).map(tryParseInt);
  var keys2 = ('' + value2).split(NUMBER_PATTERN).map(tryParseInt);
  var key1;
  var key2;
  var compareFirst = Math.min(keys1.length, keys2.length);
  var i, l;

  for (i = 0, l = compareFirst; i < l; i++) {
    key1 = keys1[i];
    key2 = keys2[i];

    if (key1 != key2) {
      return key1 > key2 ? 1 : -1;
    }
  }

  return keys1.length > keys2.length ? 1 : (keys1.length == keys2.length ? 0 : -1);
}

function tryParseInt(value) {
  return ('' + parseInt(value)) == value
    ? parseInt(value)
    : value;
}

var naturalCompare_1 = naturalCompare$1;

var naturalCompare = naturalCompare_1;

function naturalSorter$1(scope1, scope2) {
  return naturalCompare(scope1[1], scope2[1]);
}

function standardSorter(scope1, scope2) {
  return scope1[1] > scope2[1] ? 1 : -1;
}

function sortSelectors$3(selectors, method) {
  switch (method) {
  case 'natural':
    return selectors.sort(naturalSorter$1);
  case 'standard':
    return selectors.sort(standardSorter);
  case 'none':
  case false:
    return selectors;
  }
}

var sortSelectors_1 = sortSelectors$3;

var browser$2 = {};

browser$2.endianness = function () { return 'LE' };

browser$2.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

browser$2.loadavg = function () { return [] };

browser$2.uptime = function () { return 0 };

browser$2.freemem = function () {
    return Number.MAX_VALUE;
};

browser$2.totalmem = function () {
    return Number.MAX_VALUE;
};

browser$2.cpus = function () { return [] };

browser$2.type = function () { return 'Browser' };

browser$2.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

browser$2.networkInterfaces
= browser$2.getNetworkInterfaces
= function () { return {} };

browser$2.arch = function () { return 'javascript' };

browser$2.platform = function () { return 'browser' };

browser$2.tmpdir = browser$2.tmpDir = function () {
    return '/tmp';
};

browser$2.EOL = '\n';

browser$2.homedir = function () {
	return '/'
};

function override$7(source1, source2) {
  var target = {};
  var key1;
  var key2;
  var item;

  for (key1 in source1) {
    item = source1[key1];

    if (Array.isArray(item)) {
      target[key1] = item.slice(0);
    } else if (typeof item == 'object' && item !== null) {
      target[key1] = override$7(item, {});
    } else {
      target[key1] = item;
    }
  }

  for (key2 in source2) {
    item = source2[key2];

    if (key2 in target && Array.isArray(item)) {
      target[key2] = item.slice(0);
    } else if (key2 in target && typeof item == 'object' && item !== null) {
      target[key2] = override$7(target[key2], item);
    } else {
      target[key2] = item;
    }
  }

  return target;
}

var override_1 = override$7;

var systemLineBreak = browser$2.EOL;

var override$6 = override_1;

var Breaks$1 = {
  AfterAtRule: 'afterAtRule',
  AfterBlockBegins: 'afterBlockBegins',
  AfterBlockEnds: 'afterBlockEnds',
  AfterComment: 'afterComment',
  AfterProperty: 'afterProperty',
  AfterRuleBegins: 'afterRuleBegins',
  AfterRuleEnds: 'afterRuleEnds',
  BeforeBlockEnds: 'beforeBlockEnds',
  BetweenSelectors: 'betweenSelectors'
};

var BreakWith = {
  CarriageReturnLineFeed: '\r\n',
  LineFeed: '\n',
  System: systemLineBreak
};

var IndentWith = {
  Space: ' ',
  Tab: '\t'
};

var Spaces$2 = {
  AroundSelectorRelation: 'aroundSelectorRelation',
  BeforeBlockBegins: 'beforeBlockBegins',
  BeforeValue: 'beforeValue'
};

var DEFAULTS$2 = {
  breaks: breaks(false),
  breakWith: BreakWith.System,
  indentBy: 0,
  indentWith: IndentWith.Space,
  spaces: spaces(false),
  wrapAt: false,
  semicolonAfterLastProperty: false
};

var BEAUTIFY_ALIAS = 'beautify';
var KEEP_BREAKS_ALIAS = 'keep-breaks';

var OPTION_SEPARATOR$1 = ';';
var OPTION_NAME_VALUE_SEPARATOR = ':';
var HASH_VALUES_OPTION_SEPARATOR = ',';
var HASH_VALUES_NAME_VALUE_SEPARATOR = '=';

var FALSE_KEYWORD_1$1 = 'false';
var FALSE_KEYWORD_2$1 = 'off';
var TRUE_KEYWORD_1$1 = 'true';
var TRUE_KEYWORD_2$1 = 'on';

function breaks(value) {
  var breakOptions = {};

  breakOptions[Breaks$1.AfterAtRule] = value;
  breakOptions[Breaks$1.AfterBlockBegins] = value;
  breakOptions[Breaks$1.AfterBlockEnds] = value;
  breakOptions[Breaks$1.AfterComment] = value;
  breakOptions[Breaks$1.AfterProperty] = value;
  breakOptions[Breaks$1.AfterRuleBegins] = value;
  breakOptions[Breaks$1.AfterRuleEnds] = value;
  breakOptions[Breaks$1.BeforeBlockEnds] = value;
  breakOptions[Breaks$1.BetweenSelectors] = value;

  return breakOptions;
}

function spaces(value) {
  var spaceOptions = {};

  spaceOptions[Spaces$2.AroundSelectorRelation] = value;
  spaceOptions[Spaces$2.BeforeBlockBegins] = value;
  spaceOptions[Spaces$2.BeforeValue] = value;

  return spaceOptions;
}

function formatFrom$1(source) {
  if (source === undefined || source === false) {
    return false;
  }

  if (typeof source == 'object' && 'breakWith' in source) {
    source = override$6(source, { breakWith: mapBreakWith(source.breakWith) });
  }

  if (typeof source == 'object' && 'indentBy' in source) {
    source = override$6(source, { indentBy: parseInt(source.indentBy) });
  }

  if (typeof source == 'object' && 'indentWith' in source) {
    source = override$6(source, { indentWith: mapIndentWith(source.indentWith) });
  }

  if (typeof source == 'object') {
    return remapBreaks(override$6(DEFAULTS$2, source));
  }

  if (typeof source == 'string' && source == BEAUTIFY_ALIAS) {
    return remapBreaks(
      override$6(DEFAULTS$2, {
        breaks: breaks(true),
        indentBy: 2,
        spaces: spaces(true)
      })
    );
  }

  if (typeof source == 'string' && source == KEEP_BREAKS_ALIAS) {
    return remapBreaks(
      override$6(DEFAULTS$2, {
        breaks: {
          afterAtRule: true,
          afterBlockBegins: true,
          afterBlockEnds: true,
          afterComment: true,
          afterRuleEnds: true,
          beforeBlockEnds: true
        }
      })
    );
  }

  if (typeof source == 'string') {
    return remapBreaks(override$6(DEFAULTS$2, toHash(source)));
  }

  return DEFAULTS$2;
}

function toHash(string) {
  return string
    .split(OPTION_SEPARATOR$1)
    .reduce(function(accumulator, directive) {
      var parts = directive.split(OPTION_NAME_VALUE_SEPARATOR);
      var name = parts[0];
      var value = parts[1];

      if (name == 'breaks' || name == 'spaces') {
        accumulator[name] = hashValuesToHash(value);
      } else if (name == 'indentBy' || name == 'wrapAt') {
        accumulator[name] = parseInt(value);
      } else if (name == 'indentWith') {
        accumulator[name] = mapIndentWith(value);
      } else if (name == 'breakWith') {
        accumulator[name] = mapBreakWith(value);
      }

      return accumulator;
    }, {});
}

function hashValuesToHash(string) {
  return string
    .split(HASH_VALUES_OPTION_SEPARATOR)
    .reduce(function(accumulator, directive) {
      var parts = directive.split(HASH_VALUES_NAME_VALUE_SEPARATOR);
      var name = parts[0];
      var value = parts[1];

      accumulator[name] = normalizeValue$2(value);

      return accumulator;
    }, {});
}

function normalizeValue$2(value) {
  switch (value) {
  case FALSE_KEYWORD_1$1:
  case FALSE_KEYWORD_2$1:
    return false;
  case TRUE_KEYWORD_1$1:
  case TRUE_KEYWORD_2$1:
    return true;
  default:
    return value;
  }
}

function mapBreakWith(value) {
  switch (value) {
  case 'windows':
  case 'crlf':
  case BreakWith.CarriageReturnLineFeed:
    return BreakWith.CarriageReturnLineFeed;
  case 'unix':
  case 'lf':
  case BreakWith.LineFeed:
    return BreakWith.LineFeed;
  default:
    return systemLineBreak;
  }
}

function mapIndentWith(value) {
  switch (value) {
  case 'space':
    return IndentWith.Space;
  case 'tab':
    return IndentWith.Tab;
  default:
    return value;
  }
}

function remapBreaks(source) {
  for (var key in Breaks$1) {
    var breakName = Breaks$1[key];
    var breakValue = source.breaks[breakName];

    if (breakValue === true) {
      source.breaks[breakName] = source.breakWith;
    } else if (breakValue === false) {
      source.breaks[breakName] = '';
    } else {
      source.breaks[breakName] = source.breakWith.repeat(parseInt(breakValue));
    }
  }

  return source;
}

var format = {
  Breaks: Breaks$1,
  Spaces: Spaces$2,
  formatFrom: formatFrom$1
};

var Marker$g = {
  ASTERISK: '*',
  AT: '@',
  BACK_SLASH: '\\',
  CARRIAGE_RETURN: '\r',
  CLOSE_CURLY_BRACKET: '}',
  CLOSE_ROUND_BRACKET: ')',
  CLOSE_SQUARE_BRACKET: ']',
  COLON: ':',
  COMMA: ',',
  DOUBLE_QUOTE: '"',
  EXCLAMATION: '!',
  FORWARD_SLASH: '/',
  INTERNAL: '-clean-css-',
  NEW_LINE_NIX: '\n',
  OPEN_CURLY_BRACKET: '{',
  OPEN_ROUND_BRACKET: '(',
  OPEN_SQUARE_BRACKET: '[',
  SEMICOLON: ';',
  SINGLE_QUOTE: '\'',
  SPACE: ' ',
  TAB: '\t',
  UNDERSCORE: '_'
};

var marker = Marker$g;

function formatPosition$4(metadata) {
  var line = metadata[0];
  var column = metadata[1];
  var source = metadata[2];

  return source
    ? source + ':' + line + ':' + column
    : line + ':' + column;
}

var formatPosition_1 = formatPosition$4;

var Spaces$1 = format.Spaces;
var Marker$f = marker;
var formatPosition$3 = formatPosition_1;

var CASE_ATTRIBUTE_PATTERN = /[\s"'][iI]\s*\]/;
var CASE_RESTORE_PATTERN = /([\d\w])([iI])\]/g;
var DOUBLE_QUOTE_CASE_PATTERN = /="([a-zA-Z][a-zA-Z\d\-_]+)"([iI])/g;
var DOUBLE_QUOTE_PATTERN = /="([a-zA-Z][a-zA-Z\d\-_]+)"(\s|\])/g;
var HTML_COMMENT_PATTERN = /^(?:(?:<!--|-->)\s*)+/;
var SINGLE_QUOTE_CASE_PATTERN = /='([a-zA-Z][a-zA-Z\d\-_]+)'([iI])/g;
var SINGLE_QUOTE_PATTERN = /='([a-zA-Z][a-zA-Z\d\-_]+)'(\s|\])/g;
var RELATION_PATTERN$1 = /[>+~]/;
var WHITESPACE_PATTERN$2 = /\s/;

var ASTERISK_PLUS_HTML_HACK = '*+html ';
var ASTERISK_FIRST_CHILD_PLUS_HTML_HACK = '*:first-child+html ';
var LESS_THAN = '<';

var PSEUDO_CLASSES_WITH_SELECTORS = [
  ':current',
  ':future',
  ':has',
  ':host',
  ':host-context',
  ':is',
  ':not',
  ':past',
  ':where'
];

function hasInvalidCharacters(value) {
  var isEscaped;
  var isInvalid = false;
  var character;
  var isQuote = false;
  var i, l;

  for (i = 0, l = value.length; i < l; i++) {
    character = value[i];

    if (isEscaped) ; else if (character == Marker$f.SINGLE_QUOTE || character == Marker$f.DOUBLE_QUOTE) {
      isQuote = !isQuote;
    } else if (!isQuote
      && (character == Marker$f.CLOSE_CURLY_BRACKET
        || character == Marker$f.EXCLAMATION
        || character == LESS_THAN
        || character == Marker$f.SEMICOLON)
    ) {
      isInvalid = true;
      break;
    } else if (!isQuote && i === 0 && RELATION_PATTERN$1.test(character)) {
      isInvalid = true;
      break;
    }

    isEscaped = character == Marker$f.BACK_SLASH;
  }

  return isInvalid;
}

function removeWhitespace(value, format) {
  var stripped = [];
  var character;
  var isNewLineNix;
  var isNewLineWin;
  var isEscaped;
  var wasEscaped;
  var isQuoted;
  var isSingleQuoted;
  var isDoubleQuoted;
  var isAttribute;
  var isRelation;
  var isWhitespace;
  var isSpaceAwarePseudoClass;
  var roundBracketLevel = 0;
  var wasComma = false;
  var wasRelation = false;
  var wasWhitespace = false;
  var withCaseAttribute = CASE_ATTRIBUTE_PATTERN.test(value);
  var spaceAroundRelation = format && format.spaces[Spaces$1.AroundSelectorRelation];
  var i, l;

  for (i = 0, l = value.length; i < l; i++) {
    character = value[i];

    isNewLineNix = character == Marker$f.NEW_LINE_NIX;
    isNewLineWin = character == Marker$f.NEW_LINE_NIX && value[i - 1] == Marker$f.CARRIAGE_RETURN;
    isQuoted = isSingleQuoted || isDoubleQuoted;
    isRelation = !isAttribute && !isEscaped && roundBracketLevel === 0 && RELATION_PATTERN$1.test(character);
    isWhitespace = WHITESPACE_PATTERN$2.test(character);
    isSpaceAwarePseudoClass = roundBracketLevel == 1 && character == Marker$f.CLOSE_ROUND_BRACKET
      ? false
      : isSpaceAwarePseudoClass
        || (roundBracketLevel === 0 && character == Marker$f.COLON && isPseudoClassWithSelectors(value, i));

    if (wasEscaped && isQuoted && isNewLineWin) {
      // swallow escaped new windows lines in comments
      stripped.pop();
      stripped.pop();
    } else if (isEscaped && isQuoted && isNewLineNix) {
      // swallow escaped new *nix lines in comments
      stripped.pop();
    } else if (isEscaped) {
      stripped.push(character);
    } else if (character == Marker$f.OPEN_SQUARE_BRACKET && !isQuoted) {
      stripped.push(character);
      isAttribute = true;
    } else if (character == Marker$f.CLOSE_SQUARE_BRACKET && !isQuoted) {
      stripped.push(character);
      isAttribute = false;
    } else if (character == Marker$f.OPEN_ROUND_BRACKET && !isQuoted) {
      stripped.push(character);
      roundBracketLevel++;
    } else if (character == Marker$f.CLOSE_ROUND_BRACKET && !isQuoted) {
      stripped.push(character);
      roundBracketLevel--;
    } else if (character == Marker$f.SINGLE_QUOTE && !isQuoted) {
      stripped.push(character);
      isSingleQuoted = true;
    } else if (character == Marker$f.DOUBLE_QUOTE && !isQuoted) {
      stripped.push(character);
      isDoubleQuoted = true;
    } else if (character == Marker$f.SINGLE_QUOTE && isQuoted) {
      stripped.push(character);
      isSingleQuoted = false;
    } else if (character == Marker$f.DOUBLE_QUOTE && isQuoted) {
      stripped.push(character);
      isDoubleQuoted = false;
    } else if (isWhitespace && wasRelation && !spaceAroundRelation) {
      continue;
    } else if (!isWhitespace && wasRelation && spaceAroundRelation) {
      stripped.push(Marker$f.SPACE);
      stripped.push(character);
    } else if (isWhitespace && !wasWhitespace && wasComma && roundBracketLevel > 0 && isSpaceAwarePseudoClass) ; else if (isWhitespace && !wasWhitespace && roundBracketLevel > 0 && isSpaceAwarePseudoClass) {
      stripped.push(character);
    } else if (isWhitespace && (isAttribute || roundBracketLevel > 0) && !isQuoted) ; else if (isWhitespace && wasWhitespace && !isQuoted) ; else if ((isNewLineWin || isNewLineNix) && (isAttribute || roundBracketLevel > 0) && isQuoted) ; else if (isRelation && wasWhitespace && !spaceAroundRelation) {
      stripped.pop();
      stripped.push(character);
    } else if (isRelation && !wasWhitespace && spaceAroundRelation) {
      stripped.push(Marker$f.SPACE);
      stripped.push(character);
    } else if (isWhitespace) {
      stripped.push(Marker$f.SPACE);
    } else {
      stripped.push(character);
    }

    wasEscaped = isEscaped;
    isEscaped = character == Marker$f.BACK_SLASH;
    wasRelation = isRelation;
    wasWhitespace = isWhitespace;
    wasComma = character == Marker$f.COMMA;
  }

  return withCaseAttribute
    ? stripped.join('').replace(CASE_RESTORE_PATTERN, '$1 $2]')
    : stripped.join('');
}

function isPseudoClassWithSelectors(value, colonPosition) {
  var pseudoClass = value.substring(colonPosition, value.indexOf(Marker$f.OPEN_ROUND_BRACKET, colonPosition));

  return PSEUDO_CLASSES_WITH_SELECTORS.indexOf(pseudoClass) > -1;
}

function removeQuotes(value) {
  if (value.indexOf('\'') == -1 && value.indexOf('"') == -1) {
    return value;
  }

  return value
    .replace(SINGLE_QUOTE_CASE_PATTERN, '=$1 $2')
    .replace(SINGLE_QUOTE_PATTERN, '=$1$2')
    .replace(DOUBLE_QUOTE_CASE_PATTERN, '=$1 $2')
    .replace(DOUBLE_QUOTE_PATTERN, '=$1$2');
}

function replacePseudoClasses(value) {
  return value
    .replace('nth-child(1)', 'first-child')
    .replace('nth-of-type(1)', 'first-of-type')
    .replace('nth-of-type(even)', 'nth-of-type(2n)')
    .replace('nth-child(even)', 'nth-child(2n)')
    .replace('nth-of-type(2n+1)', 'nth-of-type(odd)')
    .replace('nth-child(2n+1)', 'nth-child(odd)')
    .replace('nth-last-child(1)', 'last-child')
    .replace('nth-last-of-type(1)', 'last-of-type')
    .replace('nth-last-of-type(even)', 'nth-last-of-type(2n)')
    .replace('nth-last-child(even)', 'nth-last-child(2n)')
    .replace('nth-last-of-type(2n+1)', 'nth-last-of-type(odd)')
    .replace('nth-last-child(2n+1)', 'nth-last-child(odd)');
}

function tidyRules$3(rules, removeUnsupported, adjacentSpace, format, warnings) {
  var list = [];
  var repeated = [];

  function removeHTMLComment(rule, match) {
    warnings.push('HTML comment \'' + match + '\' at ' + formatPosition$3(rule[2][0]) + '. Removing.');
    return '';
  }

  for (var i = 0, l = rules.length; i < l; i++) {
    var rule = rules[i];
    var reduced = rule[1];

    reduced = reduced.replace(HTML_COMMENT_PATTERN, removeHTMLComment.bind(null, rule));

    if (hasInvalidCharacters(reduced)) {
      warnings.push('Invalid selector \'' + rule[1] + '\' at ' + formatPosition$3(rule[2][0]) + '. Ignoring.');
      continue;
    }

    reduced = removeWhitespace(reduced, format);
    reduced = removeQuotes(reduced);

    if (adjacentSpace && reduced.indexOf('nav') > 0) {
      reduced = reduced.replace(/\+nav(\S|$)/, '+ nav$1');
    }

    if (removeUnsupported && reduced.indexOf(ASTERISK_PLUS_HTML_HACK) > -1) {
      continue;
    }

    if (removeUnsupported && reduced.indexOf(ASTERISK_FIRST_CHILD_PLUS_HTML_HACK) > -1) {
      continue;
    }

    if (reduced.indexOf('*') > -1) {
      reduced = reduced
        .replace(/\*([:#.[])/g, '$1')
        .replace(/^(:first-child)?\+html/, '*$1+html');
    }

    if (repeated.indexOf(reduced) > -1) {
      continue;
    }

    reduced = replacePseudoClasses(reduced);

    rule[1] = reduced;
    repeated.push(reduced);
    list.push(rule);
  }

  if (list.length == 1 && list[0][1].length === 0) {
    warnings.push('Empty selector \'' + list[0][1] + '\' at ' + formatPosition$3(list[0][2][0]) + '. Ignoring.');
    list = [];
  }

  return list;
}

var tidyRules_1 = tidyRules$3;

var SUPPORTED_COMPACT_BLOCK_MATCHER = /^@media\W/;
var SUPPORTED_QUOTE_REMOVAL_MATCHER = /^@(?:keyframes|-moz-keyframes|-o-keyframes|-webkit-keyframes)\W/;

function tidyBlock$1(values, spaceAfterClosingBrace) {
  var withoutSpaceAfterClosingBrace;
  var withoutQuotes;
  var i;

  for (i = values.length - 1; i >= 0; i--) {
    withoutSpaceAfterClosingBrace = !spaceAfterClosingBrace && SUPPORTED_COMPACT_BLOCK_MATCHER.test(values[i][1]);
    withoutQuotes = SUPPORTED_QUOTE_REMOVAL_MATCHER.test(values[i][1]);

    values[i][1] = values[i][1]
      .replace(/\n|\r\n/g, ' ')
      .replace(/\s+/g, ' ')
      .replace(/(,|:|\() /g, '$1')
      .replace(/ \)/g, ')');

    if (withoutQuotes) {
      values[i][1] = values[i][1]
        .replace(/'([a-zA-Z][a-zA-Z\d\-_]+)'/, '$1')
        .replace(/"([a-zA-Z][a-zA-Z\d\-_]+)"/, '$1');
    }

    if (withoutSpaceAfterClosingBrace) {
      values[i][1] = values[i][1]
        .replace(/\) /g, ')');
    }
  }

  return values;
}

var tidyBlock_1 = tidyBlock$1;

function tidyAtRule$1(value) {
  return value
    .replace(/\s+/g, ' ')
    .replace(/url\(\s+/g, 'url(')
    .replace(/\s+\)/g, ')')
    .trim();
}

var tidyAtRule_1 = tidyAtRule$1;

var Hack$3 = {
  ASTERISK: 'asterisk',
  BANG: 'bang',
  BACKSLASH: 'backslash',
  UNDERSCORE: 'underscore'
};

var hack = Hack$3;

function removeUnused$2(properties) {
  for (var i = properties.length - 1; i >= 0; i--) {
    var property = properties[i];

    if (property.unused) {
      property.all.splice(property.position, 1);
    }
  }
}

var removeUnused_1 = removeUnused$2;

var Hack$2 = hack;

var Marker$e = marker;

var ASTERISK_HACK = '*';
var BACKSLASH_HACK = '\\';
var IMPORTANT_TOKEN = '!important';
var UNDERSCORE_HACK = '_';
var BANG_HACK = '!ie';

function restoreFromOptimizing$5(properties, restoreCallback) {
  var property;
  var restored;
  var current;
  var i;

  for (i = properties.length - 1; i >= 0; i--) {
    property = properties[i];

    if (property.dynamic && property.important) {
      restoreImportant(property);
      continue;
    }

    if (property.dynamic) {
      continue;
    }

    if (property.unused) {
      continue;
    }

    if (!property.dirty && !property.important && !property.hack) {
      continue;
    }

    if (property.optimizable && restoreCallback) {
      restored = restoreCallback(property);
      property.value = restored;
    } else {
      restored = property.value;
    }

    if (property.important) {
      restoreImportant(property);
    }

    if (property.hack) {
      restoreHack(property);
    }

    if ('all' in property) {
      current = property.all[property.position];
      current[1][1] = property.name;

      current.splice(2, current.length - 1);
      Array.prototype.push.apply(current, restored);
    }
  }
}

function restoreImportant(property) {
  property.value[property.value.length - 1][1] += IMPORTANT_TOKEN;
}

function restoreHack(property) {
  if (property.hack[0] == Hack$2.UNDERSCORE) {
    property.name = UNDERSCORE_HACK + property.name;
  } else if (property.hack[0] == Hack$2.ASTERISK) {
    property.name = ASTERISK_HACK + property.name;
  } else if (property.hack[0] == Hack$2.BACKSLASH) {
    property.value[property.value.length - 1][1] += BACKSLASH_HACK + property.hack[1];
  } else if (property.hack[0] == Hack$2.BANG) {
    property.value[property.value.length - 1][1] += Marker$e.SPACE + BANG_HACK;
  }
}

var restoreFromOptimizing_1 = restoreFromOptimizing$5;

var Token$o = {
  AT_RULE: 'at-rule', // e.g. `@import`, `@charset`
  AT_RULE_BLOCK: 'at-rule-block', // e.g. `@font-face{...}`
  AT_RULE_BLOCK_SCOPE: 'at-rule-block-scope', // e.g. `@font-face`
  COMMENT: 'comment', // e.g. `/* comment */`
  NESTED_BLOCK: 'nested-block', // e.g. `@media screen{...}`, `@keyframes animation {...}`
  NESTED_BLOCK_SCOPE: 'nested-block-scope', // e.g. `@media`, `@keyframes`
  PROPERTY: 'property', // e.g. `color:red`
  PROPERTY_BLOCK: 'property-block', // e.g. `--var:{color:red}`
  PROPERTY_NAME: 'property-name', // e.g. `color`
  PROPERTY_VALUE: 'property-value', // e.g. `red`
  RAW: 'raw', // e.g. anything between /* clean-css ignore:start */ and /* clean-css ignore:end */ comments
  RULE: 'rule', // e.g `div > a{...}`
  RULE_SCOPE: 'rule-scope' // e.g `div > a`
};

var token = Token$o;

var Hack$1 = hack;

var Marker$d = marker;
var Token$n = token;

var Match = {
  ASTERISK: '*',
  BACKSLASH: '\\',
  BANG: '!',
  BANG_SUFFIX_PATTERN: /!\w+$/,
  IMPORTANT_TOKEN: '!important',
  IMPORTANT_TOKEN_PATTERN: new RegExp('!important$', 'i'),
  IMPORTANT_WORD: 'important',
  IMPORTANT_WORD_PATTERN: new RegExp('important$', 'i'),
  SUFFIX_BANG_PATTERN: /!$/,
  UNDERSCORE: '_',
  VARIABLE_REFERENCE_PATTERN: /var\(--.+\)$/
};

function wrapAll(properties, skipProperties) {
  var wrapped = [];
  var single;
  var property;
  var i;

  for (i = properties.length - 1; i >= 0; i--) {
    property = properties[i];

    if (property[0] != Token$n.PROPERTY) {
      continue;
    }

    if (skipProperties && skipProperties.indexOf(property[1][1]) > -1) {
      continue;
    }

    single = wrapSingle$3(property);
    single.all = properties;
    single.position = i;
    wrapped.unshift(single);
  }

  return wrapped;
}

function someVariableReferences(property) {
  var i, l;
  var value;

  // skipping `property` and property name tokens
  for (i = 2, l = property.length; i < l; i++) {
    value = property[i];

    if (value[0] != Token$n.PROPERTY_VALUE) {
      continue;
    }

    if (isVariableReference(value[1])) {
      return true;
    }
  }

  return false;
}

function isVariableReference(value) {
  return Match.VARIABLE_REFERENCE_PATTERN.test(value);
}

function isMultiplex(property) {
  var value;
  var i, l;

  for (i = 3, l = property.length; i < l; i++) {
    value = property[i];

    if (value[0] == Token$n.PROPERTY_VALUE && (value[1] == Marker$d.COMMA || value[1] == Marker$d.FORWARD_SLASH)) {
      return true;
    }
  }

  return false;
}

function hackFrom(property) {
  var match = false;
  var name = property[1][1];
  var lastValue = property[property.length - 1];

  if (name[0] == Match.UNDERSCORE) {
    match = [Hack$1.UNDERSCORE];
  } else if (name[0] == Match.ASTERISK) {
    match = [Hack$1.ASTERISK];
  } else if (lastValue[1][0] == Match.BANG && !lastValue[1].match(Match.IMPORTANT_WORD_PATTERN)) {
    match = [Hack$1.BANG];
  } else if (lastValue[1].indexOf(Match.BANG) > 0
    && !lastValue[1].match(Match.IMPORTANT_WORD_PATTERN)
    && Match.BANG_SUFFIX_PATTERN.test(lastValue[1])) {
    match = [Hack$1.BANG];
  } else if (lastValue[1].indexOf(Match.BACKSLASH) > 0
    && lastValue[1].indexOf(Match.BACKSLASH) == lastValue[1].length - Match.BACKSLASH.length - 1) {
    match = [Hack$1.BACKSLASH, lastValue[1].substring(lastValue[1].indexOf(Match.BACKSLASH) + 1)];
  } else if (lastValue[1].indexOf(Match.BACKSLASH) === 0 && lastValue[1].length == 2) {
    match = [Hack$1.BACKSLASH, lastValue[1].substring(1)];
  }

  return match;
}

function isImportant(property) {
  if (property.length < 3) { return false; }

  var lastValue = property[property.length - 1];
  if (Match.IMPORTANT_TOKEN_PATTERN.test(lastValue[1])) {
    return true;
  } if (Match.IMPORTANT_WORD_PATTERN.test(lastValue[1])
    && Match.SUFFIX_BANG_PATTERN.test(property[property.length - 2][1])) {
    return true;
  }

  return false;
}

function stripImportant(property) {
  var lastValue = property[property.length - 1];
  var oneButLastValue = property[property.length - 2];

  if (Match.IMPORTANT_TOKEN_PATTERN.test(lastValue[1])) {
    lastValue[1] = lastValue[1].replace(Match.IMPORTANT_TOKEN_PATTERN, '');
  } else {
    lastValue[1] = lastValue[1].replace(Match.IMPORTANT_WORD_PATTERN, '');
    oneButLastValue[1] = oneButLastValue[1].replace(Match.SUFFIX_BANG_PATTERN, '');
  }

  if (lastValue[1].length === 0) {
    property.pop();
  }

  if (oneButLastValue[1].length === 0) {
    property.pop();
  }
}

function stripPrefixHack(property) {
  property[1][1] = property[1][1].substring(1);
}

function stripSuffixHack(property, hackFrom) {
  var lastValue = property[property.length - 1];
  lastValue[1] = lastValue[1]
    .substring(0, lastValue[1].indexOf(hackFrom[0] == Hack$1.BACKSLASH ? Match.BACKSLASH : Match.BANG))
    .trim();

  if (lastValue[1].length === 0) {
    property.pop();
  }
}

function wrapSingle$3(property) {
  var importantProperty = isImportant(property);
  if (importantProperty) {
    stripImportant(property);
  }

  var whichHack = hackFrom(property);
  if (whichHack[0] == Hack$1.ASTERISK || whichHack[0] == Hack$1.UNDERSCORE) {
    stripPrefixHack(property);
  } else if (whichHack[0] == Hack$1.BACKSLASH || whichHack[0] == Hack$1.BANG) {
    stripSuffixHack(property, whichHack);
  }

  return {
    block: property[2] && property[2][0] == Token$n.PROPERTY_BLOCK,
    components: [],
    dirty: false,
    dynamic: someVariableReferences(property),
    hack: whichHack,
    important: importantProperty,
    name: property[1][1],
    multiplex: property.length > 3 ? isMultiplex(property) : false,
    optimizable: true,
    position: 0,
    shorthand: false,
    unused: false,
    value: property.slice(2)
  };
}

var wrapForOptimizing$3 = {
  all: wrapAll,
  single: wrapSingle$3
};

function InvalidPropertyError$2(message) {
  this.name = 'InvalidPropertyError';
  this.message = message;
  this.stack = (new Error()).stack;
}

InvalidPropertyError$2.prototype = Object.create(Error.prototype);
InvalidPropertyError$2.prototype.constructor = InvalidPropertyError$2;

var invalidPropertyError = InvalidPropertyError$2;

var InvalidPropertyError$1 = invalidPropertyError;

var wrapSingle$2 = wrapForOptimizing$3.single;

var Token$m = token;
var Marker$c = marker;

var formatPosition$2 = formatPosition_1;

function _anyIsInherit(values) {
  var i, l;

  for (i = 0, l = values.length; i < l; i++) {
    if (values[i][1] == 'inherit') {
      return true;
    }
  }

  return false;
}

function _colorFilter(validator) {
  return function(value) {
    return value[1] == 'invert' || validator.isColor(value[1]) || validator.isPrefixed(value[1]);
  };
}

function _styleFilter(validator) {
  return function(value) {
    return value[1] != 'inherit' && validator.isStyleKeyword(value[1]) && !validator.isColorFunction(value[1]);
  };
}

function _wrapDefault(name, property, configuration) {
  var descriptor = configuration[name];
  if (descriptor.doubleValues && descriptor.defaultValue.length == 2) {
    return wrapSingle$2([
      Token$m.PROPERTY,
      [Token$m.PROPERTY_NAME, name],
      [Token$m.PROPERTY_VALUE, descriptor.defaultValue[0]],
      [Token$m.PROPERTY_VALUE, descriptor.defaultValue[1]]
    ]);
  } if (descriptor.doubleValues && descriptor.defaultValue.length == 1) {
    return wrapSingle$2([
      Token$m.PROPERTY,
      [Token$m.PROPERTY_NAME, name],
      [Token$m.PROPERTY_VALUE, descriptor.defaultValue[0]]
    ]);
  }
  return wrapSingle$2([
    Token$m.PROPERTY,
    [Token$m.PROPERTY_NAME, name],
    [Token$m.PROPERTY_VALUE, descriptor.defaultValue]
  ]);
}

function _widthFilter(validator) {
  return function(value) {
    return value[1] != 'inherit'
      && (validator.isWidth(value[1]) || validator.isUnit(value[1]) || validator.isDynamicUnit(value[1]))
      && !validator.isStyleKeyword(value[1])
      && !validator.isColorFunction(value[1]);
  };
}

function animation(property, configuration, validator) {
  var duration = _wrapDefault(property.name + '-duration', property, configuration);
  var timing = _wrapDefault(property.name + '-timing-function', property, configuration);
  var delay = _wrapDefault(property.name + '-delay', property, configuration);
  var iteration = _wrapDefault(property.name + '-iteration-count', property, configuration);
  var direction = _wrapDefault(property.name + '-direction', property, configuration);
  var fill = _wrapDefault(property.name + '-fill-mode', property, configuration);
  var play = _wrapDefault(property.name + '-play-state', property, configuration);
  var name = _wrapDefault(property.name + '-name', property, configuration);
  var components = [duration, timing, delay, iteration, direction, fill, play, name];
  var values = property.value;
  var value;
  var durationSet = false;
  var timingSet = false;
  var delaySet = false;
  var iterationSet = false;
  var directionSet = false;
  var fillSet = false;
  var playSet = false;
  var nameSet = false;
  var i;
  var l;

  if (property.value.length == 1 && property.value[0][1] == 'inherit') {
    // eslint-disable-next-line max-len
    duration.value = timing.value = delay.value = iteration.value = direction.value = fill.value = play.value = name.value = property.value;
    return components;
  }

  if (values.length > 1 && _anyIsInherit(values)) {
    throw new InvalidPropertyError$1('Invalid animation values at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
  }

  for (i = 0, l = values.length; i < l; i++) {
    value = values[i];

    if (validator.isTime(value[1]) && !durationSet) {
      duration.value = [value];
      durationSet = true;
    } else if (validator.isTime(value[1]) && !delaySet) {
      delay.value = [value];
      delaySet = true;
    } else if ((validator.isGlobal(value[1]) || validator.isTimingFunction(value[1])) && !timingSet) {
      timing.value = [value];
      timingSet = true;
    } else if ((validator.isAnimationIterationCountKeyword(value[1])
      || validator.isPositiveNumber(value[1]))
      && !iterationSet) {
      iteration.value = [value];
      iterationSet = true;
    } else if (validator.isAnimationDirectionKeyword(value[1]) && !directionSet) {
      direction.value = [value];
      directionSet = true;
    } else if (validator.isAnimationFillModeKeyword(value[1]) && !fillSet) {
      fill.value = [value];
      fillSet = true;
    } else if (validator.isAnimationPlayStateKeyword(value[1]) && !playSet) {
      play.value = [value];
      playSet = true;
    } else if ((validator.isAnimationNameKeyword(value[1]) || validator.isIdentifier(value[1])) && !nameSet) {
      name.value = [value];
      nameSet = true;
    } else {
      throw new InvalidPropertyError$1('Invalid animation value at ' + formatPosition$2(value[2][0]) + '. Ignoring.');
    }
  }

  return components;
}

function background$2(property, configuration, validator) {
  var image = _wrapDefault('background-image', property, configuration);
  var position = _wrapDefault('background-position', property, configuration);
  var size = _wrapDefault('background-size', property, configuration);
  var repeat = _wrapDefault('background-repeat', property, configuration);
  var attachment = _wrapDefault('background-attachment', property, configuration);
  var origin = _wrapDefault('background-origin', property, configuration);
  var clip = _wrapDefault('background-clip', property, configuration);
  var color = _wrapDefault('background-color', property, configuration);
  var components = [image, position, size, repeat, attachment, origin, clip, color];
  var values = property.value;

  var positionSet = false;
  var clipSet = false;
  var originSet = false;
  var repeatSet = false;

  var anyValueSet = false;

  if (property.value.length == 1 && property.value[0][1] == 'inherit') {
    // NOTE: 'inherit' is not a valid value for background-attachment
    color.value = image.value = repeat.value = position.value = size.value = origin.value = clip.value = property.value;
    return components;
  }

  if (property.value.length == 1 && property.value[0][1] == '0 0') {
    return components;
  }

  for (var i = values.length - 1; i >= 0; i--) {
    var value = values[i];

    if (validator.isBackgroundAttachmentKeyword(value[1])) {
      attachment.value = [value];
      anyValueSet = true;
    } else if (validator.isBackgroundClipKeyword(value[1]) || validator.isBackgroundOriginKeyword(value[1])) {
      if (clipSet) {
        origin.value = [value];
        originSet = true;
      } else {
        clip.value = [value];
        clipSet = true;
      }
      anyValueSet = true;
    } else if (validator.isBackgroundRepeatKeyword(value[1])) {
      if (repeatSet) {
        repeat.value.unshift(value);
      } else {
        repeat.value = [value];
        repeatSet = true;
      }
      anyValueSet = true;
    } else if (validator.isBackgroundPositionKeyword(value[1])
    || validator.isBackgroundSizeKeyword(value[1])
    || validator.isUnit(value[1])
    || validator.isDynamicUnit(value[1])) {
      if (i > 0) {
        var previousValue = values[i - 1];

        if (previousValue[1] == Marker$c.FORWARD_SLASH) {
          size.value = [value];
        } else if (i > 1 && values[i - 2][1] == Marker$c.FORWARD_SLASH) {
          size.value = [previousValue, value];
          i -= 2;
        } else {
          if (!positionSet) { position.value = []; }

          position.value.unshift(value);
          positionSet = true;
        }
      } else {
        if (!positionSet) { position.value = []; }

        position.value.unshift(value);
        positionSet = true;
      }
      anyValueSet = true;
    } else if ((color.value[0][1] == configuration[color.name].defaultValue || color.value[0][1] == 'none') && (validator.isColor(value[1]) || validator.isPrefixed(value[1]))) {
      color.value = [value];
      anyValueSet = true;
    } else if (validator.isUrl(value[1]) || validator.isFunction(value[1])) {
      image.value = [value];
      anyValueSet = true;
    }
  }

  if (clipSet && !originSet) { origin.value = clip.value.slice(0); }

  if (!anyValueSet) {
    throw new InvalidPropertyError$1('Invalid background value at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
  }

  return components;
}

function borderRadius$2(property, configuration) {
  var values = property.value;
  var splitAt = -1;

  for (var i = 0, l = values.length; i < l; i++) {
    if (values[i][1] == Marker$c.FORWARD_SLASH) {
      splitAt = i;
      break;
    }
  }

  if (splitAt === 0 || splitAt === values.length - 1) {
    throw new InvalidPropertyError$1('Invalid border-radius value at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
  }

  var target = _wrapDefault(property.name, property, configuration);
  target.value = splitAt > -1
    ? values.slice(0, splitAt)
    : values.slice(0);
  target.components = fourValues$1(target, configuration);

  var remainder = _wrapDefault(property.name, property, configuration);
  remainder.value = splitAt > -1
    ? values.slice(splitAt + 1)
    : values.slice(0);
  remainder.components = fourValues$1(remainder, configuration);

  for (var j = 0; j < 4; j++) {
    target.components[j].multiplex = true;
    target.components[j].value = target.components[j].value.concat(remainder.components[j].value);
  }

  return target.components;
}

function font$1(property, configuration, validator) {
  var style = _wrapDefault('font-style', property, configuration);
  var variant = _wrapDefault('font-variant', property, configuration);
  var weight = _wrapDefault('font-weight', property, configuration);
  var stretch = _wrapDefault('font-stretch', property, configuration);
  var size = _wrapDefault('font-size', property, configuration);
  var height = _wrapDefault('line-height', property, configuration);
  var family = _wrapDefault('font-family', property, configuration);
  var components = [style, variant, weight, stretch, size, height, family];
  var values = property.value;
  var fuzzyMatched = 4; // style, variant, weight, and stretch
  var index = 0;
  var isStretchSet = false;
  var isStretchValid;
  var isStyleSet = false;
  var isStyleValid;
  var isVariantSet = false;
  var isVariantValid;
  var isWeightSet = false;
  var isWeightValid;
  var appendableFamilyName = false;

  if (!values[index]) {
    throw new InvalidPropertyError$1('Missing font values at ' + formatPosition$2(property.all[property.position][1][2][0]) + '. Ignoring.');
  }

  if (values.length == 1 && values[0][1] == 'inherit') {
    style.value = variant.value = weight.value = stretch.value = size.value = height.value = family.value = values;
    return components;
  }

  if (values.length == 1
    && (validator.isFontKeyword(values[0][1])
    || validator.isGlobal(values[0][1])
    || validator.isPrefixed(values[0][1]))
  ) {
    values[0][1] = Marker$c.INTERNAL + values[0][1];
    style.value = variant.value = weight.value = stretch.value = size.value = height.value = family.value = values;
    return components;
  }

  if (values.length < 2 || !_anyIsFontSize(values, validator) || !_anyIsFontFamily(values, validator)) {
    throw new InvalidPropertyError$1('Invalid font values at ' + formatPosition$2(property.all[property.position][1][2][0]) + '. Ignoring.');
  }

  if (values.length > 1 && _anyIsInherit(values)) {
    throw new InvalidPropertyError$1('Invalid font values at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
  }

  // fuzzy match style, variant, weight, and stretch on first elements
  while (index < fuzzyMatched) {
    isStretchValid = validator.isFontStretchKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
    isStyleValid = validator.isFontStyleKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
    isVariantValid = validator.isFontVariantKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
    isWeightValid = validator.isFontWeightKeyword(values[index][1]) || validator.isGlobal(values[index][1]);

    if (isStyleValid && !isStyleSet) {
      style.value = [values[index]];
      isStyleSet = true;
    } else if (isVariantValid && !isVariantSet) {
      variant.value = [values[index]];
      isVariantSet = true;
    } else if (isWeightValid && !isWeightSet) {
      weight.value = [values[index]];
      isWeightSet = true;
    } else if (isStretchValid && !isStretchSet) {
      stretch.value = [values[index]];
      isStretchSet = true;
    } else if (isStyleValid
      && isStyleSet
      || isVariantValid
      && isVariantSet
      || isWeightValid
      && isWeightSet
      || isStretchValid
      && isStretchSet) {
      throw new InvalidPropertyError$1('Invalid font style / variant / weight / stretch value at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
    } else {
      break;
    }

    index++;
  }

  // now comes font-size ...
  if (validator.isFontSizeKeyword(values[index][1])
    || validator.isUnit(values[index][1])
    && !validator.isDynamicUnit(values[index][1])) {
    size.value = [values[index]];
    index++;
  } else {
    throw new InvalidPropertyError$1('Missing font size at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
  }

  if (!values[index]) {
    throw new InvalidPropertyError$1('Missing font family at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
  }

  // ... and perhaps line-height
  if (values[index]
    && values[index][1] == Marker$c.FORWARD_SLASH
    && values[index + 1]
    && (validator.isLineHeightKeyword(values[index + 1][1])
    || validator.isUnit(values[index + 1][1])
    || validator.isNumber(values[index + 1][1]))) {
    height.value = [values[index + 1]];
    index++;
    index++;
  }

  // ... and whatever comes next is font-family
  family.value = [];

  while (values[index]) {
    if (values[index][1] == Marker$c.COMMA) {
      appendableFamilyName = false;
    } else {
      if (appendableFamilyName) {
        family.value[family.value.length - 1][1] += Marker$c.SPACE + values[index][1];
      } else {
        family.value.push(values[index]);
      }

      appendableFamilyName = true;
    }

    index++;
  }

  if (family.value.length === 0) {
    throw new InvalidPropertyError$1('Missing font family at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
  }

  return components;
}

function _anyIsFontSize(values, validator) {
  var value;
  var i, l;

  for (i = 0, l = values.length; i < l; i++) {
    value = values[i];

    if (validator.isFontSizeKeyword(value[1])
      || validator.isUnit(value[1])
      && !validator.isDynamicUnit(value[1])
      || validator.isFunction(value[1])) {
      return true;
    }
  }

  return false;
}

function _anyIsFontFamily(values, validator) {
  var value;
  var i, l;

  for (i = 0, l = values.length; i < l; i++) {
    value = values[i];

    if (validator.isIdentifier(value[1]) || validator.isQuotedText(value[1])) {
      return true;
    }
  }

  return false;
}

function fourValues$1(property, configuration) {
  var componentNames = configuration[property.name].components;
  var components = [];
  var value = property.value;

  if (value.length < 1) { return []; }

  if (value.length < 2) { value[1] = value[0].slice(0); }
  if (value.length < 3) { value[2] = value[0].slice(0); }
  if (value.length < 4) { value[3] = value[1].slice(0); }

  for (var i = componentNames.length - 1; i >= 0; i--) {
    var component = wrapSingle$2([
      Token$m.PROPERTY,
      [Token$m.PROPERTY_NAME, componentNames[i]]
    ]);
    component.value = [value[i]];
    components.unshift(component);
  }

  return components;
}

function multiplex$1(splitWith) {
  return function(property, configuration, validator) {
    var splitsAt = [];
    var values = property.value;
    var i, j, l, m;

    // find split commas
    for (i = 0, l = values.length; i < l; i++) {
      if (values[i][1] == ',') { splitsAt.push(i); }
    }

    if (splitsAt.length === 0) { return splitWith(property, configuration, validator); }

    var splitComponents = [];

    // split over commas, and into components
    for (i = 0, l = splitsAt.length; i <= l; i++) {
      var from = i === 0 ? 0 : splitsAt[i - 1] + 1;
      var to = i < l ? splitsAt[i] : values.length;

      var _property = _wrapDefault(property.name, property, configuration);
      _property.value = values.slice(from, to);

      if (_property.value.length > 0) {
        splitComponents.push(splitWith(_property, configuration, validator));
      }
    }

    var components = splitComponents[0];

    // group component values from each split
    for (i = 0, l = components.length; i < l; i++) {
      components[i].multiplex = true;

      for (j = 1, m = splitComponents.length; j < m; j++) {
        components[i].value.push([Token$m.PROPERTY_VALUE, Marker$c.COMMA]);
        Array.prototype.push.apply(components[i].value, splitComponents[j][i].value);
      }
    }

    return components;
  };
}

function listStyle(property, configuration, validator) {
  var type = _wrapDefault('list-style-type', property, configuration);
  var position = _wrapDefault('list-style-position', property, configuration);
  var image = _wrapDefault('list-style-image', property, configuration);
  var components = [type, position, image];

  if (property.value.length == 1 && property.value[0][1] == 'inherit') {
    type.value = position.value = image.value = [property.value[0]];
    return components;
  }

  var values = property.value.slice(0);
  var total = values.length;
  var index = 0;

  // `image` first...
  for (index = 0, total = values.length; index < total; index++) {
    if (validator.isUrl(values[index][1]) || values[index][1] == '0') {
      image.value = [values[index]];
      values.splice(index, 1);
      break;
    }
  }

  // ... then `position`
  for (index = 0, total = values.length; index < total; index++) {
    if (validator.isListStylePositionKeyword(values[index][1])) {
      position.value = [values[index]];
      values.splice(index, 1);
      break;
    }
  }

  // ... and what's left is a `type`
  if (values.length > 0 && (validator.isListStyleTypeKeyword(values[0][1]) || validator.isIdentifier(values[0][1]))) {
    type.value = [values[0]];
  }

  return components;
}

function transition(property, configuration, validator) {
  var prop = _wrapDefault(property.name + '-property', property, configuration);
  var duration = _wrapDefault(property.name + '-duration', property, configuration);
  var timing = _wrapDefault(property.name + '-timing-function', property, configuration);
  var delay = _wrapDefault(property.name + '-delay', property, configuration);
  var components = [prop, duration, timing, delay];
  var values = property.value;
  var value;
  var durationSet = false;
  var delaySet = false;
  var propSet = false;
  var timingSet = false;
  var i;
  var l;

  if (property.value.length == 1 && property.value[0][1] == 'inherit') {
    prop.value = duration.value = timing.value = delay.value = property.value;
    return components;
  }

  if (values.length > 1 && _anyIsInherit(values)) {
    throw new InvalidPropertyError$1('Invalid animation values at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
  }

  for (i = 0, l = values.length; i < l; i++) {
    value = values[i];

    if (validator.isTime(value[1]) && !durationSet) {
      duration.value = [value];
      durationSet = true;
    } else if (validator.isTime(value[1]) && !delaySet) {
      delay.value = [value];
      delaySet = true;
    } else if ((validator.isGlobal(value[1]) || validator.isTimingFunction(value[1])) && !timingSet) {
      timing.value = [value];
      timingSet = true;
    } else if (validator.isIdentifier(value[1]) && !propSet) {
      prop.value = [value];
      propSet = true;
    } else {
      throw new InvalidPropertyError$1('Invalid animation value at ' + formatPosition$2(value[2][0]) + '. Ignoring.');
    }
  }

  return components;
}

function widthStyleColor(property, configuration, validator) {
  var descriptor = configuration[property.name];
  var components = [
    _wrapDefault(descriptor.components[0], property, configuration),
    _wrapDefault(descriptor.components[1], property, configuration),
    _wrapDefault(descriptor.components[2], property, configuration)
  ];
  var color, style, width;

  for (var i = 0; i < 3; i++) {
    var component = components[i];

    if (component.name.indexOf('color') > 0) { color = component; } else if (component.name.indexOf('style') > 0) { style = component; } else { width = component; }
  }

  if ((property.value.length == 1 && property.value[0][1] == 'inherit')
      || (property.value.length == 3 && property.value[0][1] == 'inherit' && property.value[1][1] == 'inherit' && property.value[2][1] == 'inherit')) {
    color.value = style.value = width.value = [property.value[0]];
    return components;
  }

  var values = property.value.slice(0);
  var match, matches;

  // NOTE: usually users don't follow the required order of parts in this shorthand,
  // so we'll try to parse it caring as little about order as possible

  if (values.length > 0) {
    matches = values.filter(_widthFilter(validator));
    match = matches.length > 1 && (matches[0][1] == 'none' || matches[0][1] == 'auto') ? matches[1] : matches[0];
    if (match) {
      width.value = [match];
      values.splice(values.indexOf(match), 1);
    }
  }

  if (values.length > 0) {
    match = values.filter(_styleFilter(validator))[0];
    if (match) {
      style.value = [match];
      values.splice(values.indexOf(match), 1);
    }
  }

  if (values.length > 0) {
    match = values.filter(_colorFilter(validator))[0];
    if (match) {
      color.value = [match];
      values.splice(values.indexOf(match), 1);
    }
  }

  return components;
}

var breakUp$1 = {
  animation: animation,
  background: background$2,
  border: widthStyleColor,
  borderRadius: borderRadius$2,
  font: font$1,
  fourValues: fourValues$1,
  listStyle: listStyle,
  multiplex: multiplex$1,
  outline: widthStyleColor,
  transition: transition
};

var VENDOR_PREFIX_PATTERN = /(?:^|\W)(-\w+-)/g;

function unique(value) {
  var prefixes = [];
  var match;

  // eslint-disable-next-line no-cond-assign
  while ((match = VENDOR_PREFIX_PATTERN.exec(value)) !== null) {
    if (prefixes.indexOf(match[0]) == -1) {
      prefixes.push(match[0]);
    }
  }

  return prefixes;
}

function same(value1, value2) {
  return unique(value1).sort().join(',') == unique(value2).sort().join(',');
}

var vendorPrefixes = {
  unique: unique,
  same: same
};

var sameVendorPrefixes = vendorPrefixes.same;

function understandable$1(validator, value1, value2, _position, isPaired) {
  if (!sameVendorPrefixes(value1, value2)) {
    return false;
  }

  if (isPaired && validator.isVariable(value1) !== validator.isVariable(value2)) {
    return false;
  }

  return true;
}

var understandable_1 = understandable$1;

var understandable = understandable_1;

function animationIterationCount(validator, value1, value2) {
  if (!understandable(validator, value1, value2, 0, true)
    && !(validator.isAnimationIterationCountKeyword(value2) || validator.isPositiveNumber(value2))) {
    return false;
  } if (validator.isVariable(value1) && validator.isVariable(value2)) {
    return true;
  }

  return validator.isAnimationIterationCountKeyword(value2) || validator.isPositiveNumber(value2);
}

function animationName(validator, value1, value2) {
  if (!understandable(validator, value1, value2, 0, true)
    && !(validator.isAnimationNameKeyword(value2) || validator.isIdentifier(value2))) {
    return false;
  } if (validator.isVariable(value1) && validator.isVariable(value2)) {
    return true;
  }

  return validator.isAnimationNameKeyword(value2) || validator.isIdentifier(value2);
}

function areSameFunction(validator, value1, value2) {
  if (!validator.isFunction(value1) || !validator.isFunction(value2)) {
    return false;
  }

  var function1Name = value1.substring(0, value1.indexOf('('));
  var function2Name = value2.substring(0, value2.indexOf('('));

  var function1Value = value1.substring(function1Name.length + 1, value1.length - 1);
  var function2Value = value2.substring(function2Name.length + 1, value2.length - 1);

  if (validator.isFunction(function1Value) || validator.isFunction(function2Value)) {
    return function1Name === function2Name && areSameFunction(validator, function1Value, function2Value);
  }
  return function1Name === function2Name;
}

function backgroundPosition(validator, value1, value2) {
  if (!understandable(validator, value1, value2, 0, true)
    && !(validator.isBackgroundPositionKeyword(value2) || validator.isGlobal(value2))) {
    return false;
  } if (validator.isVariable(value1) && validator.isVariable(value2)) {
    return true;
  } if (validator.isBackgroundPositionKeyword(value2) || validator.isGlobal(value2)) {
    return true;
  }

  return unit$1(validator, value1, value2);
}

function backgroundSize(validator, value1, value2) {
  if (!understandable(validator, value1, value2, 0, true)
    && !(validator.isBackgroundSizeKeyword(value2) || validator.isGlobal(value2))) {
    return false;
  } if (validator.isVariable(value1) && validator.isVariable(value2)) {
    return true;
  } if (validator.isBackgroundSizeKeyword(value2) || validator.isGlobal(value2)) {
    return true;
  }

  return unit$1(validator, value1, value2);
}

function color$1(validator, value1, value2) {
  if (!understandable(validator, value1, value2, 0, true) && !validator.isColor(value2)) {
    return false;
  } if (validator.isVariable(value1) && validator.isVariable(value2)) {
    return true;
  } if (!validator.colorOpacity && (validator.isRgbColor(value1) || validator.isHslColor(value1))) {
    return false;
  } if (!validator.colorOpacity && (validator.isRgbColor(value2) || validator.isHslColor(value2))) {
    return false;
  } if (!validator.colorHexAlpha && (validator.isHexAlphaColor(value1) || validator.isHexAlphaColor(value2))) {
    return false;
  } if (validator.isColor(value1) && validator.isColor(value2)) {
    return true;
  }

  return sameFunctionOrValue(validator, value1, value2);
}

function components(overrideCheckers) {
  return function(validator, value1, value2, position) {
    return overrideCheckers[position](validator, value1, value2);
  };
}

function fontFamily(validator, value1, value2) {
  return understandable(validator, value1, value2, 0, true);
}

function image(validator, value1, value2) {
  if (!understandable(validator, value1, value2, 0, true) && !validator.isImage(value2)) {
    return false;
  } if (validator.isVariable(value1) && validator.isVariable(value2)) {
    return true;
  } if (validator.isImage(value2)) {
    return true;
  } if (validator.isImage(value1)) {
    return false;
  }

  return sameFunctionOrValue(validator, value1, value2);
}

function keyword(propertyName) {
  return function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true) && !validator.isKeyword(propertyName)(value2)) {
      return false;
    } if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    }

    return validator.isKeyword(propertyName)(value2);
  };
}

function keywordWithGlobal(propertyName) {
  return function(validator, value1, value2) {
    if (!understandable(validator, value1, value2, 0, true)
      && !(validator.isKeyword(propertyName)(value2) || validator.isGlobal(value2))) {
      return false;
    } if (validator.isVariable(value1) && validator.isVariable(value2)) {
      return true;
    }

    return validator.isKeyword(propertyName)(value2) || validator.isGlobal(value2);
  };
}

function propertyName$1(validator, value1, value2) {
  if (!understandable(validator, value1, value2, 0, true) && !validator.isIdentifier(value2)) {
    return false;
  } if (validator.isVariable(value1) && validator.isVariable(value2)) {
    return true;
  }

  return validator.isIdentifier(value2);
}

function sameFunctionOrValue(validator, value1, value2) {
  return areSameFunction(validator, value1, value2)
    ? true
    : value1 === value2;
}

function textShadow(validator, value1, value2) {
  if (!understandable(validator, value1, value2, 0, true)
    && !(validator.isUnit(value2)
    || validator.isColor(value2)
    || validator.isGlobal(value2))) {
    return false;
  } if (validator.isVariable(value1) && validator.isVariable(value2)) {
    return true;
  }

  return validator.isUnit(value2) || validator.isColor(value2) || validator.isGlobal(value2);
}

function time$1(validator, value1, value2) {
  if (!understandable(validator, value1, value2, 0, true) && !validator.isTime(value2)) {
    return false;
  } if (validator.isVariable(value1) && validator.isVariable(value2)) {
    return true;
  } if (validator.isTime(value1) && !validator.isTime(value2)) {
    return false;
  } if (validator.isTime(value2)) {
    return true;
  } if (validator.isTime(value1)) {
    return false;
  } if (validator.isFunction(value1)
    && !validator.isPrefixed(value1)
    && validator.isFunction(value2)
    && !validator.isPrefixed(value2)) {
    return true;
  }

  return sameFunctionOrValue(validator, value1, value2);
}

function timingFunction(validator, value1, value2) {
  if (!understandable(validator, value1, value2, 0, true)
    && !(validator.isTimingFunction(value2) || validator.isGlobal(value2))) {
    return false;
  } if (validator.isVariable(value1) && validator.isVariable(value2)) {
    return true;
  }

  return validator.isTimingFunction(value2) || validator.isGlobal(value2);
}

function unit$1(validator, value1, value2) {
  if (!understandable(validator, value1, value2, 0, true) && !validator.isUnit(value2)) {
    return false;
  } if (validator.isVariable(value1) && validator.isVariable(value2)) {
    return true;
  } if (validator.isUnit(value1) && !validator.isUnit(value2)) {
    return false;
  } if (validator.isUnit(value2)) {
    return true;
  } if (validator.isUnit(value1)) {
    return false;
  } if (validator.isFunction(value1)
    && !validator.isPrefixed(value1)
    && validator.isFunction(value2)
    && !validator.isPrefixed(value2)) {
    return true;
  }

  return sameFunctionOrValue(validator, value1, value2);
}

function unitOrKeywordWithGlobal(propertyName) {
  var byKeyword = keywordWithGlobal(propertyName);

  return function(validator, value1, value2) {
    return unit$1(validator, value1, value2) || byKeyword(validator, value1, value2);
  };
}

function unitOrNumber(validator, value1, value2) {
  if (!understandable(validator, value1, value2, 0, true)
    && !(validator.isUnit(value2)
    || validator.isNumber(value2))) {
    return false;
  } if (validator.isVariable(value1) && validator.isVariable(value2)) {
    return true;
  } if ((validator.isUnit(value1)
    || validator.isNumber(value1))
    && !(validator.isUnit(value2)
    || validator.isNumber(value2))) {
    return false;
  } if (validator.isUnit(value2) || validator.isNumber(value2)) {
    return true;
  } if (validator.isUnit(value1) || validator.isNumber(value1)) {
    return false;
  } if (validator.isFunction(value1)
    && !validator.isPrefixed(value1)
    && validator.isFunction(value2)
    && !validator.isPrefixed(value2)) {
    return true;
  }

  return sameFunctionOrValue(validator, value1, value2);
}

function zIndex(validator, value1, value2) {
  if (!understandable(validator, value1, value2, 0, true) && !validator.isZIndex(value2)) {
    return false;
  } if (validator.isVariable(value1) && validator.isVariable(value2)) {
    return true;
  }

  return validator.isZIndex(value2);
}

var canOverride$1 = {
  generic: {
    color: color$1,
    components: components,
    image: image,
    propertyName: propertyName$1,
    time: time$1,
    timingFunction: timingFunction,
    unit: unit$1,
    unitOrNumber: unitOrNumber
  },
  property: {
    animationDirection: keywordWithGlobal('animation-direction'),
    animationFillMode: keyword('animation-fill-mode'),
    animationIterationCount: animationIterationCount,
    animationName: animationName,
    animationPlayState: keywordWithGlobal('animation-play-state'),
    backgroundAttachment: keyword('background-attachment'),
    backgroundClip: keywordWithGlobal('background-clip'),
    backgroundOrigin: keyword('background-origin'),
    backgroundPosition: backgroundPosition,
    backgroundRepeat: keyword('background-repeat'),
    backgroundSize: backgroundSize,
    bottom: unitOrKeywordWithGlobal('bottom'),
    borderCollapse: keyword('border-collapse'),
    borderStyle: keywordWithGlobal('*-style'),
    clear: keywordWithGlobal('clear'),
    cursor: keywordWithGlobal('cursor'),
    display: keywordWithGlobal('display'),
    float: keywordWithGlobal('float'),
    left: unitOrKeywordWithGlobal('left'),
    fontFamily: fontFamily,
    fontStretch: keywordWithGlobal('font-stretch'),
    fontStyle: keywordWithGlobal('font-style'),
    fontVariant: keywordWithGlobal('font-variant'),
    fontWeight: keywordWithGlobal('font-weight'),
    listStyleType: keywordWithGlobal('list-style-type'),
    listStylePosition: keywordWithGlobal('list-style-position'),
    outlineStyle: keywordWithGlobal('*-style'),
    overflow: keywordWithGlobal('overflow'),
    position: keywordWithGlobal('position'),
    right: unitOrKeywordWithGlobal('right'),
    textAlign: keywordWithGlobal('text-align'),
    textDecoration: keywordWithGlobal('text-decoration'),
    textOverflow: keywordWithGlobal('text-overflow'),
    textShadow: textShadow,
    top: unitOrKeywordWithGlobal('top'),
    transform: sameFunctionOrValue,
    verticalAlign: unitOrKeywordWithGlobal('vertical-align'),
    visibility: keywordWithGlobal('visibility'),
    whiteSpace: keywordWithGlobal('white-space'),
    zIndex: zIndex
  }
};

var wrapSingle$1 = wrapForOptimizing$3.single;

var Token$l = token;

function deep(property) {
  var cloned = shallow(property);
  for (var i = property.components.length - 1; i >= 0; i--) {
    var component = shallow(property.components[i]);
    component.value = property.components[i].value.slice(0);
    cloned.components.unshift(component);
  }

  cloned.dirty = true;
  cloned.value = property.value.slice(0);

  return cloned;
}

function shallow(property) {
  var cloned = wrapSingle$1([
    Token$l.PROPERTY,
    [Token$l.PROPERTY_NAME, property.name]
  ]);
  cloned.important = property.important;
  cloned.hack = property.hack;
  cloned.unused = false;
  return cloned;
}

var clone = {
  deep: deep,
  shallow: shallow
};

var shallowClone$1 = clone.shallow;

var Token$k = token;
var Marker$b = marker;

function isInheritOnly(values) {
  for (var i = 0, l = values.length; i < l; i++) {
    var value = values[i][1];

    if (value != 'inherit' && value != Marker$b.COMMA && value != Marker$b.FORWARD_SLASH) { return false; }
  }

  return true;
}

function background$1(property, configuration, lastInMultiplex) {
  var components = property.components;
  var restored = [];
  var needsOne, needsBoth;

  function restoreValue(component) {
    Array.prototype.unshift.apply(restored, component.value);
  }

  function isDefaultValue(component) {
    var descriptor = configuration[component.name];

    if (descriptor.doubleValues && descriptor.defaultValue.length == 1) {
      return component.value[0][1] == descriptor.defaultValue[0]
        && (component.value[1]
          ? component.value[1][1] == descriptor.defaultValue[0]
          : true);
    } if (descriptor.doubleValues && descriptor.defaultValue.length != 1) {
      return component.value[0][1] == descriptor.defaultValue[0]
      && ((component.value[1] ? component.value[1][1] : component.value[0][1])
        == descriptor.defaultValue[1]);
    }
    return component.value[0][1] == descriptor.defaultValue;
  }

  for (var i = components.length - 1; i >= 0; i--) {
    var component = components[i];
    var isDefault = isDefaultValue(component);

    if (component.name == 'background-clip') {
      var originComponent = components[i - 1];
      var isOriginDefault = isDefaultValue(originComponent);

      needsOne = component.value[0][1] == originComponent.value[0][1];

      needsBoth = !needsOne && (
        (isOriginDefault && !isDefault)
        || (!isOriginDefault && !isDefault)
        || (!isOriginDefault && isDefault && component.value[0][1] != originComponent.value[0][1]));

      if (needsOne) {
        restoreValue(originComponent);
      } else if (needsBoth) {
        restoreValue(component);
        restoreValue(originComponent);
      }

      i--;
    } else if (component.name == 'background-size') {
      var positionComponent = components[i - 1];
      var isPositionDefault = isDefaultValue(positionComponent);

      needsOne = !isPositionDefault && isDefault;

      needsBoth = !needsOne
        && (isPositionDefault && !isDefault || !isPositionDefault && !isDefault);

      if (needsOne) {
        restoreValue(positionComponent);
      } else if (needsBoth) {
        restoreValue(component);
        restored.unshift([Token$k.PROPERTY_VALUE, Marker$b.FORWARD_SLASH]);
        restoreValue(positionComponent);
      } else if (positionComponent.value.length == 1) {
        restoreValue(positionComponent);
      }

      i--;
    } else {
      if (isDefault || configuration[component.name].multiplexLastOnly && !lastInMultiplex) { continue; }

      restoreValue(component);
    }
  }

  if (restored.length === 0 && property.value.length == 1 && property.value[0][1] == '0') { restored.push(property.value[0]); }

  if (restored.length === 0) { restored.push([Token$k.PROPERTY_VALUE, configuration[property.name].defaultValue]); }

  if (isInheritOnly(restored)) { return [restored[0]]; }

  return restored;
}

function borderRadius$1(property) {
  if (property.multiplex) {
    var horizontal = shallowClone$1(property);
    var vertical = shallowClone$1(property);

    for (var i = 0; i < 4; i++) {
      var component = property.components[i];

      var horizontalComponent = shallowClone$1(property);
      horizontalComponent.value = [component.value[0]];
      horizontal.components.push(horizontalComponent);

      var verticalComponent = shallowClone$1(property);
      // FIXME: only shorthand compactor (see breakup#borderRadius) knows that border radius
      // longhands have two values, whereas tokenizer does not care about populating 2nd value
      // if it's missing, hence this fallback
      verticalComponent.value = [component.value[1] || component.value[0]];
      vertical.components.push(verticalComponent);
    }

    var horizontalValues = fourValues(horizontal);
    var verticalValues = fourValues(vertical);

    if (horizontalValues.length == verticalValues.length
        && horizontalValues[0][1] == verticalValues[0][1]
        && (horizontalValues.length > 1 ? horizontalValues[1][1] == verticalValues[1][1] : true)
        && (horizontalValues.length > 2 ? horizontalValues[2][1] == verticalValues[2][1] : true)
        && (horizontalValues.length > 3 ? horizontalValues[3][1] == verticalValues[3][1] : true)) {
      return horizontalValues;
    }
    return horizontalValues.concat([[Token$k.PROPERTY_VALUE, Marker$b.FORWARD_SLASH]]).concat(verticalValues);
  }
  return fourValues(property);
}

function font(property, configuration) {
  var components = property.components;
  var restored = [];
  var component;
  var componentIndex = 0;
  var fontFamilyIndex = 0;

  if (property.value[0][1].indexOf(Marker$b.INTERNAL) === 0) {
    property.value[0][1] = property.value[0][1].substring(Marker$b.INTERNAL.length);
    return property.value;
  }

  // first four components are optional
  while (componentIndex < 4) {
    component = components[componentIndex];

    if (component.value[0][1] != configuration[component.name].defaultValue) {
      Array.prototype.push.apply(restored, component.value);
    }

    componentIndex++;
  }

  // then comes font-size
  Array.prototype.push.apply(restored, components[componentIndex].value);
  componentIndex++;

  // then may come line-height
  if (components[componentIndex].value[0][1] != configuration[components[componentIndex].name].defaultValue) {
    Array.prototype.push.apply(restored, [[Token$k.PROPERTY_VALUE, Marker$b.FORWARD_SLASH]]);
    Array.prototype.push.apply(restored, components[componentIndex].value);
  }

  componentIndex++;

  // then comes font-family
  while (components[componentIndex].value[fontFamilyIndex]) {
    restored.push(components[componentIndex].value[fontFamilyIndex]);

    if (components[componentIndex].value[fontFamilyIndex + 1]) {
      restored.push([Token$k.PROPERTY_VALUE, Marker$b.COMMA]);
    }

    fontFamilyIndex++;
  }

  if (isInheritOnly(restored)) {
    return [restored[0]];
  }

  return restored;
}

function fourValues(property) {
  var components = property.components;
  var value1 = components[0].value[0];
  var value2 = components[1].value[0];
  var value3 = components[2].value[0];
  var value4 = components[3].value[0];

  if (value1[1] == value2[1] && value1[1] == value3[1] && value1[1] == value4[1]) {
    return [value1];
  } if (value1[1] == value3[1] && value2[1] == value4[1]) {
    return [value1, value2];
  } if (value2[1] == value4[1]) {
    return [value1, value2, value3];
  }
  return [value1, value2, value3, value4];
}

function multiplex(restoreWith) {
  return function(property, configuration) {
    if (!property.multiplex) { return restoreWith(property, configuration, true); }

    var multiplexSize = 0;
    var restored = [];
    var componentMultiplexSoFar = {};
    var i, l;

    // At this point we don't know what's the multiplex size, e.g. how many background layers are there
    for (i = 0, l = property.components[0].value.length; i < l; i++) {
      if (property.components[0].value[i][1] == Marker$b.COMMA) { multiplexSize++; }
    }

    for (i = 0; i <= multiplexSize; i++) {
      var _property = shallowClone$1(property);

      // We split multiplex into parts and restore them one by one
      for (var j = 0, m = property.components.length; j < m; j++) {
        var componentToClone = property.components[j];
        var _component = shallowClone$1(componentToClone);
        _property.components.push(_component);

        // The trick is some properties has more than one value, so we iterate over values looking for
        // a multiplex separator - a comma
        for (var k = componentMultiplexSoFar[_component.name] || 0, n = componentToClone.value.length; k < n; k++) {
          if (componentToClone.value[k][1] == Marker$b.COMMA) {
            componentMultiplexSoFar[_component.name] = k + 1;
            break;
          }

          _component.value.push(componentToClone.value[k]);
        }
      }

      // No we can restore shorthand value
      var lastInMultiplex = i == multiplexSize;
      var _restored = restoreWith(_property, configuration, lastInMultiplex);
      Array.prototype.push.apply(restored, _restored);

      if (i < multiplexSize) { restored.push([Token$k.PROPERTY_VALUE, Marker$b.COMMA]); }
    }

    return restored;
  };
}

function withoutDefaults(property, configuration) {
  var components = property.components;
  var restored = [];

  for (var i = components.length - 1; i >= 0; i--) {
    var component = components[i];
    var descriptor = configuration[component.name];

    if (component.value[0][1] != descriptor.defaultValue || ('keepUnlessDefault' in descriptor) && !isDefault(components, configuration, descriptor.keepUnlessDefault)) {
      restored.unshift(component.value[0]);
    }
  }

  if (restored.length === 0) { restored.push([Token$k.PROPERTY_VALUE, configuration[property.name].defaultValue]); }

  if (isInheritOnly(restored)) { return [restored[0]]; }

  return restored;
}

function isDefault(components, configuration, propertyName) {
  var component;
  var i, l;

  for (i = 0, l = components.length; i < l; i++) {
    component = components[i];

    if (component.name == propertyName && component.value[0][1] == configuration[propertyName].defaultValue) {
      return true;
    }
  }

  return false;
}

var restore$1 = {
  background: background$1,
  borderRadius: borderRadius$1,
  font: font,
  fourValues: fourValues,
  multiplex: multiplex,
  withoutDefaults: withoutDefaults
};

var override$5 = override_1;

var INTEGER_PATTERN = /^\d+$/;

var ALL_UNITS = ['*', 'all'];
var DEFAULT_PRECISION = 'off'; // all precision changes are disabled
var DIRECTIVES_SEPARATOR = ','; // e.g. *=5,px=3
var DIRECTIVE_VALUE_SEPARATOR = '='; // e.g. *=5

function roundingPrecisionFrom$1(source) {
  return override$5(defaults$1(DEFAULT_PRECISION), buildPrecisionFrom(source));
}

function defaults$1(value) {
  return {
    ch: value,
    cm: value,
    em: value,
    ex: value,
    in: value,
    mm: value,
    pc: value,
    pt: value,
    px: value,
    q: value,
    rem: value,
    vh: value,
    vmax: value,
    vmin: value,
    vw: value,
    '%': value
  };
}

function buildPrecisionFrom(source) {
  if (source === null || source === undefined) {
    return {};
  }

  if (typeof source == 'boolean') {
    return {};
  }

  if (typeof source == 'number' && source == -1) {
    return defaults$1(DEFAULT_PRECISION);
  }

  if (typeof source == 'number') {
    return defaults$1(source);
  }

  if (typeof source == 'string' && INTEGER_PATTERN.test(source)) {
    return defaults$1(parseInt(source));
  }

  if (typeof source == 'string' && source == DEFAULT_PRECISION) {
    return defaults$1(DEFAULT_PRECISION);
  }

  if (typeof source == 'object') {
    return source;
  }

  return source
    .split(DIRECTIVES_SEPARATOR)
    .reduce(function(accumulator, directive) {
      var directiveParts = directive.split(DIRECTIVE_VALUE_SEPARATOR);
      var name = directiveParts[0];
      var value = parseInt(directiveParts[1]);

      if (Number.isNaN(value) || value == -1) {
        value = DEFAULT_PRECISION;
      }

      if (ALL_UNITS.indexOf(name) > -1) {
        accumulator = override$5(accumulator, defaults$1(value));
      } else {
        accumulator[name] = value;
      }

      return accumulator;
    }, {});
}

var roundingPrecision = {
  DEFAULT: DEFAULT_PRECISION,
  roundingPrecisionFrom: roundingPrecisionFrom$1
};

var roundingPrecisionFrom = roundingPrecision.roundingPrecisionFrom;

var override$4 = override_1;

var OptimizationLevel$j = {
  Zero: '0',
  One: '1',
  Two: '2'
};

var DEFAULTS$1 = {};

DEFAULTS$1[OptimizationLevel$j.Zero] = {};
DEFAULTS$1[OptimizationLevel$j.One] = {
  cleanupCharsets: true,
  normalizeUrls: true,
  optimizeBackground: true,
  optimizeBorderRadius: true,
  optimizeFilter: true,
  optimizeFontWeight: true,
  optimizeOutline: true,
  removeEmpty: true,
  removeNegativePaddings: true,
  removeQuotes: true,
  removeWhitespace: true,
  replaceMultipleZeros: true,
  replaceTimeUnits: true,
  replaceZeroUnits: true,
  roundingPrecision: roundingPrecisionFrom(undefined),
  selectorsSortingMethod: 'standard',
  specialComments: 'all',
  tidyAtRules: true,
  tidyBlockScopes: true,
  tidySelectors: true,
  variableValueOptimizers: []
};
DEFAULTS$1[OptimizationLevel$j.Two] = {
  mergeAdjacentRules: true,
  mergeIntoShorthands: true,
  mergeMedia: true,
  mergeNonAdjacentRules: true,
  mergeSemantically: false,
  overrideProperties: true,
  removeEmpty: true,
  reduceNonAdjacentRules: true,
  removeDuplicateFontRules: true,
  removeDuplicateMediaBlocks: true,
  removeDuplicateRules: true,
  removeUnusedAtRules: false,
  restructureRules: false,
  skipProperties: []
};

var ALL_KEYWORD_1 = '*';
var ALL_KEYWORD_2 = 'all';
var FALSE_KEYWORD_1 = 'false';
var FALSE_KEYWORD_2 = 'off';
var TRUE_KEYWORD_1 = 'true';
var TRUE_KEYWORD_2 = 'on';

var LIST_VALUE_SEPARATOR = ',';
var OPTION_SEPARATOR = ';';
var OPTION_VALUE_SEPARATOR = ':';

function optimizationLevelFrom$1(source) {
  var level = override$4(DEFAULTS$1, {});
  var Zero = OptimizationLevel$j.Zero;
  var One = OptimizationLevel$j.One;
  var Two = OptimizationLevel$j.Two;

  if (undefined === source) {
    delete level[Two];
    return level;
  }

  if (typeof source == 'string') {
    source = parseInt(source);
  }

  if (typeof source == 'number' && source === parseInt(Two)) {
    return level;
  }

  if (typeof source == 'number' && source === parseInt(One)) {
    delete level[Two];
    return level;
  }

  if (typeof source == 'number' && source === parseInt(Zero)) {
    delete level[Two];
    delete level[One];
    return level;
  }

  if (typeof source == 'object') {
    source = covertValuesToHashes(source);
  }

  if (One in source && 'roundingPrecision' in source[One]) {
    source[One].roundingPrecision = roundingPrecisionFrom(source[One].roundingPrecision);
  }

  if (Two in source && 'skipProperties' in source[Two] && typeof (source[Two].skipProperties) == 'string') {
    source[Two].skipProperties = source[Two].skipProperties.split(LIST_VALUE_SEPARATOR);
  }

  if (Zero in source || One in source || Two in source) {
    level[Zero] = override$4(level[Zero], source[Zero]);
  }

  if (One in source && ALL_KEYWORD_1 in source[One]) {
    level[One] = override$4(level[One], defaults(One, normalizeValue$1(source[One][ALL_KEYWORD_1])));
    delete source[One][ALL_KEYWORD_1];
  }

  if (One in source && ALL_KEYWORD_2 in source[One]) {
    level[One] = override$4(level[One], defaults(One, normalizeValue$1(source[One][ALL_KEYWORD_2])));
    delete source[One][ALL_KEYWORD_2];
  }

  if (One in source || Two in source) {
    level[One] = override$4(level[One], source[One]);
  } else {
    delete level[One];
  }

  if (Two in source && ALL_KEYWORD_1 in source[Two]) {
    level[Two] = override$4(level[Two], defaults(Two, normalizeValue$1(source[Two][ALL_KEYWORD_1])));
    delete source[Two][ALL_KEYWORD_1];
  }

  if (Two in source && ALL_KEYWORD_2 in source[Two]) {
    level[Two] = override$4(level[Two], defaults(Two, normalizeValue$1(source[Two][ALL_KEYWORD_2])));
    delete source[Two][ALL_KEYWORD_2];
  }

  if (Two in source) {
    level[Two] = override$4(level[Two], source[Two]);
  } else {
    delete level[Two];
  }

  return level;
}

function defaults(level, value) {
  var options = override$4(DEFAULTS$1[level], {});
  var key;

  for (key in options) {
    if (typeof options[key] == 'boolean') {
      options[key] = value;
    }
  }

  return options;
}

function normalizeValue$1(value) {
  switch (value) {
  case FALSE_KEYWORD_1:
  case FALSE_KEYWORD_2:
    return false;
  case TRUE_KEYWORD_1:
  case TRUE_KEYWORD_2:
    return true;
  default:
    return value;
  }
}

function covertValuesToHashes(source) {
  var clonedSource = override$4(source, {});
  var level;
  var i;

  for (i = 0; i <= 2; i++) {
    level = '' + i;

    if (level in clonedSource && (clonedSource[level] === undefined || clonedSource[level] === false)) {
      delete clonedSource[level];
    }

    if (level in clonedSource && clonedSource[level] === true) {
      clonedSource[level] = {};
    }

    if (level in clonedSource && typeof clonedSource[level] == 'string') {
      clonedSource[level] = covertToHash(clonedSource[level], level);
    }
  }

  return clonedSource;
}

function covertToHash(asString, level) {
  return asString
    .split(OPTION_SEPARATOR)
    .reduce(function(accumulator, directive) {
      var parts = directive.split(OPTION_VALUE_SEPARATOR);
      var name = parts[0];
      var value = parts[1];
      var normalizedValue = normalizeValue$1(value);

      if (ALL_KEYWORD_1 == name || ALL_KEYWORD_2 == name) {
        accumulator = override$4(accumulator, defaults(level, normalizedValue));
      } else {
        accumulator[name] = normalizedValue;
      }

      return accumulator;
    }, {});
}

var optimizationLevel = {
  OptimizationLevel: OptimizationLevel$j,
  optimizationLevelFrom: optimizationLevelFrom$1
};

var OptimizationLevel$i = optimizationLevel.OptimizationLevel;

var plugin$j = {
  level1: {
    property: function background(_rule, property, options) {
      var values = property.value;

      if (!options.level[OptimizationLevel$i.One].optimizeBackground) {
        return;
      }

      if (values.length == 1 && values[0][1] == 'none') {
        values[0][1] = '0 0';
      }

      if (values.length == 1 && values[0][1] == 'transparent') {
        values[0][1] = '0 0';
      }
    }
  }
};

var background = plugin$j;

var plugin$i = {
  level1: {
    property: function boxShadow(_rule, property) {
      var values = property.value;

      // remove multiple zeros
      if (values.length == 4 && values[0][1] === '0' && values[1][1] === '0' && values[2][1] === '0' && values[3][1] === '0') {
        property.value.splice(2);
        property.dirty = true;
      }
    }
  }
};

var boxShadow = plugin$i;

var OptimizationLevel$h = optimizationLevel.OptimizationLevel;

var plugin$h = {
  level1: {
    property: function borderRadius(_rule, property, options) {
      var values = property.value;

      if (!options.level[OptimizationLevel$h.One].optimizeBorderRadius) {
        return;
      }

      if (values.length == 3 && values[1][1] == '/' && values[0][1] == values[2][1]) {
        property.value.splice(1);
        property.dirty = true;
      } else if (values.length == 5 && values[2][1] == '/' && values[0][1] == values[3][1] && values[1][1] == values[4][1]) {
        property.value.splice(2);
        property.dirty = true;
      } else if (values.length == 7 && values[3][1] == '/' && values[0][1] == values[4][1] && values[1][1] == values[5][1] && values[2][1] == values[6][1]) {
        property.value.splice(3);
        property.dirty = true;
      } else if (values.length == 9 && values[4][1] == '/' && values[0][1] == values[5][1] && values[1][1] == values[6][1] && values[2][1] == values[7][1] && values[3][1] == values[8][1]) {
        property.value.splice(4);
        property.dirty = true;
      }
    }
  }
};

var borderRadius = plugin$h;

var OptimizationLevel$g = optimizationLevel.OptimizationLevel;

var ALPHA_OR_CHROMA_FILTER_PATTERN = /progid:DXImageTransform\.Microsoft\.(Alpha|Chroma)(\W)/;
var NO_SPACE_AFTER_COMMA_PATTERN = /,(\S)/g;
var WHITESPACE_AROUND_EQUALS_PATTERN = / ?= ?/g;

var plugin$g = {
  level1: {
    property: function filter(_rule, property, options) {
      if (!options.compatibility.properties.ieFilters) {
        return;
      }

      if (!options.level[OptimizationLevel$g.One].optimizeFilter) {
        return;
      }

      if (property.value.length == 1) {
        property.value[0][1] = property.value[0][1].replace(
          ALPHA_OR_CHROMA_FILTER_PATTERN,
          function(match, filter, suffix) {
            return filter.toLowerCase() + suffix;
          }
        );
      }

      property.value[0][1] = property.value[0][1]
        .replace(NO_SPACE_AFTER_COMMA_PATTERN, ', $1')
        .replace(WHITESPACE_AROUND_EQUALS_PATTERN, '=');
    }
  }
};

var filter = plugin$g;

var OptimizationLevel$f = optimizationLevel.OptimizationLevel;

var plugin$f = {
  level1: {
    property: function fontWeight(_rule, property, options) {
      var value = property.value[0][1];

      if (!options.level[OptimizationLevel$f.One].optimizeFontWeight) {
        return;
      }

      if (value == 'normal') {
        value = '400';
      } else if (value == 'bold') {
        value = '700';
      }

      property.value[0][1] = value;
    }
  }
};

var fontWeight = plugin$f;

var OptimizationLevel$e = optimizationLevel.OptimizationLevel;

var plugin$e = {
  level1: {
    property: function margin(_rule, property, options) {
      var values = property.value;

      if (!options.level[OptimizationLevel$e.One].replaceMultipleZeros) {
        return;
      }

      // remove multiple zeros
      if (values.length == 4 && values[0][1] === '0' && values[1][1] === '0' && values[2][1] === '0' && values[3][1] === '0') {
        property.value.splice(1);
        property.dirty = true;
      }
    }
  }
};

var margin = plugin$e;

var OptimizationLevel$d = optimizationLevel.OptimizationLevel;

var plugin$d = {
  level1: {
    property: function outline(_rule, property, options) {
      var values = property.value;

      if (!options.level[OptimizationLevel$d.One].optimizeOutline) {
        return;
      }

      if (values.length == 1 && values[0][1] == 'none') {
        values[0][1] = '0';
      }
    }
  }
};

var outline = plugin$d;

var OptimizationLevel$c = optimizationLevel.OptimizationLevel;

function isNegative(value) {
  return value && value[1][0] == '-' && parseFloat(value[1]) < 0;
}

var plugin$c = {
  level1: {
    property: function padding(_rule, property, options) {
      var values = property.value;

      // remove multiple zeros
      if (values.length == 4 && values[0][1] === '0' && values[1][1] === '0' && values[2][1] === '0' && values[3][1] === '0') {
        property.value.splice(1);
        property.dirty = true;
      }

      // remove negative paddings
      if (options.level[OptimizationLevel$c.One].removeNegativePaddings
        && (
          isNegative(property.value[0])
          || isNegative(property.value[1])
          || isNegative(property.value[2])
          || isNegative(property.value[3])
        )) {
        property.unused = true;
      }
    }
  }
};

var padding = plugin$c;

var propertyOptimizers$1 = {
  background: background.level1.property,
  boxShadow: boxShadow.level1.property,
  borderRadius: borderRadius.level1.property,
  filter: filter.level1.property,
  fontWeight: fontWeight.level1.property,
  margin: margin.level1.property,
  outline: outline.level1.property,
  padding: padding.level1.property
};

var COLORS = {
  aliceblue: '#f0f8ff',
  antiquewhite: '#faebd7',
  aqua: '#0ff',
  aquamarine: '#7fffd4',
  azure: '#f0ffff',
  beige: '#f5f5dc',
  bisque: '#ffe4c4',
  black: '#000',
  blanchedalmond: '#ffebcd',
  blue: '#00f',
  blueviolet: '#8a2be2',
  brown: '#a52a2a',
  burlywood: '#deb887',
  cadetblue: '#5f9ea0',
  chartreuse: '#7fff00',
  chocolate: '#d2691e',
  coral: '#ff7f50',
  cornflowerblue: '#6495ed',
  cornsilk: '#fff8dc',
  crimson: '#dc143c',
  cyan: '#0ff',
  darkblue: '#00008b',
  darkcyan: '#008b8b',
  darkgoldenrod: '#b8860b',
  darkgray: '#a9a9a9',
  darkgreen: '#006400',
  darkgrey: '#a9a9a9',
  darkkhaki: '#bdb76b',
  darkmagenta: '#8b008b',
  darkolivegreen: '#556b2f',
  darkorange: '#ff8c00',
  darkorchid: '#9932cc',
  darkred: '#8b0000',
  darksalmon: '#e9967a',
  darkseagreen: '#8fbc8f',
  darkslateblue: '#483d8b',
  darkslategray: '#2f4f4f',
  darkslategrey: '#2f4f4f',
  darkturquoise: '#00ced1',
  darkviolet: '#9400d3',
  deeppink: '#ff1493',
  deepskyblue: '#00bfff',
  dimgray: '#696969',
  dimgrey: '#696969',
  dodgerblue: '#1e90ff',
  firebrick: '#b22222',
  floralwhite: '#fffaf0',
  forestgreen: '#228b22',
  fuchsia: '#f0f',
  gainsboro: '#dcdcdc',
  ghostwhite: '#f8f8ff',
  gold: '#ffd700',
  goldenrod: '#daa520',
  gray: '#808080',
  green: '#008000',
  greenyellow: '#adff2f',
  grey: '#808080',
  honeydew: '#f0fff0',
  hotpink: '#ff69b4',
  indianred: '#cd5c5c',
  indigo: '#4b0082',
  ivory: '#fffff0',
  khaki: '#f0e68c',
  lavender: '#e6e6fa',
  lavenderblush: '#fff0f5',
  lawngreen: '#7cfc00',
  lemonchiffon: '#fffacd',
  lightblue: '#add8e6',
  lightcoral: '#f08080',
  lightcyan: '#e0ffff',
  lightgoldenrodyellow: '#fafad2',
  lightgray: '#d3d3d3',
  lightgreen: '#90ee90',
  lightgrey: '#d3d3d3',
  lightpink: '#ffb6c1',
  lightsalmon: '#ffa07a',
  lightseagreen: '#20b2aa',
  lightskyblue: '#87cefa',
  lightslategray: '#778899',
  lightslategrey: '#778899',
  lightsteelblue: '#b0c4de',
  lightyellow: '#ffffe0',
  lime: '#0f0',
  limegreen: '#32cd32',
  linen: '#faf0e6',
  magenta: '#ff00ff',
  maroon: '#800000',
  mediumaquamarine: '#66cdaa',
  mediumblue: '#0000cd',
  mediumorchid: '#ba55d3',
  mediumpurple: '#9370db',
  mediumseagreen: '#3cb371',
  mediumslateblue: '#7b68ee',
  mediumspringgreen: '#00fa9a',
  mediumturquoise: '#48d1cc',
  mediumvioletred: '#c71585',
  midnightblue: '#191970',
  mintcream: '#f5fffa',
  mistyrose: '#ffe4e1',
  moccasin: '#ffe4b5',
  navajowhite: '#ffdead',
  navy: '#000080',
  oldlace: '#fdf5e6',
  olive: '#808000',
  olivedrab: '#6b8e23',
  orange: '#ffa500',
  orangered: '#ff4500',
  orchid: '#da70d6',
  palegoldenrod: '#eee8aa',
  palegreen: '#98fb98',
  paleturquoise: '#afeeee',
  palevioletred: '#db7093',
  papayawhip: '#ffefd5',
  peachpuff: '#ffdab9',
  peru: '#cd853f',
  pink: '#ffc0cb',
  plum: '#dda0dd',
  powderblue: '#b0e0e6',
  purple: '#800080',
  rebeccapurple: '#663399',
  red: '#f00',
  rosybrown: '#bc8f8f',
  royalblue: '#4169e1',
  saddlebrown: '#8b4513',
  salmon: '#fa8072',
  sandybrown: '#f4a460',
  seagreen: '#2e8b57',
  seashell: '#fff5ee',
  sienna: '#a0522d',
  silver: '#c0c0c0',
  skyblue: '#87ceeb',
  slateblue: '#6a5acd',
  slategray: '#708090',
  slategrey: '#708090',
  snow: '#fffafa',
  springgreen: '#00ff7f',
  steelblue: '#4682b4',
  tan: '#d2b48c',
  teal: '#008080',
  thistle: '#d8bfd8',
  tomato: '#ff6347',
  turquoise: '#40e0d0',
  violet: '#ee82ee',
  wheat: '#f5deb3',
  white: '#fff',
  whitesmoke: '#f5f5f5',
  yellow: '#ff0',
  yellowgreen: '#9acd32'
};

var toHex = {};
var toName = {};

for (var name$1 in COLORS) {
  var hex = COLORS[name$1];

  if (name$1.length < hex.length) {
    toName[hex] = name$1;
  } else {
    toHex[name$1] = hex;
  }
}

var toHexPattern = new RegExp('(^| |,|\\))(' + Object.keys(toHex).join('|') + ')( |,|\\)|$)', 'ig');
var toNamePattern = new RegExp('(' + Object.keys(toName).join('|') + ')([^a-f0-9]|$)', 'ig');

function hexConverter(match, prefix, colorValue, suffix) {
  return prefix + toHex[colorValue.toLowerCase()] + suffix;
}

function nameConverter(match, colorValue, suffix) {
  return toName[colorValue.toLowerCase()] + suffix;
}

function shortenHex$1(value) {
  var hasHex = value.indexOf('#') > -1;
  var shortened = value.replace(toHexPattern, hexConverter);

  if (shortened != value) {
    shortened = shortened.replace(toHexPattern, hexConverter);
  }

  return hasHex
    ? shortened.replace(toNamePattern, nameConverter)
    : shortened;
}

var shortenHex_1 = shortenHex$1;

// HSL to RGB converter. Both methods adapted from:
// http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript

function hslToRgb(h, s, l) {
  var r, g, b;

  // normalize hue orientation b/w 0 and 360 degrees
  h %= 360;
  if (h < 0) { h += 360; }
  h = ~~h / 360;

  if (s < 0) { s = 0; } else if (s > 100) { s = 100; }
  s = ~~s / 100;

  if (l < 0) { l = 0; } else if (l > 100) { l = 100; }
  l = ~~l / 100;

  if (s === 0) {
    r = g = b = l; // achromatic
  } else {
    var q = l < 0.5
      ? l * (1 + s)
      : l + s - l * s;
    var p = 2 * l - q;
    r = hueToRgb(p, q, h + 1 / 3);
    g = hueToRgb(p, q, h);
    b = hueToRgb(p, q, h - 1 / 3);
  }

  return [~~(r * 255), ~~(g * 255), ~~(b * 255)];
}

function hueToRgb(p, q, t) {
  if (t < 0) { t += 1; }
  if (t > 1) { t -= 1; }
  if (t < 1 / 6) { return p + (q - p) * 6 * t; }
  if (t < 1 / 2) { return q; }
  if (t < 2 / 3) { return p + (q - p) * (2 / 3 - t) * 6; }
  return p;
}

function shortenHsl$1(hue, saturation, lightness) {
  var asRgb = hslToRgb(hue, saturation, lightness);
  var redAsHex = asRgb[0].toString(16);
  var greenAsHex = asRgb[1].toString(16);
  var blueAsHex = asRgb[2].toString(16);

  return '#'
    + ((redAsHex.length == 1 ? '0' : '') + redAsHex)
    + ((greenAsHex.length == 1 ? '0' : '') + greenAsHex)
    + ((blueAsHex.length == 1 ? '0' : '') + blueAsHex);
}

var shortenHsl_1 = shortenHsl$1;

function shortenRgb$1(red, green, blue) {
  var normalizedRed = Math.max(0, Math.min(parseInt(red), 255));
  var normalizedGreen = Math.max(0, Math.min(parseInt(green), 255));
  var normalizedBlue = Math.max(0, Math.min(parseInt(blue), 255));

  // Credit: Asen  http://jsbin.com/UPUmaGOc/2/edit?js,console
  return '#' + ('00000' + (normalizedRed << 16 | normalizedGreen << 8 | normalizedBlue).toString(16)).slice(-6);
}

var shortenRgb_1 = shortenRgb$1;

var Marker$a = marker;

function is$1(value, separator, isSeparatorRegex) {
  return isSeparatorRegex
    ? separator.test(value)
    : value === separator;
}

function split$5(value, separator) {
  var openLevel = Marker$a.OPEN_ROUND_BRACKET;
  var closeLevel = Marker$a.CLOSE_ROUND_BRACKET;
  var level = 0;
  var cursor = 0;
  var lastStart = 0;
  var lastValue;
  var lastCharacter;
  var len = value.length;
  var parts = [];
  var isSeparatorRegex = typeof (separator) == 'object' && 'exec' in separator;

  if (!isSeparatorRegex && value.indexOf(separator) == -1) {
    return [value];
  }

  if (value.indexOf(openLevel) == -1) {
    return value.split(separator);
  }

  while (cursor < len) {
    if (value[cursor] == openLevel) {
      level++;
    } else if (value[cursor] == closeLevel) {
      level--;
    }

    if (level === 0 && cursor > 0 && cursor + 1 < len && is$1(value[cursor], separator, isSeparatorRegex)) {
      parts.push(value.substring(lastStart, cursor));

      if (isSeparatorRegex && separator.exec(value[cursor]).length > 1) {
        parts.push(value[cursor]);
      }

      lastStart = cursor + 1;
    }

    cursor++;
  }

  if (lastStart < cursor + 1) {
    lastValue = value.substring(lastStart);
    lastCharacter = lastValue[lastValue.length - 1];
    if (is$1(lastCharacter, separator, isSeparatorRegex)) {
      lastValue = lastValue.substring(0, lastValue.length - 1);
    }

    parts.push(lastValue);
  }

  return parts;
}

var split_1 = split$5;

var shortenHex = shortenHex_1;
var shortenHsl = shortenHsl_1;
var shortenRgb = shortenRgb_1;

var split$4 = split_1;

var ANY_COLOR_FUNCTION_PATTERN = /(rgb|rgba|hsl|hsla)\(([^()]+)\)/gi;
var COLOR_PREFIX_PATTERN = /#|rgb|hsl/gi;
var HEX_LONG_PATTERN = /(^|[^='"])#([0-9a-f]{6})/gi;
var HEX_SHORT_PATTERN = /(^|[^='"])#([0-9a-f]{3})/gi;
var HEX_VALUE_PATTERN = /[0-9a-f]/i;
var HSL_PATTERN = /hsl\((-?\d+),(-?\d+)%?,(-?\d+)%?\)/gi;
var RGBA_HSLA_PATTERN = /(rgb|hsl)a?\((-?\d+),(-?\d+%?),(-?\d+%?),(0*[1-9]+[0-9]*(\.?\d*)?)\)/gi;
var RGB_PATTERN = /rgb\((-?\d+),(-?\d+),(-?\d+)\)/gi;
var TRANSPARENT_FUNCTION_PATTERN = /(?:rgba|hsla)\(0,0%?,0%?,0\)/g;

var plugin$b = {
  level1: {
    value: function color(name, value, options) {
      if (!options.compatibility.properties.colors) {
        return value;
      }

      if (!value.match(COLOR_PREFIX_PATTERN)) {
        return shortenHex(value);
      }

      value = value
        .replace(RGBA_HSLA_PATTERN, function(match, colorFn, p1, p2, p3, alpha) {
          return (parseInt(alpha) >= 1 ? colorFn + '(' + [p1, p2, p3].join(',') + ')' : match);
        })
        .replace(RGB_PATTERN, function(match, red, green, blue) {
          return shortenRgb(red, green, blue);
        })
        .replace(HSL_PATTERN, function(match, hue, saturation, lightness) {
          return shortenHsl(hue, saturation, lightness);
        })
        .replace(HEX_LONG_PATTERN, function(match, prefix, color, at, inputValue) {
          var suffix = inputValue[at + match.length];

          if (suffix && HEX_VALUE_PATTERN.test(suffix)) {
            return match;
          } if (color[0] == color[1] && color[2] == color[3] && color[4] == color[5]) {
            return (prefix + '#' + color[0] + color[2] + color[4]).toLowerCase();
          }
          return (prefix + '#' + color).toLowerCase();
        })
        .replace(HEX_SHORT_PATTERN, function(match, prefix, color) {
          return prefix + '#' + color.toLowerCase();
        })
        .replace(ANY_COLOR_FUNCTION_PATTERN, function(match, colorFunction, colorDef) {
          var tokens = colorDef.split(',');
          var colorFnLowercase = colorFunction && colorFunction.toLowerCase();
          var applies = (colorFnLowercase == 'hsl' && tokens.length == 3)
            || (colorFnLowercase == 'hsla' && tokens.length == 4)
            || (colorFnLowercase == 'rgb' && tokens.length === 3 && colorDef.indexOf('%') > 0)
            || (colorFnLowercase == 'rgba' && tokens.length == 4 && tokens[0].indexOf('%') > 0);

          if (!applies) {
            return match;
          }

          if (tokens[1].indexOf('%') == -1) {
            tokens[1] += '%';
          }

          if (tokens[2].indexOf('%') == -1) {
            tokens[2] += '%';
          }

          return colorFunction + '(' + tokens.join(',') + ')';
        });

      if (options.compatibility.colors.opacity && name.indexOf('background') == -1) {
        value = value.replace(TRANSPARENT_FUNCTION_PATTERN, function(match) {
          if (split$4(value, ',').pop().indexOf('gradient(') > -1) {
            return match;
          }

          return 'transparent';
        });
      }

      return shortenHex(value);
    }
  }
};

var color = plugin$b;

var ZERO_DEG_PATTERN = /\(0deg\)/g;

var plugin$a = {
  level1: {
    value: function degrees(_name, value, options) {
      if (!options.compatibility.properties.zeroUnits) {
        return value;
      }

      if (value.indexOf('0deg') == -1) {
        return value;
      }

      return value.replace(ZERO_DEG_PATTERN, '(0)');
    }
  }
};

var degrees = plugin$a;

var URL_PREFIX_PATTERN$4 = /^url\(/i;

function startsAsUrl$4(value) {
  return URL_PREFIX_PATTERN$4.test(value);
}

var startsAsUrl_1 = startsAsUrl$4;

var split$3 = split_1;
var startsAsUrl$3 = startsAsUrl_1;

var OptimizationLevel$b = optimizationLevel.OptimizationLevel;

var EXPRESSION_PATTERN = /^expression\(.*\)$/;
var ANY_FUNCTION_PATTERN$1 = /^(-(?:moz|ms|o|webkit)-[a-z-]+|[a-z-]+)\((.+)\)$/;
var TOKEN_SEPARATOR_PATTERN$1 = /([\s,/])/;

var DOT_ZERO_PATTERN = /(^|\D)\.0+(\D|$)/g;
var FRACTION_PATTERN = /\.([1-9]*)0+(\D|$)/g;
var LEADING_ZERO_FRACTION_PATTERN = /(^|\D)0\.(\d)/g;
var MINUS_ZERO_FRACTION_PATTERN = /([^\w\d-]|^)-0([^.]|$)/g;
var ZERO_PREFIXED_UNIT_PATTERN = /(^|\s)0+([1-9])/g;

function optimizeRecursively(value) {
  var functionTokens;
  var tokens;

  if (startsAsUrl$3(value)) {
    return value;
  }

  if (EXPRESSION_PATTERN.test(value)) {
    return value;
  }

  functionTokens = ANY_FUNCTION_PATTERN$1.exec(value);

  if (!functionTokens) {
    return optimizeFractions(value);
  }

  tokens = split$3(functionTokens[2], TOKEN_SEPARATOR_PATTERN$1)
    .map(function(token) { return optimizeRecursively(token); });

  return functionTokens[1] + '(' + tokens.join('') + ')';
}

function optimizeFractions(value) {
  if (value.indexOf('0') == -1) {
    return value;
  }

  if (value.indexOf('-') > -1) {
    value = value
      .replace(MINUS_ZERO_FRACTION_PATTERN, '$10$2')
      .replace(MINUS_ZERO_FRACTION_PATTERN, '$10$2');
  }

  return value
    .replace(ZERO_PREFIXED_UNIT_PATTERN, '$1$2')
    .replace(DOT_ZERO_PATTERN, '$10$2')
    .replace(FRACTION_PATTERN, function(match, nonZeroPart, suffix) {
      return (nonZeroPart.length > 0 ? '.' : '') + nonZeroPart + suffix;
    })
    .replace(LEADING_ZERO_FRACTION_PATTERN, '$1.$2');
}

var plugin$9 = {
  level1: {
    value: function fraction(name, value, options) {
      if (!options.level[OptimizationLevel$b.One].replaceZeroUnits) {
        return value;
      }

      return optimizeRecursively(value);
    }
  }
};

var fraction = plugin$9;

var plugin$8 = {
  level1: {
    value: function precision(_name, value, options) {
      if (!options.precision.enabled || value.indexOf('.') === -1) {
        return value;
      }

      return value
        .replace(options.precision.decimalPointMatcher, '$1$2$3')
        .replace(options.precision.zeroMatcher, function(match, integerPart, fractionPart, unit) {
          var multiplier = options.precision.units[unit].multiplier;
          var parsedInteger = parseInt(integerPart);
          var integer = Number.isNaN(parsedInteger) ? 0 : parsedInteger;
          var fraction = parseFloat(fractionPart);

          return Math.round((integer + fraction) * multiplier) / multiplier + unit;
        });
    }
  }
};

var precision = plugin$8;

var OptimizationLevel$a = optimizationLevel.OptimizationLevel;

var LOCAL_PREFIX_PATTERN = /^local\(/i;
var QUOTED_PATTERN = /^('.*'|".*")$/;
var QUOTED_BUT_SAFE_PATTERN = /^['"][a-zA-Z][a-zA-Z\d\-_]+['"]$/;
// eslint-disable-next-line max-len
var GENERIC_FONT_FAMILY_PATTERN = /^['"](?:cursive|default|emoji|fangsong|fantasy|inherit|initial|math|monospace|revert|revert-layer|sans-serif|serif|system-ui|ui-monospace|ui-rounded|ui-sans-serif|ui-serif|unset)['"]$/;

var plugin$7 = {
  level1: {
    value: function textQuotes(name, value, options) {
      if ((name == 'font-family' || name == 'font') && GENERIC_FONT_FAMILY_PATTERN.test(value)) {
        return value;
      }

      if (!options.level[OptimizationLevel$a.One].removeQuotes) {
        return value;
      }

      if (!QUOTED_PATTERN.test(value) && !LOCAL_PREFIX_PATTERN.test(value)) {
        return value;
      }

      return QUOTED_BUT_SAFE_PATTERN.test(value)
        ? value.substring(1, value.length - 1)
        : value;
    }
  }
};

var textQuotes = plugin$7;

var OptimizationLevel$9 = optimizationLevel.OptimizationLevel;

var TIME_VALUE = /^(-?[\d.]+)(m?s)$/;

var plugin$6 = {
  level1: {
    value: function time(name, value, options) {
      if (!options.level[OptimizationLevel$9.One].replaceTimeUnits) {
        return value;
      }

      if (!TIME_VALUE.test(value)) {
        return value;
      }

      return value.replace(TIME_VALUE, function(match, val, unit) {
        var newValue;

        if (unit == 'ms') {
          newValue = parseInt(val) / 1000 + 's';
        } else if (unit == 's') {
          newValue = parseFloat(val) * 1000 + 'ms';
        }

        return newValue.length < match.length ? newValue : match;
      });
    }
  }
};

var time = plugin$6;

var WHOLE_PIXEL_VALUE = /(?:^|\s|\()(-?\d+)px/;

var plugin$5 = {
  level1: {
    value: function unit(_name, value, options) {
      if (!WHOLE_PIXEL_VALUE.test(value)) {
        return value;
      }

      return value.replace(WHOLE_PIXEL_VALUE, function(match, val) {
        var newValue;
        var intVal = parseInt(val);

        if (intVal === 0) {
          return match;
        }

        if (options.compatibility.properties.shorterLengthUnits
          && options.compatibility.units.pt
          && intVal * 3 % 4 === 0) {
          newValue = intVal * 3 / 4 + 'pt';
        }

        if (options.compatibility.properties.shorterLengthUnits
          && options.compatibility.units.pc
          && intVal % 16 === 0) {
          newValue = intVal / 16 + 'pc';
        }

        if (options.compatibility.properties.shorterLengthUnits
          && options.compatibility.units.in
          && intVal % 96 === 0) {
          newValue = intVal / 96 + 'in';
        }

        if (newValue) {
          newValue = match.substring(0, match.indexOf(val)) + newValue;
        }

        return newValue && newValue.length < match.length ? newValue : match;
      });
    }
  }
};

var unit = plugin$5;

var startsAsUrl$2 = startsAsUrl_1;

var OptimizationLevel$8 = optimizationLevel.OptimizationLevel;

var URL_PREFIX_PATTERN$3 = /^url\(/i;

var plugin$4 = {
  level1: {
    value: function urlPrefix(_name, value, options) {
      if (!options.level[OptimizationLevel$8.One].normalizeUrls) {
        return value;
      }

      if (!startsAsUrl$2(value)) {
        return value;
      }

      return value.replace(URL_PREFIX_PATTERN$3, 'url(');
    }
  }
};

var urlPrefix = plugin$4;

var QUOTED_URL_PATTERN = /^url\(['"].+['"]\)$/;
var QUOTED_URL_WITH_WHITESPACE_PATTERN = /^url\(['"].*[*\s()'"].*['"]\)$/;
var QUOTES_PATTERN = /["']/g;
var URL_DATA_PATTERN = /^url\(['"]data:[^;]+;charset/;

var plugin$3 = {
  level1: {
    value: function urlQuotes(_name, value, options) {
      if (options.compatibility.properties.urlQuotes) {
        return value;
      }

      return QUOTED_URL_PATTERN.test(value)
        && !QUOTED_URL_WITH_WHITESPACE_PATTERN.test(value)
        && !URL_DATA_PATTERN.test(value)
        ? value.replace(QUOTES_PATTERN, '')
        : value;
    }
  }
};

var urlQuotes = plugin$3;

var startsAsUrl$1 = startsAsUrl_1;

var WHITESPACE_PATTERN$1 = /\\?\n|\\?\r\n/g;
var WHITESPACE_PREFIX_PATTERN = /(\()\s+/g;
var WHITESPACE_SUFFIX_PATTERN = /\s+(\))/g;

var plugin$2 = {
  level1: {
    value: function urlWhitespace(_name, value) {
      if (!startsAsUrl$1(value)) {
        return value;
      }

      return value
        .replace(WHITESPACE_PATTERN$1, '')
        .replace(WHITESPACE_PREFIX_PATTERN, '$1')
        .replace(WHITESPACE_SUFFIX_PATTERN, '$1');
    }
  }
};

var urlWhitespace = plugin$2;

var OptimizationLevel$7 = optimizationLevel.OptimizationLevel;

var Marker$9 = marker;

var CALC_DIVISION_WHITESPACE_PATTERN = /\) ?\/ ?/g;
var COMMA_AND_SPACE_PATTERN = /, /g;
var LINE_BREAK_PATTERN = /\r?\n/g;
var MULTI_WHITESPACE_PATTERN = /\s+/g;
var FUNCTION_CLOSING_BRACE_WHITESPACE_PATTERN = /\s+(;?\))/g;
var FUNCTION_OPENING_BRACE_WHITESPACE_PATTERN = /(\(;?)\s+/g;
var VARIABLE_NAME_PATTERN = /^--\S+$/;
var VARIABLE_VALUE_PATTERN = /^var\(\s*--\S+\s*\)$/;

var plugin$1 = {
  level1: {
    value: function whitespace(name, value, options) {
      if (!options.level[OptimizationLevel$7.One].removeWhitespace) {
        return value;
      }

      if (VARIABLE_NAME_PATTERN.test(name) && !VARIABLE_VALUE_PATTERN.test(value)) {
        return value;
      }

      if ((value.indexOf(' ') == -1 && value.indexOf('\n') == -1) || value.indexOf('expression') === 0) {
        return value;
      }

      if (value.indexOf(Marker$9.SINGLE_QUOTE) > -1 || value.indexOf(Marker$9.DOUBLE_QUOTE) > -1) {
        return value;
      }

      value = value.replace(LINE_BREAK_PATTERN, '');
      value = value.replace(MULTI_WHITESPACE_PATTERN, ' ');

      if (value.indexOf('calc') > -1) {
        value = value.replace(CALC_DIVISION_WHITESPACE_PATTERN, ')/ ');
      }

      return value
        .replace(FUNCTION_OPENING_BRACE_WHITESPACE_PATTERN, '$1')
        .replace(FUNCTION_CLOSING_BRACE_WHITESPACE_PATTERN, '$1')
        .replace(COMMA_AND_SPACE_PATTERN, ',');
    }
  }
};

var whitespace$2 = plugin$1;

var split$2 = split_1;

var ANY_FUNCTION_PATTERN = /^(-(?:moz|ms|o|webkit)-[a-z-]+|[a-z-]+)\((.+)\)$/;
var SKIP_FUNCTION_PATTERN = /^(?:-moz-calc|-webkit-calc|calc|rgb|hsl|rgba|hsla|min|max|clamp|expression)\(/;
var TOKEN_SEPARATOR_PATTERN = /([\s,/])/;

function removeRecursively(value, options) {
  var functionTokens;
  var tokens;

  if (SKIP_FUNCTION_PATTERN.test(value)) {
    return value;
  }

  functionTokens = ANY_FUNCTION_PATTERN.exec(value);

  if (!functionTokens) {
    return removeZeros(value, options);
  }

  tokens = split$2(functionTokens[2], TOKEN_SEPARATOR_PATTERN)
    .map(function(token) { return removeRecursively(token, options); });

  return functionTokens[1] + '(' + tokens.join('') + ')';
}

function removeZeros(value, options) {
  return value
    .replace(options.unitsRegexp, '$10$2')
    .replace(options.unitsRegexp, '$10$2');
}

var plugin = {
  level1: {
    value: function zero(name, value, options) {
      if (!options.compatibility.properties.zeroUnits) {
        return value;
      }

      if (value.indexOf('%') > 0 && (name == 'height' || name == 'max-height' || name == 'width' || name == 'max-width')) {
        return value;
      }

      return removeRecursively(value, options);
    }
  }
};

var zero = plugin;

var valueOptimizers$1 = {
  color: color.level1.value,
  degrees: degrees.level1.value,
  fraction: fraction.level1.value,
  precision: precision.level1.value,
  textQuotes: textQuotes.level1.value,
  time: time.level1.value,
  unit: unit.level1.value,
  urlPrefix: urlPrefix.level1.value,
  urlQuotes: urlQuotes.level1.value,
  urlWhiteSpace: urlWhitespace.level1.value,
  whiteSpace: whitespace$2.level1.value,
  zero: zero.level1.value
};

// Contains the interpretation of CSS properties, as used by the property optimizer

var breakUp = breakUp$1;
var canOverride = canOverride$1;
var restore = restore$1;

var propertyOptimizers = propertyOptimizers$1;
var valueOptimizers = valueOptimizers$1;

var override$3 = override_1;

// Properties to process
// Extend this object in order to add support for more properties in the optimizer.
//
// Each key in this object represents a CSS property and should be an object.
// Such an object contains properties that describe how the represented CSS property should be handled.
// Possible options:
//
// * components: array (Only specify for shorthand properties.)
//   Contains the names of the granular properties this shorthand compacts.
//
// * canOverride: function
//   Returns whether two tokens of this property can be merged with each other.
//   This property has no meaning for shorthands.
//
// * defaultValue: string
//   Specifies the default value of the property according to the CSS standard.
//   For shorthand, this is used when every component is set to its default value, therefore it should be the shortest possible default value of all the components.
//
// * shortestValue: string
//   Specifies the shortest possible value the property can possibly have.
//   (Falls back to defaultValue if unspecified.)
//
// * breakUp: function (Only specify for shorthand properties.)
//   Breaks the shorthand up to its components.
//
// * restore: function (Only specify for shorthand properties.)
//   Puts the shorthand together from its components.
//
var configuration$8 = {
  animation: {
    canOverride: canOverride.generic.components([
      canOverride.generic.time,
      canOverride.generic.timingFunction,
      canOverride.generic.time,
      canOverride.property.animationIterationCount,
      canOverride.property.animationDirection,
      canOverride.property.animationFillMode,
      canOverride.property.animationPlayState,
      canOverride.property.animationName
    ]),
    components: [
      'animation-duration',
      'animation-timing-function',
      'animation-delay',
      'animation-iteration-count',
      'animation-direction',
      'animation-fill-mode',
      'animation-play-state',
      'animation-name'
    ],
    breakUp: breakUp.multiplex(breakUp.animation),
    defaultValue: 'none',
    restore: restore.multiplex(restore.withoutDefaults),
    shorthand: true,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.textQuotes,
      valueOptimizers.time,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ],
    vendorPrefixes: [
      '-moz-',
      '-o-',
      '-webkit-'
    ]
  },
  'animation-delay': {
    canOverride: canOverride.generic.time,
    componentOf: [
      'animation'
    ],
    defaultValue: '0s',
    intoMultiplexMode: 'real',
    valueOptimizers: [
      valueOptimizers.time,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ],
    vendorPrefixes: [
      '-moz-',
      '-o-',
      '-webkit-'
    ]
  },
  'animation-direction': {
    canOverride: canOverride.property.animationDirection,
    componentOf: [
      'animation'
    ],
    defaultValue: 'normal',
    intoMultiplexMode: 'real',
    vendorPrefixes: [
      '-moz-',
      '-o-',
      '-webkit-'
    ]
  },
  'animation-duration': {
    canOverride: canOverride.generic.time,
    componentOf: [
      'animation'
    ],
    defaultValue: '0s',
    intoMultiplexMode: 'real',
    keepUnlessDefault: 'animation-delay',
    valueOptimizers: [
      valueOptimizers.time,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ],
    vendorPrefixes: [
      '-moz-',
      '-o-',
      '-webkit-'
    ]
  },
  'animation-fill-mode': {
    canOverride: canOverride.property.animationFillMode,
    componentOf: [
      'animation'
    ],
    defaultValue: 'none',
    intoMultiplexMode: 'real',
    vendorPrefixes: [
      '-moz-',
      '-o-',
      '-webkit-'
    ]
  },
  'animation-iteration-count': {
    canOverride: canOverride.property.animationIterationCount,
    componentOf: [
      'animation'
    ],
    defaultValue: '1',
    intoMultiplexMode: 'real',
    vendorPrefixes: [
      '-moz-',
      '-o-',
      '-webkit-'
    ]
  },
  'animation-name': {
    canOverride: canOverride.property.animationName,
    componentOf: [
      'animation'
    ],
    defaultValue: 'none',
    intoMultiplexMode: 'real',
    valueOptimizers: [
      valueOptimizers.textQuotes
    ],
    vendorPrefixes: [
      '-moz-',
      '-o-',
      '-webkit-'
    ]
  },
  'animation-play-state': {
    canOverride: canOverride.property.animationPlayState,
    componentOf: [
      'animation'
    ],
    defaultValue: 'running',
    intoMultiplexMode: 'real',
    vendorPrefixes: [
      '-moz-',
      '-o-',
      '-webkit-'
    ]
  },
  'animation-timing-function': {
    canOverride: canOverride.generic.timingFunction,
    componentOf: [
      'animation'
    ],
    defaultValue: 'ease',
    intoMultiplexMode: 'real',
    vendorPrefixes: [
      '-moz-',
      '-o-',
      '-webkit-'
    ]
  },
  background: {
    canOverride: canOverride.generic.components([
      canOverride.generic.image,
      canOverride.property.backgroundPosition,
      canOverride.property.backgroundSize,
      canOverride.property.backgroundRepeat,
      canOverride.property.backgroundAttachment,
      canOverride.property.backgroundOrigin,
      canOverride.property.backgroundClip,
      canOverride.generic.color
    ]),
    components: [
      'background-image',
      'background-position',
      'background-size',
      'background-repeat',
      'background-attachment',
      'background-origin',
      'background-clip',
      'background-color'
    ],
    breakUp: breakUp.multiplex(breakUp.background),
    defaultValue: '0 0',
    propertyOptimizer: propertyOptimizers.background,
    restore: restore.multiplex(restore.background),
    shortestValue: '0',
    shorthand: true,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.urlWhiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.zero,
      valueOptimizers.color,
      valueOptimizers.urlPrefix,
      valueOptimizers.urlQuotes
    ]
  },
  'background-attachment': {
    canOverride: canOverride.property.backgroundAttachment,
    componentOf: [
      'background'
    ],
    defaultValue: 'scroll',
    intoMultiplexMode: 'real'
  },
  'background-clip': {
    canOverride: canOverride.property.backgroundClip,
    componentOf: [
      'background'
    ],
    defaultValue: 'border-box',
    intoMultiplexMode: 'real',
    shortestValue: 'border-box'
  },
  'background-color': {
    canOverride: canOverride.generic.color,
    componentOf: [
      'background'
    ],
    defaultValue: 'transparent',
    intoMultiplexMode: 'real', // otherwise real color will turn into default since color appears in last multiplex only
    multiplexLastOnly: true,
    nonMergeableValue: 'none',
    shortestValue: 'red',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.color
    ]
  },
  'background-image': {
    canOverride: canOverride.generic.image,
    componentOf: [
      'background'
    ],
    defaultValue: 'none',
    intoMultiplexMode: 'default',
    valueOptimizers: [
      valueOptimizers.urlWhiteSpace,
      valueOptimizers.urlPrefix,
      valueOptimizers.urlQuotes,
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero,
      valueOptimizers.color
    ]
  },
  'background-origin': {
    canOverride: canOverride.property.backgroundOrigin,
    componentOf: [
      'background'
    ],
    defaultValue: 'padding-box',
    intoMultiplexMode: 'real',
    shortestValue: 'border-box'
  },
  'background-position': {
    canOverride: canOverride.property.backgroundPosition,
    componentOf: [
      'background'
    ],
    defaultValue: ['0', '0'],
    doubleValues: true,
    intoMultiplexMode: 'real',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'background-repeat': {
    canOverride: canOverride.property.backgroundRepeat,
    componentOf: [
      'background'
    ],
    defaultValue: ['repeat'],
    doubleValues: true,
    intoMultiplexMode: 'real'
  },
  'background-size': {
    canOverride: canOverride.property.backgroundSize,
    componentOf: [
      'background'
    ],
    defaultValue: ['auto'],
    doubleValues: true,
    intoMultiplexMode: 'real',
    shortestValue: '0 0',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  bottom: {
    canOverride: canOverride.property.bottom,
    defaultValue: 'auto',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  border: {
    breakUp: breakUp.border,
    canOverride: canOverride.generic.components([
      canOverride.generic.unit,
      canOverride.property.borderStyle,
      canOverride.generic.color
    ]),
    components: [
      'border-width',
      'border-style',
      'border-color'
    ],
    defaultValue: 'none',
    overridesShorthands: [
      'border-bottom',
      'border-left',
      'border-right',
      'border-top'
    ],
    restore: restore.withoutDefaults,
    shorthand: true,
    shorthandComponents: true,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.zero,
      valueOptimizers.color
    ]
  },
  'border-bottom': {
    breakUp: breakUp.border,
    canOverride: canOverride.generic.components([
      canOverride.generic.unit,
      canOverride.property.borderStyle,
      canOverride.generic.color
    ]),
    components: [
      'border-bottom-width',
      'border-bottom-style',
      'border-bottom-color'
    ],
    defaultValue: 'none',
    restore: restore.withoutDefaults,
    shorthand: true,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.zero,
      valueOptimizers.color
    ]
  },
  'border-bottom-color': {
    canOverride: canOverride.generic.color,
    componentOf: [
      'border-bottom',
      'border-color'
    ],
    defaultValue: 'none',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.color
    ]
  },
  'border-bottom-left-radius': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'border-radius'
    ],
    defaultValue: '0',
    propertyOptimizer: propertyOptimizers.borderRadius,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ],
    vendorPrefixes: [
      '-moz-',
      '-o-'
    ]
  },
  'border-bottom-right-radius': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'border-radius'
    ],
    defaultValue: '0',
    propertyOptimizer: propertyOptimizers.borderRadius,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ],
    vendorPrefixes: [
      '-moz-',
      '-o-'
    ]
  },
  'border-bottom-style': {
    canOverride: canOverride.property.borderStyle,
    componentOf: [
      'border-bottom',
      'border-style'
    ],
    defaultValue: 'none'
  },
  'border-bottom-width': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'border-bottom',
      'border-width'
    ],
    defaultValue: 'medium',
    oppositeTo: 'border-top-width',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'border-collapse': {
    canOverride: canOverride.property.borderCollapse,
    defaultValue: 'separate'
  },
  'border-color': {
    breakUp: breakUp.fourValues,
    canOverride: canOverride.generic.components([
      canOverride.generic.color,
      canOverride.generic.color,
      canOverride.generic.color,
      canOverride.generic.color
    ]),
    componentOf: [
      'border'
    ],
    components: [
      'border-top-color',
      'border-right-color',
      'border-bottom-color',
      'border-left-color'
    ],
    defaultValue: 'none',
    restore: restore.fourValues,
    shortestValue: 'red',
    shorthand: true,
    singleTypeComponents: true,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.color
    ]
  },
  'border-left': {
    breakUp: breakUp.border,
    canOverride: canOverride.generic.components([
      canOverride.generic.unit,
      canOverride.property.borderStyle,
      canOverride.generic.color
    ]),
    components: [
      'border-left-width',
      'border-left-style',
      'border-left-color'
    ],
    defaultValue: 'none',
    restore: restore.withoutDefaults,
    shorthand: true,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.zero,
      valueOptimizers.color
    ]
  },
  'border-left-color': {
    canOverride: canOverride.generic.color,
    componentOf: [
      'border-color',
      'border-left'
    ],
    defaultValue: 'none',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.color
    ]
  },
  'border-left-style': {
    canOverride: canOverride.property.borderStyle,
    componentOf: [
      'border-left',
      'border-style'
    ],
    defaultValue: 'none'
  },
  'border-left-width': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'border-left',
      'border-width'
    ],
    defaultValue: 'medium',
    oppositeTo: 'border-right-width',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'border-radius': {
    breakUp: breakUp.borderRadius,
    canOverride: canOverride.generic.components([
      canOverride.generic.unit,
      canOverride.generic.unit,
      canOverride.generic.unit,
      canOverride.generic.unit
    ]),
    components: [
      'border-top-left-radius',
      'border-top-right-radius',
      'border-bottom-right-radius',
      'border-bottom-left-radius'
    ],
    defaultValue: '0',
    propertyOptimizer: propertyOptimizers.borderRadius,
    restore: restore.borderRadius,
    shorthand: true,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ],
    vendorPrefixes: [
      '-moz-',
      '-o-'
    ]
  },
  'border-right': {
    breakUp: breakUp.border,
    canOverride: canOverride.generic.components([
      canOverride.generic.unit,
      canOverride.property.borderStyle,
      canOverride.generic.color
    ]),
    components: [
      'border-right-width',
      'border-right-style',
      'border-right-color'
    ],
    defaultValue: 'none',
    restore: restore.withoutDefaults,
    shorthand: true,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.color
    ]
  },
  'border-right-color': {
    canOverride: canOverride.generic.color,
    componentOf: [
      'border-color',
      'border-right'
    ],
    defaultValue: 'none',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.color
    ]
  },
  'border-right-style': {
    canOverride: canOverride.property.borderStyle,
    componentOf: [
      'border-right',
      'border-style'
    ],
    defaultValue: 'none'
  },
  'border-right-width': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'border-right',
      'border-width'
    ],
    defaultValue: 'medium',
    oppositeTo: 'border-left-width',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'border-style': {
    breakUp: breakUp.fourValues,
    canOverride: canOverride.generic.components([
      canOverride.property.borderStyle,
      canOverride.property.borderStyle,
      canOverride.property.borderStyle,
      canOverride.property.borderStyle
    ]),
    componentOf: [
      'border'
    ],
    components: [
      'border-top-style',
      'border-right-style',
      'border-bottom-style',
      'border-left-style'
    ],
    defaultValue: 'none',
    restore: restore.fourValues,
    shorthand: true,
    singleTypeComponents: true
  },
  'border-top': {
    breakUp: breakUp.border,
    canOverride: canOverride.generic.components([
      canOverride.generic.unit,
      canOverride.property.borderStyle,
      canOverride.generic.color
    ]),
    components: [
      'border-top-width',
      'border-top-style',
      'border-top-color'
    ],
    defaultValue: 'none',
    restore: restore.withoutDefaults,
    shorthand: true,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.zero,
      valueOptimizers.color,
      valueOptimizers.unit
    ]
  },
  'border-top-color': {
    canOverride: canOverride.generic.color,
    componentOf: [
      'border-color',
      'border-top'
    ],
    defaultValue: 'none',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.color
    ]
  },
  'border-top-left-radius': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'border-radius'
    ],
    defaultValue: '0',
    propertyOptimizer: propertyOptimizers.borderRadius,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ],
    vendorPrefixes: [
      '-moz-',
      '-o-'
    ]
  },
  'border-top-right-radius': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'border-radius'
    ],
    defaultValue: '0',
    propertyOptimizer: propertyOptimizers.borderRadius,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ],
    vendorPrefixes: [
      '-moz-',
      '-o-'
    ]
  },
  'border-top-style': {
    canOverride: canOverride.property.borderStyle,
    componentOf: [
      'border-style',
      'border-top'
    ],
    defaultValue: 'none'
  },
  'border-top-width': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'border-top',
      'border-width'
    ],
    defaultValue: 'medium',
    oppositeTo: 'border-bottom-width',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'border-width': {
    breakUp: breakUp.fourValues,
    canOverride: canOverride.generic.components([
      canOverride.generic.unit,
      canOverride.generic.unit,
      canOverride.generic.unit,
      canOverride.generic.unit
    ]),
    componentOf: [
      'border'
    ],
    components: [
      'border-top-width',
      'border-right-width',
      'border-bottom-width',
      'border-left-width'
    ],
    defaultValue: 'medium',
    restore: restore.fourValues,
    shortestValue: '0',
    shorthand: true,
    singleTypeComponents: true,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'box-shadow': {
    propertyOptimizer: propertyOptimizers.boxShadow,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero,
      valueOptimizers.color
    ],
    vendorPrefixes: [
      '-moz-',
      '-ms-',
      '-o-',
      '-webkit-'
    ]
  },
  clear: {
    canOverride: canOverride.property.clear,
    defaultValue: 'none'
  },
  clip: {
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  color: {
    canOverride: canOverride.generic.color,
    defaultValue: 'transparent',
    shortestValue: 'red',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.color
    ]
  },
  'column-gap': {
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  cursor: {
    canOverride: canOverride.property.cursor,
    defaultValue: 'auto'
  },
  display: { canOverride: canOverride.property.display },
  filter: {
    propertyOptimizer: propertyOptimizers.filter,
    valueOptimizers: [
      valueOptimizers.fraction
    ]
  },
  float: {
    canOverride: canOverride.property.float,
    defaultValue: 'none'
  },
  font: {
    breakUp: breakUp.font,
    canOverride: canOverride.generic.components([
      canOverride.property.fontStyle,
      canOverride.property.fontVariant,
      canOverride.property.fontWeight,
      canOverride.property.fontStretch,
      canOverride.generic.unit,
      canOverride.generic.unit,
      canOverride.property.fontFamily
    ]),
    components: [
      'font-style',
      'font-variant',
      'font-weight',
      'font-stretch',
      'font-size',
      'line-height',
      'font-family'
    ],
    restore: restore.font,
    shorthand: true,
    valueOptimizers: [
      valueOptimizers.textQuotes
    ]
  },
  'font-family': {
    canOverride: canOverride.property.fontFamily,
    defaultValue: 'user|agent|specific',
    valueOptimizers: [
      valueOptimizers.textQuotes
    ]
  },
  'font-size': {
    canOverride: canOverride.generic.unit,
    defaultValue: 'medium',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.fraction
    ]
  },
  'font-stretch': {
    canOverride: canOverride.property.fontStretch,
    defaultValue: 'normal'
  },
  'font-style': {
    canOverride: canOverride.property.fontStyle,
    defaultValue: 'normal'
  },
  'font-variant': {
    canOverride: canOverride.property.fontVariant,
    defaultValue: 'normal'
  },
  'font-weight': {
    canOverride: canOverride.property.fontWeight,
    defaultValue: 'normal',
    propertyOptimizer: propertyOptimizers.fontWeight,
    shortestValue: '400'
  },
  gap: {
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  height: {
    canOverride: canOverride.generic.unit,
    defaultValue: 'auto',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  left: {
    canOverride: canOverride.property.left,
    defaultValue: 'auto',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'letter-spacing': {
    valueOptimizers: [
      valueOptimizers.fraction,
      valueOptimizers.zero
    ]
  },
  'line-height': {
    canOverride: canOverride.generic.unitOrNumber,
    defaultValue: 'normal',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.fraction,
      valueOptimizers.zero
    ]
  },
  'list-style': {
    canOverride: canOverride.generic.components([
      canOverride.property.listStyleType,
      canOverride.property.listStylePosition,
      canOverride.property.listStyleImage
    ]),
    components: [
      'list-style-type',
      'list-style-position',
      'list-style-image'
    ],
    breakUp: breakUp.listStyle,
    restore: restore.withoutDefaults,
    defaultValue: 'outside', // can't use 'disc' because that'd override default 'decimal' for <ol>
    shortestValue: 'none',
    shorthand: true
  },
  'list-style-image': {
    canOverride: canOverride.generic.image,
    componentOf: [
      'list-style'
    ],
    defaultValue: 'none'
  },
  'list-style-position': {
    canOverride: canOverride.property.listStylePosition,
    componentOf: [
      'list-style'
    ],
    defaultValue: 'outside',
    shortestValue: 'inside'
  },
  'list-style-type': {
    canOverride: canOverride.property.listStyleType,
    componentOf: [
      'list-style'
    ],
    // NOTE: we can't tell the real default value here, it's 'disc' for <ul> and 'decimal' for <ol>
    // this is a hack, but it doesn't matter because this value will be either overridden or
    // it will disappear at the final step anyway
    defaultValue: 'decimal|disc',
    shortestValue: 'none'
  },
  margin: {
    breakUp: breakUp.fourValues,
    canOverride: canOverride.generic.components([
      canOverride.generic.unit,
      canOverride.generic.unit,
      canOverride.generic.unit,
      canOverride.generic.unit
    ]),
    components: [
      'margin-top',
      'margin-right',
      'margin-bottom',
      'margin-left'
    ],
    defaultValue: '0',
    propertyOptimizer: propertyOptimizers.margin,
    restore: restore.fourValues,
    shorthand: true,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'margin-bottom': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'margin'
    ],
    defaultValue: '0',
    oppositeTo: 'margin-top',
    propertyOptimizer: propertyOptimizers.margin,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'margin-inline-end': {
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'margin-inline-start': {
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'margin-left': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'margin'
    ],
    defaultValue: '0',
    oppositeTo: 'margin-right',
    propertyOptimizer: propertyOptimizers.margin,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'margin-right': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'margin'
    ],
    defaultValue: '0',
    oppositeTo: 'margin-left',
    propertyOptimizer: propertyOptimizers.margin,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'margin-top': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'margin'
    ],
    defaultValue: '0',
    oppositeTo: 'margin-bottom',
    propertyOptimizer: propertyOptimizers.margin,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'max-height': {
    canOverride: canOverride.generic.unit,
    defaultValue: 'none',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'max-width': {
    canOverride: canOverride.generic.unit,
    defaultValue: 'none',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'min-height': {
    canOverride: canOverride.generic.unit,
    defaultValue: '0',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'min-width': {
    canOverride: canOverride.generic.unit,
    defaultValue: '0',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  opacity: {
    valueOptimizers: [
      valueOptimizers.fraction,
      valueOptimizers.precision
    ]
  },
  outline: {
    canOverride: canOverride.generic.components([
      canOverride.generic.color,
      canOverride.property.outlineStyle,
      canOverride.generic.unit
    ]),
    components: [
      'outline-color',
      'outline-style',
      'outline-width'
    ],
    breakUp: breakUp.outline,
    restore: restore.withoutDefaults,
    defaultValue: '0',
    propertyOptimizer: propertyOptimizers.outline,
    shorthand: true,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'outline-color': {
    canOverride: canOverride.generic.color,
    componentOf: [
      'outline'
    ],
    defaultValue: 'invert',
    shortestValue: 'red',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.color
    ]
  },
  'outline-style': {
    canOverride: canOverride.property.outlineStyle,
    componentOf: [
      'outline'
    ],
    defaultValue: 'none'
  },
  'outline-width': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'outline'
    ],
    defaultValue: 'medium',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  overflow: {
    canOverride: canOverride.property.overflow,
    defaultValue: 'visible'
  },
  'overflow-x': {
    canOverride: canOverride.property.overflow,
    defaultValue: 'visible'
  },
  'overflow-y': {
    canOverride: canOverride.property.overflow,
    defaultValue: 'visible'
  },
  padding: {
    breakUp: breakUp.fourValues,
    canOverride: canOverride.generic.components([
      canOverride.generic.unit,
      canOverride.generic.unit,
      canOverride.generic.unit,
      canOverride.generic.unit
    ]),
    components: [
      'padding-top',
      'padding-right',
      'padding-bottom',
      'padding-left'
    ],
    defaultValue: '0',
    propertyOptimizer: propertyOptimizers.padding,
    restore: restore.fourValues,
    shorthand: true,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'padding-bottom': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'padding'
    ],
    defaultValue: '0',
    oppositeTo: 'padding-top',
    propertyOptimizer: propertyOptimizers.padding,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'padding-left': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'padding'
    ],
    defaultValue: '0',
    oppositeTo: 'padding-right',
    propertyOptimizer: propertyOptimizers.padding,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'padding-right': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'padding'
    ],
    defaultValue: '0',
    oppositeTo: 'padding-left',
    propertyOptimizer: propertyOptimizers.padding,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'padding-top': {
    canOverride: canOverride.generic.unit,
    componentOf: [
      'padding'
    ],
    defaultValue: '0',
    oppositeTo: 'padding-bottom',
    propertyOptimizer: propertyOptimizers.padding,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  position: {
    canOverride: canOverride.property.position,
    defaultValue: 'static'
  },
  right: {
    canOverride: canOverride.property.right,
    defaultValue: 'auto',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'row-gap': {
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  src: {
    valueOptimizers: [
      valueOptimizers.urlWhiteSpace,
      valueOptimizers.urlPrefix,
      valueOptimizers.urlQuotes
    ]
  },
  'stroke-width': {
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'text-align': {
    canOverride: canOverride.property.textAlign,
    // NOTE: we can't tell the real default value here, as it depends on default text direction
    // this is a hack, but it doesn't matter because this value will be either overridden or
    // it will disappear anyway
    defaultValue: 'left|right'
  },
  'text-decoration': {
    canOverride: canOverride.property.textDecoration,
    defaultValue: 'none'
  },
  'text-indent': {
    canOverride: canOverride.property.textOverflow,
    defaultValue: 'none',
    valueOptimizers: [
      valueOptimizers.fraction,
      valueOptimizers.zero
    ]
  },
  'text-overflow': {
    canOverride: canOverride.property.textOverflow,
    defaultValue: 'none'
  },
  'text-shadow': {
    canOverride: canOverride.property.textShadow,
    defaultValue: 'none',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.zero,
      valueOptimizers.color
    ]
  },
  top: {
    canOverride: canOverride.property.top,
    defaultValue: 'auto',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  transform: {
    canOverride: canOverride.property.transform,
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.degrees,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ],
    vendorPrefixes: [
      '-moz-',
      '-ms-',
      '-o-',
      '-webkit-'
    ]
  },
  transition: {
    breakUp: breakUp.multiplex(breakUp.transition),
    canOverride: canOverride.generic.components([
      canOverride.property.transitionProperty,
      canOverride.generic.time,
      canOverride.generic.timingFunction,
      canOverride.generic.time
    ]),
    components: [
      'transition-property',
      'transition-duration',
      'transition-timing-function',
      'transition-delay'
    ],
    defaultValue: 'none',
    restore: restore.multiplex(restore.withoutDefaults),
    shorthand: true,
    valueOptimizers: [
      valueOptimizers.time,
      valueOptimizers.fraction
    ],
    vendorPrefixes: [
      '-moz-',
      '-ms-',
      '-o-',
      '-webkit-'
    ]
  },
  'transition-delay': {
    canOverride: canOverride.generic.time,
    componentOf: [
      'transition'
    ],
    defaultValue: '0s',
    intoMultiplexMode: 'real',
    valueOptimizers: [
      valueOptimizers.time
    ],
    vendorPrefixes: [
      '-moz-',
      '-ms-',
      '-o-',
      '-webkit-'
    ]
  },
  'transition-duration': {
    canOverride: canOverride.generic.time,
    componentOf: [
      'transition'
    ],
    defaultValue: '0s',
    intoMultiplexMode: 'real',
    keepUnlessDefault: 'transition-delay',
    valueOptimizers: [
      valueOptimizers.time,
      valueOptimizers.fraction
    ],
    vendorPrefixes: [
      '-moz-',
      '-ms-',
      '-o-',
      '-webkit-'
    ]
  },
  'transition-property': {
    canOverride: canOverride.generic.propertyName,
    componentOf: [
      'transition'
    ],
    defaultValue: 'all',
    intoMultiplexMode: 'placeholder',
    placeholderValue: '_', // it's a short value that won't match any property and still be a valid `transition-property`
    vendorPrefixes: [
      '-moz-',
      '-ms-',
      '-o-',
      '-webkit-'
    ]
  },
  'transition-timing-function': {
    canOverride: canOverride.generic.timingFunction,
    componentOf: [
      'transition'
    ],
    defaultValue: 'ease',
    intoMultiplexMode: 'real',
    vendorPrefixes: [
      '-moz-',
      '-ms-',
      '-o-',
      '-webkit-'
    ]
  },
  'vertical-align': {
    canOverride: canOverride.property.verticalAlign,
    defaultValue: 'baseline',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  visibility: {
    canOverride: canOverride.property.visibility,
    defaultValue: 'visible'
  },
  '-webkit-tap-highlight-color': {
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.color
    ]
  },
  '-webkit-margin-end': {
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'white-space': {
    canOverride: canOverride.property.whiteSpace,
    defaultValue: 'normal'
  },
  width: {
    canOverride: canOverride.generic.unit,
    defaultValue: 'auto',
    shortestValue: '0',
    valueOptimizers: [
      valueOptimizers.whiteSpace,
      valueOptimizers.fraction,
      valueOptimizers.precision,
      valueOptimizers.unit,
      valueOptimizers.zero
    ]
  },
  'z-index': {
    canOverride: canOverride.property.zIndex,
    defaultValue: 'auto'
  }
};

// generate vendor-prefixed configuration
var vendorPrefixedConfiguration = {};

function cloneDescriptor(propertyName, prefix) {
  var clonedDescriptor = override$3(configuration$8[propertyName], {});

  if ('componentOf' in clonedDescriptor) {
    clonedDescriptor.componentOf = clonedDescriptor.componentOf.map(function(shorthandName) {
      return prefix + shorthandName;
    });
  }

  if ('components' in clonedDescriptor) {
    clonedDescriptor.components = clonedDescriptor.components.map(function(longhandName) {
      return prefix + longhandName;
    });
  }

  if ('keepUnlessDefault' in clonedDescriptor) {
    clonedDescriptor.keepUnlessDefault = prefix + clonedDescriptor.keepUnlessDefault;
  }

  return clonedDescriptor;
}

for (var propertyName in configuration$8) {
  var descriptor = configuration$8[propertyName];

  if (!('vendorPrefixes' in descriptor)) {
    continue;
  }

  for (var i = 0; i < descriptor.vendorPrefixes.length; i++) {
    var prefix$5 = descriptor.vendorPrefixes[i];
    var clonedDescriptor = cloneDescriptor(propertyName, prefix$5);
    delete clonedDescriptor.vendorPrefixes;

    vendorPrefixedConfiguration[prefix$5 + propertyName] = clonedDescriptor;
  }

  delete descriptor.vendorPrefixes;
}

var configuration_1 = override$3(configuration$8, vendorPrefixedConfiguration);

var emptyCharacter = '';

var Breaks = format.Breaks;
var Spaces = format.Spaces;

var Marker$8 = marker;
var Token$j = token;

function supportsAfterClosingBrace(token) {
  return token[1][1] == 'background' || token[1][1] == 'transform' || token[1][1] == 'src';
}

function afterClosingBrace(token, valueIndex) {
  return token[valueIndex][1][token[valueIndex][1].length - 1] == Marker$8.CLOSE_ROUND_BRACKET;
}

function afterComma(token, valueIndex) {
  return token[valueIndex][1] == Marker$8.COMMA;
}

function afterSlash(token, valueIndex) {
  return token[valueIndex][1] == Marker$8.FORWARD_SLASH;
}

function beforeComma(token, valueIndex) {
  return token[valueIndex + 1] && token[valueIndex + 1][1] == Marker$8.COMMA;
}

function beforeSlash(token, valueIndex) {
  return token[valueIndex + 1] && token[valueIndex + 1][1] == Marker$8.FORWARD_SLASH;
}

function inFilter(token) {
  return token[1][1] == 'filter' || token[1][1] == '-ms-filter';
}

function disallowsSpace(context, token, valueIndex) {
  return !context.spaceAfterClosingBrace
    && supportsAfterClosingBrace(token)
    && afterClosingBrace(token, valueIndex)
    || beforeSlash(token, valueIndex)
    || afterSlash(token, valueIndex)
    || beforeComma(token, valueIndex)
    || afterComma(token, valueIndex);
}

function rules$1(context, tokens) {
  var store = context.store;

  for (var i = 0, l = tokens.length; i < l; i++) {
    store(context, tokens[i]);

    if (i < l - 1) {
      store(context, comma(context));
    }
  }
}

function body$1(context, tokens) {
  var lastPropertyAt = lastPropertyIndex(tokens);

  for (var i = 0, l = tokens.length; i < l; i++) {
    property$1(context, tokens, i, lastPropertyAt);
  }
}

function lastPropertyIndex(tokens) {
  var index = tokens.length - 1;

  for (; index >= 0; index--) {
    if (tokens[index][0] != Token$j.COMMENT) {
      break;
    }
  }

  return index;
}

function property$1(context, tokens, position, lastPropertyAt) {
  var store = context.store;
  var token = tokens[position];

  var propertyValue = token[2];
  var isPropertyBlock = propertyValue && propertyValue[0] === Token$j.PROPERTY_BLOCK;

  var needsSemicolon;
  if (context.format) {
    if (context.format.semicolonAfterLastProperty || isPropertyBlock) {
      needsSemicolon = true;
    } else if (position < lastPropertyAt) {
      needsSemicolon = true;
    } else {
      needsSemicolon = false;
    }
  } else {
    needsSemicolon = position < lastPropertyAt || isPropertyBlock;
  }

  var isLast = position === lastPropertyAt;

  switch (token[0]) {
  case Token$j.AT_RULE:
    store(context, token);
    store(context, semicolon(context, Breaks.AfterProperty, false));
    break;
  case Token$j.AT_RULE_BLOCK:
    rules$1(context, token[1]);
    store(context, openBrace(context, Breaks.AfterRuleBegins, true));
    body$1(context, token[2]);
    store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));
    break;
  case Token$j.COMMENT:
    store(context, token);
    store(context, breakFor(context, Breaks.AfterComment) + context.indentWith);
    break;
  case Token$j.PROPERTY:
    store(context, token[1]);
    store(context, colon(context));
    if (propertyValue) {
      value$1(context, token);
    }
    store(
      context,
      needsSemicolon ? semicolon(context, Breaks.AfterProperty, isLast) : emptyCharacter
    );
    break;
  case Token$j.RAW:
    store(context, token);
  }
}

function value$1(context, token) {
  var store = context.store;
  var j, m;

  if (token[2][0] == Token$j.PROPERTY_BLOCK) {
    store(context, openBrace(context, Breaks.AfterBlockBegins, false));
    body$1(context, token[2][1]);
    store(context, closeBrace(context, Breaks.AfterBlockEnds, false, true));
  } else {
    for (j = 2, m = token.length; j < m; j++) {
      store(context, token[j]);

      if (j < m - 1 && (inFilter(token) || !disallowsSpace(context, token, j))) {
        store(context, Marker$8.SPACE);
      }
    }
  }
}

function breakFor(context, where) {
  return context.format ? context.format.breaks[where] : emptyCharacter;
}

function allowsSpace(context, where) {
  return context.format && context.format.spaces[where];
}

function openBrace(context, where, needsPrefixSpace) {
  if (context.format) {
    context.indentBy += context.format.indentBy;
    context.indentWith = context.format.indentWith.repeat(context.indentBy);
    return (
      needsPrefixSpace
      && allowsSpace(context, Spaces.BeforeBlockBegins) ? Marker$8.SPACE : emptyCharacter
    ) + Marker$8.OPEN_CURLY_BRACKET
      + breakFor(context, where)
      + context.indentWith;
  }
  return Marker$8.OPEN_CURLY_BRACKET;
}

function closeBrace(context, where, beforeBlockEnd, isLast) {
  if (context.format) {
    context.indentBy -= context.format.indentBy;
    context.indentWith = context.format.indentWith.repeat(context.indentBy);
    return (
      beforeBlockEnd
        ? breakFor(context, Breaks.BeforeBlockEnds)
        : breakFor(context, Breaks.AfterProperty)
    ) + context.indentWith
      + Marker$8.CLOSE_CURLY_BRACKET
      + (isLast ? emptyCharacter : breakFor(context, where) + context.indentWith);
  }
  return Marker$8.CLOSE_CURLY_BRACKET;
}

function colon(context) {
  return context.format
    ? Marker$8.COLON + (allowsSpace(context, Spaces.BeforeValue) ? Marker$8.SPACE : emptyCharacter)
    : Marker$8.COLON;
}

function semicolon(context, where, isLast) {
  return context.format
    ? Marker$8.SEMICOLON + (isLast ? emptyCharacter : (breakFor(context, where) + context.indentWith))
    : Marker$8.SEMICOLON;
}

function comma(context) {
  return context.format
    ? Marker$8.COMMA + breakFor(context, Breaks.BetweenSelectors) + context.indentWith
    : Marker$8.COMMA;
}

function all$9(context, tokens) {
  var store = context.store;
  var token;
  var isLast;
  var i, l;

  for (i = 0, l = tokens.length; i < l; i++) {
    token = tokens[i];
    isLast = i == l - 1;

    switch (token[0]) {
    case Token$j.AT_RULE:
      store(context, token);
      store(context, semicolon(context, Breaks.AfterAtRule, isLast));
      break;
    case Token$j.AT_RULE_BLOCK:
      rules$1(context, token[1]);
      store(context, openBrace(context, Breaks.AfterRuleBegins, true));
      body$1(context, token[2]);
      store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));
      break;
    case Token$j.NESTED_BLOCK:
      rules$1(context, token[1]);
      store(context, openBrace(context, Breaks.AfterBlockBegins, true));
      all$9(context, token[2]);
      store(context, closeBrace(context, Breaks.AfterBlockEnds, true, isLast));
      break;
    case Token$j.COMMENT:
      store(context, token);
      store(context, breakFor(context, Breaks.AfterComment) + context.indentWith);
      break;
    case Token$j.RAW:
      store(context, token);
      break;
    case Token$j.RULE:
      rules$1(context, token[1]);
      store(context, openBrace(context, Breaks.AfterRuleBegins, true));
      body$1(context, token[2]);
      store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));
      break;
    }
  }
}

var helpers$1 = {
  all: all$9,
  body: body$1,
  property: property$1,
  rules: rules$1,
  value: value$1
};

var helpers = helpers$1;

function store$2(serializeContext, token) {
  serializeContext.output.push(typeof token == 'string' ? token : token[1]);
}

function context() {
  var newContext = {
    output: [],
    store: store$2
  };

  return newContext;
}

function all$8(tokens) {
  var oneTimeContext = context();
  helpers.all(oneTimeContext, tokens);
  return oneTimeContext.output.join('');
}

function body(tokens) {
  var oneTimeContext = context();
  helpers.body(oneTimeContext, tokens);
  return oneTimeContext.output.join('');
}

function property(tokens, position) {
  var oneTimeContext = context();
  helpers.property(oneTimeContext, tokens, position, true);
  return oneTimeContext.output.join('');
}

function rules(tokens) {
  var oneTimeContext = context();
  helpers.rules(oneTimeContext, tokens);
  return oneTimeContext.output.join('');
}

function value(tokens) {
  var oneTimeContext = context();
  helpers.value(oneTimeContext, tokens);
  return oneTimeContext.output.join('');
}

var oneTime = {
  all: all$8,
  body: body,
  property: property,
  rules: rules,
  value: value
};

var sortSelectors$2 = sortSelectors_1;
var tidyRules$2 = tidyRules_1;
var tidyBlock = tidyBlock_1;
var tidyAtRule = tidyAtRule_1;

var Hack = hack;
var removeUnused$1 = removeUnused_1;
var restoreFromOptimizing$4 = restoreFromOptimizing_1;
var wrapForOptimizing$2 = wrapForOptimizing$3.all;

var configuration$7 = configuration_1;
var optimizers = valueOptimizers$1;

var OptimizationLevel$6 = optimizationLevel.OptimizationLevel;

var Token$i = token;
var Marker$7 = marker;

var formatPosition$1 = formatPosition_1;

var serializeRules$9 = oneTime.rules;

var CHARSET_TOKEN = '@charset';
var CHARSET_REGEXP = new RegExp('^' + CHARSET_TOKEN, 'i');

var DEFAULT_ROUNDING_PRECISION = roundingPrecision.DEFAULT;

var VARIABLE_PROPERTY_NAME_PATTERN = /^--\S+$/;
var PROPERTY_NAME_PATTERN = /^(?:-chrome-|-[\w-]+\w|\w[\w-]+\w|\w{1,})$/;
var IMPORT_PREFIX_PATTERN$2 = /^@import/i;
var URL_PREFIX_PATTERN$2 = /^url\(/i;

function startsAsUrl(value) {
  return URL_PREFIX_PATTERN$2.test(value);
}

function isImport$3(token) {
  return IMPORT_PREFIX_PATTERN$2.test(token[1]);
}

function isLegacyFilter(property) {
  var value;

  if (property.name == 'filter' || property.name == '-ms-filter') {
    value = property.value[0][1];

    return value.indexOf('progid') > -1
      || value.indexOf('alpha') === 0
      || value.indexOf('chroma') === 0;
  }
  return false;
}

function noop$2() {}

function noopValueOptimizer(_name, value, _options) { return value; }

function optimizeBody(rule, properties, context) {
  var options = context.options;
  var valueOptimizers;
  var property, name, type, value;
  var propertyToken;
  var propertyOptimizer;
  var serializedRule = serializeRules$9(rule);
  var _properties = wrapForOptimizing$2(properties);
  var pluginValueOptimizers = context.options.plugins.level1Value;
  var pluginPropertyOptimizers = context.options.plugins.level1Property;
  var isVariable;
  var i, l;

  for (i = 0, l = _properties.length; i < l; i++) {
    var j, k, m, n;

    property = _properties[i];
    name = property.name;
    propertyOptimizer = configuration$7[name] && configuration$7[name].propertyOptimizer || noop$2;
    valueOptimizers = configuration$7[name] && configuration$7[name].valueOptimizers || [optimizers.whiteSpace];
    isVariable = VARIABLE_PROPERTY_NAME_PATTERN.test(name);

    if (isVariable) {
      valueOptimizers = options.variableOptimizers.length > 0
        ? options.variableOptimizers
        : [optimizers.whiteSpace];
    }

    if (!isVariable && !PROPERTY_NAME_PATTERN.test(name)) {
      propertyToken = property.all[property.position];
      context.warnings.push('Invalid property name \'' + name + '\' at ' + formatPosition$1(propertyToken[1][2][0]) + '. Ignoring.');
      property.unused = true;
      continue;
    }

    if (property.value.length === 0) {
      propertyToken = property.all[property.position];
      context.warnings.push('Empty property \'' + name + '\' at ' + formatPosition$1(propertyToken[1][2][0]) + '. Ignoring.');
      property.unused = true;
      continue;
    }

    if (property.hack && (
      (property.hack[0] == Hack.ASTERISK || property.hack[0] == Hack.UNDERSCORE)
        && !options.compatibility.properties.iePrefixHack
        || property.hack[0] == Hack.BACKSLASH && !options.compatibility.properties.ieSuffixHack
        || property.hack[0] == Hack.BANG && !options.compatibility.properties.ieBangHack)) {
      property.unused = true;
      continue;
    }

    if (!options.compatibility.properties.ieFilters && isLegacyFilter(property)) {
      property.unused = true;
      continue;
    }

    if (property.block) {
      optimizeBody(rule, property.value[0][1], context);
      continue;
    }

    for (j = 0, m = property.value.length; j < m; j++) {
      type = property.value[j][0];
      value = property.value[j][1];

      if (type == Token$i.PROPERTY_BLOCK) {
        property.unused = true;
        context.warnings.push('Invalid value token at ' + formatPosition$1(value[0][1][2][0]) + '. Ignoring.');
        break;
      }

      if (startsAsUrl(value) && !context.validator.isUrl(value)) {
        property.unused = true;
        context.warnings.push('Broken URL \'' + value + '\' at ' + formatPosition$1(property.value[j][2][0]) + '. Ignoring.');
        break;
      }

      for (k = 0, n = valueOptimizers.length; k < n; k++) {
        value = valueOptimizers[k](name, value, options);
      }

      for (k = 0, n = pluginValueOptimizers.length; k < n; k++) {
        value = pluginValueOptimizers[k](name, value, options);
      }

      property.value[j][1] = value;
    }

    propertyOptimizer(serializedRule, property, options);

    for (j = 0, m = pluginPropertyOptimizers.length; j < m; j++) {
      pluginPropertyOptimizers[j](serializedRule, property, options);
    }
  }

  restoreFromOptimizing$4(_properties);
  removeUnused$1(_properties);
  removeComments(properties, options);
}

function removeComments(tokens, options) {
  var token;
  var i;

  for (i = 0; i < tokens.length; i++) {
    token = tokens[i];

    if (token[0] != Token$i.COMMENT) {
      continue;
    }

    optimizeComment(token, options);

    if (token[1].length === 0) {
      tokens.splice(i, 1);
      i--;
    }
  }
}

function optimizeComment(token, options) {
  if (token[1][2] == Marker$7.EXCLAMATION && (options.level[OptimizationLevel$6.One].specialComments == 'all' || options.commentsKept < options.level[OptimizationLevel$6.One].specialComments)) {
    options.commentsKept++;
    return;
  }

  token[1] = [];
}

function cleanupCharsets(tokens) {
  var hasCharset = false;

  for (var i = 0, l = tokens.length; i < l; i++) {
    var token = tokens[i];

    if (token[0] != Token$i.AT_RULE) { continue; }

    if (!CHARSET_REGEXP.test(token[1])) { continue; }

    if (hasCharset || token[1].indexOf(CHARSET_TOKEN) == -1) {
      tokens.splice(i, 1);
      i--;
      l--;
    } else {
      hasCharset = true;
      tokens.splice(i, 1);
      tokens.unshift([Token$i.AT_RULE, token[1].replace(CHARSET_REGEXP, CHARSET_TOKEN)]);
    }
  }
}

function buildUnitRegexp(options) {
  var units = ['px', 'em', 'ex', 'cm', 'mm', 'in', 'pt', 'pc', '%'];
  var otherUnits = ['ch', 'rem', 'vh', 'vm', 'vmax', 'vmin', 'vw'];

  otherUnits.forEach(function(unit) {
    if (options.compatibility.units[unit]) {
      units.push(unit);
    }
  });

  return new RegExp('(^|\\s|\\(|,)0(?:' + units.join('|') + ')(\\W|$)', 'g');
}

function buildPrecisionOptions(roundingPrecision) {
  var precisionOptions = {
    matcher: null,
    units: {}
  };
  var optimizable = [];
  var unit;
  var value;

  for (unit in roundingPrecision) {
    value = roundingPrecision[unit];

    if (value != DEFAULT_ROUNDING_PRECISION) {
      precisionOptions.units[unit] = {};
      precisionOptions.units[unit].value = value;
      precisionOptions.units[unit].multiplier = 10 ** value;

      optimizable.push(unit);
    }
  }

  if (optimizable.length > 0) {
    precisionOptions.enabled = true;
    precisionOptions.decimalPointMatcher = new RegExp('(\\d)\\.($|' + optimizable.join('|') + ')($|\\W)', 'g');
    precisionOptions.zeroMatcher = new RegExp('(\\d*)(\\.\\d+)(' + optimizable.join('|') + ')', 'g');
  }

  return precisionOptions;
}

function buildVariableOptimizers(options) {
  return options.level[OptimizationLevel$6.One].variableValueOptimizers.map(function(optimizer) {
    if (typeof (optimizer) == 'string') {
      return optimizers[optimizer] || noopValueOptimizer;
    }

    return optimizer;
  });
}

function level1Optimize$1(tokens, context) {
  var options = context.options;
  var levelOptions = options.level[OptimizationLevel$6.One];
  var ie7Hack = options.compatibility.selectors.ie7Hack;
  var adjacentSpace = options.compatibility.selectors.adjacentSpace;
  var spaceAfterClosingBrace = options.compatibility.properties.spaceAfterClosingBrace;
  var format = options.format;
  var mayHaveCharset = false;
  var afterRules = false;

  options.unitsRegexp = options.unitsRegexp || buildUnitRegexp(options);
  options.precision = options.precision || buildPrecisionOptions(levelOptions.roundingPrecision);
  options.commentsKept = options.commentsKept || 0;
  options.variableOptimizers = options.variableOptimizers || buildVariableOptimizers(options);

  for (var i = 0, l = tokens.length; i < l; i++) {
    var token = tokens[i];

    switch (token[0]) {
    case Token$i.AT_RULE:
      token[1] = isImport$3(token) && afterRules ? '' : token[1];
      token[1] = levelOptions.tidyAtRules ? tidyAtRule(token[1]) : token[1];
      mayHaveCharset = true;
      break;
    case Token$i.AT_RULE_BLOCK:
      optimizeBody(token[1], token[2], context);
      afterRules = true;
      break;
    case Token$i.NESTED_BLOCK:
      token[1] = levelOptions.tidyBlockScopes ? tidyBlock(token[1], spaceAfterClosingBrace) : token[1];
      level1Optimize$1(token[2], context);
      afterRules = true;
      break;
    case Token$i.COMMENT:
      optimizeComment(token, options);
      break;
    case Token$i.RULE:
      token[1] = levelOptions.tidySelectors
        ? tidyRules$2(token[1], !ie7Hack, adjacentSpace, format, context.warnings)
        : token[1];
      token[1] = token[1].length > 1 ? sortSelectors$2(token[1], levelOptions.selectorsSortingMethod) : token[1];
      optimizeBody(token[1], token[2], context);
      afterRules = true;
      break;
    }

    if (token[0] == Token$i.COMMENT
      && token[1].length === 0
      || levelOptions.removeEmpty
      && (token[1].length === 0 || (token[2] && token[2].length === 0))) {
      tokens.splice(i, 1);
      i--;
      l--;
    }
  }

  if (levelOptions.cleanupCharsets && mayHaveCharset) {
    cleanupCharsets(tokens);
  }

  return tokens;
}

var optimize$3 = level1Optimize$1;

var Marker$6 = marker;
var split$1 = split_1;

var DEEP_SELECTOR_PATTERN = /\/deep\//;
var DOUBLE_COLON_PATTERN = /^::/;
var VENDOR_PREFIXED_PATTERN = /:(-moz-|-ms-|-o-|-webkit-)/;

var NOT_PSEUDO = ':not';
var PSEUDO_CLASSES_WITH_ARGUMENTS = [
  ':dir',
  ':lang',
  ':not',
  ':nth-child',
  ':nth-last-child',
  ':nth-last-of-type',
  ':nth-of-type'
];
var RELATION_PATTERN = /[>+~]/;
var UNMIXABLE_PSEUDO_CLASSES = [
  ':after',
  ':before',
  ':first-letter',
  ':first-line',
  ':lang'
];
var UNMIXABLE_PSEUDO_ELEMENTS = [
  '::after',
  '::before',
  '::first-letter',
  '::first-line'
];

var Level$1 = {
  DOUBLE_QUOTE: 'double-quote',
  SINGLE_QUOTE: 'single-quote',
  ROOT: 'root'
};

function isMergeable$4(selector, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) {
  var singleSelectors = split$1(selector, Marker$6.COMMA);
  var singleSelector;
  var i, l;

  for (i = 0, l = singleSelectors.length; i < l; i++) {
    singleSelector = singleSelectors[i];

    if (singleSelector.length === 0
        || isDeepSelector(singleSelector)
        || isVendorPrefixed(singleSelector)
        || (singleSelector.indexOf(Marker$6.COLON) > -1
          && !areMergeable(
            singleSelector,
            extractPseudoFrom(singleSelector),
            mergeablePseudoClasses,
            mergeablePseudoElements,
            multiplePseudoMerging
          ))) {
      return false;
    }
  }

  return true;
}

function isDeepSelector(selector) {
  return DEEP_SELECTOR_PATTERN.test(selector);
}

function isVendorPrefixed(selector) {
  return VENDOR_PREFIXED_PATTERN.test(selector);
}

function extractPseudoFrom(selector) {
  var list = [];
  var character;
  var buffer = [];
  var level = Level$1.ROOT;
  var roundBracketLevel = 0;
  var isQuoted;
  var isEscaped;
  var isPseudo = false;
  var isRelation;
  var wasColon = false;
  var index;
  var len;

  for (index = 0, len = selector.length; index < len; index++) {
    character = selector[index];

    isRelation = !isEscaped && RELATION_PATTERN.test(character);
    isQuoted = level == Level$1.DOUBLE_QUOTE || level == Level$1.SINGLE_QUOTE;

    if (isEscaped) {
      buffer.push(character);
    } else if (character == Marker$6.DOUBLE_QUOTE && level == Level$1.ROOT) {
      buffer.push(character);
      level = Level$1.DOUBLE_QUOTE;
    } else if (character == Marker$6.DOUBLE_QUOTE && level == Level$1.DOUBLE_QUOTE) {
      buffer.push(character);
      level = Level$1.ROOT;
    } else if (character == Marker$6.SINGLE_QUOTE && level == Level$1.ROOT) {
      buffer.push(character);
      level = Level$1.SINGLE_QUOTE;
    } else if (character == Marker$6.SINGLE_QUOTE && level == Level$1.SINGLE_QUOTE) {
      buffer.push(character);
      level = Level$1.ROOT;
    } else if (isQuoted) {
      buffer.push(character);
    } else if (character == Marker$6.OPEN_ROUND_BRACKET) {
      buffer.push(character);
      roundBracketLevel++;
    } else if (character == Marker$6.CLOSE_ROUND_BRACKET && roundBracketLevel == 1 && isPseudo) {
      buffer.push(character);
      list.push(buffer.join(''));
      roundBracketLevel--;
      buffer = [];
      isPseudo = false;
    } else if (character == Marker$6.CLOSE_ROUND_BRACKET) {
      buffer.push(character);
      roundBracketLevel--;
    } else if (character == Marker$6.COLON && roundBracketLevel === 0 && isPseudo && !wasColon) {
      list.push(buffer.join(''));
      buffer = [];
      buffer.push(character);
    } else if (character == Marker$6.COLON && roundBracketLevel === 0 && !wasColon) {
      buffer = [];
      buffer.push(character);
      isPseudo = true;
    } else if (character == Marker$6.SPACE && roundBracketLevel === 0 && isPseudo) {
      list.push(buffer.join(''));
      buffer = [];
      isPseudo = false;
    } else if (isRelation && roundBracketLevel === 0 && isPseudo) {
      list.push(buffer.join(''));
      buffer = [];
      isPseudo = false;
    } else {
      buffer.push(character);
    }

    isEscaped = character == Marker$6.BACK_SLASH;
    wasColon = character == Marker$6.COLON;
  }

  if (buffer.length > 0 && isPseudo) {
    list.push(buffer.join(''));
  }

  return list;
}

function areMergeable(selector, matches, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) {
  return areAllowed(matches, mergeablePseudoClasses, mergeablePseudoElements)
    && needArguments(matches)
    && (matches.length < 2 || !someIncorrectlyChained(selector, matches))
    && (matches.length < 2 || multiplePseudoMerging && allMixable(matches));
}

function areAllowed(matches, mergeablePseudoClasses, mergeablePseudoElements) {
  var match;
  var name;
  var i, l;

  for (i = 0, l = matches.length; i < l; i++) {
    match = matches[i];
    name = match.indexOf(Marker$6.OPEN_ROUND_BRACKET) > -1
      ? match.substring(0, match.indexOf(Marker$6.OPEN_ROUND_BRACKET))
      : match;

    if (mergeablePseudoClasses.indexOf(name) === -1 && mergeablePseudoElements.indexOf(name) === -1) {
      return false;
    }
  }

  return true;
}

function needArguments(matches) {
  var match;
  var name;
  var bracketOpensAt;
  var hasArguments;
  var i, l;

  for (i = 0, l = matches.length; i < l; i++) {
    match = matches[i];

    bracketOpensAt = match.indexOf(Marker$6.OPEN_ROUND_BRACKET);
    hasArguments = bracketOpensAt > -1;
    name = hasArguments
      ? match.substring(0, bracketOpensAt)
      : match;

    if (hasArguments && PSEUDO_CLASSES_WITH_ARGUMENTS.indexOf(name) == -1) {
      return false;
    }

    if (!hasArguments && PSEUDO_CLASSES_WITH_ARGUMENTS.indexOf(name) > -1) {
      return false;
    }
  }

  return true;
}

function someIncorrectlyChained(selector, matches) {
  var positionInSelector = 0;
  var match;
  var matchAt;
  var nextMatch;
  var nextMatchAt;
  var name;
  var nextName;
  var areChained;
  var i, l;

  for (i = 0, l = matches.length; i < l; i++) {
    match = matches[i];
    nextMatch = matches[i + 1];

    if (!nextMatch) {
      break;
    }

    matchAt = selector.indexOf(match, positionInSelector);
    nextMatchAt = selector.indexOf(match, matchAt + 1);
    positionInSelector = nextMatchAt;
    areChained = matchAt + match.length == nextMatchAt;

    if (areChained) {
      name = match.indexOf(Marker$6.OPEN_ROUND_BRACKET) > -1
        ? match.substring(0, match.indexOf(Marker$6.OPEN_ROUND_BRACKET))
        : match;
      nextName = nextMatch.indexOf(Marker$6.OPEN_ROUND_BRACKET) > -1
        ? nextMatch.substring(0, nextMatch.indexOf(Marker$6.OPEN_ROUND_BRACKET))
        : nextMatch;

      if (name != NOT_PSEUDO || nextName != NOT_PSEUDO) {
        return true;
      }
    }
  }

  return false;
}

function allMixable(matches) {
  var unmixableMatches = 0;
  var match;
  var i, l;

  for (i = 0, l = matches.length; i < l; i++) {
    match = matches[i];

    if (isPseudoElement(match)) {
      unmixableMatches += UNMIXABLE_PSEUDO_ELEMENTS.indexOf(match) > -1 ? 1 : 0;
    } else {
      unmixableMatches += UNMIXABLE_PSEUDO_CLASSES.indexOf(match) > -1 ? 1 : 0;
    }

    if (unmixableMatches > 1) {
      return false;
    }
  }

  return true;
}

function isPseudoElement(pseudo) {
  return DOUBLE_COLON_PATTERN.test(pseudo);
}

var isMergeable_1 = isMergeable$4;

var Marker$5 = marker;

function everyValuesPair$2(fn, left, right) {
  var leftSize = left.value.length;
  var rightSize = right.value.length;
  var total = Math.max(leftSize, rightSize);
  var lowerBound = Math.min(leftSize, rightSize) - 1;
  var leftValue;
  var rightValue;
  var position;

  for (position = 0; position < total; position++) {
    leftValue = left.value[position] && left.value[position][1] || leftValue;
    rightValue = right.value[position] && right.value[position][1] || rightValue;

    if (leftValue == Marker$5.COMMA || rightValue == Marker$5.COMMA) {
      continue;
    }

    if (!fn(leftValue, rightValue, position, position <= lowerBound)) {
      return false;
    }
  }

  return true;
}

var everyValuesPair_1 = everyValuesPair$2;

function hasInherit$2(property) {
  for (var i = property.value.length - 1; i >= 0; i--) {
    if (property.value[i][1] == 'inherit') { return true; }
  }

  return false;
}

var hasInherit_1 = hasInherit$2;

function hasSameValues$1(property) {
  var firstValue = property.value[0][1];
  var i, l;

  for (i = 1, l = property.value.length; i < l; i++) {
    if (property.value[i][1] != firstValue) {
      return false;
    }
  }

  return true;
}

var hasSameValues_1 = hasSameValues$1;

var configuration$6 = configuration_1;
var InvalidPropertyError = invalidPropertyError;

function populateComponents$3(properties, validator, warnings) {
  var component;
  var j, m;

  for (var i = properties.length - 1; i >= 0; i--) {
    var property = properties[i];
    var descriptor = configuration$6[property.name];

    if (!property.dynamic && descriptor && descriptor.shorthand) {
      if (onlyValueIsVariable(property, validator) || moreThanOneValueIsVariable(property, validator)) {
        property.optimizable = false;
        continue;
      }

      property.shorthand = true;
      property.dirty = true;

      try {
        property.components = descriptor.breakUp(property, configuration$6, validator);

        if (descriptor.shorthandComponents) {
          for (j = 0, m = property.components.length; j < m; j++) {
            component = property.components[j];
            component.components = configuration$6[component.name].breakUp(component, configuration$6, validator);
          }
        }
      } catch (e) {
        if (e instanceof InvalidPropertyError) {
          property.components = []; // this will set property.unused to true below
          warnings.push(e.message);
        } else {
          throw e;
        }
      }

      if (property.components.length > 0) {
        property.multiplex = property.components[0].multiplex;
      } else {
        property.unused = true;
      }
    }
  }
}

function onlyValueIsVariable(property, validator) {
  return property.value.length == 1 && validator.isVariable(property.value[0][1]);
}

function moreThanOneValueIsVariable(property, validator) {
  return property.value.length > 1
    && property.value.filter(
      function(value) {
        return validator.isVariable(value[1]);
      }
    ).length > 1;
}

var populateComponents_1 = populateComponents$3;

var configuration$5 = configuration_1;

function restoreWithComponents$3(property) {
  var descriptor = configuration$5[property.name];

  if (descriptor && descriptor.shorthand) {
    return descriptor.restore(property, configuration$5);
  }
  return property.value;
}

var restoreWithComponents_1 = restoreWithComponents$3;

var everyValuesPair$1 = everyValuesPair_1;
var hasInherit$1 = hasInherit_1;
var hasSameValues = hasSameValues_1;
var populateComponents$2 = populateComponents_1;

var configuration$4 = configuration_1;
var deepClone$1 = clone.deep;
var restoreWithComponents$2 = restoreWithComponents_1;

var restoreFromOptimizing$3 = restoreFromOptimizing_1;
var wrapSingle = wrapForOptimizing$3.single;

var serializeBody$5 = oneTime.body;
var Token$h = token;

function mergeIntoShorthands$1(properties, validator) {
  var candidates = {};
  var descriptor;
  var componentOf;
  var property;
  var i, l;
  var j, m;

  // there is no shorthand property made up of less than 3 longhands
  if (properties.length < 3) {
    return;
  }

  for (i = 0, l = properties.length; i < l; i++) {
    property = properties[i];
    descriptor = configuration$4[property.name];

    if (property.dynamic) {
      continue;
    }

    if (property.unused) {
      continue;
    }

    if (property.hack) {
      continue;
    }

    if (property.block) {
      continue;
    }

    if (descriptor && descriptor.singleTypeComponents && !hasSameValues(property)) {
      continue;
    }

    invalidateOrCompact(properties, i, candidates, validator);

    if (descriptor && descriptor.componentOf) {
      for (j = 0, m = descriptor.componentOf.length; j < m; j++) {
        componentOf = descriptor.componentOf[j];

        candidates[componentOf] = candidates[componentOf] || {};
        candidates[componentOf][property.name] = property;
      }
    }
  }

  invalidateOrCompact(properties, i, candidates, validator);
}

function invalidateOrCompact(properties, position, candidates, validator) {
  var invalidatedBy = properties[position];
  var shorthandName;
  var shorthandDescriptor;
  var candidateComponents;
  var replacedCandidates = [];
  var i;

  for (shorthandName in candidates) {
    if (undefined !== invalidatedBy && shorthandName == invalidatedBy.name) {
      continue;
    }

    shorthandDescriptor = configuration$4[shorthandName];
    candidateComponents = candidates[shorthandName];
    if (invalidatedBy && invalidates(candidates, shorthandName, invalidatedBy)) {
      delete candidates[shorthandName];
      continue;
    }

    if (shorthandDescriptor.components.length > Object.keys(candidateComponents).length) {
      continue;
    }

    if (mixedImportance(candidateComponents)) {
      continue;
    }

    if (!overridable(candidateComponents, shorthandName, validator)) {
      continue;
    }

    if (!mergeable(candidateComponents)) {
      continue;
    }

    if (mixedInherit(candidateComponents)) {
      replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator);
    } else {
      replaceWithShorthand(properties, candidateComponents, shorthandName, validator);
    }

    replacedCandidates.push(shorthandName);
  }

  for (i = replacedCandidates.length - 1; i >= 0; i--) {
    delete candidates[replacedCandidates[i]];
  }
}

function invalidates(candidates, shorthandName, invalidatedBy) {
  var shorthandDescriptor = configuration$4[shorthandName];
  var invalidatedByDescriptor = configuration$4[invalidatedBy.name];
  var componentName;

  if ('overridesShorthands' in shorthandDescriptor && shorthandDescriptor.overridesShorthands.indexOf(invalidatedBy.name) > -1) {
    return true;
  }

  if (invalidatedByDescriptor && 'componentOf' in invalidatedByDescriptor) {
    for (componentName in candidates[shorthandName]) {
      if (invalidatedByDescriptor.componentOf.indexOf(componentName) > -1) {
        return true;
      }
    }
  }

  return false;
}

function mixedImportance(components) {
  var important;
  var componentName;

  for (componentName in components) {
    if (undefined !== important && components[componentName].important != important) {
      return true;
    }

    important = components[componentName].important;
  }

  return false;
}

function overridable(components, shorthandName, validator) {
  var descriptor = configuration$4[shorthandName];
  var newValuePlaceholder = [
    Token$h.PROPERTY,
    [Token$h.PROPERTY_NAME, shorthandName],
    [Token$h.PROPERTY_VALUE, descriptor.defaultValue]
  ];
  var newProperty = wrapSingle(newValuePlaceholder);
  var component;
  var mayOverride;
  var i, l;

  populateComponents$2([newProperty], validator, []);

  for (i = 0, l = descriptor.components.length; i < l; i++) {
    component = components[descriptor.components[i]];
    mayOverride = configuration$4[component.name].canOverride || sameValue$1;

    if (!everyValuesPair$1(mayOverride.bind(null, validator), newProperty.components[i], component)) {
      return false;
    }
  }

  return true;
}

function sameValue$1(_validator, value1, value2) {
  return value1 === value2;
}

function mergeable(components) {
  var lastCount = null;
  var currentCount;
  var componentName;
  var component;
  var descriptor;
  var values;

  for (componentName in components) {
    component = components[componentName];
    descriptor = configuration$4[componentName];

    if (!('restore' in descriptor)) {
      continue;
    }

    restoreFromOptimizing$3([component.all[component.position]], restoreWithComponents$2);
    values = descriptor.restore(component, configuration$4);

    currentCount = values.length;

    if (lastCount !== null && currentCount !== lastCount) {
      return false;
    }

    lastCount = currentCount;
  }

  return true;
}

function mixedInherit(components) {
  var componentName;
  var lastValue = null;
  var currentValue;

  for (componentName in components) {
    currentValue = hasInherit$1(components[componentName]);

    if (lastValue !== null && lastValue !== currentValue) {
      return true;
    }

    lastValue = currentValue;
  }

  return false;
}

function replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator) {
  var viaLonghands = buildSequenceWithInheritLonghands(candidateComponents, shorthandName, validator);
  var viaShorthand = buildSequenceWithInheritShorthand(candidateComponents, shorthandName, validator);
  var longhandTokensSequence = viaLonghands[0];
  var shorthandTokensSequence = viaShorthand[0];
  var isLonghandsShorter = serializeBody$5(longhandTokensSequence).length < serializeBody$5(shorthandTokensSequence).length;
  var newTokensSequence = isLonghandsShorter ? longhandTokensSequence : shorthandTokensSequence;
  var newProperty = isLonghandsShorter ? viaLonghands[1] : viaShorthand[1];
  var newComponents = isLonghandsShorter ? viaLonghands[2] : viaShorthand[2];
  var lastComponent = candidateComponents[Object.keys(candidateComponents).pop()];
  var all = lastComponent.all;
  var insertAt = lastComponent.position;
  var componentName;
  var oldComponent;
  var newComponent;
  var newToken;

  newProperty.position = insertAt;
  newProperty.shorthand = true;
  newProperty.important = lastComponent.important;
  newProperty.multiplex = false;
  newProperty.dirty = true;
  newProperty.all = all;
  newProperty.all[insertAt] = newTokensSequence[0];

  properties.splice(insertAt, 1, newProperty);

  for (componentName in candidateComponents) {
    oldComponent = candidateComponents[componentName];
    oldComponent.unused = true;

    newProperty.multiplex = newProperty.multiplex || oldComponent.multiplex;

    if (oldComponent.name in newComponents) {
      newComponent = newComponents[oldComponent.name];
      newToken = findTokenIn(newTokensSequence, componentName);

      newComponent.position = all.length;
      newComponent.all = all;
      newComponent.all.push(newToken);

      properties.push(newComponent);
    }
  }
}

function buildSequenceWithInheritLonghands(components, shorthandName, validator) {
  var tokensSequence = [];
  var inheritComponents = {};
  var nonInheritComponents = {};
  var descriptor = configuration$4[shorthandName];
  var shorthandToken = [
    Token$h.PROPERTY,
    [Token$h.PROPERTY_NAME, shorthandName],
    [Token$h.PROPERTY_VALUE, descriptor.defaultValue]
  ];
  var newProperty = wrapSingle(shorthandToken);
  var component;
  var longhandToken;
  var newComponent;
  var nameMetadata;
  var i, l;

  populateComponents$2([newProperty], validator, []);

  for (i = 0, l = descriptor.components.length; i < l; i++) {
    component = components[descriptor.components[i]];

    if (hasInherit$1(component)) {
      longhandToken = component.all[component.position].slice(0, 2);
      Array.prototype.push.apply(longhandToken, component.value);
      tokensSequence.push(longhandToken);

      newComponent = deepClone$1(component);
      newComponent.value = inferComponentValue(components, newComponent.name);

      newProperty.components[i] = newComponent;
      inheritComponents[component.name] = deepClone$1(component);
    } else {
      newComponent = deepClone$1(component);
      newComponent.all = component.all;
      newProperty.components[i] = newComponent;

      nonInheritComponents[component.name] = component;
    }
  }

  newProperty.important = components[Object.keys(components).pop()].important;

  nameMetadata = joinMetadata(nonInheritComponents, 1);
  shorthandToken[1].push(nameMetadata);

  restoreFromOptimizing$3([newProperty], restoreWithComponents$2);

  shorthandToken = shorthandToken.slice(0, 2);
  Array.prototype.push.apply(shorthandToken, newProperty.value);

  tokensSequence.unshift(shorthandToken);

  return [tokensSequence, newProperty, inheritComponents];
}

function inferComponentValue(components, propertyName) {
  var descriptor = configuration$4[propertyName];

  if ('oppositeTo' in descriptor) {
    return components[descriptor.oppositeTo].value;
  }
  return [[Token$h.PROPERTY_VALUE, descriptor.defaultValue]];
}

function joinMetadata(components, at) {
  var metadata = [];
  var component;
  var originalValue;
  var componentMetadata;
  var componentName;

  for (componentName in components) {
    component = components[componentName];
    originalValue = component.all[component.position];
    componentMetadata = originalValue[at][originalValue[at].length - 1];

    Array.prototype.push.apply(metadata, componentMetadata);
  }

  return metadata.sort(metadataSorter);
}

function metadataSorter(metadata1, metadata2) {
  var line1 = metadata1[0];
  var line2 = metadata2[0];
  var column1 = metadata1[1];
  var column2 = metadata2[1];

  if (line1 < line2) {
    return -1;
  } if (line1 === line2) {
    return column1 < column2 ? -1 : 1;
  }
  return 1;
}

function buildSequenceWithInheritShorthand(components, shorthandName, validator) {
  var tokensSequence = [];
  var inheritComponents = {};
  var nonInheritComponents = {};
  var descriptor = configuration$4[shorthandName];
  var shorthandToken = [
    Token$h.PROPERTY,
    [Token$h.PROPERTY_NAME, shorthandName],
    [Token$h.PROPERTY_VALUE, 'inherit']
  ];
  var newProperty = wrapSingle(shorthandToken);
  var component;
  var longhandToken;
  var nameMetadata;
  var valueMetadata;
  var i, l;

  populateComponents$2([newProperty], validator, []);

  for (i = 0, l = descriptor.components.length; i < l; i++) {
    component = components[descriptor.components[i]];

    if (hasInherit$1(component)) {
      inheritComponents[component.name] = component;
    } else {
      longhandToken = component.all[component.position].slice(0, 2);
      Array.prototype.push.apply(longhandToken, component.value);
      tokensSequence.push(longhandToken);

      nonInheritComponents[component.name] = deepClone$1(component);
    }
  }

  nameMetadata = joinMetadata(inheritComponents, 1);
  shorthandToken[1].push(nameMetadata);

  valueMetadata = joinMetadata(inheritComponents, 2);
  shorthandToken[2].push(valueMetadata);

  tokensSequence.unshift(shorthandToken);

  return [tokensSequence, newProperty, nonInheritComponents];
}

function findTokenIn(tokens, componentName) {
  var i, l;

  for (i = 0, l = tokens.length; i < l; i++) {
    if (tokens[i][1][1] == componentName) {
      return tokens[i];
    }
  }
}

function replaceWithShorthand(properties, candidateComponents, shorthandName, validator) {
  var descriptor = configuration$4[shorthandName];
  var nameMetadata;
  var valueMetadata;
  var newValuePlaceholder = [
    Token$h.PROPERTY,
    [Token$h.PROPERTY_NAME, shorthandName],
    [Token$h.PROPERTY_VALUE, descriptor.defaultValue]
  ];
  var all;
  var insertAt = inferInsertAtFrom(properties, candidateComponents, shorthandName);

  var newProperty = wrapSingle(newValuePlaceholder);
  newProperty.shorthand = true;
  newProperty.dirty = true;
  newProperty.multiplex = false;

  populateComponents$2([newProperty], validator, []);

  for (var i = 0, l = descriptor.components.length; i < l; i++) {
    var component = candidateComponents[descriptor.components[i]];

    newProperty.components[i] = deepClone$1(component);
    newProperty.important = component.important;
    newProperty.multiplex = newProperty.multiplex || component.multiplex;

    all = component.all;
  }

  for (var componentName in candidateComponents) {
    candidateComponents[componentName].unused = true;
  }

  nameMetadata = joinMetadata(candidateComponents, 1);
  newValuePlaceholder[1].push(nameMetadata);

  valueMetadata = joinMetadata(candidateComponents, 2);
  newValuePlaceholder[2].push(valueMetadata);

  newProperty.position = insertAt;
  newProperty.all = all;
  newProperty.all[insertAt] = newValuePlaceholder;

  properties.splice(insertAt, 1, newProperty);
}

function inferInsertAtFrom(properties, candidateComponents, shorthandName) {
  var candidateComponentNames = Object.keys(candidateComponents);
  var firstCandidatePosition = candidateComponents[candidateComponentNames[0]].position;
  var lastCandidatePosition = candidateComponents[candidateComponentNames[candidateComponentNames.length - 1]].position;

  if (shorthandName == 'border' && traversesVia(properties.slice(firstCandidatePosition, lastCandidatePosition), 'border-image')) {
    return firstCandidatePosition;
  }
  return lastCandidatePosition;
}

function traversesVia(properties, propertyName) {
  for (var i = properties.length - 1; i >= 0; i--) {
    if (properties[i].name == propertyName) {
      return true;
    }
  }

  return false;
}

var mergeIntoShorthands_1 = mergeIntoShorthands$1;

function hasUnset$1(property) {
  for (var i = property.value.length - 1; i >= 0; i--) {
    if (property.value[i][1] == 'unset') { return true; }
  }

  return false;
}

var hasUnset_1 = hasUnset$1;

var configuration$3 = configuration_1;

function findComponentIn$1(shorthand, longhand) {
  var comparator = nameComparator(longhand);

  return findInDirectComponents(shorthand, comparator) || findInSubComponents(shorthand, comparator);
}

function nameComparator(to) {
  return function(property) {
    return to.name === property.name;
  };
}

function findInDirectComponents(shorthand, comparator) {
  return shorthand.components.filter(comparator)[0];
}

function findInSubComponents(shorthand, comparator) {
  var shorthandComponent;
  var longhandMatch;
  var i, l;

  if (!configuration$3[shorthand.name].shorthandComponents) {
    return;
  }

  for (i = 0, l = shorthand.components.length; i < l; i++) {
    shorthandComponent = shorthand.components[i];
    longhandMatch = findInDirectComponents(shorthandComponent, comparator);

    if (longhandMatch) {
      return longhandMatch;
    }
  }
}

var findComponentIn_1 = findComponentIn$1;

var configuration$2 = configuration_1;

function isComponentOf$1(property1, property2, shallow) {
  return isDirectComponentOf(property1, property2)
    || !shallow && !!configuration$2[property1.name].shorthandComponents && isSubComponentOf(property1, property2);
}

function isDirectComponentOf(property1, property2) {
  var descriptor = configuration$2[property1.name];

  return 'components' in descriptor && descriptor.components.indexOf(property2.name) > -1;
}

function isSubComponentOf(property1, property2) {
  return property1
    .components
    .some(function(component) {
      return isDirectComponentOf(component, property2);
    });
}

var isComponentOf_1 = isComponentOf$1;

var Marker$4 = marker;

function isMergeableShorthand$1(shorthand) {
  if (shorthand.name != 'font') {
    return true;
  }

  return shorthand.value[0][1].indexOf(Marker$4.INTERNAL) == -1;
}

var isMergeableShorthand_1 = isMergeableShorthand$1;

var configuration$1 = configuration_1;

function overridesNonComponentShorthand$1(property1, property2) {
  return property1.name in configuration$1
    && 'overridesShorthands' in configuration$1[property1.name]
    && configuration$1[property1.name].overridesShorthands.indexOf(property2.name) > -1;
}

var overridesNonComponentShorthand_1 = overridesNonComponentShorthand$1;

var hasInherit = hasInherit_1;
var hasUnset = hasUnset_1;
var everyValuesPair = everyValuesPair_1;
var findComponentIn = findComponentIn_1;
var isComponentOf = isComponentOf_1;
var isMergeableShorthand = isMergeableShorthand_1;
var overridesNonComponentShorthand = overridesNonComponentShorthand_1;
var sameVendorPrefixesIn = vendorPrefixes.same;

var configuration = configuration_1;
var deepClone = clone.deep;
var restoreWithComponents$1 = restoreWithComponents_1;
var shallowClone = clone.shallow;

var restoreFromOptimizing$2 = restoreFromOptimizing_1;

var Token$g = token;
var Marker$3 = marker;

var serializeProperty = oneTime.property;

function sameValue(_validator, value1, value2) {
  return value1 === value2;
}

function wouldBreakCompatibility(property, validator) {
  for (var i = 0; i < property.components.length; i++) {
    var component = property.components[i];
    var descriptor = configuration[component.name];
    var canOverride = descriptor && descriptor.canOverride || sameValue;

    var _component = shallowClone(component);
    _component.value = [[Token$g.PROPERTY_VALUE, descriptor.defaultValue]];

    if (!everyValuesPair(canOverride.bind(null, validator), _component, component)) {
      return true;
    }
  }

  return false;
}

function overrideIntoMultiplex(property, by) {
  by.unused = true;

  turnIntoMultiplex(by, multiplexSize(property));
  property.value = by.value;
}

function overrideByMultiplex(property, by) {
  by.unused = true;
  property.multiplex = true;
  property.value = by.value;
}

function overrideSimple(property, by) {
  by.unused = true;
  property.value = by.value;
}

function override$2(property, by) {
  if (by.multiplex) {
    overrideByMultiplex(property, by);
  } else if (property.multiplex) {
    overrideIntoMultiplex(property, by);
  } else {
    overrideSimple(property, by);
  }
}

function overrideShorthand(property, by) {
  by.unused = true;

  for (var i = 0, l = property.components.length; i < l; i++) {
    override$2(property.components[i], by.components[i]);
  }
}

function turnIntoMultiplex(property, size) {
  property.multiplex = true;

  if (configuration[property.name].shorthand) {
    turnShorthandValueIntoMultiplex(property, size);
  } else {
    turnLonghandValueIntoMultiplex(property, size);
  }
}

function turnShorthandValueIntoMultiplex(property, size) {
  var component;
  var i, l;

  for (i = 0, l = property.components.length; i < l; i++) {
    component = property.components[i];

    if (!component.multiplex) {
      turnLonghandValueIntoMultiplex(component, size);
    }
  }
}

function turnLonghandValueIntoMultiplex(property, size) {
  var descriptor = configuration[property.name];
  var withRealValue = descriptor.intoMultiplexMode == 'real';
  var withValue = descriptor.intoMultiplexMode == 'real'
    ? property.value.slice(0)
    : (descriptor.intoMultiplexMode == 'placeholder' ? descriptor.placeholderValue : descriptor.defaultValue);
  var i = multiplexSize(property);
  var j;
  var m = withValue.length;

  for (; i < size; i++) {
    property.value.push([Token$g.PROPERTY_VALUE, Marker$3.COMMA]);

    if (Array.isArray(withValue)) {
      for (j = 0; j < m; j++) {
        property.value.push(withRealValue ? withValue[j] : [Token$g.PROPERTY_VALUE, withValue[j]]);
      }
    } else {
      property.value.push(withRealValue ? withValue : [Token$g.PROPERTY_VALUE, withValue]);
    }
  }
}

function multiplexSize(component) {
  var size = 0;

  for (var i = 0, l = component.value.length; i < l; i++) {
    if (component.value[i][1] == Marker$3.COMMA) { size++; }
  }

  return size + 1;
}

function lengthOf(property) {
  var fakeAsArray = [
    Token$g.PROPERTY,
    [Token$g.PROPERTY_NAME, property.name]
  ].concat(property.value);
  return serializeProperty([fakeAsArray], 0).length;
}

function moreSameShorthands(properties, startAt, name) {
  // Since we run the main loop in `compactOverrides` backwards, at this point some
  // properties may not be marked as unused.
  // We should consider reverting the order if possible
  var count = 0;

  for (var i = startAt; i >= 0; i--) {
    if (properties[i].name == name && !properties[i].unused) { count++; }
    if (count > 1) { break; }
  }

  return count > 1;
}

function overridingFunction(shorthand, validator) {
  for (var i = 0, l = shorthand.components.length; i < l; i++) {
    if (!anyValue(validator.isUrl, shorthand.components[i])
      && anyValue(validator.isFunction, shorthand.components[i])) { return true; }
  }

  return false;
}

function anyValue(fn, property) {
  for (var i = 0, l = property.value.length; i < l; i++) {
    if (property.value[i][1] == Marker$3.COMMA) { continue; }

    if (fn(property.value[i][1])) { return true; }
  }

  return false;
}

function wouldResultInLongerValue(left, right) {
  if (!left.multiplex && !right.multiplex || left.multiplex && right.multiplex) { return false; }

  var multiplex = left.multiplex ? left : right;
  var simple = left.multiplex ? right : left;
  var component;

  var multiplexClone = deepClone(multiplex);
  restoreFromOptimizing$2([multiplexClone], restoreWithComponents$1);

  var simpleClone = deepClone(simple);
  restoreFromOptimizing$2([simpleClone], restoreWithComponents$1);

  var lengthBefore = lengthOf(multiplexClone) + 1 + lengthOf(simpleClone);

  if (left.multiplex) {
    component = findComponentIn(multiplexClone, simpleClone);
    overrideIntoMultiplex(component, simpleClone);
  } else {
    component = findComponentIn(simpleClone, multiplexClone);
    turnIntoMultiplex(simpleClone, multiplexSize(multiplexClone));
    overrideByMultiplex(component, multiplexClone);
  }

  restoreFromOptimizing$2([simpleClone], restoreWithComponents$1);

  var lengthAfter = lengthOf(simpleClone);

  return lengthBefore <= lengthAfter;
}

function isCompactable(property) {
  return property.name in configuration;
}

function noneOverrideHack(left, right) {
  return !left.multiplex
    && (left.name == 'background' || left.name == 'background-image')
    && right.multiplex
    && (right.name == 'background' || right.name == 'background-image')
    && anyLayerIsNone(right.value);
}

function anyLayerIsNone(values) {
  var layers = intoLayers(values);

  for (var i = 0, l = layers.length; i < l; i++) {
    if (layers[i].length == 1 && layers[i][0][1] == 'none') { return true; }
  }

  return false;
}

function intoLayers(values) {
  var layers = [];

  for (var i = 0, layer = [], l = values.length; i < l; i++) {
    var value = values[i];
    if (value[1] == Marker$3.COMMA) {
      layers.push(layer);
      layer = [];
    } else {
      layer.push(value);
    }
  }

  layers.push(layer);
  return layers;
}

function overrideProperties$1(properties, withMerging, compatibility, validator) {
  var mayOverride, right, left, component;
  var overriddenComponents;
  var overriddenComponent;
  var overridingComponent;
  var overridable;
  var i, j, k;

  propertyLoop:
  for (i = properties.length - 1; i >= 0; i--) {
    right = properties[i];

    if (!isCompactable(right)) { continue; }

    if (right.block) { continue; }

    mayOverride = configuration[right.name].canOverride || sameValue;

    traverseLoop:
    for (j = i - 1; j >= 0; j--) {
      left = properties[j];

      if (!isCompactable(left)) { continue; }

      if (left.block) { continue; }

      if (left.dynamic || right.dynamic) { continue; }

      if (left.unused || right.unused) { continue; }

      if (left.hack && !right.hack && !right.important || !left.hack && !left.important && right.hack) { continue; }

      if (left.important == right.important && left.hack[0] != right.hack[0]) { continue; }

      if (left.important == right.important
        && (left.hack[0] != right.hack[0] || (left.hack[1] && left.hack[1] != right.hack[1]))) { continue; }

      if (hasInherit(right)) { continue; }

      if (noneOverrideHack(left, right)) { continue; }

      if (right.shorthand && isComponentOf(right, left)) {
        // maybe `left` can be overridden by `right` which is a shorthand?
        if (!right.important && left.important) { continue; }

        if (!sameVendorPrefixesIn([left], right.components)) { continue; }

        if (!anyValue(validator.isFunction, left) && overridingFunction(right, validator)) { continue; }

        if (!isMergeableShorthand(right)) {
          left.unused = true;
          continue;
        }

        component = findComponentIn(right, left);
        mayOverride = configuration[left.name].canOverride || sameValue;
        if (everyValuesPair(mayOverride.bind(null, validator), left, component)) {
          left.unused = true;
        }
      } else if (right.shorthand && overridesNonComponentShorthand(right, left)) {
        // `right` is a shorthand while `left` can be overriden by it, think `border` and `border-top`
        if (!right.important && left.important) {
          continue;
        }

        if (!sameVendorPrefixesIn([left], right.components)) {
          continue;
        }

        if (!anyValue(validator.isFunction, left) && overridingFunction(right, validator)) {
          continue;
        }

        overriddenComponents = left.shorthand
          ? left.components
          : [left];

        for (k = overriddenComponents.length - 1; k >= 0; k--) {
          overriddenComponent = overriddenComponents[k];
          overridingComponent = findComponentIn(right, overriddenComponent);
          mayOverride = configuration[overriddenComponent.name].canOverride || sameValue;

          if (!everyValuesPair(mayOverride.bind(null, validator), left, overridingComponent)) {
            continue traverseLoop;
          }
        }

        left.unused = true;
      } else if (withMerging && left.shorthand && !right.shorthand && isComponentOf(left, right, true)) {
        // maybe `right` can be pulled into `left` which is a shorthand?
        if (right.important && !left.important) { continue; }

        if (!right.important && left.important) {
          right.unused = true;
          continue;
        }

        // Pending more clever algorithm in #527
        if (moreSameShorthands(properties, i - 1, left.name)) { continue; }

        if (overridingFunction(left, validator)) { continue; }

        if (!isMergeableShorthand(left)) { continue; }

        if (hasUnset(left) || hasUnset(right)) { continue; }

        component = findComponentIn(left, right);
        if (everyValuesPair(mayOverride.bind(null, validator), component, right)) {
          var disabledBackgroundMerging = !compatibility.properties.backgroundClipMerging && component.name.indexOf('background-clip') > -1
            || !compatibility.properties.backgroundOriginMerging && component.name.indexOf('background-origin') > -1
            || !compatibility.properties.backgroundSizeMerging && component.name.indexOf('background-size') > -1;
          var nonMergeableValue = configuration[right.name].nonMergeableValue === right.value[0][1];

          if (disabledBackgroundMerging || nonMergeableValue) { continue; }

          if (!compatibility.properties.merging && wouldBreakCompatibility(left, validator)) { continue; }

          if (component.value[0][1] != right.value[0][1] && (hasInherit(left) || hasInherit(right))) { continue; }

          if (wouldResultInLongerValue(left, right)) { continue; }

          if (!left.multiplex && right.multiplex) { turnIntoMultiplex(left, multiplexSize(right)); }

          override$2(component, right);
          left.dirty = true;
        }
      } else if (withMerging && left.shorthand && right.shorthand && left.name == right.name) {
        // merge if all components can be merged

        if (!left.multiplex && right.multiplex) { continue; }

        if (!right.important && left.important) {
          right.unused = true;
          continue propertyLoop;
        }

        if (right.important && !left.important) {
          left.unused = true;
          continue;
        }

        if (!isMergeableShorthand(right)) {
          left.unused = true;
          continue;
        }

        for (k = left.components.length - 1; k >= 0; k--) {
          var leftComponent = left.components[k];
          var rightComponent = right.components[k];

          mayOverride = configuration[leftComponent.name].canOverride || sameValue;
          if (!everyValuesPair(mayOverride.bind(null, validator), leftComponent, rightComponent)) {
            continue propertyLoop;
          }
        }

        overrideShorthand(left, right);
        left.dirty = true;
      } else if (withMerging && left.shorthand && right.shorthand && isComponentOf(left, right)) {
        // border is a shorthand but any of its components is a shorthand too

        if (!left.important && right.important) { continue; }

        component = findComponentIn(left, right);
        mayOverride = configuration[right.name].canOverride || sameValue;
        if (!everyValuesPair(mayOverride.bind(null, validator), component, right)) { continue; }

        if (left.important && !right.important) {
          right.unused = true;
          continue;
        }

        var rightRestored = configuration[right.name].restore(right, configuration);
        if (rightRestored.length > 1) { continue; }

        component = findComponentIn(left, right);
        override$2(component, right);
        right.dirty = true;
      } else if (left.name == right.name) {
        // two non-shorthands should be merged based on understandability
        overridable = true;

        if (right.shorthand) {
          for (k = right.components.length - 1; k >= 0 && overridable; k--) {
            overriddenComponent = left.components[k];
            overridingComponent = right.components[k];
            mayOverride = configuration[overridingComponent.name].canOverride || sameValue;

            overridable = everyValuesPair(mayOverride.bind(null, validator), overriddenComponent, overridingComponent);
          }
        } else {
          mayOverride = configuration[right.name].canOverride || sameValue;
          overridable = everyValuesPair(mayOverride.bind(null, validator), left, right);
        }

        if (left.important && !right.important && overridable) {
          right.unused = true;
          continue;
        }

        if (!left.important && right.important && overridable) {
          left.unused = true;
          continue;
        }

        if (!overridable) {
          continue;
        }

        left.unused = true;
      }
    }
  }
}

var overrideProperties_1 = overrideProperties$1;

var mergeIntoShorthands = mergeIntoShorthands_1;
var overrideProperties = overrideProperties_1;
var populateComponents$1 = populateComponents_1;

var restoreWithComponents = restoreWithComponents_1;

var wrapForOptimizing$1 = wrapForOptimizing$3.all;
var removeUnused = removeUnused_1;
var restoreFromOptimizing$1 = restoreFromOptimizing_1;

var OptimizationLevel$5 = optimizationLevel.OptimizationLevel;

function optimizeProperties$4(properties, withOverriding, withMerging, context) {
  var levelOptions = context.options.level[OptimizationLevel$5.Two];
  var _properties = wrapForOptimizing$1(properties, levelOptions.skipProperties);
  var _property;
  var i, l;

  populateComponents$1(_properties, context.validator, context.warnings);

  for (i = 0, l = _properties.length; i < l; i++) {
    _property = _properties[i];
    if (_property.block) {
      optimizeProperties$4(_property.value[0][1], withOverriding, withMerging, context);
    }
  }

  if (withMerging && levelOptions.mergeIntoShorthands) {
    mergeIntoShorthands(_properties, context.validator);
  }

  if (withOverriding && levelOptions.overrideProperties) {
    overrideProperties(_properties, withMerging, context.options.compatibility, context.validator);
  }

  restoreFromOptimizing$1(_properties, restoreWithComponents);
  removeUnused(_properties);
}

var optimize$2 = optimizeProperties$4;

var isMergeable$3 = isMergeable_1;

var optimizeProperties$3 = optimize$2;

var sortSelectors$1 = sortSelectors_1;
var tidyRules$1 = tidyRules_1;

var OptimizationLevel$4 = optimizationLevel.OptimizationLevel;

var serializeBody$4 = oneTime.body;
var serializeRules$8 = oneTime.rules;

var Token$f = token;

function mergeAdjacent$1(tokens, context) {
  var lastToken = [null, [], []];
  var options = context.options;
  var adjacentSpace = options.compatibility.selectors.adjacentSpace;
  var selectorsSortingMethod = options.level[OptimizationLevel$4.One].selectorsSortingMethod;
  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
  var mergeLimit = options.compatibility.selectors.mergeLimit;
  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;

  for (var i = 0, l = tokens.length; i < l; i++) {
    var token = tokens[i];

    if (token[0] != Token$f.RULE) {
      lastToken = [null, [], []];
      continue;
    }

    if (lastToken[0] == Token$f.RULE && serializeRules$8(token[1]) == serializeRules$8(lastToken[1])) {
      Array.prototype.push.apply(lastToken[2], token[2]);
      optimizeProperties$3(lastToken[2], true, true, context);
      token[2] = [];
    } else if (lastToken[0] == Token$f.RULE && serializeBody$4(token[2]) == serializeBody$4(lastToken[2])
        && isMergeable$3(serializeRules$8(token[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging)
        && isMergeable$3(
          serializeRules$8(lastToken[1]),
          mergeablePseudoClasses,
          mergeablePseudoElements,
          multiplePseudoMerging
        )
        && lastToken[1].length < mergeLimit) {
      lastToken[1] = tidyRules$1(lastToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);
      lastToken[1] = lastToken.length > 1 ? sortSelectors$1(lastToken[1], selectorsSortingMethod) : lastToken[1];
      token[2] = [];
    } else {
      lastToken = token;
    }
  }
}

var mergeAdjacent_1 = mergeAdjacent$1;

var MODIFIER_PATTERN = /--.+$/;

function rulesOverlap$2(rule1, rule2, bemMode) {
  var scope1;
  var scope2;
  var i, l;
  var j, m;

  for (i = 0, l = rule1.length; i < l; i++) {
    scope1 = rule1[i][1];

    for (j = 0, m = rule2.length; j < m; j++) {
      scope2 = rule2[j][1];

      if (scope1 == scope2) {
        return true;
      }

      if (bemMode && withoutModifiers(scope1) == withoutModifiers(scope2)) {
        return true;
      }
    }
  }

  return false;
}

function withoutModifiers(scope) {
  return scope.replace(MODIFIER_PATTERN, '');
}

var rulesOverlap_1 = rulesOverlap$2;

var Marker$2 = marker;

var Selector = {
  ADJACENT_SIBLING: '+',
  DESCENDANT: '>',
  DOT: '.',
  HASH: '#',
  NON_ADJACENT_SIBLING: '~',
  PSEUDO: ':'
};

var LETTER_PATTERN = /[a-zA-Z]/;
var NOT_PREFIX = ':not(';
var SEPARATOR_PATTERN = /[\s,(>~+]/;

function specificity$1(selector) {
  var result = [0, 0, 0];
  var character;
  var isEscaped;
  var isSingleQuoted;
  var isDoubleQuoted;
  var roundBracketLevel = 0;
  var couldIntroduceNewTypeSelector;
  var withinNotPseudoClass = false;
  var wasPseudoClass = false;
  var i, l;

  for (i = 0, l = selector.length; i < l; i++) {
    character = selector[i];

    if (isEscaped) ; else if (character == Marker$2.SINGLE_QUOTE && !isDoubleQuoted && !isSingleQuoted) {
      isSingleQuoted = true;
    } else if (character == Marker$2.SINGLE_QUOTE && !isDoubleQuoted && isSingleQuoted) {
      isSingleQuoted = false;
    } else if (character == Marker$2.DOUBLE_QUOTE && !isDoubleQuoted && !isSingleQuoted) {
      isDoubleQuoted = true;
    } else if (character == Marker$2.DOUBLE_QUOTE && isDoubleQuoted && !isSingleQuoted) {
      isDoubleQuoted = false;
    } else if (isSingleQuoted || isDoubleQuoted) {
      continue;
    } else if (roundBracketLevel > 0 && !withinNotPseudoClass) ; else if (character == Marker$2.OPEN_ROUND_BRACKET) {
      roundBracketLevel++;
    } else if (character == Marker$2.CLOSE_ROUND_BRACKET && roundBracketLevel == 1) {
      roundBracketLevel--;
      withinNotPseudoClass = false;
    } else if (character == Marker$2.CLOSE_ROUND_BRACKET) {
      roundBracketLevel--;
    } else if (character == Selector.HASH) {
      result[0]++;
    } else if (character == Selector.DOT || character == Marker$2.OPEN_SQUARE_BRACKET) {
      result[1]++;
    } else if (character == Selector.PSEUDO && !wasPseudoClass && !isNotPseudoClass(selector, i)) {
      result[1]++;
      withinNotPseudoClass = false;
    } else if (character == Selector.PSEUDO) {
      withinNotPseudoClass = true;
    } else if ((i === 0 || couldIntroduceNewTypeSelector) && LETTER_PATTERN.test(character)) {
      result[2]++;
    }

    isEscaped = character == Marker$2.BACK_SLASH;
    wasPseudoClass = character == Selector.PSEUDO;
    couldIntroduceNewTypeSelector = !isEscaped && SEPARATOR_PATTERN.test(character);
  }

  return result;
}

function isNotPseudoClass(selector, index) {
  return selector.indexOf(NOT_PREFIX, index) === index;
}

var specificity_1 = specificity$1;

var specificity = specificity_1;

function specificitiesOverlap$1(selector1, selector2, cache) {
  var specificity1;
  var specificity2;
  var i, l;
  var j, m;

  for (i = 0, l = selector1.length; i < l; i++) {
    specificity1 = findSpecificity(selector1[i][1], cache);

    for (j = 0, m = selector2.length; j < m; j++) {
      specificity2 = findSpecificity(selector2[j][1], cache);

      if (specificity1[0] === specificity2[0]
        && specificity1[1] === specificity2[1]
        && specificity1[2] === specificity2[2]) {
        return true;
      }
    }
  }

  return false;
}

function findSpecificity(selector, cache) {
  var value;

  if (!(selector in cache)) {
    cache[selector] = value = specificity(selector);
  }

  return value || cache[selector];
}

var specificitiesOverlap_1 = specificitiesOverlap$1;

// TODO: it'd be great to merge it with the other canReorder functionality

var rulesOverlap$1 = rulesOverlap_1;
var specificitiesOverlap = specificitiesOverlap_1;

var FLEX_PROPERTIES = /align-items|box-align|box-pack|flex|justify/;
var BORDER_PROPERTIES = /^border-(top|right|bottom|left|color|style|width|radius)/;

function canReorder$2(left, right, cache) {
  for (var i = right.length - 1; i >= 0; i--) {
    for (var j = left.length - 1; j >= 0; j--) {
      if (!canReorderSingle$2(left[j], right[i], cache)) { return false; }
    }
  }

  return true;
}

function canReorderSingle$2(left, right, cache) {
  var leftName = left[0];
  var leftValue = left[1];
  var leftNameRoot = left[2];
  var leftSelector = left[5];
  var leftInSpecificSelector = left[6];
  var rightName = right[0];
  var rightValue = right[1];
  var rightNameRoot = right[2];
  var rightSelector = right[5];
  var rightInSpecificSelector = right[6];

  if (leftName == 'font' && rightName == 'line-height' || rightName == 'font' && leftName == 'line-height') { return false; }
  if (FLEX_PROPERTIES.test(leftName) && FLEX_PROPERTIES.test(rightName)) { return false; }
  if (leftNameRoot == rightNameRoot
    && unprefixed(leftName) == unprefixed(rightName)
    && (vendorPrefixed(leftName) ^ vendorPrefixed(rightName))) { return false; }
  if (leftNameRoot == 'border' && BORDER_PROPERTIES.test(rightNameRoot) && (leftName == 'border' || leftName == rightNameRoot || (leftValue != rightValue && sameBorderComponent(leftName, rightName)))) { return false; }
  if (rightNameRoot == 'border' && BORDER_PROPERTIES.test(leftNameRoot) && (rightName == 'border' || rightName == leftNameRoot || (leftValue != rightValue && sameBorderComponent(leftName, rightName)))) { return false; }
  if (leftNameRoot == 'border' && rightNameRoot == 'border' && leftName != rightName && (isSideBorder(leftName) && isStyleBorder(rightName) || isStyleBorder(leftName) && isSideBorder(rightName))) { return false; }
  if (leftNameRoot != rightNameRoot) { return true; }
  if (leftName == rightName
    && leftNameRoot == rightNameRoot
    && (leftValue == rightValue || withDifferentVendorPrefix(leftValue, rightValue))) { return true; }
  if (leftName != rightName
    && leftNameRoot == rightNameRoot
    && leftName != leftNameRoot
    && rightName != rightNameRoot) { return true; }
  if (leftName != rightName
    && leftNameRoot == rightNameRoot
    && leftValue == rightValue) { return true; }
  if (rightInSpecificSelector
    && leftInSpecificSelector
    && !inheritable(leftNameRoot)
    && !inheritable(rightNameRoot)
    && !rulesOverlap$1(rightSelector, leftSelector, false)) { return true; }
  if (!specificitiesOverlap(leftSelector, rightSelector, cache)) { return true; }

  return false;
}

function vendorPrefixed(name) {
  return /^-(?:moz|webkit|ms|o)-/.test(name);
}

function unprefixed(name) {
  return name.replace(/^-(?:moz|webkit|ms|o)-/, '');
}

function sameBorderComponent(name1, name2) {
  return name1.split('-').pop() == name2.split('-').pop();
}

function isSideBorder(name) {
  return name == 'border-top' || name == 'border-right' || name == 'border-bottom' || name == 'border-left';
}

function isStyleBorder(name) {
  return name == 'border-color' || name == 'border-style' || name == 'border-width';
}

function withDifferentVendorPrefix(value1, value2) {
  return vendorPrefixed(value1) && vendorPrefixed(value2) && value1.split('-')[1] != value2.split('-')[2];
}

function inheritable(name) {
  // According to http://www.w3.org/TR/CSS21/propidx.html
  // Others will be catched by other, preceeding rules
  return name == 'font' || name == 'line-height' || name == 'list-style';
}

var reorderable = {
  canReorder: canReorder$2,
  canReorderSingle: canReorderSingle$2
};

// This extractor is used in level 2 optimizations
// IMPORTANT: Mind Token class and this code is not related!
// Properties will be tokenized in one step, see #429

var Token$e = token;
var serializeRules$7 = oneTime.rules;
var serializeValue = oneTime.value;

function extractProperties$3(token) {
  var properties = [];
  var inSpecificSelector;
  var property;
  var name;
  var value;
  var i, l;

  if (token[0] == Token$e.RULE) {
    inSpecificSelector = !/[.+>~]/.test(serializeRules$7(token[1]));

    for (i = 0, l = token[2].length; i < l; i++) {
      property = token[2][i];

      if (property[0] != Token$e.PROPERTY) { continue; }

      name = property[1][1];
      if (name.length === 0) { continue; }

      value = serializeValue(property, i);

      properties.push([
        name,
        value,
        findNameRoot(name),
        token[2][i],
        name + ':' + value,
        token[1],
        inSpecificSelector
      ]);
    }
  } else if (token[0] == Token$e.NESTED_BLOCK) {
    for (i = 0, l = token[2].length; i < l; i++) {
      properties = properties.concat(extractProperties$3(token[2][i]));
    }
  }

  return properties;
}

function findNameRoot(name) {
  if (name == 'list-style') { return name; }
  if (name.indexOf('-radius') > 0) { return 'border-radius'; }
  if (name == 'border-collapse' || name == 'border-spacing' || name == 'border-image') { return name; }
  if (name.indexOf('border-') === 0 && /^border-\w+-\w+$/.test(name)) { return name.match(/border-\w+/)[0]; }
  if (name.indexOf('border-') === 0 && /^border-\w+$/.test(name)) { return 'border'; }
  if (name.indexOf('text-') === 0) { return name; }
  if (name == '-chrome-') { return name; }

  return name.replace(/^-\w+-/, '').match(/([a-zA-Z]+)/)[0].toLowerCase();
}

var extractProperties_1 = extractProperties$3;

var canReorder$1 = reorderable.canReorder;
var canReorderSingle$1 = reorderable.canReorderSingle;
var extractProperties$2 = extractProperties_1;
var rulesOverlap = rulesOverlap_1;

var serializeRules$6 = oneTime.rules;
var OptimizationLevel$3 = optimizationLevel.OptimizationLevel;
var Token$d = token;

function mergeMediaQueries$1(tokens, context) {
  var mergeSemantically = context.options.level[OptimizationLevel$3.Two].mergeSemantically;
  var specificityCache = context.cache.specificity;
  var candidates = {};
  var reduced = [];

  for (var i = tokens.length - 1; i >= 0; i--) {
    var token = tokens[i];
    if (token[0] != Token$d.NESTED_BLOCK) {
      continue;
    }

    var key = serializeRules$6(token[1]);
    var candidate = candidates[key];
    if (!candidate) {
      candidate = [];
      candidates[key] = candidate;
    }

    candidate.push(i);
  }

  for (var name in candidates) {
    var positions = candidates[name];

    positionLoop:
    for (var j = positions.length - 1; j > 0; j--) {
      var positionOne = positions[j];
      var tokenOne = tokens[positionOne];
      var positionTwo = positions[j - 1];
      var tokenTwo = tokens[positionTwo];

      directionLoop:
      for (var direction = 1; direction >= -1; direction -= 2) {
        var topToBottom = direction == 1;
        var from = topToBottom ? positionOne + 1 : positionTwo - 1;
        var to = topToBottom ? positionTwo : positionOne;
        var delta = topToBottom ? 1 : -1;
        var source = topToBottom ? tokenOne : tokenTwo;
        var target = topToBottom ? tokenTwo : tokenOne;
        var movedProperties = extractProperties$2(source);

        while (from != to) {
          var traversedProperties = extractProperties$2(tokens[from]);
          from += delta;

          if (mergeSemantically
            && allSameRulePropertiesCanBeReordered(movedProperties, traversedProperties, specificityCache)
          ) {
            continue;
          }

          if (!canReorder$1(movedProperties, traversedProperties, specificityCache)) { continue directionLoop; }
        }

        target[2] = topToBottom
          ? source[2].concat(target[2])
          : target[2].concat(source[2]);
        source[2] = [];

        reduced.push(target);
        continue positionLoop;
      }
    }
  }

  return reduced;
}

function allSameRulePropertiesCanBeReordered(movedProperties, traversedProperties, specificityCache) {
  var movedProperty;
  var movedRule;
  var traversedProperty;
  var traversedRule;
  var i, l;
  var j, m;

  for (i = 0, l = movedProperties.length; i < l; i++) {
    movedProperty = movedProperties[i];
    movedRule = movedProperty[5];

    for (j = 0, m = traversedProperties.length; j < m; j++) {
      traversedProperty = traversedProperties[j];
      traversedRule = traversedProperty[5];

      if (rulesOverlap(movedRule, traversedRule, true)
        && !canReorderSingle$1(movedProperty, traversedProperty, specificityCache)) {
        return false;
      }
    }
  }

  return true;
}

var mergeMediaQueries_1 = mergeMediaQueries$1;

var isMergeable$2 = isMergeable_1;

var sortSelectors = sortSelectors_1;
var tidyRules = tidyRules_1;

var OptimizationLevel$2 = optimizationLevel.OptimizationLevel;

var serializeBody$3 = oneTime.body;
var serializeRules$5 = oneTime.rules;

var Token$c = token;

function unsafeSelector(value) {
  return /\.|\*| :/.test(value);
}

function isBemElement(token) {
  var asString = serializeRules$5(token[1]);
  return asString.indexOf('__') > -1 || asString.indexOf('--') > -1;
}

function withoutModifier(selector) {
  return selector.replace(/--[^ ,>+~:]+/g, '');
}

function removeAnyUnsafeElements(left, candidates) {
  var leftSelector = withoutModifier(serializeRules$5(left[1]));

  for (var body in candidates) {
    var right = candidates[body];
    var rightSelector = withoutModifier(serializeRules$5(right[1]));

    if (rightSelector.indexOf(leftSelector) > -1 || leftSelector.indexOf(rightSelector) > -1) {
      delete candidates[body];
    }
  }
}

function mergeNonAdjacentByBody$1(tokens, context) {
  var options = context.options;
  var mergeSemantically = options.level[OptimizationLevel$2.Two].mergeSemantically;
  var adjacentSpace = options.compatibility.selectors.adjacentSpace;
  var selectorsSortingMethod = options.level[OptimizationLevel$2.One].selectorsSortingMethod;
  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
  var candidates = {};

  for (var i = tokens.length - 1; i >= 0; i--) {
    var token = tokens[i];
    if (token[0] != Token$c.RULE) { continue; }

    if (token[2].length > 0 && (!mergeSemantically && unsafeSelector(serializeRules$5(token[1])))) { candidates = {}; }

    if (token[2].length > 0 && mergeSemantically && isBemElement(token)) { removeAnyUnsafeElements(token, candidates); }

    var candidateBody = serializeBody$3(token[2]);
    var oldToken = candidates[candidateBody];
    if (oldToken
        && isMergeable$2(
          serializeRules$5(token[1]),
          mergeablePseudoClasses,
          mergeablePseudoElements,
          multiplePseudoMerging
        )
        && isMergeable$2(
          serializeRules$5(oldToken[1]),
          mergeablePseudoClasses,
          mergeablePseudoElements,
          multiplePseudoMerging
        )
    ) {
      if (token[2].length > 0) {
        token[1] = tidyRules(oldToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);
        token[1] = token[1].length > 1 ? sortSelectors(token[1], selectorsSortingMethod) : token[1];
      } else {
        token[1] = oldToken[1].concat(token[1]);
      }

      oldToken[2] = [];
      candidates[candidateBody] = null;
    }

    candidates[serializeBody$3(token[2])] = token;
  }
}

var mergeNonAdjacentByBody_1 = mergeNonAdjacentByBody$1;

var canReorder = reorderable.canReorder;
var extractProperties$1 = extractProperties_1;

var optimizeProperties$2 = optimize$2;

var serializeRules$4 = oneTime.rules;

var Token$b = token;

function mergeNonAdjacentBySelector$1(tokens, context) {
  var specificityCache = context.cache.specificity;
  var allSelectors = {};
  var repeatedSelectors = [];
  var i;

  for (i = tokens.length - 1; i >= 0; i--) {
    if (tokens[i][0] != Token$b.RULE) { continue; }
    if (tokens[i][2].length === 0) { continue; }

    var selector = serializeRules$4(tokens[i][1]);
    allSelectors[selector] = [i].concat(allSelectors[selector] || []);

    if (allSelectors[selector].length == 2) { repeatedSelectors.push(selector); }
  }

  for (i = repeatedSelectors.length - 1; i >= 0; i--) {
    var positions = allSelectors[repeatedSelectors[i]];

    selectorIterator:
    for (var j = positions.length - 1; j > 0; j--) {
      var positionOne = positions[j - 1];
      var tokenOne = tokens[positionOne];
      var positionTwo = positions[j];
      var tokenTwo = tokens[positionTwo];

      directionIterator:
      for (var direction = 1; direction >= -1; direction -= 2) {
        var topToBottom = direction == 1;
        var from = topToBottom ? positionOne + 1 : positionTwo - 1;
        var to = topToBottom ? positionTwo : positionOne;
        var delta = topToBottom ? 1 : -1;
        var moved = topToBottom ? tokenOne : tokenTwo;
        var target = topToBottom ? tokenTwo : tokenOne;
        var movedProperties = extractProperties$1(moved);

        while (from != to) {
          var traversedProperties = extractProperties$1(tokens[from]);
          from += delta;

          // traversed then moved as we move selectors towards the start
          var reorderable = topToBottom
            ? canReorder(movedProperties, traversedProperties, specificityCache)
            : canReorder(traversedProperties, movedProperties, specificityCache);

          if (!reorderable && !topToBottom) { continue selectorIterator; }
          if (!reorderable && topToBottom) { continue directionIterator; }
        }

        if (topToBottom) {
          Array.prototype.push.apply(moved[2], target[2]);
          target[2] = moved[2];
        } else {
          Array.prototype.push.apply(target[2], moved[2]);
        }

        optimizeProperties$2(target[2], true, true, context);
        moved[2] = [];
      }
    }
  }
}

var mergeNonAdjacentBySelector_1 = mergeNonAdjacentBySelector$1;

function cloneArray$2(array) {
  var cloned = array.slice(0);

  for (var i = 0, l = cloned.length; i < l; i++) {
    if (Array.isArray(cloned[i])) { cloned[i] = cloneArray$2(cloned[i]); }
  }

  return cloned;
}

var cloneArray_1 = cloneArray$2;

var isMergeable$1 = isMergeable_1;

var optimizeProperties$1 = optimize$2;

var cloneArray$1 = cloneArray_1;

var Token$a = token;

var serializeBody$2 = oneTime.body;
var serializeRules$3 = oneTime.rules;

function reduceNonAdjacent$1(tokens, context) {
  var options = context.options;
  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
  var candidates = {};
  var repeated = [];

  for (var i = tokens.length - 1; i >= 0; i--) {
    var token = tokens[i];

    if (token[0] != Token$a.RULE) {
      continue;
    } else if (token[2].length === 0) {
      continue;
    }

    var selectorAsString = serializeRules$3(token[1]);
    var isComplexAndNotSpecial = token[1].length > 1
      && isMergeable$1(selectorAsString, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging);
    var wrappedSelectors = wrappedSelectorsFrom(token[1]);
    var selectors = isComplexAndNotSpecial
      ? [selectorAsString].concat(wrappedSelectors)
      : [selectorAsString];

    for (var j = 0, m = selectors.length; j < m; j++) {
      var selector = selectors[j];

      if (!candidates[selector]) { candidates[selector] = []; } else { repeated.push(selector); }

      candidates[selector].push({
        where: i,
        list: wrappedSelectors,
        isPartial: isComplexAndNotSpecial && j > 0,
        isComplex: isComplexAndNotSpecial && j === 0
      });
    }
  }

  reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context);
  reduceComplexNonAdjacentCases(tokens, candidates, options, context);
}

function wrappedSelectorsFrom(list) {
  var wrapped = [];

  for (var i = 0; i < list.length; i++) {
    wrapped.push([list[i][1]]);
  }

  return wrapped;
}

function reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context) {
  function filterOut(idx, bodies) {
    return data[idx].isPartial && bodies.length === 0;
  }

  function reduceBody(token, newBody, processedCount, tokenIdx) {
    if (!data[processedCount - tokenIdx - 1].isPartial) { token[2] = newBody; }
  }

  for (var i = 0, l = repeated.length; i < l; i++) {
    var selector = repeated[i];
    var data = candidates[selector];

    reduceSelector(tokens, data, {
      filterOut: filterOut,
      callback: reduceBody
    }, options, context);
  }
}

function reduceComplexNonAdjacentCases(tokens, candidates, options, context) {
  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
  var localContext = {};

  function filterOut(idx) {
    return localContext.data[idx].where < localContext.intoPosition;
  }

  function collectReducedBodies(token, newBody, processedCount, tokenIdx) {
    if (tokenIdx === 0) { localContext.reducedBodies.push(newBody); }
  }

  allSelectors:
  for (var complexSelector in candidates) {
    var into = candidates[complexSelector];
    if (!into[0].isComplex) { continue; }

    var intoPosition = into[into.length - 1].where;
    var intoToken = tokens[intoPosition];
    var reducedBodies = [];

    var selectors = isMergeable$1(complexSelector, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging)
      ? into[0].list
      : [complexSelector];

    localContext.intoPosition = intoPosition;
    localContext.reducedBodies = reducedBodies;

    for (var j = 0, m = selectors.length; j < m; j++) {
      var selector = selectors[j];
      var data = candidates[selector];

      if (data.length < 2) { continue allSelectors; }

      localContext.data = data;

      reduceSelector(tokens, data, {
        filterOut: filterOut,
        callback: collectReducedBodies
      }, options, context);

      if (serializeBody$2(reducedBodies[reducedBodies.length - 1]) != serializeBody$2(reducedBodies[0])) {
        continue allSelectors;
      }
    }

    intoToken[2] = reducedBodies[0];
  }
}

function reduceSelector(tokens, data, context, options, outerContext) {
  var bodies = [];
  var bodiesAsList = [];
  var processedTokens = [];

  for (var j = data.length - 1; j >= 0; j--) {
    if (context.filterOut(j, bodies)) { continue; }

    var where = data[j].where;
    var token = tokens[where];
    var clonedBody = cloneArray$1(token[2]);

    bodies = bodies.concat(clonedBody);
    bodiesAsList.push(clonedBody);
    processedTokens.push(where);
  }

  optimizeProperties$1(bodies, true, false, outerContext);

  var processedCount = processedTokens.length;
  var propertyIdx = bodies.length - 1;
  var tokenIdx = processedCount - 1;

  while (tokenIdx >= 0) {
    if ((tokenIdx === 0
      || (bodies[propertyIdx] && bodiesAsList[tokenIdx].indexOf(bodies[propertyIdx]) > -1)) && propertyIdx > -1) {
      propertyIdx--;
      continue;
    }

    var newBody = bodies.splice(propertyIdx + 1);
    context.callback(tokens[processedTokens[tokenIdx]], newBody, processedCount, tokenIdx);

    tokenIdx--;
  }
}

var reduceNonAdjacent_1 = reduceNonAdjacent$1;

var Token$9 = token;

var serializeAll$1 = oneTime.all;

var FONT_FACE_SCOPE = '@font-face';

function removeDuplicateFontAtRules$1(tokens) {
  var fontAtRules = [];
  var token;
  var key;
  var i, l;

  for (i = 0, l = tokens.length; i < l; i++) {
    token = tokens[i];

    if (token[0] != Token$9.AT_RULE_BLOCK && token[1][0][1] != FONT_FACE_SCOPE) {
      continue;
    }

    key = serializeAll$1([token]);

    if (fontAtRules.indexOf(key) > -1) {
      token[2] = [];
    } else {
      fontAtRules.push(key);
    }
  }
}

var removeDuplicateFontAtRules_1 = removeDuplicateFontAtRules$1;

var Token$8 = token;

var serializeAll = oneTime.all;
var serializeRules$2 = oneTime.rules;

function removeDuplicateMediaQueries$1(tokens) {
  var candidates = {};
  var candidate;
  var token;
  var key;
  var i, l;

  for (i = 0, l = tokens.length; i < l; i++) {
    token = tokens[i];
    if (token[0] != Token$8.NESTED_BLOCK) {
      continue;
    }

    key = serializeRules$2(token[1]) + '%' + serializeAll(token[2]);
    candidate = candidates[key];

    if (candidate) {
      candidate[2] = [];
    }

    candidates[key] = token;
  }
}

var removeDuplicateMediaQueries_1 = removeDuplicateMediaQueries$1;

var Token$7 = token;

var serializeBody$1 = oneTime.body;
var serializeRules$1 = oneTime.rules;

function removeDuplicates$1(tokens) {
  var matched = {};
  var moreThanOnce = [];
  var id, token;
  var body, bodies;

  for (var i = 0, l = tokens.length; i < l; i++) {
    token = tokens[i];
    if (token[0] != Token$7.RULE) { continue; }

    id = serializeRules$1(token[1]);

    if (matched[id] && matched[id].length == 1) { moreThanOnce.push(id); } else { matched[id] = matched[id] || []; }

    matched[id].push(i);
  }

  for (i = 0, l = moreThanOnce.length; i < l; i++) {
    id = moreThanOnce[i];
    bodies = [];

    for (var j = matched[id].length - 1; j >= 0; j--) {
      token = tokens[matched[id][j]];
      body = serializeBody$1(token[2]);

      if (bodies.indexOf(body) > -1) { token[2] = []; } else { bodies.push(body); }
    }
  }
}

var removeDuplicates_1 = removeDuplicates$1;

var populateComponents = populateComponents_1;

var wrapForOptimizing = wrapForOptimizing$3.single;
var restoreFromOptimizing = restoreFromOptimizing_1;

var Token$6 = token;

var animationNameRegex = /^(-moz-|-o-|-webkit-)?animation-name$/;
var animationRegex = /^(-moz-|-o-|-webkit-)?animation$/;
var keyframeRegex = /^@(-moz-|-o-|-webkit-)?keyframes /;
var importantRegex = /\s{0,31}!important$/;
var optionalMatchingQuotesRegex = /^(['"]?)(.*)\1$/;

function normalize$2(value) {
  return value
    .replace(optionalMatchingQuotesRegex, '$2')
    .replace(importantRegex, '');
}

function removeUnusedAtRules$1(tokens, context) {
  removeUnusedAtRule(tokens, matchCounterStyle, markCounterStylesAsUsed, context);
  removeUnusedAtRule(tokens, matchFontFace, markFontFacesAsUsed, context);
  removeUnusedAtRule(tokens, matchKeyframe, markKeyframesAsUsed, context);
  removeUnusedAtRule(tokens, matchNamespace, markNamespacesAsUsed, context);
}

function removeUnusedAtRule(tokens, matchCallback, markCallback, context) {
  var atRules = {};
  var atRule;
  var atRuleTokens;
  var atRuleToken;
  var zeroAt;
  var i, l;

  for (i = 0, l = tokens.length; i < l; i++) {
    matchCallback(tokens[i], atRules);
  }

  if (Object.keys(atRules).length === 0) {
    return;
  }

  markUsedAtRules(tokens, markCallback, atRules, context);

  for (atRule in atRules) {
    atRuleTokens = atRules[atRule];

    for (i = 0, l = atRuleTokens.length; i < l; i++) {
      atRuleToken = atRuleTokens[i];
      zeroAt = atRuleToken[0] == Token$6.AT_RULE ? 1 : 2;
      atRuleToken[zeroAt] = [];
    }
  }
}

function markUsedAtRules(tokens, markCallback, atRules, context) {
  var boundMarkCallback = markCallback(atRules);
  var i, l;

  for (i = 0, l = tokens.length; i < l; i++) {
    switch (tokens[i][0]) {
    case Token$6.RULE:
      boundMarkCallback(tokens[i], context);
      break;
    case Token$6.NESTED_BLOCK:
      markUsedAtRules(tokens[i][2], markCallback, atRules, context);
    }
  }
}

function matchCounterStyle(token, atRules) {
  var match;

  if (token[0] == Token$6.AT_RULE_BLOCK && token[1][0][1].indexOf('@counter-style') === 0) {
    match = token[1][0][1].split(' ')[1];
    atRules[match] = atRules[match] || [];
    atRules[match].push(token);
  }
}

function markCounterStylesAsUsed(atRules) {
  return function(token, context) {
    var property;
    var wrappedProperty;
    var i, l;

    for (i = 0, l = token[2].length; i < l; i++) {
      property = token[2][i];

      if (property[1][1] == 'list-style') {
        wrappedProperty = wrapForOptimizing(property);
        populateComponents([wrappedProperty], context.validator, context.warnings);

        if (wrappedProperty.components[0].value[0][1] in atRules) {
          delete atRules[property[2][1]];
        }

        restoreFromOptimizing([wrappedProperty]);
      }

      if (property[1][1] == 'list-style-type' && property[2][1] in atRules) {
        delete atRules[property[2][1]];
      }
    }
  };
}

function matchFontFace(token, atRules) {
  var property;
  var match;
  var i, l;

  if (token[0] == Token$6.AT_RULE_BLOCK && token[1][0][1] == '@font-face') {
    for (i = 0, l = token[2].length; i < l; i++) {
      property = token[2][i];

      if (property[1][1] == 'font-family') {
        match = normalize$2(property[2][1].toLowerCase());
        atRules[match] = atRules[match] || [];
        atRules[match].push(token);
        break;
      }
    }
  }
}

function markFontFacesAsUsed(atRules) {
  return function(token, context) {
    var property;
    var wrappedProperty;
    var component;
    var normalizedMatch;
    var i, l;
    var j, m;

    for (i = 0, l = token[2].length; i < l; i++) {
      property = token[2][i];

      if (property[1][1] == 'font') {
        wrappedProperty = wrapForOptimizing(property);
        populateComponents([wrappedProperty], context.validator, context.warnings);
        component = wrappedProperty.components[6];

        for (j = 0, m = component.value.length; j < m; j++) {
          normalizedMatch = normalize$2(component.value[j][1].toLowerCase());

          if (normalizedMatch in atRules) {
            delete atRules[normalizedMatch];
          }
        }

        restoreFromOptimizing([wrappedProperty]);
      }

      if (property[1][1] == 'font-family') {
        for (j = 2, m = property.length; j < m; j++) {
          normalizedMatch = normalize$2(property[j][1].toLowerCase());

          if (normalizedMatch in atRules) {
            delete atRules[normalizedMatch];
          }
        }
      }
    }
  };
}

function matchKeyframe(token, atRules) {
  var match;

  if (token[0] == Token$6.NESTED_BLOCK && keyframeRegex.test(token[1][0][1])) {
    match = token[1][0][1].split(' ')[1];
    atRules[match] = atRules[match] || [];
    atRules[match].push(token);
  }
}

function markKeyframesAsUsed(atRules) {
  return function(token, context) {
    var property;
    var wrappedProperty;
    var component;
    var i, l;
    var j, m;

    for (i = 0, l = token[2].length; i < l; i++) {
      property = token[2][i];

      if (animationRegex.test(property[1][1])) {
        wrappedProperty = wrapForOptimizing(property);
        populateComponents([wrappedProperty], context.validator, context.warnings);
        component = wrappedProperty.components[7];

        for (j = 0, m = component.value.length; j < m; j++) {
          if (component.value[j][1] in atRules) {
            delete atRules[component.value[j][1]];
          }
        }

        restoreFromOptimizing([wrappedProperty]);
      }

      if (animationNameRegex.test(property[1][1])) {
        for (j = 2, m = property.length; j < m; j++) {
          if (property[j][1] in atRules) {
            delete atRules[property[j][1]];
          }
        }
      }
    }
  };
}

function matchNamespace(token, atRules) {
  var match;

  if (token[0] == Token$6.AT_RULE && token[1].indexOf('@namespace') === 0) {
    match = token[1].split(' ')[1];
    atRules[match] = atRules[match] || [];
    atRules[match].push(token);
  }
}

function markNamespacesAsUsed(atRules) {
  var namespaceRegex = new RegExp(Object.keys(atRules).join('\\||') + '\\|', 'g');

  return function(token) {
    var match;
    var scope;
    var normalizedMatch;
    var i, l;
    var j, m;

    for (i = 0, l = token[1].length; i < l; i++) {
      scope = token[1][i];
      match = scope[1].match(namespaceRegex);

      for (j = 0, m = match.length; j < m; j++) {
        normalizedMatch = match[j].substring(0, match[j].length - 1);

        if (normalizedMatch in atRules) {
          delete atRules[normalizedMatch];
        }
      }
    }
  };
}

var removeUnusedAtRules_1 = removeUnusedAtRules$1;

function ruleSorter(s1, s2) {
  return s1[1] > s2[1] ? 1 : -1;
}

function tidyRuleDuplicates$1(rules) {
  var list = [];
  var repeated = [];

  for (var i = 0, l = rules.length; i < l; i++) {
    var rule = rules[i];

    if (repeated.indexOf(rule[1]) == -1) {
      repeated.push(rule[1]);
      list.push(rule);
    }
  }

  return list.sort(ruleSorter);
}

var tidyRuleDuplicates_1 = tidyRuleDuplicates$1;

var canReorderSingle = reorderable.canReorderSingle;
var extractProperties = extractProperties_1;
var isMergeable = isMergeable_1;
var tidyRuleDuplicates = tidyRuleDuplicates_1;

var Token$5 = token;

var cloneArray = cloneArray_1;

var serializeBody = oneTime.body;
var serializeRules = oneTime.rules;

function naturalSorter(a, b) {
  return a > b ? 1 : -1;
}

function cloneAndMergeSelectors(propertyA, propertyB) {
  var cloned = cloneArray(propertyA);
  cloned[5] = cloned[5].concat(propertyB[5]);

  return cloned;
}

function restructure$1(tokens, context) {
  var options = context.options;
  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
  var mergeLimit = options.compatibility.selectors.mergeLimit;
  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
  var specificityCache = context.cache.specificity;
  var movableTokens = {};
  var movedProperties = [];
  var multiPropertyMoveCache = {};
  var movedToBeDropped = [];
  var maxCombinationsLevel = 2;
  var ID_JOIN_CHARACTER = '%';

  function sendToMultiPropertyMoveCache(position, movedProperty, allFits) {
    for (var i = allFits.length - 1; i >= 0; i--) {
      var fit = allFits[i][0];
      var id = addToCache(movedProperty, fit);

      if (multiPropertyMoveCache[id].length > 1 && processMultiPropertyMove(position, multiPropertyMoveCache[id])) {
        removeAllMatchingFromCache(id);
        break;
      }
    }
  }

  function addToCache(movedProperty, fit) {
    var id = cacheId(fit);
    multiPropertyMoveCache[id] = multiPropertyMoveCache[id] || [];
    multiPropertyMoveCache[id].push([movedProperty, fit]);
    return id;
  }

  function removeAllMatchingFromCache(matchId) {
    var matchSelectors = matchId.split(ID_JOIN_CHARACTER);
    var forRemoval = [];
    var i;

    for (var id in multiPropertyMoveCache) {
      var selectors = id.split(ID_JOIN_CHARACTER);
      for (i = selectors.length - 1; i >= 0; i--) {
        if (matchSelectors.indexOf(selectors[i]) > -1) {
          forRemoval.push(id);
          break;
        }
      }
    }

    for (i = forRemoval.length - 1; i >= 0; i--) {
      delete multiPropertyMoveCache[forRemoval[i]];
    }
  }

  function cacheId(cachedTokens) {
    var id = [];
    for (var i = 0, l = cachedTokens.length; i < l; i++) {
      id.push(serializeRules(cachedTokens[i][1]));
    }
    return id.join(ID_JOIN_CHARACTER);
  }

  function tokensToMerge(sourceTokens) {
    var uniqueTokensWithBody = [];
    var mergeableTokens = [];

    for (var i = sourceTokens.length - 1; i >= 0; i--) {
      if (!isMergeable(
        serializeRules(sourceTokens[i][1]),
        mergeablePseudoClasses,
        mergeablePseudoElements,
        multiplePseudoMerging
      )) {
        continue;
      }

      mergeableTokens.unshift(sourceTokens[i]);
      if (sourceTokens[i][2].length > 0
        && uniqueTokensWithBody.indexOf(sourceTokens[i]) == -1) {
        uniqueTokensWithBody.push(sourceTokens[i]);
      }
    }

    return uniqueTokensWithBody.length > 1
      ? mergeableTokens
      : [];
  }

  function shortenIfPossible(position, movedProperty) {
    var name = movedProperty[0];
    var value = movedProperty[1];
    var key = movedProperty[4];
    var valueSize = name.length + value.length + 1;
    var allSelectors = [];
    var qualifiedTokens = [];

    var mergeableTokens = tokensToMerge(movableTokens[key]);
    if (mergeableTokens.length < 2) { return; }

    var allFits = findAllFits(mergeableTokens, valueSize, 1);
    var bestFit = allFits[0];
    if (bestFit[1] > 0) { return sendToMultiPropertyMoveCache(position, movedProperty, allFits); }

    for (var i = bestFit[0].length - 1; i >= 0; i--) {
      allSelectors = bestFit[0][i][1].concat(allSelectors);
      qualifiedTokens.unshift(bestFit[0][i]);
    }

    allSelectors = tidyRuleDuplicates(allSelectors);
    dropAsNewTokenAt(position, [movedProperty], allSelectors, qualifiedTokens);
  }

  function fitSorter(fit1, fit2) {
    return fit1[1] > fit2[1] ? 1 : (fit1[1] == fit2[1] ? 0 : -1);
  }

  function findAllFits(mergeableTokens, propertySize, propertiesCount) {
    var combinations = allCombinations(mergeableTokens, propertySize, propertiesCount, maxCombinationsLevel - 1);
    return combinations.sort(fitSorter);
  }

  function allCombinations(tokensVariant, propertySize, propertiesCount, level) {
    var differenceVariants = [[tokensVariant, sizeDifference(tokensVariant, propertySize, propertiesCount)]];
    if (tokensVariant.length > 2 && level > 0) {
      for (var i = tokensVariant.length - 1; i >= 0; i--) {
        var subVariant = Array.prototype.slice.call(tokensVariant, 0);
        subVariant.splice(i, 1);
        differenceVariants = differenceVariants.concat(
          allCombinations(subVariant, propertySize, propertiesCount, level - 1)
        );
      }
    }

    return differenceVariants;
  }

  function sizeDifference(tokensVariant, propertySize, propertiesCount) {
    var allSelectorsSize = 0;
    for (var i = tokensVariant.length - 1; i >= 0; i--) {
      allSelectorsSize += tokensVariant[i][2].length > propertiesCount
        ? serializeRules(tokensVariant[i][1]).length
        : -1;
    }
    return allSelectorsSize - (tokensVariant.length - 1) * propertySize + 1;
  }

  function dropAsNewTokenAt(position, properties, allSelectors, mergeableTokens) {
    var i, j, k, m;
    var allProperties = [];

    for (i = mergeableTokens.length - 1; i >= 0; i--) {
      var mergeableToken = mergeableTokens[i];

      for (j = mergeableToken[2].length - 1; j >= 0; j--) {
        var mergeableProperty = mergeableToken[2][j];

        for (k = 0, m = properties.length; k < m; k++) {
          var property = properties[k];

          var mergeablePropertyName = mergeableProperty[1][1];
          var propertyName = property[0];
          var propertyBody = property[4];
          if (mergeablePropertyName == propertyName && serializeBody([mergeableProperty]) == propertyBody) {
            mergeableToken[2].splice(j, 1);
            break;
          }
        }
      }
    }

    for (i = properties.length - 1; i >= 0; i--) {
      allProperties.unshift(properties[i][3]);
    }

    var newToken = [Token$5.RULE, allSelectors, allProperties];
    tokens.splice(position, 0, newToken);
  }

  function dropPropertiesAt(position, movedProperty) {
    var key = movedProperty[4];
    var toMove = movableTokens[key];

    if (toMove && toMove.length > 1) {
      if (!shortenMultiMovesIfPossible(position, movedProperty)) { shortenIfPossible(position, movedProperty); }
    }
  }

  function shortenMultiMovesIfPossible(position, movedProperty) {
    var candidates = [];
    var propertiesAndMergableTokens = [];
    var key = movedProperty[4];
    var j, k;

    var mergeableTokens = tokensToMerge(movableTokens[key]);
    if (mergeableTokens.length < 2) { return; }

    movableLoop:
    for (var value in movableTokens) {
      var tokensList = movableTokens[value];

      for (j = mergeableTokens.length - 1; j >= 0; j--) {
        if (tokensList.indexOf(mergeableTokens[j]) == -1) { continue movableLoop; }
      }

      candidates.push(value);
    }

    if (candidates.length < 2) { return false; }

    for (j = candidates.length - 1; j >= 0; j--) {
      for (k = movedProperties.length - 1; k >= 0; k--) {
        if (movedProperties[k][4] == candidates[j]) {
          propertiesAndMergableTokens.unshift([movedProperties[k], mergeableTokens]);
          break;
        }
      }
    }

    return processMultiPropertyMove(position, propertiesAndMergableTokens);
  }

  function processMultiPropertyMove(position, propertiesAndMergableTokens) {
    var valueSize = 0;
    var properties = [];
    var property;

    for (var i = propertiesAndMergableTokens.length - 1; i >= 0; i--) {
      property = propertiesAndMergableTokens[i][0];
      var fullValue = property[4];
      valueSize += fullValue.length + (i > 0 ? 1 : 0);

      properties.push(property);
    }

    var mergeableTokens = propertiesAndMergableTokens[0][1];
    var bestFit = findAllFits(mergeableTokens, valueSize, properties.length)[0];
    if (bestFit[1] > 0) { return false; }

    var allSelectors = [];
    var qualifiedTokens = [];
    for (i = bestFit[0].length - 1; i >= 0; i--) {
      allSelectors = bestFit[0][i][1].concat(allSelectors);
      qualifiedTokens.unshift(bestFit[0][i]);
    }

    allSelectors = tidyRuleDuplicates(allSelectors);
    dropAsNewTokenAt(position, properties, allSelectors, qualifiedTokens);

    for (i = properties.length - 1; i >= 0; i--) {
      property = properties[i];
      var index = movedProperties.indexOf(property);

      delete movableTokens[property[4]];

      if (index > -1 && movedToBeDropped.indexOf(index) == -1) { movedToBeDropped.push(index); }
    }

    return true;
  }

  function boundToAnotherPropertyInCurrrentToken(property, movedProperty, token) {
    var propertyName = property[0];
    var movedPropertyName = movedProperty[0];
    if (propertyName != movedPropertyName) { return false; }

    var key = movedProperty[4];
    var toMove = movableTokens[key];
    return toMove && toMove.indexOf(token) > -1;
  }

  for (var i = tokens.length - 1; i >= 0; i--) {
    var token = tokens[i];
    var isRule;
    var j, k, m;
    var samePropertyAt;

    if (token[0] == Token$5.RULE) {
      isRule = true;
    } else if (token[0] == Token$5.NESTED_BLOCK) {
      isRule = false;
    } else {
      continue;
    }

    // We cache movedProperties.length as it may change in the loop
    var movedCount = movedProperties.length;

    var properties = extractProperties(token);
    movedToBeDropped = [];

    var unmovableInCurrentToken = [];
    for (j = properties.length - 1; j >= 0; j--) {
      for (k = j - 1; k >= 0; k--) {
        if (!canReorderSingle(properties[j], properties[k], specificityCache)) {
          unmovableInCurrentToken.push(j);
          break;
        }
      }
    }

    for (j = properties.length - 1; j >= 0; j--) {
      var property = properties[j];
      var movedSameProperty = false;

      for (k = 0; k < movedCount; k++) {
        var movedProperty = movedProperties[k];

        if (movedToBeDropped.indexOf(k) == -1 && (
          !canReorderSingle(property, movedProperty, specificityCache)
          && !boundToAnotherPropertyInCurrrentToken(property, movedProperty, token)
          || movableTokens[movedProperty[4]] && movableTokens[movedProperty[4]].length === mergeLimit)
        ) {
          dropPropertiesAt(i + 1, movedProperty);

          if (movedToBeDropped.indexOf(k) == -1) {
            movedToBeDropped.push(k);
            delete movableTokens[movedProperty[4]];
          }
        }

        if (!movedSameProperty) {
          movedSameProperty = property[0] == movedProperty[0] && property[1] == movedProperty[1];

          if (movedSameProperty) {
            samePropertyAt = k;
          }
        }
      }

      if (!isRule || unmovableInCurrentToken.indexOf(j) > -1) { continue; }

      var key = property[4];

      if (movedSameProperty && movedProperties[samePropertyAt][5].length + property[5].length > mergeLimit) {
        dropPropertiesAt(i + 1, movedProperties[samePropertyAt]);
        movedProperties.splice(samePropertyAt, 1);
        movableTokens[key] = [token];
        movedSameProperty = false;
      } else {
        movableTokens[key] = movableTokens[key] || [];
        movableTokens[key].push(token);
      }

      if (movedSameProperty) {
        movedProperties[samePropertyAt] = cloneAndMergeSelectors(movedProperties[samePropertyAt], property);
      } else {
        movedProperties.push(property);
      }
    }

    movedToBeDropped = movedToBeDropped.sort(naturalSorter);
    for (j = 0, m = movedToBeDropped.length; j < m; j++) {
      var dropAt = movedToBeDropped[j] - j;
      movedProperties.splice(dropAt, 1);
    }
  }

  var position = tokens[0] && tokens[0][0] == Token$5.AT_RULE && tokens[0][1].indexOf('@charset') === 0 ? 1 : 0;
  for (; position < tokens.length - 1; position++) {
    var isImportRule = tokens[position][0] === Token$5.AT_RULE && tokens[position][1].indexOf('@import') === 0;
    var isComment = tokens[position][0] === Token$5.COMMENT;
    if (!(isImportRule || isComment)) { break; }
  }

  for (i = 0; i < movedProperties.length; i++) {
    dropPropertiesAt(position, movedProperties[i]);
  }
}

var restructure_1 = restructure$1;

var mergeAdjacent = mergeAdjacent_1;
var mergeMediaQueries = mergeMediaQueries_1;
var mergeNonAdjacentByBody = mergeNonAdjacentByBody_1;
var mergeNonAdjacentBySelector = mergeNonAdjacentBySelector_1;
var reduceNonAdjacent = reduceNonAdjacent_1;
var removeDuplicateFontAtRules = removeDuplicateFontAtRules_1;
var removeDuplicateMediaQueries = removeDuplicateMediaQueries_1;
var removeDuplicates = removeDuplicates_1;
var removeUnusedAtRules = removeUnusedAtRules_1;
var restructure = restructure_1;

var optimizeProperties = optimize$2;

var OptimizationLevel$1 = optimizationLevel.OptimizationLevel;

var Token$4 = token;

function removeEmpty(tokens) {
  for (var i = 0, l = tokens.length; i < l; i++) {
    var token = tokens[i];
    var isEmpty = false;

    switch (token[0]) {
    case Token$4.RULE:
      isEmpty = token[1].length === 0 || token[2].length === 0;
      break;
    case Token$4.NESTED_BLOCK:
      removeEmpty(token[2]);
      isEmpty = token[2].length === 0;
      break;
    case Token$4.AT_RULE:
      isEmpty = token[1].length === 0;
      break;
    case Token$4.AT_RULE_BLOCK:
      isEmpty = token[2].length === 0;
    }

    if (isEmpty) {
      tokens.splice(i, 1);
      i--;
      l--;
    }
  }
}

function recursivelyOptimizeBlocks(tokens, context) {
  for (var i = 0, l = tokens.length; i < l; i++) {
    var token = tokens[i];

    if (token[0] == Token$4.NESTED_BLOCK) {
      var isKeyframes = /@(-moz-|-o-|-webkit-)?keyframes/.test(token[1][0][1]);
      level2Optimize$1(token[2], context, !isKeyframes);
    }
  }
}

function recursivelyOptimizeProperties(tokens, context) {
  for (var i = 0, l = tokens.length; i < l; i++) {
    var token = tokens[i];

    switch (token[0]) {
    case Token$4.RULE:
      optimizeProperties(token[2], true, true, context);
      break;
    case Token$4.NESTED_BLOCK:
      recursivelyOptimizeProperties(token[2], context);
    }
  }
}

function level2Optimize$1(tokens, context, withRestructuring) {
  var levelOptions = context.options.level[OptimizationLevel$1.Two];
  var level2Plugins = context.options.plugins.level2Block;
  var reduced;
  var i;

  recursivelyOptimizeBlocks(tokens, context);
  recursivelyOptimizeProperties(tokens, context);

  if (levelOptions.removeDuplicateRules) {
    removeDuplicates(tokens);
  }

  if (levelOptions.mergeAdjacentRules) {
    mergeAdjacent(tokens, context);
  }

  if (levelOptions.reduceNonAdjacentRules) {
    reduceNonAdjacent(tokens, context);
  }

  if (levelOptions.mergeNonAdjacentRules && levelOptions.mergeNonAdjacentRules != 'body') {
    mergeNonAdjacentBySelector(tokens, context);
  }

  if (levelOptions.mergeNonAdjacentRules && levelOptions.mergeNonAdjacentRules != 'selector') {
    mergeNonAdjacentByBody(tokens, context);
  }

  if (levelOptions.restructureRules && levelOptions.mergeAdjacentRules && withRestructuring) {
    restructure(tokens, context);
    mergeAdjacent(tokens, context);
  }

  if (levelOptions.restructureRules && !levelOptions.mergeAdjacentRules && withRestructuring) {
    restructure(tokens, context);
  }

  if (levelOptions.removeDuplicateFontRules) {
    removeDuplicateFontAtRules(tokens);
  }

  if (levelOptions.removeDuplicateMediaBlocks) {
    removeDuplicateMediaQueries(tokens);
  }

  if (levelOptions.removeUnusedAtRules) {
    removeUnusedAtRules(tokens, context);
  }

  if (levelOptions.mergeMedia) {
    reduced = mergeMediaQueries(tokens, context);
    for (i = reduced.length - 1; i >= 0; i--) {
      level2Optimize$1(reduced[i][2], context, false);
    }
  }

  for (i = 0; i < level2Plugins.length; i++) {
    level2Plugins[i](tokens);
  }

  if (levelOptions.removeEmpty) {
    removeEmpty(tokens);
  }

  return tokens;
}

var optimize$1 = level2Optimize$1;

var functionNoVendorRegexStr = '[A-Z]+(\\-|[A-Z]|[0-9])+\\(.*?\\)';
var functionVendorRegexStr = '\\-(\\-|[A-Z]|[0-9])+\\(.*?\\)';
var variableRegexStr = 'var\\(\\-\\-[^\\)]+\\)';
var functionAnyRegexStr = '(' + variableRegexStr + '|' + functionNoVendorRegexStr + '|' + functionVendorRegexStr + ')';

var calcRegex = new RegExp('^(\\-moz\\-|\\-webkit\\-)?calc\\([^\\)]+\\)$', 'i');
var decimalRegex = /[0-9]/;
var functionAnyRegex = new RegExp('^' + functionAnyRegexStr + '$', 'i');
var hexAlphaColorRegex = /^#(?:[0-9a-f]{4}|[0-9a-f]{8})$/i;
// eslint-disable-next-line max-len
var hslColorRegex = /^hsl\(\s{0,31}[-.]?\d+\s{0,31},\s{0,31}\d*\.?\d+%\s{0,31},\s{0,31}\d*\.?\d+%\s{0,31}\)|hsla\(\s{0,31}[-.]?\d+\s{0,31},\s{0,31}\d*\.?\d+%\s{0,31},\s{0,31}\d*\.?\d+%\s{0,31},\s{0,31}\.?\d+\s{0,31}\)$/;
// eslint-disable-next-line max-len
var hslColorWithSpacesRegex = /^hsl\(\s{0,31}[-.]?\d+(deg)?\s{1,31}\d*\.?\d+%\s{1,31}\d*\.?\d+%\s{0,31}\)|hsla\(\s{0,31}[-.]?\d+(deg)?\s{1,31}\d*\.?\d+%\s{1,31}\d*\.?\d+%\s{1,31}\/\s{1,31}\d*\.?\d+%?\s{0,31}\)$/;
var identifierRegex = /^(-[a-z0-9_][a-z0-9\-_]*|[a-z_][a-z0-9\-_]*)$/i;
var namedEntityRegex = /^[a-z]+$/i;
var prefixRegex = /^-([a-z0-9]|-)*$/i;
var quotedTextRegex = /^("[^"]*"|'[^']*')$/i;
// eslint-disable-next-line max-len
var rgbColorRegex = /^rgb\(\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31}\)|rgba\(\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[.\d]+\s{0,31}\)$/i;
// eslint-disable-next-line max-len
var rgbColorWithSpacesRegex = /^rgb\(\s{0,31}[\d]{1,3}\s{1,31}[\d]{1,3}\s{1,31}[\d]{1,3}\s{0,31}\)|rgba\(\s{0,31}[\d]{1,3}\s{1,31}[\d]{1,3}\s{1,31}[\d]{1,3}\s{1,31}\/\s{1,31}[\d]*\.?[.\d]+%?\s{0,31}\)$/i;
var timeUnitPattern = /\d+(s|ms)/;
var timingFunctionRegex = /^(cubic-bezier|steps)\([^)]+\)$/;
var validTimeUnits = ['ms', 's'];
var urlRegex = /^url\([\s\S]+\)$/i;
var variableRegex = new RegExp('^' + variableRegexStr + '$', 'i');

var eightValueColorRegex = /^#[0-9a-f]{8}$/i;
var fourValueColorRegex = /^#[0-9a-f]{4}$/i;
var sixValueColorRegex = /^#[0-9a-f]{6}$/i;
var threeValueColorRegex = /^#[0-9a-f]{3}$/i;

var DECIMAL_DOT = '.';
var MINUS_SIGN = '-';
var PLUS_SIGN = '+';

var Keywords = {
  '^': [
    'inherit',
    'initial',
    'unset'
  ],
  '*-style': [
    'auto',
    'dashed',
    'dotted',
    'double',
    'groove',
    'hidden',
    'inset',
    'none',
    'outset',
    'ridge',
    'solid'
  ],
  '*-timing-function': [
    'ease',
    'ease-in',
    'ease-in-out',
    'ease-out',
    'linear',
    'step-end',
    'step-start'
  ],
  'animation-direction': [
    'alternate',
    'alternate-reverse',
    'normal',
    'reverse'
  ],
  'animation-fill-mode': [
    'backwards',
    'both',
    'forwards',
    'none'
  ],
  'animation-iteration-count': [
    'infinite'
  ],
  'animation-name': [
    'none'
  ],
  'animation-play-state': [
    'paused',
    'running'
  ],
  'background-attachment': [
    'fixed',
    'inherit',
    'local',
    'scroll'
  ],
  'background-clip': [
    'border-box',
    'content-box',
    'inherit',
    'padding-box',
    'text'
  ],
  'background-origin': [
    'border-box',
    'content-box',
    'inherit',
    'padding-box'
  ],
  'background-position': [
    'bottom',
    'center',
    'left',
    'right',
    'top'
  ],
  'background-repeat': [
    'no-repeat',
    'inherit',
    'repeat',
    'repeat-x',
    'repeat-y',
    'round',
    'space'
  ],
  'background-size': [
    'auto',
    'cover',
    'contain'
  ],
  'border-collapse': [
    'collapse',
    'inherit',
    'separate'
  ],
  bottom: [
    'auto'
  ],
  clear: [
    'both',
    'left',
    'none',
    'right'
  ],
  color: [
    'transparent'
  ],
  cursor: [
    'all-scroll',
    'auto',
    'col-resize',
    'crosshair',
    'default',
    'e-resize',
    'help',
    'move',
    'n-resize',
    'ne-resize',
    'no-drop',
    'not-allowed',
    'nw-resize',
    'pointer',
    'progress',
    'row-resize',
    's-resize',
    'se-resize',
    'sw-resize',
    'text',
    'vertical-text',
    'w-resize',
    'wait'
  ],
  display: [
    'block',
    'inline',
    'inline-block',
    'inline-table',
    'list-item',
    'none',
    'table',
    'table-caption',
    'table-cell',
    'table-column',
    'table-column-group',
    'table-footer-group',
    'table-header-group',
    'table-row',
    'table-row-group'
  ],
  float: [
    'left',
    'none',
    'right'
  ],
  left: [
    'auto'
  ],
  font: [
    'caption',
    'icon',
    'menu',
    'message-box',
    'small-caption',
    'status-bar',
    'unset'
  ],
  'font-size': [
    'large',
    'larger',
    'medium',
    'small',
    'smaller',
    'x-large',
    'x-small',
    'xx-large',
    'xx-small'
  ],
  'font-stretch': [
    'condensed',
    'expanded',
    'extra-condensed',
    'extra-expanded',
    'normal',
    'semi-condensed',
    'semi-expanded',
    'ultra-condensed',
    'ultra-expanded'
  ],
  'font-style': [
    'italic',
    'normal',
    'oblique'
  ],
  'font-variant': [
    'normal',
    'small-caps'
  ],
  'font-weight': [
    '100',
    '200',
    '300',
    '400',
    '500',
    '600',
    '700',
    '800',
    '900',
    'bold',
    'bolder',
    'lighter',
    'normal'
  ],
  'line-height': [
    'normal'
  ],
  'list-style-position': [
    'inside',
    'outside'
  ],
  'list-style-type': [
    'armenian',
    'circle',
    'decimal',
    'decimal-leading-zero',
    'disc',
    'decimal|disc', // this is the default value of list-style-type, see comment in configuration.js
    'georgian',
    'lower-alpha',
    'lower-greek',
    'lower-latin',
    'lower-roman',
    'none',
    'square',
    'upper-alpha',
    'upper-latin',
    'upper-roman'
  ],
  overflow: [
    'auto',
    'hidden',
    'scroll',
    'visible'
  ],
  position: [
    'absolute',
    'fixed',
    'relative',
    'static'
  ],
  right: [
    'auto'
  ],
  'text-align': [
    'center',
    'justify',
    'left',
    'left|right', // this is the default value of list-style-type, see comment in configuration.js
    'right'
  ],
  'text-decoration': [
    'line-through',
    'none',
    'overline',
    'underline'
  ],
  'text-overflow': [
    'clip',
    'ellipsis'
  ],
  top: [
    'auto'
  ],
  'vertical-align': [
    'baseline',
    'bottom',
    'middle',
    'sub',
    'super',
    'text-bottom',
    'text-top',
    'top'
  ],
  visibility: [
    'collapse',
    'hidden',
    'visible'
  ],
  'white-space': [
    'normal',
    'nowrap',
    'pre'
  ],
  width: [
    'inherit',
    'initial',
    'medium',
    'thick',
    'thin'
  ]
};

var Units = [
  '%',
  'ch',
  'cm',
  'em',
  'ex',
  'in',
  'mm',
  'pc',
  'pt',
  'px',
  'rem',
  'vh',
  'vm',
  'vmax',
  'vmin',
  'vw'
];

function isColor(value) {
  return value != 'auto'
    && (
      isKeyword('color')(value)
      || isHexColor(value)
      || isColorFunction(value)
      || isNamedEntity(value)
    );
}

function isColorFunction(value) {
  return isRgbColor(value) || isHslColor(value);
}

function isDynamicUnit(value) {
  return calcRegex.test(value);
}

function isFunction(value) {
  return functionAnyRegex.test(value);
}

function isHexColor(value) {
  return threeValueColorRegex.test(value)
    || fourValueColorRegex.test(value)
    || sixValueColorRegex.test(value)
    || eightValueColorRegex.test(value);
}

function isHslColor(value) {
  return hslColorRegex.test(value) || hslColorWithSpacesRegex.test(value);
}

function isHexAlphaColor(value) {
  return hexAlphaColorRegex.test(value);
}

function isIdentifier(value) {
  return identifierRegex.test(value);
}

function isQuotedText(value) {
  return quotedTextRegex.test(value);
}

function isImage(value) {
  return value == 'none' || value == 'inherit' || isUrl(value);
}

function isKeyword(propertyName) {
  return function(value) {
    return Keywords[propertyName].indexOf(value) > -1;
  };
}

function isNamedEntity(value) {
  return namedEntityRegex.test(value);
}

function isNumber(value) {
  return scanForNumber(value) == value.length;
}

function isRgbColor(value) {
  return rgbColorRegex.test(value) || rgbColorWithSpacesRegex.test(value);
}

function isPrefixed(value) {
  return prefixRegex.test(value);
}

function isPositiveNumber(value) {
  return isNumber(value)
    && parseFloat(value) >= 0;
}

function isVariable(value) {
  return variableRegex.test(value);
}

function isTime(value) {
  var numberUpTo = scanForNumber(value);

  return numberUpTo == value.length && parseInt(value) === 0
    || numberUpTo > -1 && validTimeUnits.indexOf(value.slice(numberUpTo + 1)) > -1
    || isCalculatedTime(value);
}

function isCalculatedTime(value) {
  return isFunction(value) && timeUnitPattern.test(value);
}

function isTimingFunction() {
  var isTimingFunctionKeyword = isKeyword('*-timing-function');

  return function(value) {
    return isTimingFunctionKeyword(value) || timingFunctionRegex.test(value);
  };
}

function isUnit(validUnits, value) {
  var numberUpTo = scanForNumber(value);

  return numberUpTo == value.length && parseInt(value) === 0
    || numberUpTo > -1 && validUnits.indexOf(value.slice(numberUpTo + 1).toLowerCase()) > -1
    || value == 'auto'
    || value == 'inherit';
}

function isUrl(value) {
  return urlRegex.test(value);
}

function isZIndex(value) {
  return value == 'auto'
    || isNumber(value)
    || isKeyword('^')(value);
}

function scanForNumber(value) {
  var hasDot = false;
  var hasSign = false;
  var character;
  var i, l;

  for (i = 0, l = value.length; i < l; i++) {
    character = value[i];

    if (i === 0 && (character == PLUS_SIGN || character == MINUS_SIGN)) {
      hasSign = true;
    } else if (i > 0 && hasSign && (character == PLUS_SIGN || character == MINUS_SIGN)) {
      return i - 1;
    } else if (character == DECIMAL_DOT && !hasDot) {
      hasDot = true;
    } else if (character == DECIMAL_DOT && hasDot) {
      return i - 1;
    } else if (decimalRegex.test(character)) {
      continue;
    } else {
      return i - 1;
    }
  }

  return i;
}

function validator$1(compatibility) {
  var validUnits = Units.slice(0).filter(function(value) {
    return !(value in compatibility.units) || compatibility.units[value] === true;
  });

  if (compatibility.customUnits.rpx) {
    validUnits.push('rpx');
  }

  return {
    colorOpacity: compatibility.colors.opacity,
    colorHexAlpha: compatibility.colors.hexAlpha,
    isAnimationDirectionKeyword: isKeyword('animation-direction'),
    isAnimationFillModeKeyword: isKeyword('animation-fill-mode'),
    isAnimationIterationCountKeyword: isKeyword('animation-iteration-count'),
    isAnimationNameKeyword: isKeyword('animation-name'),
    isAnimationPlayStateKeyword: isKeyword('animation-play-state'),
    isTimingFunction: isTimingFunction(),
    isBackgroundAttachmentKeyword: isKeyword('background-attachment'),
    isBackgroundClipKeyword: isKeyword('background-clip'),
    isBackgroundOriginKeyword: isKeyword('background-origin'),
    isBackgroundPositionKeyword: isKeyword('background-position'),
    isBackgroundRepeatKeyword: isKeyword('background-repeat'),
    isBackgroundSizeKeyword: isKeyword('background-size'),
    isColor: isColor,
    isColorFunction: isColorFunction,
    isDynamicUnit: isDynamicUnit,
    isFontKeyword: isKeyword('font'),
    isFontSizeKeyword: isKeyword('font-size'),
    isFontStretchKeyword: isKeyword('font-stretch'),
    isFontStyleKeyword: isKeyword('font-style'),
    isFontVariantKeyword: isKeyword('font-variant'),
    isFontWeightKeyword: isKeyword('font-weight'),
    isFunction: isFunction,
    isGlobal: isKeyword('^'),
    isHexAlphaColor: isHexAlphaColor,
    isHslColor: isHslColor,
    isIdentifier: isIdentifier,
    isImage: isImage,
    isKeyword: isKeyword,
    isLineHeightKeyword: isKeyword('line-height'),
    isListStylePositionKeyword: isKeyword('list-style-position'),
    isListStyleTypeKeyword: isKeyword('list-style-type'),
    isNumber: isNumber,
    isPrefixed: isPrefixed,
    isPositiveNumber: isPositiveNumber,
    isQuotedText: isQuotedText,
    isRgbColor: isRgbColor,
    isStyleKeyword: isKeyword('*-style'),
    isTime: isTime,
    isUnit: isUnit.bind(null, validUnits),
    isUrl: isUrl,
    isVariable: isVariable,
    isWidth: isKeyword('width'),
    isZIndex: isZIndex
  };
}

var validator_1 = validator$1;

var DEFAULTS = {
  '*': {
    colors: {
      hexAlpha: false, // 4- and 8-character hex notation
      opacity: true // rgba / hsla
    },
    customUnits: { rpx: false },
    properties: {
      backgroundClipMerging: true, // background-clip to shorthand
      backgroundOriginMerging: true, // background-origin to shorthand
      backgroundSizeMerging: true, // background-size to shorthand
      colors: true, // any kind of color transformations, like `#ff00ff` to `#f0f` or `#fff` into `red`
      ieBangHack: false, // !ie suffix hacks on IE<8
      ieFilters: false, // whether to preserve `filter` and `-ms-filter` properties
      iePrefixHack: false, // underscore / asterisk prefix hacks on IE
      ieSuffixHack: false, // \9 suffix hacks on IE6-9, \0 suffix hack on IE6-11
      merging: true, // merging properties into one
      shorterLengthUnits: false, // optimize pixel units into `pt`, `pc` or `in` units
      spaceAfterClosingBrace: true, // 'url() no-repeat' to 'url()no-repeat'
      urlQuotes: true, // whether to wrap content of `url()` into quotes or not
      zeroUnits: true // 0[unit] -> 0
    },
    selectors: {
      adjacentSpace: false, // div+ nav Android stock browser hack
      ie7Hack: false, // *+html hack
      mergeablePseudoClasses: [
        ':active',
        ':after',
        ':before',
        ':empty',
        ':checked',
        ':disabled',
        ':empty',
        ':enabled',
        ':first-child',
        ':first-letter',
        ':first-line',
        ':first-of-type',
        ':focus',
        ':hover',
        ':lang',
        ':last-child',
        ':last-of-type',
        ':link',
        ':not',
        ':nth-child',
        ':nth-last-child',
        ':nth-last-of-type',
        ':nth-of-type',
        ':only-child',
        ':only-of-type',
        ':root',
        ':target',
        ':visited'
      ], // selectors with these pseudo-classes can be merged as these are universally supported
      mergeablePseudoElements: [
        '::after',
        '::before',
        '::first-letter',
        '::first-line'
      ], // selectors with these pseudo-elements can be merged as these are universally supported
      mergeLimit: 8191, // number of rules that can be safely merged together
      multiplePseudoMerging: true
    },
    units: {
      ch: true,
      in: true,
      pc: true,
      pt: true,
      rem: true,
      vh: true,
      vm: true, // vm is vmin on IE9+ see https://developer.mozilla.org/en-US/docs/Web/CSS/length
      vmax: true,
      vmin: true,
      vw: true
    }
  }
};

DEFAULTS.ie11 = merge$2(DEFAULTS['*'], { properties: { ieSuffixHack: true } });

DEFAULTS.ie10 = merge$2(DEFAULTS['*'], { properties: { ieSuffixHack: true } });

DEFAULTS.ie9 = merge$2(DEFAULTS['*'], {
  properties: {
    ieFilters: true,
    ieSuffixHack: true
  }
});

DEFAULTS.ie8 = merge$2(DEFAULTS.ie9, {
  colors: { opacity: false },
  properties: {
    backgroundClipMerging: false,
    backgroundOriginMerging: false,
    backgroundSizeMerging: false,
    iePrefixHack: true,
    merging: false
  },
  selectors: {
    mergeablePseudoClasses: [
      ':after',
      ':before',
      ':first-child',
      ':first-letter',
      ':focus',
      ':hover',
      ':visited'
    ],
    mergeablePseudoElements: []
  },
  units: {
    ch: false,
    rem: false,
    vh: false,
    vm: false,
    vmax: false,
    vmin: false,
    vw: false
  }
});

DEFAULTS.ie7 = merge$2(DEFAULTS.ie8, {
  properties: { ieBangHack: true },
  selectors: {
    ie7Hack: true,
    mergeablePseudoClasses: [
      ':first-child',
      ':first-letter',
      ':hover',
      ':visited'
    ]
  }
});

function compatibilityFrom$1(source) {
  return merge$2(DEFAULTS['*'], calculateSource(source));
}

function merge$2(source, target) {
  for (var key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      var value = source[key];

      if (Object.prototype.hasOwnProperty.call(target, key) && typeof value === 'object' && !Array.isArray(value)) {
        target[key] = merge$2(value, target[key] || {});
      } else {
        target[key] = key in target ? target[key] : value;
      }
    }
  }

  return target;
}

function calculateSource(source) {
  if (typeof source == 'object') { return source; }

  if (!/[,+-]/.test(source)) { return DEFAULTS[source] || DEFAULTS['*']; }

  var parts = source.split(',');
  var template = parts[0] in DEFAULTS
    ? DEFAULTS[parts.shift()]
    : DEFAULTS['*'];

  source = {};

  parts.forEach(function(part) {
    var isAdd = part[0] == '+';
    var key = part.substring(1).split('.');
    var group = key[0];
    var option = key[1];

    source[group] = source[group] || {};
    source[group][option] = isAdd;
  });

  return merge$2(template, source);
}

var compatibility = compatibilityFrom$1;

var streamHttp = {};

var request = {exports: {}};

var capability$2 = {};

(function (exports) {
	exports.fetch = isFunction(commonjsGlobal.fetch) && isFunction(commonjsGlobal.ReadableStream);

	exports.writableStream = isFunction(commonjsGlobal.WritableStream);

	exports.abortController = isFunction(commonjsGlobal.AbortController);

	// The xhr request to example.com may violate some restrictive CSP configurations,
	// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
	// and assume support for certain features below.
	var xhr;
	function getXHR () {
		// Cache the xhr value
		if (xhr !== undefined) return xhr

		if (commonjsGlobal.XMLHttpRequest) {
			xhr = new commonjsGlobal.XMLHttpRequest();
			// If XDomainRequest is available (ie only, where xhr might not work
			// cross domain), use the page location. Otherwise use example.com
			// Note: this doesn't actually make an http request.
			try {
				xhr.open('GET', commonjsGlobal.XDomainRequest ? '/' : 'https://example.com');
			} catch(e) {
				xhr = null;
			}
		} else {
			// Service workers don't have XHR
			xhr = null;
		}
		return xhr
	}

	function checkTypeSupport (type) {
		var xhr = getXHR();
		if (!xhr) return false
		try {
			xhr.responseType = type;
			return xhr.responseType === type
		} catch (e) {}
		return false
	}

	// If fetch is supported, then arraybuffer will be supported too. Skip calling
	// checkTypeSupport(), since that calls getXHR().
	exports.arraybuffer = exports.fetch || checkTypeSupport('arraybuffer');

	// These next two tests unavoidably show warnings in Chrome. Since fetch will always
	// be used if it's available, just return false for these to avoid the warnings.
	exports.msstream = !exports.fetch && checkTypeSupport('ms-stream');
	exports.mozchunkedarraybuffer = !exports.fetch && checkTypeSupport('moz-chunked-arraybuffer');

	// If fetch is supported, then overrideMimeType will be supported too. Skip calling
	// getXHR().
	exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);

	function isFunction (value) {
		return typeof value === 'function'
	}

	xhr = null; // Help gc 
} (capability$2));

var inherits_browser = {exports: {}};

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  inherits_browser.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  };
} else {
  // old school shim for old browsers
  inherits_browser.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  };
}

var inherits_browserExports = inherits_browser.exports;

var response$1 = {};

var readableBrowser = {exports: {}};

var events = {exports: {}};

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };

var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}
events.exports = EventEmitter;
events.exports.once = once$2;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once$2(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

var eventsExports = events.exports;

var streamBrowser = eventsExports.EventEmitter;

var util$6 = {};

var types$1 = {};

/* eslint complexity: [2, 18], max-statements: [2, 33] */
var shams$1 = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

var hasSymbols$2 = shams$1;

var shams = function hasToStringTagShams() {
	return hasSymbols$2() && !!Symbol.toStringTag;
};

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = shams$1;

var hasSymbols$1 = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

var test$1 = {
	foo: {}
};

var $Object = Object;

var hasProto$1 = function hasProto() {
	return { __proto__: test$1 }.foo === test$1.foo && !({ __proto__: null } instanceof $Object);
};

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr$3 = Object.prototype.toString;
var funcType = '[object Function]';

var implementation$1 = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr$3.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

var implementation = implementation$1;

var functionBind = Function.prototype.bind || implementation;

var bind$1 = functionBind;

var src = bind$1.call(Function.call, Object.prototype.hasOwnProperty);

var undefined$1;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD$1 = Object.getOwnPropertyDescriptor;
if ($gOPD$1) {
	try {
		$gOPD$1({}, '');
	} catch (e) {
		$gOPD$1 = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD$1
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD$1(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = hasSymbols$1();
var hasProto = hasProto$1();

var getProto$1 = Object.getPrototypeOf || (
	hasProto
		? function (x) { return x.__proto__; } // eslint-disable-line no-proto
		: null
);

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto$1 ? undefined$1 : getProto$1(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto$1 ? getProto$1([][Symbol.iterator]()) : undefined$1,
	'%AsyncFromSyncIteratorPrototype%': undefined$1,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined$1 : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined$1 : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto$1 ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$1,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto$1 ? undefined$1 : getProto$1(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto$1 ? undefined$1 : getProto$1(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto$1 ? getProto$1(''[Symbol.iterator]()) : undefined$1,
	'%Symbol%': hasSymbols ? Symbol : undefined$1,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
};

if (getProto$1) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto$1(getProto$1(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto$1) {
			value = getProto$1(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = functionBind;
var hasOwn = src;
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

var getIntrinsic = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined$1;
			}
			if ($gOPD$1 && (i + 1) >= parts.length) {
				var desc = $gOPD$1(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

var callBind$2 = {exports: {}};

(function (module) {

	var bind = functionBind;
	var GetIntrinsic = getIntrinsic;

	var $apply = GetIntrinsic('%Function.prototype.apply%');
	var $call = GetIntrinsic('%Function.prototype.call%');
	var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

	var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
	var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
	var $max = GetIntrinsic('%Math.max%');

	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
		} catch (e) {
			// IE 8 has a broken defineProperty
			$defineProperty = null;
		}
	}

	module.exports = function callBind(originalFunction) {
		var func = $reflectApply(bind, $call, arguments);
		if ($gOPD && $defineProperty) {
			var desc = $gOPD(func, 'length');
			if (desc.configurable) {
				// original length, plus the receiver, minus any additional arguments (after the receiver)
				$defineProperty(
					func,
					'length',
					{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
				);
			}
		}
		return func;
	};

	var applyBind = function applyBind() {
		return $reflectApply(bind, $apply, arguments);
	};

	if ($defineProperty) {
		$defineProperty(module.exports, 'apply', { value: applyBind });
	} else {
		module.exports.apply = applyBind;
	} 
} (callBind$2));

var callBindExports = callBind$2.exports;

var GetIntrinsic$1 = getIntrinsic;

var callBind$1 = callBindExports;

var $indexOf$1 = callBind$1(GetIntrinsic$1('String.prototype.indexOf'));

var callBound$2 = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic$1(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf$1(name, '.prototype.') > -1) {
		return callBind$1(intrinsic);
	}
	return intrinsic;
};

var hasToStringTag$3 = shams();
var callBound$1 = callBound$2;

var $toString$1 = callBound$1('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag$3 && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString$1(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString$1(value) !== '[object Array]' &&
		$toString$1(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

var isArguments = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

var toStr$2 = Object.prototype.toString;
var fnToStr$1 = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag$2 = shams();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag$2) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

var isGeneratorFunction = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr$1.call(fn))) {
		return true;
	}
	if (!hasToStringTag$2) {
		var str = toStr$2.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr$1 = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag$1 = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all$7 = document.all;
	if (toStr$1.call(all$7) === toStr$1.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr$1.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

var isCallable$1 = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag$1) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr$1.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};

var isCallable = isCallable$1;

var toStr = Object.prototype.toString;
var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty$2.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};

var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};

var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
        if (hasOwnProperty$2.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};

var forEach$1 = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }

    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }

    if (toStr.call(list) === '[object Array]') {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};

var forEach_1 = forEach$1;

var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g$1 = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;

var availableTypedArrays$1 = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g$1[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};

var GetIntrinsic = getIntrinsic;

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

var gopd = $gOPD;

var forEach = forEach_1;
var availableTypedArrays = availableTypedArrays$1;
var callBind = callBindExports;
var callBound = callBound$2;
var gOPD = gopd;

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = shams();

var g = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var cache = { __proto__: null };
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			cache['$' + typedArray] = callBind(descriptor.get);
		}
	});
} else {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		cache['$' + typedArray] = callBind(arr.slice);
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var found = false;
	forEach(cache, function (getter, typedArray) {
		if (!found) {
			try {
				if ('$' + getter(value) === typedArray) {
					found = $slice(typedArray, 1);
				}
			} catch (e) { /**/ }
		}
	});
	return found;
};

var trySlices = function tryAllSlices(value) {
	var found = false;
	forEach(cache, function (getter, name) {
		if (!found) {
			try {
				getter(value);
				found = $slice(name, 1);
			} catch (e) { /**/ }
		}
	});
	return found;
};

var whichTypedArray$1 = function whichTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag) {
		var tag = $slice($toString(value), 8, -1);
		if ($indexOf(typedArrays, tag) > -1) {
			return tag;
		}
		if (tag !== 'Object') {
			return false;
		}
		// node < 0.6 hits here on real Typed Arrays
		return trySlices(value);
	}
	if (!gOPD) { return null; } // unknown engine
	return tryTypedArrays(value);
};

var whichTypedArray = whichTypedArray$1;

var isTypedArray = function isTypedArray(value) {
	return !!whichTypedArray(value);
};

(function (exports) {

	var isArgumentsObject = isArguments;
	var isGeneratorFunction$1 = isGeneratorFunction;
	var whichTypedArray = whichTypedArray$1;
	var isTypedArray$1 = isTypedArray;

	function uncurryThis(f) {
	  return f.call.bind(f);
	}

	var BigIntSupported = typeof BigInt !== 'undefined';
	var SymbolSupported = typeof Symbol !== 'undefined';

	var ObjectToString = uncurryThis(Object.prototype.toString);

	var numberValue = uncurryThis(Number.prototype.valueOf);
	var stringValue = uncurryThis(String.prototype.valueOf);
	var booleanValue = uncurryThis(Boolean.prototype.valueOf);

	if (BigIntSupported) {
	  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
	}

	if (SymbolSupported) {
	  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
	}

	function checkBoxedPrimitive(value, prototypeValueOf) {
	  if (typeof value !== 'object') {
	    return false;
	  }
	  try {
	    prototypeValueOf(value);
	    return true;
	  } catch(e) {
	    return false;
	  }
	}

	exports.isArgumentsObject = isArgumentsObject;
	exports.isGeneratorFunction = isGeneratorFunction$1;
	exports.isTypedArray = isTypedArray$1;

	// Taken from here and modified for better browser support
	// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
	function isPromise(input) {
		return (
			(
				typeof Promise !== 'undefined' &&
				input instanceof Promise
			) ||
			(
				input !== null &&
				typeof input === 'object' &&
				typeof input.then === 'function' &&
				typeof input.catch === 'function'
			)
		);
	}
	exports.isPromise = isPromise;

	function isArrayBufferView(value) {
	  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
	    return ArrayBuffer.isView(value);
	  }

	  return (
	    isTypedArray$1(value) ||
	    isDataView(value)
	  );
	}
	exports.isArrayBufferView = isArrayBufferView;


	function isUint8Array(value) {
	  return whichTypedArray(value) === 'Uint8Array';
	}
	exports.isUint8Array = isUint8Array;

	function isUint8ClampedArray(value) {
	  return whichTypedArray(value) === 'Uint8ClampedArray';
	}
	exports.isUint8ClampedArray = isUint8ClampedArray;

	function isUint16Array(value) {
	  return whichTypedArray(value) === 'Uint16Array';
	}
	exports.isUint16Array = isUint16Array;

	function isUint32Array(value) {
	  return whichTypedArray(value) === 'Uint32Array';
	}
	exports.isUint32Array = isUint32Array;

	function isInt8Array(value) {
	  return whichTypedArray(value) === 'Int8Array';
	}
	exports.isInt8Array = isInt8Array;

	function isInt16Array(value) {
	  return whichTypedArray(value) === 'Int16Array';
	}
	exports.isInt16Array = isInt16Array;

	function isInt32Array(value) {
	  return whichTypedArray(value) === 'Int32Array';
	}
	exports.isInt32Array = isInt32Array;

	function isFloat32Array(value) {
	  return whichTypedArray(value) === 'Float32Array';
	}
	exports.isFloat32Array = isFloat32Array;

	function isFloat64Array(value) {
	  return whichTypedArray(value) === 'Float64Array';
	}
	exports.isFloat64Array = isFloat64Array;

	function isBigInt64Array(value) {
	  return whichTypedArray(value) === 'BigInt64Array';
	}
	exports.isBigInt64Array = isBigInt64Array;

	function isBigUint64Array(value) {
	  return whichTypedArray(value) === 'BigUint64Array';
	}
	exports.isBigUint64Array = isBigUint64Array;

	function isMapToString(value) {
	  return ObjectToString(value) === '[object Map]';
	}
	isMapToString.working = (
	  typeof Map !== 'undefined' &&
	  isMapToString(new Map())
	);

	function isMap(value) {
	  if (typeof Map === 'undefined') {
	    return false;
	  }

	  return isMapToString.working
	    ? isMapToString(value)
	    : value instanceof Map;
	}
	exports.isMap = isMap;

	function isSetToString(value) {
	  return ObjectToString(value) === '[object Set]';
	}
	isSetToString.working = (
	  typeof Set !== 'undefined' &&
	  isSetToString(new Set())
	);
	function isSet(value) {
	  if (typeof Set === 'undefined') {
	    return false;
	  }

	  return isSetToString.working
	    ? isSetToString(value)
	    : value instanceof Set;
	}
	exports.isSet = isSet;

	function isWeakMapToString(value) {
	  return ObjectToString(value) === '[object WeakMap]';
	}
	isWeakMapToString.working = (
	  typeof WeakMap !== 'undefined' &&
	  isWeakMapToString(new WeakMap())
	);
	function isWeakMap(value) {
	  if (typeof WeakMap === 'undefined') {
	    return false;
	  }

	  return isWeakMapToString.working
	    ? isWeakMapToString(value)
	    : value instanceof WeakMap;
	}
	exports.isWeakMap = isWeakMap;

	function isWeakSetToString(value) {
	  return ObjectToString(value) === '[object WeakSet]';
	}
	isWeakSetToString.working = (
	  typeof WeakSet !== 'undefined' &&
	  isWeakSetToString(new WeakSet())
	);
	function isWeakSet(value) {
	  return isWeakSetToString(value);
	}
	exports.isWeakSet = isWeakSet;

	function isArrayBufferToString(value) {
	  return ObjectToString(value) === '[object ArrayBuffer]';
	}
	isArrayBufferToString.working = (
	  typeof ArrayBuffer !== 'undefined' &&
	  isArrayBufferToString(new ArrayBuffer())
	);
	function isArrayBuffer(value) {
	  if (typeof ArrayBuffer === 'undefined') {
	    return false;
	  }

	  return isArrayBufferToString.working
	    ? isArrayBufferToString(value)
	    : value instanceof ArrayBuffer;
	}
	exports.isArrayBuffer = isArrayBuffer;

	function isDataViewToString(value) {
	  return ObjectToString(value) === '[object DataView]';
	}
	isDataViewToString.working = (
	  typeof ArrayBuffer !== 'undefined' &&
	  typeof DataView !== 'undefined' &&
	  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
	);
	function isDataView(value) {
	  if (typeof DataView === 'undefined') {
	    return false;
	  }

	  return isDataViewToString.working
	    ? isDataViewToString(value)
	    : value instanceof DataView;
	}
	exports.isDataView = isDataView;

	// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
	var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
	function isSharedArrayBufferToString(value) {
	  return ObjectToString(value) === '[object SharedArrayBuffer]';
	}
	function isSharedArrayBuffer(value) {
	  if (typeof SharedArrayBufferCopy === 'undefined') {
	    return false;
	  }

	  if (typeof isSharedArrayBufferToString.working === 'undefined') {
	    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
	  }

	  return isSharedArrayBufferToString.working
	    ? isSharedArrayBufferToString(value)
	    : value instanceof SharedArrayBufferCopy;
	}
	exports.isSharedArrayBuffer = isSharedArrayBuffer;

	function isAsyncFunction(value) {
	  return ObjectToString(value) === '[object AsyncFunction]';
	}
	exports.isAsyncFunction = isAsyncFunction;

	function isMapIterator(value) {
	  return ObjectToString(value) === '[object Map Iterator]';
	}
	exports.isMapIterator = isMapIterator;

	function isSetIterator(value) {
	  return ObjectToString(value) === '[object Set Iterator]';
	}
	exports.isSetIterator = isSetIterator;

	function isGeneratorObject(value) {
	  return ObjectToString(value) === '[object Generator]';
	}
	exports.isGeneratorObject = isGeneratorObject;

	function isWebAssemblyCompiledModule(value) {
	  return ObjectToString(value) === '[object WebAssembly.Module]';
	}
	exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

	function isNumberObject(value) {
	  return checkBoxedPrimitive(value, numberValue);
	}
	exports.isNumberObject = isNumberObject;

	function isStringObject(value) {
	  return checkBoxedPrimitive(value, stringValue);
	}
	exports.isStringObject = isStringObject;

	function isBooleanObject(value) {
	  return checkBoxedPrimitive(value, booleanValue);
	}
	exports.isBooleanObject = isBooleanObject;

	function isBigIntObject(value) {
	  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
	}
	exports.isBigIntObject = isBigIntObject;

	function isSymbolObject(value) {
	  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
	}
	exports.isSymbolObject = isSymbolObject;

	function isBoxedPrimitive(value) {
	  return (
	    isNumberObject(value) ||
	    isStringObject(value) ||
	    isBooleanObject(value) ||
	    isBigIntObject(value) ||
	    isSymbolObject(value)
	  );
	}
	exports.isBoxedPrimitive = isBoxedPrimitive;

	function isAnyArrayBuffer(value) {
	  return typeof Uint8Array !== 'undefined' && (
	    isArrayBuffer(value) ||
	    isSharedArrayBuffer(value)
	  );
	}
	exports.isAnyArrayBuffer = isAnyArrayBuffer;

	['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
	  Object.defineProperty(exports, method, {
	    enumerable: false,
	    value: function() {
	      throw new Error(method + ' is not supported in userland');
	    }
	  });
	}); 
} (types$1));

var isBufferBrowser = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
};

(function (exports) {
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
	  function getOwnPropertyDescriptors(obj) {
	    var keys = Object.keys(obj);
	    var descriptors = {};
	    for (var i = 0; i < keys.length; i++) {
	      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
	    }
	    return descriptors;
	  };

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  if (typeof dist.process !== 'undefined' && dist.process.noDeprecation === true) {
	    return fn;
	  }

	  // Allow for deprecating things in the process of starting up.
	  if (typeof dist.process === 'undefined') {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (dist.process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (dist.process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnvRegex = /^$/;

	if ({}.NODE_DEBUG) {
	  var debugEnv = {}.NODE_DEBUG;
	  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
	    .replace(/\*/g, '.*')
	    .replace(/,/g, '$|^')
	    .toUpperCase();
	  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
	}
	exports.debuglog = function(set) {
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (debugEnvRegex.test(set)) {
	      var pid = dist.process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').slice(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.slice(1, -1);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	exports.types = types$1;

	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	exports.types.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	exports.types.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	exports.types.isNativeError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = isBufferBrowser;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = inherits_browserExports;

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

	exports.promisify = function promisify(original) {
	  if (typeof original !== 'function')
	    throw new TypeError('The "original" argument must be of type Function');

	  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
	    var fn = original[kCustomPromisifiedSymbol];
	    if (typeof fn !== 'function') {
	      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
	    }
	    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
	      value: fn, enumerable: false, writable: false, configurable: true
	    });
	    return fn;
	  }

	  function fn() {
	    var promiseResolve, promiseReject;
	    var promise = new Promise(function (resolve, reject) {
	      promiseResolve = resolve;
	      promiseReject = reject;
	    });

	    var args = [];
	    for (var i = 0; i < arguments.length; i++) {
	      args.push(arguments[i]);
	    }
	    args.push(function (err, value) {
	      if (err) {
	        promiseReject(err);
	      } else {
	        promiseResolve(value);
	      }
	    });

	    try {
	      original.apply(this, args);
	    } catch (err) {
	      promiseReject(err);
	    }

	    return promise;
	  }

	  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

	  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
	    value: fn, enumerable: false, writable: false, configurable: true
	  });
	  return Object.defineProperties(
	    fn,
	    getOwnPropertyDescriptors(original)
	  );
	};

	exports.promisify.custom = kCustomPromisifiedSymbol;

	function callbackifyOnRejected(reason, cb) {
	  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
	  // Because `null` is a special error value in callbacks which means "no error
	  // occurred", we error-wrap so the callback consumer can distinguish between
	  // "the promise rejected with null" or "the promise fulfilled with undefined".
	  if (!reason) {
	    var newReason = new Error('Promise was rejected with a falsy value');
	    newReason.reason = reason;
	    reason = newReason;
	  }
	  return cb(reason);
	}

	function callbackify(original) {
	  if (typeof original !== 'function') {
	    throw new TypeError('The "original" argument must be of type Function');
	  }

	  // We DO NOT return the promise as it gives the user a false sense that
	  // the promise is actually somehow related to the callback's execution
	  // and that the callback throwing will reject the promise.
	  function callbackified() {
	    var args = [];
	    for (var i = 0; i < arguments.length; i++) {
	      args.push(arguments[i]);
	    }

	    var maybeCb = args.pop();
	    if (typeof maybeCb !== 'function') {
	      throw new TypeError('The last argument must be of type Function');
	    }
	    var self = this;
	    var cb = function() {
	      return maybeCb.apply(self, arguments);
	    };
	    // In true node style we process the callback on `nextTick` with all the
	    // implications (stack, `uncaughtException`, `async_hooks`)
	    original.apply(this, args)
	      .then(function(ret) { dist.process.nextTick(cb.bind(null, null, ret)); },
	            function(rej) { dist.process.nextTick(callbackifyOnRejected.bind(null, rej, cb)); });
	  }

	  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
	  Object.defineProperties(callbackified,
	                          getOwnPropertyDescriptors(original));
	  return callbackified;
	}
	exports.callbackify = callbackify; 
} (util$6));

var buffer_list;
var hasRequiredBuffer_list;

function requireBuffer_list () {
	if (hasRequiredBuffer_list) return buffer_list;
	hasRequiredBuffer_list = 1;

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
	function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
	var _require = buffer,
	  Buffer = _require.Buffer;
	var _require2 = util$6,
	  inspect = _require2.inspect;
	var custom = inspect && inspect.custom || 'inspect';
	function copyBuffer(src, target, offset) {
	  Buffer.prototype.copy.call(src, target, offset);
	}
	buffer_list = /*#__PURE__*/function () {
	  function BufferList() {
	    _classCallCheck(this, BufferList);
	    this.head = null;
	    this.tail = null;
	    this.length = 0;
	  }
	  _createClass(BufferList, [{
	    key: "push",
	    value: function push(v) {
	      var entry = {
	        data: v,
	        next: null
	      };
	      if (this.length > 0) this.tail.next = entry;else this.head = entry;
	      this.tail = entry;
	      ++this.length;
	    }
	  }, {
	    key: "unshift",
	    value: function unshift(v) {
	      var entry = {
	        data: v,
	        next: this.head
	      };
	      if (this.length === 0) this.tail = entry;
	      this.head = entry;
	      ++this.length;
	    }
	  }, {
	    key: "shift",
	    value: function shift() {
	      if (this.length === 0) return;
	      var ret = this.head.data;
	      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	      --this.length;
	      return ret;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.head = this.tail = null;
	      this.length = 0;
	    }
	  }, {
	    key: "join",
	    value: function join(s) {
	      if (this.length === 0) return '';
	      var p = this.head;
	      var ret = '' + p.data;
	      while (p = p.next) ret += s + p.data;
	      return ret;
	    }
	  }, {
	    key: "concat",
	    value: function concat(n) {
	      if (this.length === 0) return Buffer.alloc(0);
	      var ret = Buffer.allocUnsafe(n >>> 0);
	      var p = this.head;
	      var i = 0;
	      while (p) {
	        copyBuffer(p.data, ret, i);
	        i += p.data.length;
	        p = p.next;
	      }
	      return ret;
	    }

	    // Consumes a specified amount of bytes or characters from the buffered data.
	  }, {
	    key: "consume",
	    value: function consume(n, hasStrings) {
	      var ret;
	      if (n < this.head.data.length) {
	        // `slice` is the same for buffers and strings.
	        ret = this.head.data.slice(0, n);
	        this.head.data = this.head.data.slice(n);
	      } else if (n === this.head.data.length) {
	        // First chunk is a perfect match.
	        ret = this.shift();
	      } else {
	        // Result spans more than one buffer.
	        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
	      }
	      return ret;
	    }
	  }, {
	    key: "first",
	    value: function first() {
	      return this.head.data;
	    }

	    // Consumes a specified amount of characters from the buffered data.
	  }, {
	    key: "_getString",
	    value: function _getString(n) {
	      var p = this.head;
	      var c = 1;
	      var ret = p.data;
	      n -= ret.length;
	      while (p = p.next) {
	        var str = p.data;
	        var nb = n > str.length ? str.length : n;
	        if (nb === str.length) ret += str;else ret += str.slice(0, n);
	        n -= nb;
	        if (n === 0) {
	          if (nb === str.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = str.slice(nb);
	          }
	          break;
	        }
	        ++c;
	      }
	      this.length -= c;
	      return ret;
	    }

	    // Consumes a specified amount of bytes from the buffered data.
	  }, {
	    key: "_getBuffer",
	    value: function _getBuffer(n) {
	      var ret = Buffer.allocUnsafe(n);
	      var p = this.head;
	      var c = 1;
	      p.data.copy(ret);
	      n -= p.data.length;
	      while (p = p.next) {
	        var buf = p.data;
	        var nb = n > buf.length ? buf.length : n;
	        buf.copy(ret, ret.length - n, 0, nb);
	        n -= nb;
	        if (n === 0) {
	          if (nb === buf.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = buf.slice(nb);
	          }
	          break;
	        }
	        ++c;
	      }
	      this.length -= c;
	      return ret;
	    }

	    // Make sure the linked list only shows the minimal necessary information.
	  }, {
	    key: custom,
	    value: function value(_, options) {
	      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
	        // Only inspect one level.
	        depth: 0,
	        // It should not recurse.
	        customInspect: false
	      }));
	    }
	  }]);
	  return BufferList;
	}();
	return buffer_list;
}

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;
  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;
  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        dist.process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        dist.process.nextTick(emitErrorNT, this, err);
      }
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }
  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        dist.process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        dist.process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        dist.process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      dist.process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      dist.process.nextTick(emitCloseNT, _this);
    }
  });
  return this;
}
function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}
function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}
function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }
  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}
function emitErrorNT(self, err) {
  self.emit('error', err);
}
function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.

  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}
var destroy_1 = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};

var errorsBrowser = {};

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
errorsBrowser.codes = codes;

var ERR_INVALID_OPT_VALUE = errorsBrowser.codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }
    return Math.floor(hwm);
  }

  // Default value
  return state.objectMode ? 16 : 16 * 1024;
}
var state = {
  getHighWaterMark: getHighWaterMark
};

/**
 * Module exports.
 */

var browser$1 = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!commonjsGlobal.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = commonjsGlobal.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

var _stream_writable;
var hasRequired_stream_writable;

function require_stream_writable () {
	if (hasRequired_stream_writable) return _stream_writable;
	hasRequired_stream_writable = 1;

	_stream_writable = Writable;

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;
	  this.next = null;
	  this.entry = null;
	  this.finish = function () {
	    onCorkedFinish(_this, state);
	  };
	}
	/* </replacement> */

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;

	/*<replacement>*/
	var internalUtil = {
	  deprecate: browser$1
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = streamBrowser;
	/*</replacement>*/

	var Buffer = buffer.Buffer;
	var OurUint8Array = (typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	var destroyImpl = destroy_1;
	var _require = state,
	  getHighWaterMark = _require.getHighWaterMark;
	var _require$codes = errorsBrowser.codes,
	  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
	  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
	  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
	  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
	  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
	  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
	var errorOrDestroy = destroyImpl.errorOrDestroy;
	inherits_browserExports(Writable, Stream);
	function nop() {}
	function WritableState(options, stream, isDuplex) {
	  Duplex = Duplex || require_stream_duplex();
	  options = options || {};

	  // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream,
	  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

	  // if _final has been called
	  this.finalCalled = false;

	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // has it been destroyed
	  this.destroyed = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // Should close be emitted on destroy. Defaults to true.
	  this.emitClose = options.emitClose !== false;

	  // Should .destroy() be called after 'finish' (and potentially 'end')
	  this.autoDestroy = !!options.autoDestroy;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function writableStateBufferGetter() {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
	    });
	  } catch (_) {}
	})();

	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function value(object) {
	      if (realHasInstance.call(this, object)) return true;
	      if (this !== Writable) return false;
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function realHasInstance(object) {
	    return object instanceof this;
	  };
	}
	function Writable(options) {
	  Duplex = Duplex || require_stream_duplex();

	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.

	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.

	  // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the WritableState constructor, at least with V8 6.5
	  var isDuplex = this instanceof Duplex;
	  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
	  this._writableState = new WritableState(options, this, isDuplex);

	  // legacy.
	  this.writable = true;
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	    if (typeof options.writev === 'function') this._writev = options.writev;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	    if (typeof options.final === 'function') this._final = options.final;
	  }
	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
	};
	function writeAfterEnd(stream, cb) {
	  var er = new ERR_STREAM_WRITE_AFTER_END();
	  // TODO: defer error events consistently everywhere, not just the cb
	  errorOrDestroy(stream, er);
	  dist.process.nextTick(cb, er);
	}

	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk(stream, state, chunk, cb) {
	  var er;
	  if (chunk === null) {
	    er = new ERR_STREAM_NULL_VALUES();
	  } else if (typeof chunk !== 'string' && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
	  }
	  if (er) {
	    errorOrDestroy(stream, er);
	    dist.process.nextTick(cb, er);
	    return false;
	  }
	  return true;
	}
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = !state.objectMode && _isUint8Array(chunk);
	  if (isBuf && !Buffer.isBuffer(chunk)) {
	    chunk = _uint8ArrayToBuffer(chunk);
	  }
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	  if (typeof cb !== 'function') cb = nop;
	  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }
	  return ret;
	};
	Writable.prototype.cork = function () {
	  this._writableState.corked++;
	};
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	  if (state.corked) {
	    state.corked--;
	    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	Object.defineProperty(Writable.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer.from(chunk, encoding);
	  }
	  return chunk;
	}
	Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	});

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    var newChunk = decodeChunk(state, chunk, encoding);
	    if (chunk !== newChunk) {
	      isBuf = true;
	      encoding = 'buffer';
	      chunk = newChunk;
	    }
	  }
	  var len = state.objectMode ? 1 : chunk.length;
	  state.length += len;
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = {
	      chunk: chunk,
	      encoding: encoding,
	      isBuf: isBuf,
	      callback: cb,
	      next: null
	    };
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	  return ret;
	}
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) {
	    // defer the callback if we are being called synchronously
	    // to avoid piling up things on the stack
	    dist.process.nextTick(cb, er);
	    // this can emit finish, and it will always happen
	    // after error
	    dist.process.nextTick(finishMaybe, stream, state);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy(stream, er);
	  } else {
	    // the caller expect this to happen before if
	    // it is async
	    cb(er);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy(stream, er);
	    // this can emit finish, but finish must
	    // always follow error
	    finishMaybe(stream, state);
	  }
	}
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
	  onwriteStateUpdate(state);
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state) || stream.destroyed;
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	    if (sync) {
	      dist.process.nextTick(afterWrite, stream, state, finished, cb);
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	    var count = 0;
	    var allBuffers = true;
	    while (entry) {
	      buffer[count] = entry;
	      if (!entry.isBuf) allBuffers = false;
	      entry = entry.next;
	      count += 1;
	    }
	    buffer.allBuffers = allBuffers;
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	    state.bufferedRequestCount = 0;
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      state.bufferedRequestCount--;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
	};
	Writable.prototype._writev = null;
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending) endWritable(this, state, cb);
	  return this;
	};
	Object.defineProperty(Writable.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	});
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	function callFinal(stream, state) {
	  stream._final(function (err) {
	    state.pendingcb--;
	    if (err) {
	      errorOrDestroy(stream, err);
	    }
	    state.prefinished = true;
	    stream.emit('prefinish');
	    finishMaybe(stream, state);
	  });
	}
	function prefinish(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
	    if (typeof stream._final === 'function' && !state.destroyed) {
	      state.pendingcb++;
	      state.finalCalled = true;
	      dist.process.nextTick(callFinal, stream, state);
	    } else {
	      state.prefinished = true;
	      stream.emit('prefinish');
	    }
	  }
	}
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    prefinish(stream, state);
	    if (state.pendingcb === 0) {
	      state.finished = true;
	      stream.emit('finish');
	      if (state.autoDestroy) {
	        // In case of duplex streams we need a way to detect
	        // if the readable side is ready for autoDestroy as well
	        var rState = stream._readableState;
	        if (!rState || rState.autoDestroy && rState.endEmitted) {
	          stream.destroy();
	        }
	      }
	    }
	  }
	  return need;
	}
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) dist.process.nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	function onCorkedFinish(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;
	  while (entry) {
	    var cb = entry.callback;
	    state.pendingcb--;
	    cb(err);
	    entry = entry.next;
	  }

	  // reuse the free corkReq.
	  state.corkedRequestsFree.next = corkReq;
	}
	Object.defineProperty(Writable.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._writableState === undefined) {
	      return false;
	    }
	    return this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._writableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._writableState.destroyed = value;
	  }
	});
	Writable.prototype.destroy = destroyImpl.destroy;
	Writable.prototype._undestroy = destroyImpl.undestroy;
	Writable.prototype._destroy = function (err, cb) {
	  cb(err);
	};
	return _stream_writable;
}

var _stream_duplex;
var hasRequired_stream_duplex;

function require_stream_duplex () {
	if (hasRequired_stream_duplex) return _stream_duplex;
	hasRequired_stream_duplex = 1;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	};
	/*</replacement>*/

	_stream_duplex = Duplex;
	var Readable = require_stream_readable();
	var Writable = require_stream_writable();
	inherits_browserExports(Duplex, Readable);
	{
	  // Allow the keys array to be GC'ed.
	  var keys = objectKeys(Writable.prototype);
	  for (var v = 0; v < keys.length; v++) {
	    var method = keys[v];
	    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	  }
	}
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	  Readable.call(this, options);
	  Writable.call(this, options);
	  this.allowHalfOpen = true;
	  if (options) {
	    if (options.readable === false) this.readable = false;
	    if (options.writable === false) this.writable = false;
	    if (options.allowHalfOpen === false) {
	      this.allowHalfOpen = false;
	      this.once('end', onend);
	    }
	  }
	}
	Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	});

	// the no-half-open enforcer
	function onend() {
	  // If the writable side ended, then we're ok.
	  if (this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  dist.process.nextTick(onEndNT, this);
	}
	function onEndNT(self) {
	  self.end();
	}
	Object.defineProperty(Duplex.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	    this._writableState.destroyed = value;
	  }
	});
	return _stream_duplex;
}

var string_decoder = {};

var safeBuffer = {exports: {}};

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

var hasRequiredSafeBuffer;

function requireSafeBuffer () {
	if (hasRequiredSafeBuffer) return safeBuffer.exports;
	hasRequiredSafeBuffer = 1;
	(function (module, exports) {
		/* eslint-disable node/no-deprecated-api */
		var buffer$1 = buffer;
		var Buffer = buffer$1.Buffer;

		// alternative to using Object.keys for old browsers
		function copyProps (src, dst) {
		  for (var key in src) {
		    dst[key] = src[key];
		  }
		}
		if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
		  module.exports = buffer$1;
		} else {
		  // Copy properties from require('buffer')
		  copyProps(buffer$1, exports);
		  exports.Buffer = SafeBuffer;
		}

		function SafeBuffer (arg, encodingOrOffset, length) {
		  return Buffer(arg, encodingOrOffset, length)
		}

		SafeBuffer.prototype = Object.create(Buffer.prototype);

		// Copy static methods from Buffer
		copyProps(Buffer, SafeBuffer);

		SafeBuffer.from = function (arg, encodingOrOffset, length) {
		  if (typeof arg === 'number') {
		    throw new TypeError('Argument must not be a number')
		  }
		  return Buffer(arg, encodingOrOffset, length)
		};

		SafeBuffer.alloc = function (size, fill, encoding) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  var buf = Buffer(size);
		  if (fill !== undefined) {
		    if (typeof encoding === 'string') {
		      buf.fill(fill, encoding);
		    } else {
		      buf.fill(fill);
		    }
		  } else {
		    buf.fill(0);
		  }
		  return buf
		};

		SafeBuffer.allocUnsafe = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  return Buffer(size)
		};

		SafeBuffer.allocUnsafeSlow = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  return buffer$1.SlowBuffer(size)
		}; 
	} (safeBuffer, safeBuffer.exports));
	return safeBuffer.exports;
}

var hasRequiredString_decoder;

function requireString_decoder () {
	if (hasRequiredString_decoder) return string_decoder;
	hasRequiredString_decoder = 1;

	/*<replacement>*/

	var Buffer = requireSafeBuffer().Buffer;
	/*</replacement>*/

	var isEncoding = Buffer.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};

	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	}
	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	string_decoder.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer.allocUnsafe(nb);
	}

	StringDecoder.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};

	StringDecoder.prototype.end = utf8End;

	// Returns only complete characters in a Buffer
	StringDecoder.prototype.text = utf8Text;

	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};

	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte. If an invalid byte is detected, -2 is returned.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return byte >> 6 === 0x02 ? -1 : -2;
	}

	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}

	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd';
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd';
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd';
	      }
	    }
	  }
	}

	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}

	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}

	// For UTF-8, a replacement character is added when ending on a partial
	// character.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd';
	  return r;
	}

	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}

	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}

	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}

	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}

	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}

	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}
	return string_decoder;
}

var ERR_STREAM_PREMATURE_CLOSE = errorsBrowser.codes.ERR_STREAM_PREMATURE_CLOSE;
function once$1(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop$1() {}
function isRequest$1(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function eos$1(stream, opts, callback) {
  if (typeof opts === 'function') return eos$1(stream, null, opts);
  if (!opts) opts = {};
  callback = once$1(callback || noop$1);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;
  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };
  var writableEnded = stream._writableState && stream._writableState.finished;
  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };
  var readableEnded = stream._readableState && stream._readableState.endEmitted;
  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };
  var onerror = function onerror(err) {
    callback.call(stream, err);
  };
  var onclose = function onclose() {
    var err;
    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };
  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };
  if (isRequest$1(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}
var endOfStream = eos$1;

var async_iterator;
var hasRequiredAsync_iterator;

function requireAsync_iterator () {
	if (hasRequiredAsync_iterator) return async_iterator;
	hasRequiredAsync_iterator = 1;

	var _Object$setPrototypeO;
	function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
	function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
	var finished = endOfStream;
	var kLastResolve = Symbol('lastResolve');
	var kLastReject = Symbol('lastReject');
	var kError = Symbol('error');
	var kEnded = Symbol('ended');
	var kLastPromise = Symbol('lastPromise');
	var kHandlePromise = Symbol('handlePromise');
	var kStream = Symbol('stream');
	function createIterResult(value, done) {
	  return {
	    value: value,
	    done: done
	  };
	}
	function readAndResolve(iter) {
	  var resolve = iter[kLastResolve];
	  if (resolve !== null) {
	    var data = iter[kStream].read();
	    // we defer if data is null
	    // we can be expecting either 'end' or
	    // 'error'
	    if (data !== null) {
	      iter[kLastPromise] = null;
	      iter[kLastResolve] = null;
	      iter[kLastReject] = null;
	      resolve(createIterResult(data, false));
	    }
	  }
	}
	function onReadable(iter) {
	  // we wait for the next tick, because it might
	  // emit an error with process.nextTick
	  dist.process.nextTick(readAndResolve, iter);
	}
	function wrapForNext(lastPromise, iter) {
	  return function (resolve, reject) {
	    lastPromise.then(function () {
	      if (iter[kEnded]) {
	        resolve(createIterResult(undefined, true));
	        return;
	      }
	      iter[kHandlePromise](resolve, reject);
	    }, reject);
	  };
	}
	var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
	var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
	  get stream() {
	    return this[kStream];
	  },
	  next: function next() {
	    var _this = this;
	    // if we have detected an error in the meanwhile
	    // reject straight away
	    var error = this[kError];
	    if (error !== null) {
	      return Promise.reject(error);
	    }
	    if (this[kEnded]) {
	      return Promise.resolve(createIterResult(undefined, true));
	    }
	    if (this[kStream].destroyed) {
	      // We need to defer via nextTick because if .destroy(err) is
	      // called, the error will be emitted via nextTick, and
	      // we cannot guarantee that there is no error lingering around
	      // waiting to be emitted.
	      return new Promise(function (resolve, reject) {
	        dist.process.nextTick(function () {
	          if (_this[kError]) {
	            reject(_this[kError]);
	          } else {
	            resolve(createIterResult(undefined, true));
	          }
	        });
	      });
	    }

	    // if we have multiple next() calls
	    // we will wait for the previous Promise to finish
	    // this logic is optimized to support for await loops,
	    // where next() is only called once at a time
	    var lastPromise = this[kLastPromise];
	    var promise;
	    if (lastPromise) {
	      promise = new Promise(wrapForNext(lastPromise, this));
	    } else {
	      // fast path needed to support multiple this.push()
	      // without triggering the next() queue
	      var data = this[kStream].read();
	      if (data !== null) {
	        return Promise.resolve(createIterResult(data, false));
	      }
	      promise = new Promise(this[kHandlePromise]);
	    }
	    this[kLastPromise] = promise;
	    return promise;
	  }
	}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
	  return this;
	}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
	  var _this2 = this;
	  // destroy(err, cb) is a private API
	  // we can guarantee we have that here, because we control the
	  // Readable class this is attached to
	  return new Promise(function (resolve, reject) {
	    _this2[kStream].destroy(null, function (err) {
	      if (err) {
	        reject(err);
	        return;
	      }
	      resolve(createIterResult(undefined, true));
	    });
	  });
	}), _Object$setPrototypeO), AsyncIteratorPrototype);
	var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
	  var _Object$create;
	  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
	    value: stream,
	    writable: true
	  }), _defineProperty(_Object$create, kLastResolve, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kLastReject, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kError, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kEnded, {
	    value: stream._readableState.endEmitted,
	    writable: true
	  }), _defineProperty(_Object$create, kHandlePromise, {
	    value: function value(resolve, reject) {
	      var data = iterator[kStream].read();
	      if (data) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        resolve(createIterResult(data, false));
	      } else {
	        iterator[kLastResolve] = resolve;
	        iterator[kLastReject] = reject;
	      }
	    },
	    writable: true
	  }), _Object$create));
	  iterator[kLastPromise] = null;
	  finished(stream, function (err) {
	    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
	      var reject = iterator[kLastReject];
	      // reject if we are waiting for data in the Promise
	      // returned by next() and store the error
	      if (reject !== null) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        reject(err);
	      }
	      iterator[kError] = err;
	      return;
	    }
	    var resolve = iterator[kLastResolve];
	    if (resolve !== null) {
	      iterator[kLastPromise] = null;
	      iterator[kLastResolve] = null;
	      iterator[kLastReject] = null;
	      resolve(createIterResult(undefined, true));
	    }
	    iterator[kEnded] = true;
	  });
	  stream.on('readable', onReadable.bind(null, iterator));
	  return iterator;
	};
	async_iterator = createReadableStreamAsyncIterator;
	return async_iterator;
}

var fromBrowser;
var hasRequiredFromBrowser;

function requireFromBrowser () {
	if (hasRequiredFromBrowser) return fromBrowser;
	hasRequiredFromBrowser = 1;
	fromBrowser = function () {
	  throw new Error('Readable.from is not available in the browser')
	};
	return fromBrowser;
}

var _stream_readable;
var hasRequired_stream_readable;

function require_stream_readable () {
	if (hasRequired_stream_readable) return _stream_readable;
	hasRequired_stream_readable = 1;

	_stream_readable = Readable;

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	/*<replacement>*/
	eventsExports.EventEmitter;
	var EElistenerCount = function EElistenerCount(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = streamBrowser;
	/*</replacement>*/

	var Buffer = buffer.Buffer;
	var OurUint8Array = (typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}

	/*<replacement>*/
	var debugUtil = util$6;
	var debug;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function debug() {};
	}
	/*</replacement>*/

	var BufferList = requireBuffer_list();
	var destroyImpl = destroy_1;
	var _require = state,
	  getHighWaterMark = _require.getHighWaterMark;
	var _require$codes = errorsBrowser.codes,
	  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

	// Lazy loaded to improve the startup performance.
	var StringDecoder;
	var createReadableStreamAsyncIterator;
	var from;
	inherits_browserExports(Readable, Stream);
	var errorOrDestroy = destroyImpl.errorOrDestroy;
	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

	  // This is a hack to make sure that our error handler is attached before any
	  // userland ones.  NEVER DO THIS. This is here only because this code needs
	  // to continue to work with older versions of Node.js that do not include
	  // the prependListener() method. The goal is to eventually remove this hack.
	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	}
	function ReadableState(options, stream, isDuplex) {
	  Duplex = Duplex || require_stream_duplex();
	  options = options || {};

	  // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.
	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the event 'readable'/'data' is emitted
	  // immediately, or on a later tick.  We set this to true at first, because
	  // any actions that shouldn't happen until "later" should generally also
	  // not happen before the first read call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	  this.paused = true;

	  // Should close be emitted on destroy. Defaults to true.
	  this.emitClose = options.emitClose !== false;

	  // Should .destroy() be called after 'end' (and potentially 'finish')
	  this.autoDestroy = !!options.autoDestroy;

	  // has it been destroyed
	  this.destroyed = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	function Readable(options) {
	  Duplex = Duplex || require_stream_duplex();
	  if (!(this instanceof Readable)) return new Readable(options);

	  // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the ReadableState constructor, at least with V8 6.5
	  var isDuplex = this instanceof Duplex;
	  this._readableState = new ReadableState(options, this, isDuplex);

	  // legacy
	  this.readable = true;
	  if (options) {
	    if (typeof options.read === 'function') this._read = options.read;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }
	  Stream.call(this);
	}
	Object.defineProperty(Readable.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._readableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	  }
	});
	Readable.prototype.destroy = destroyImpl.destroy;
	Readable.prototype._undestroy = destroyImpl.undestroy;
	Readable.prototype._destroy = function (err, cb) {
	  cb(err);
	};

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;
	  if (!state.objectMode) {
	    if (typeof chunk === 'string') {
	      encoding = encoding || state.defaultEncoding;
	      if (encoding !== state.encoding) {
	        chunk = Buffer.from(chunk, encoding);
	        encoding = '';
	      }
	      skipChunkCheck = true;
	    }
	  } else {
	    skipChunkCheck = true;
	  }
	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  return readableAddChunk(this, chunk, null, true, false);
	};
	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  debug('readableAddChunk', chunk);
	  var state = stream._readableState;
	  if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else {
	    var er;
	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
	    if (er) {
	      errorOrDestroy(stream, er);
	    } else if (state.objectMode || chunk && chunk.length > 0) {
	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
	        chunk = _uint8ArrayToBuffer(chunk);
	      }
	      if (addToFront) {
	        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
	      } else if (state.ended) {
	        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
	      } else if (state.destroyed) {
	        return false;
	      } else {
	        state.reading = false;
	        if (state.decoder && !encoding) {
	          chunk = state.decoder.write(chunk);
	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
	        } else {
	          addChunk(stream, state, chunk, false);
	        }
	      }
	    } else if (!addToFront) {
	      state.reading = false;
	      maybeReadMore(stream, state);
	    }
	  }

	  // We can push more data if we are below the highWaterMark.
	  // Also, if we have no data yet, we can stand some more bytes.
	  // This is to work around cases where hwm=0, such as the repl.
	  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
	}
	function addChunk(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
	    state.awaitDrain = 0;
	    stream.emit('data', chunk);
	  } else {
	    // update the buffer info.
	    state.length += state.objectMode ? 1 : chunk.length;
	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	    if (state.needReadable) emitReadable(stream);
	  }
	  maybeReadMore(stream, state);
	}
	function chunkInvalid(state, chunk) {
	  var er;
	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
	  }
	  return er;
	}
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
	  var decoder = new StringDecoder(enc);
	  this._readableState.decoder = decoder;
	  // If setEncoding(null), decoder.encoding equals utf8
	  this._readableState.encoding = this._readableState.decoder.encoding;

	  // Iterate over current buffer to convert already stored Buffers:
	  var p = this._readableState.buffer.head;
	  var content = '';
	  while (p !== null) {
	    content += decoder.write(p.data);
	    p = p.next;
	  }
	  this._readableState.buffer.clear();
	  if (content !== '') this._readableState.buffer.push(content);
	  this._readableState.length = content.length;
	  return this;
	};

	// Don't raise the hwm > 1GB
	var MAX_HWM = 0x40000000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	  if (ret === null) {
	    state.needReadable = state.length <= state.highWaterMark;
	    n = 0;
	  } else {
	    state.length -= n;
	    state.awaitDrain = 0;
	  }
	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }
	  if (ret !== null) this.emit('data', ret);
	  return ret;
	};
	function onEofChunk(stream, state) {
	  debug('onEofChunk');
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	  if (state.sync) {
	    // if we are sync, wait until next tick to emit the data.
	    // Otherwise we risk emitting data in the flow()
	    // the readable code triggers during a read() call
	    emitReadable(stream);
	  } else {
	    // emit 'readable' now to make sure it gets picked up.
	    state.needReadable = false;
	    if (!state.emittedReadable) {
	      state.emittedReadable = true;
	      emitReadable_(stream);
	    }
	  }
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  debug('emitReadable', state.needReadable, state.emittedReadable);
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    dist.process.nextTick(emitReadable_, stream);
	  }
	}
	function emitReadable_(stream) {
	  var state = stream._readableState;
	  debug('emitReadable_', state.destroyed, state.length, state.ended);
	  if (!state.destroyed && (state.length || state.ended)) {
	    stream.emit('readable');
	    state.emittedReadable = false;
	  }

	  // The stream needs another readable event if
	  // 1. It is not flowing, as the flow mechanism will take
	  //    care of it.
	  // 2. It is not ended.
	  // 3. It is below the highWaterMark, so we can schedule
	  //    another readable later.
	  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    dist.process.nextTick(maybeReadMore_, stream, state);
	  }
	}
	function maybeReadMore_(stream, state) {
	  // Attempt to read more data if we should.
	  //
	  // The conditions for reading more data are (one of):
	  // - Not enough data buffered (state.length < state.highWaterMark). The loop
	  //   is responsible for filling the buffer with enough data if such data
	  //   is available. If highWaterMark is 0 and we are not in the flowing mode
	  //   we should _not_ attempt to buffer any extra data. We'll get more data
	  //   when the stream consumer calls read() instead.
	  // - No data in the buffer, and the stream is in flowing mode. In this mode
	  //   the loop below is responsible for ensuring read() is called. Failing to
	  //   call read here would abort the flow and there's no other mechanism for
	  //   continuing the flow if the stream consumer has just subscribed to the
	  //   'data' event.
	  //
	  // In addition to the above conditions to keep reading data, the following
	  // conditions prevent the data from being read:
	  // - The stream has ended (state.ended).
	  // - There is already a pending 'read' operation (state.reading). This is a
	  //   case where the the stream has called the implementation defined _read()
	  //   method, but they are processing the call asynchronously and have _not_
	  //   called push() with new data. In this case we skip performing more
	  //   read()s. The execution ends in this method again after the _read() ends
	  //   up calling push() with more data.
	  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
	    var len = state.length;
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
	};
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== dist.process.stdout && dest !== dist.process.stderr;
	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) dist.process.nextTick(endFn);else src.once('end', endFn);
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable, unpipeInfo) {
	    debug('onunpipe');
	    if (readable === src) {
	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	        unpipeInfo.hasUnpiped = true;
	        cleanup();
	      }
	    }
	  }
	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', unpipe);
	    src.removeListener('data', ondata);
	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    debug('dest.write', ret);
	    if (ret === false) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', state.awaitDrain);
	        state.awaitDrain++;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	  return dest;
	};
	function pipeOnDrain(src) {
	  return function pipeOnDrainFunctionResult() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = {
	    hasUnpiped: false
	  };

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this, unpipeInfo);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
	      hasUnpiped: false
	    });
	    return this;
	  }

	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	  dest.emit('unpipe', this, unpipeInfo);
	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	  var state = this._readableState;
	  if (ev === 'data') {
	    // update readableListening so that resume() may be a no-op
	    // a few lines down. This is needed to support once('readable').
	    state.readableListening = this.listenerCount('readable') > 0;

	    // Try start flowing on next tick if stream isn't explicitly paused
	    if (state.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.flowing = false;
	      state.emittedReadable = false;
	      debug('on readable', state.length, state.reading);
	      if (state.length) {
	        emitReadable(this);
	      } else if (!state.reading) {
	        dist.process.nextTick(nReadingNextTick, this);
	      }
	    }
	  }
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	Readable.prototype.removeListener = function (ev, fn) {
	  var res = Stream.prototype.removeListener.call(this, ev, fn);
	  if (ev === 'readable') {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    dist.process.nextTick(updateReadableListening, this);
	  }
	  return res;
	};
	Readable.prototype.removeAllListeners = function (ev) {
	  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
	  if (ev === 'readable' || ev === undefined) {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    dist.process.nextTick(updateReadableListening, this);
	  }
	  return res;
	};
	function updateReadableListening(self) {
	  var state = self._readableState;
	  state.readableListening = self.listenerCount('readable') > 0;
	  if (state.resumeScheduled && !state.paused) {
	    // flowing needs to be set to true now, otherwise
	    // the upcoming resume will not flow.
	    state.flowing = true;

	    // crude way to check if we should resume
	  } else if (self.listenerCount('data') > 0) {
	    self.resume();
	  }
	}
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    // we flow only if there is no one listening
	    // for readable, but we still have to call
	    // resume()
	    state.flowing = !state.readableListening;
	    resume(this, state);
	  }
	  state.paused = false;
	  return this;
	};
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    dist.process.nextTick(resume_, stream, state);
	  }
	}
	function resume_(stream, state) {
	  debug('resume', state.reading);
	  if (!state.reading) {
	    stream.read(0);
	  }
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (this._readableState.flowing !== false) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  this._readableState.paused = true;
	  return this;
	};
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null);
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var _this = this;
	  var state = this._readableState;
	  var paused = false;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) _this.push(chunk);
	    }
	    _this.push(null);
	  });
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	    var ret = _this.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function methodWrap(method) {
	        return function methodWrapReturnFunction() {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
	  }

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  this._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	  return this;
	};
	if (typeof Symbol === 'function') {
	  Readable.prototype[Symbol.asyncIterator] = function () {
	    if (createReadableStreamAsyncIterator === undefined) {
	      createReadableStreamAsyncIterator = requireAsync_iterator();
	    }
	    return createReadableStreamAsyncIterator(this);
	  };
	}
	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.highWaterMark;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState && this._readableState.buffer;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableFlowing', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.flowing;
	  },
	  set: function set(state) {
	    if (this._readableState) {
	      this._readableState.flowing = state;
	    }
	  }
	});

	// exposed for testing purposes only.
	Readable._fromList = fromList;
	Object.defineProperty(Readable.prototype, 'readableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.length;
	  }
	});

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = state.buffer.consume(n, state.decoder);
	  }
	  return ret;
	}
	function endReadable(stream) {
	  var state = stream._readableState;
	  debug('endReadable', state.endEmitted);
	  if (!state.endEmitted) {
	    state.ended = true;
	    dist.process.nextTick(endReadableNT, state, stream);
	  }
	}
	function endReadableNT(state, stream) {
	  debug('endReadableNT', state.endEmitted, state.length);

	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	    if (state.autoDestroy) {
	      // In case of duplex streams we need a way to detect
	      // if the writable side is ready for autoDestroy as well
	      var wState = stream._writableState;
	      if (!wState || wState.autoDestroy && wState.finished) {
	        stream.destroy();
	      }
	    }
	  }
	}
	if (typeof Symbol === 'function') {
	  Readable.from = function (iterable, opts) {
	    if (from === undefined) {
	      from = requireFromBrowser();
	    }
	    return from(Readable, iterable, opts);
	  };
	}
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	return _stream_readable;
}

var _stream_transform = Transform$1;
var _require$codes$1 = errorsBrowser.codes,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes$1.ERR_MULTIPLE_CALLBACK,
  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING,
  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require_stream_duplex();
inherits_browserExports(Transform$1, Duplex);
function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data != null)
    // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform$1(options) {
  if (!(this instanceof Transform$1)) return new Transform$1(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}
Transform$1.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform$1.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform$1.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform$1.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
Transform$1.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};
function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null)
    // single equals check for both `null` and `undefined`
    stream.push(data);

  // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

var _stream_passthrough = PassThrough;
var Transform = _stream_transform;
inherits_browserExports(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

var eos;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = errorsBrowser.codes,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = endOfStream;
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true;

    // request.destroy just do .end - .abort is what we want
    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
var pipeline_1 = pipeline;

(function (module, exports) {
	exports = module.exports = require_stream_readable();
	exports.Stream = exports;
	exports.Readable = exports;
	exports.Writable = require_stream_writable();
	exports.Duplex = require_stream_duplex();
	exports.Transform = _stream_transform;
	exports.PassThrough = _stream_passthrough;
	exports.finished = endOfStream;
	exports.pipeline = pipeline_1; 
} (readableBrowser, readableBrowser.exports));

var readableBrowserExports = readableBrowser.exports;

var capability$1 = capability$2;
var inherits$1 = inherits_browserExports;
var stream$1 = readableBrowserExports;

var rStates$1 = response$1.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
};

var IncomingMessage$1 = response$1.IncomingMessage = function (xhr, response, mode, resetTimers) {
	var self = this;
	stream$1.Readable.call(self);

	self._mode = mode;
	self.headers = {};
	self.rawHeaders = [];
	self.trailers = {};
	self.rawTrailers = [];

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		dist.process.nextTick(function () {
			self.emit('close');
		});
	});

	if (mode === 'fetch') {
		self._fetchResponse = response;

		self.url = response.url;
		self.statusCode = response.status;
		self.statusMessage = response.statusText;
		
		response.headers.forEach(function (header, key){
			self.headers[key.toLowerCase()] = header;
			self.rawHeaders.push(key, header);
		});

		if (capability$1.writableStream) {
			var writable = new WritableStream({
				write: function (chunk) {
					resetTimers(false);
					return new Promise(function (resolve, reject) {
						if (self._destroyed) {
							reject();
						} else if(self.push(dist.Buffer.from(chunk))) {
							resolve();
						} else {
							self._resumeFetch = resolve;
						}
					})
				},
				close: function () {
					resetTimers(true);
					if (!self._destroyed)
						self.push(null);
				},
				abort: function (err) {
					resetTimers(true);
					if (!self._destroyed)
						self.emit('error', err);
				}
			});

			try {
				response.body.pipeTo(writable).catch(function (err) {
					resetTimers(true);
					if (!self._destroyed)
						self.emit('error', err);
				});
				return
			} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
		}
		// fallback for when writableStream or pipeTo aren't available
		var reader = response.body.getReader();
		function read () {
			reader.read().then(function (result) {
				if (self._destroyed)
					return
				resetTimers(result.done);
				if (result.done) {
					self.push(null);
					return
				}
				self.push(dist.Buffer.from(result.value));
				read();
			}).catch(function (err) {
				resetTimers(true);
				if (!self._destroyed)
					self.emit('error', err);
			});
		}
		read();
	} else {
		self._xhr = xhr;
		self._pos = 0;

		self.url = xhr.responseURL;
		self.statusCode = xhr.status;
		self.statusMessage = xhr.statusText;
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
		headers.forEach(function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/);
			if (matches) {
				var key = matches[1].toLowerCase();
				if (key === 'set-cookie') {
					if (self.headers[key] === undefined) {
						self.headers[key] = [];
					}
					self.headers[key].push(matches[2]);
				} else if (self.headers[key] !== undefined) {
					self.headers[key] += ', ' + matches[2];
				} else {
					self.headers[key] = matches[2];
				}
				self.rawHeaders.push(matches[1], matches[2]);
			}
		});

		self._charset = 'x-user-defined';
		if (!capability$1.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type'];
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase();
				}
			}
			if (!self._charset)
				self._charset = 'utf-8'; // best guess
		}
	}
};

inherits$1(IncomingMessage$1, stream$1.Readable);

IncomingMessage$1.prototype._read = function () {
	var self = this;

	var resolve = self._resumeFetch;
	if (resolve) {
		self._resumeFetch = null;
		resolve();
	}
};

IncomingMessage$1.prototype._onXHRProgress = function (resetTimers) {
	var self = this;

	var xhr = self._xhr;

	var response = null;
	switch (self._mode) {
		case 'text':
			response = xhr.responseText;
			if (response.length > self._pos) {
				var newData = response.substr(self._pos);
				if (self._charset === 'x-user-defined') {
					var buffer = dist.Buffer.alloc(newData.length);
					for (var i = 0; i < newData.length; i++)
						buffer[i] = newData.charCodeAt(i) & 0xff;

					self.push(buffer);
				} else {
					self.push(newData, self._charset);
				}
				self._pos = response.length;
			}
			break
		case 'arraybuffer':
			if (xhr.readyState !== rStates$1.DONE || !xhr.response)
				break
			response = xhr.response;
			self.push(dist.Buffer.from(new Uint8Array(response)));
			break
		case 'moz-chunked-arraybuffer': // take whole
			response = xhr.response;
			if (xhr.readyState !== rStates$1.LOADING || !response)
				break
			self.push(dist.Buffer.from(new Uint8Array(response)));
			break
		case 'ms-stream':
			response = xhr.response;
			if (xhr.readyState !== rStates$1.LOADING)
				break
			var reader = new commonjsGlobal.MSStreamReader();
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(dist.Buffer.from(new Uint8Array(reader.result.slice(self._pos))));
					self._pos = reader.result.byteLength;
				}
			};
			reader.onload = function () {
				resetTimers(true);
				self.push(null);
			};
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response);
			break
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates$1.DONE && self._mode !== 'ms-stream') {
		resetTimers(true);
		self.push(null);
	}
};

var capability = capability$2;
var inherits = inherits_browserExports;
var response = response$1;
var stream = readableBrowserExports;

var IncomingMessage = response.IncomingMessage;
var rStates = response.readyStates;

function decideMode (preferBinary, useFetch) {
	if (capability.fetch && useFetch) {
		return 'fetch'
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer'
	} else if (capability.msstream) {
		return 'ms-stream'
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer'
	} else {
		return 'text'
	}
}

var ClientRequest = request.exports = function (opts) {
	var self = this;
	stream.Writable.call(self);

	self._opts = opts;
	self._body = [];
	self._headers = {};
	if (opts.auth)
		self.setHeader('Authorization', 'Basic ' + dist.Buffer.from(opts.auth).toString('base64'));
	Object.keys(opts.headers).forEach(function (name) {
		self.setHeader(name, opts.headers[name]);
	});

	var preferBinary;
	var useFetch = true;
	if (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {
		// If the use of XHR should be preferred. Not typically needed.
		useFetch = false;
		preferBinary = true;
	} else if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false;
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType;
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true;
	} else {
		throw new Error('Invalid value for opts.mode')
	}
	self._mode = decideMode(preferBinary, useFetch);
	self._fetchTimer = null;
	self._socketTimeout = null;
	self._socketTimer = null;

	self.on('finish', function () {
		self._onFinish();
	});
};

inherits(ClientRequest, stream.Writable);

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this;
	var lowerName = name.toLowerCase();
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (unsafeHeaders.indexOf(lowerName) !== -1)
		return

	self._headers[lowerName] = {
		name: name,
		value: value
	};
};

ClientRequest.prototype.getHeader = function (name) {
	var header = this._headers[name.toLowerCase()];
	if (header)
		return header.value
	return null
};

ClientRequest.prototype.removeHeader = function (name) {
	var self = this;
	delete self._headers[name.toLowerCase()];
};

ClientRequest.prototype._onFinish = function () {
	var self = this;

	if (self._destroyed)
		return
	var opts = self._opts;

	if ('timeout' in opts && opts.timeout !== 0) {
		self.setTimeout(opts.timeout);
	}

	var headersObj = self._headers;
	var body = null;
	if (opts.method !== 'GET' && opts.method !== 'HEAD') {
        body = new Blob(self._body, {
            type: (headersObj['content-type'] || {}).value || ''
        });
    }

	// create flattened list of headers
	var headersList = [];
	Object.keys(headersObj).forEach(function (keyName) {
		var name = headersObj[keyName].name;
		var value = headersObj[keyName].value;
		if (Array.isArray(value)) {
			value.forEach(function (v) {
				headersList.push([name, v]);
			});
		} else {
			headersList.push([name, value]);
		}
	});

	if (self._mode === 'fetch') {
		var signal = null;
		if (capability.abortController) {
			var controller = new AbortController();
			signal = controller.signal;
			self._fetchAbortController = controller;

			if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
				self._fetchTimer = commonjsGlobal.setTimeout(function () {
					self.emit('requestTimeout');
					if (self._fetchAbortController)
						self._fetchAbortController.abort();
				}, opts.requestTimeout);
			}
		}

		commonjsGlobal.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headersList,
			body: body || undefined,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin',
			signal: signal
		}).then(function (response) {
			self._fetchResponse = response;
			self._resetTimers(false);
			self._connect();
		}, function (reason) {
			self._resetTimers(true);
			if (!self._destroyed)
				self.emit('error', reason);
		});
	} else {
		var xhr = self._xhr = new commonjsGlobal.XMLHttpRequest();
		try {
			xhr.open(self._opts.method, self._opts.url, true);
		} catch (err) {
			dist.process.nextTick(function () {
				self.emit('error', err);
			});
			return
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr)
			xhr.responseType = self._mode;

		if ('withCredentials' in xhr)
			xhr.withCredentials = !!opts.withCredentials;

		if (self._mode === 'text' && 'overrideMimeType' in xhr)
			xhr.overrideMimeType('text/plain; charset=x-user-defined');

		if ('requestTimeout' in opts) {
			xhr.timeout = opts.requestTimeout;
			xhr.ontimeout = function () {
				self.emit('requestTimeout');
			};
		}

		headersList.forEach(function (header) {
			xhr.setRequestHeader(header[0], header[1]);
		});

		self._response = null;
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress();
					break
			}
		};
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress();
			};
		}

		xhr.onerror = function () {
			if (self._destroyed)
				return
			self._resetTimers(true);
			self.emit('error', new Error('XHR error'));
		};

		try {
			xhr.send(body);
		} catch (err) {
			dist.process.nextTick(function () {
				self.emit('error', err);
			});
			return
		}
	}
};

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */
function statusValid (xhr) {
	try {
		var status = xhr.status;
		return (status !== null && status !== 0)
	} catch (e) {
		return false
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this;

	self._resetTimers(false);

	if (!statusValid(self._xhr) || self._destroyed)
		return

	if (!self._response)
		self._connect();

	self._response._onXHRProgress(self._resetTimers.bind(self));
};

ClientRequest.prototype._connect = function () {
	var self = this;

	if (self._destroyed)
		return

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._resetTimers.bind(self));
	self._response.on('error', function(err) {
		self.emit('error', err);
	});

	self.emit('response', self._response);
};

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this;

	self._body.push(chunk);
	cb();
};

ClientRequest.prototype._resetTimers = function (done) {
	var self = this;

	commonjsGlobal.clearTimeout(self._socketTimer);
	self._socketTimer = null;

	if (done) {
		commonjsGlobal.clearTimeout(self._fetchTimer);
		self._fetchTimer = null;
	} else if (self._socketTimeout) {
		self._socketTimer = commonjsGlobal.setTimeout(function () {
			self.emit('timeout');
		}, self._socketTimeout);
	}
};

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function (err) {
	var self = this;
	self._destroyed = true;
	self._resetTimers(true);
	if (self._response)
		self._response._destroyed = true;
	if (self._xhr)
		self._xhr.abort();
	else if (self._fetchAbortController)
		self._fetchAbortController.abort();

	if (err)
		self.emit('error', err);
};

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this;
	if (typeof data === 'function') {
		cb = data;
		data = undefined;
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb);
};

ClientRequest.prototype.setTimeout = function (timeout, cb) {
	var self = this;

	if (cb)
		self.once('timeout', cb);

	self._socketTimeout = timeout;
	self._resetTimers(false);
};

ClientRequest.prototype.flushHeaders = function () {};
ClientRequest.prototype.setNoDelay = function () {};
ClientRequest.prototype.setSocketKeepAlive = function () {};

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
	'accept-charset',
	'accept-encoding',
	'access-control-request-headers',
	'access-control-request-method',
	'connection',
	'content-length',
	'cookie',
	'cookie2',
	'date',
	'dnt',
	'expect',
	'host',
	'keep-alive',
	'origin',
	'referer',
	'te',
	'trailer',
	'transfer-encoding',
	'upgrade',
	'via'
];

var requestExports = request.exports;

var immutable = extend;

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function extend() {
    var target = {};

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
            if (hasOwnProperty$1.call(source, key)) {
                target[key] = source[key];
            }
        }
    }

    return target
}

var browser = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
};

var url$5 = {exports: {}};

var punycode = {exports: {}};

/*! https://mths.be/punycode v1.4.1 by @mathias */
punycode.exports;

(function (module, exports) {
(function(root) {

		/** Detect free variables */
		var freeExports = exports &&
			!exports.nodeType && exports;
		var freeModule = module &&
			!module.nodeType && module;
		var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw new RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * https://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.4.1',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (freeExports && freeModule) {
			if (module.exports == freeExports) {
				// in Node.js, io.js, or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else {
				// in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else {
			// in Rhino or a web browser
			root.punycode = punycode;
		}

	}(commonjsGlobal)); 
} (punycode, punycode.exports));

var punycodeExports = punycode.exports;

var querystring = {exports: {}};

var querystringEs3 = {};

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var decode = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray$1(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray$1 = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

var encode = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

querystringEs3.decode = querystringEs3.parse = decode;
querystringEs3.encode = querystringEs3.stringify = encode;

(function (module, exports) {

	Object.defineProperty(exports, '__esModule', { value: true });

	var querystringEs3$1 = querystringEs3;

	/**
	 * @typedef {import('querystring').escape} qsEscape
	 * @typedef {import('querystring').unescape} qsUnescape
	 */
	/**
	 * @type {qsEscape}
	 */

	function qsEscape(string) {
	  return encodeURIComponent(string);
	}
	/**
	 * @type {qsUnescape}
	 */


	function qsUnescape(string) {
	  return decodeURIComponent(string);
	}

	var api = {
	  decode: querystringEs3$1.decode,
	  encode: querystringEs3$1.encode,
	  parse: querystringEs3$1.parse,
	  stringify: querystringEs3$1.stringify,
	  escape: qsEscape,
	  unescape: qsUnescape
	};

	Object.defineProperty(exports, 'decode', {
		enumerable: true,
		get: function () { return querystringEs3$1.decode; }
	});
	Object.defineProperty(exports, 'encode', {
		enumerable: true,
		get: function () { return querystringEs3$1.encode; }
	});
	Object.defineProperty(exports, 'parse', {
		enumerable: true,
		get: function () { return querystringEs3$1.parse; }
	});
	Object.defineProperty(exports, 'stringify', {
		enumerable: true,
		get: function () { return querystringEs3$1.stringify; }
	});
	exports["default"] = api;
	exports.escape = qsEscape;
	exports.unescape = qsUnescape;

	exports = module.exports = api;
	
} (querystring, querystring.exports));

var querystringExports = querystring.exports;

(function (module, exports) {

	Object.defineProperty(exports, '__esModule', { value: true });

	var require$$0 = punycodeExports;
	var require$$2 = querystringExports;

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);
	var require$$2__default = /*#__PURE__*/_interopDefaultLegacy(require$$2);

	var util$1 = {
	  isString: function(arg) {
	    return typeof(arg) === 'string';
	  },
	  isObject: function(arg) {
	    return typeof(arg) === 'object' && arg !== null;
	  },
	  isNull: function(arg) {
	    return arg === null;
	  },
	  isNullOrUndefined: function(arg) {
	    return arg == null;
	  }
	};

	var punycode = require$$0__default["default"];
	var util = util$1;

	var parse = urlParse;
	var resolve$1 = urlResolve;
	var resolveObject = urlResolveObject;
	var format = urlFormat;

	var Url_1 = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // Special case for a simple path URL
	    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = require$$2__default["default"];

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	      splitter =
	          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	      uSplit = url.split(splitter),
	      slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      this.path = rest;
	      this.href = rest;
	      this.pathname = simplePath[1];
	      if (simplePath[2]) {
	        this.search = simplePath[2];
	        if (parseQueryString) {
	          this.query = querystring.parse(this.search.substr(1));
	        } else {
	          this.query = this.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        this.search = '';
	        this.query = {};
	      }
	      return this;
	    }
	  }

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      this.hostname = punycode.toASCII(this.hostname);
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      util.isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (util.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host || srcPath.length > 1) &&
	      (last === '.' || last === '..') || last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// path.resolve([from ...], to)
	// posix version
	function resolve() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : '/';

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	}function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	var _globalThis = function (Object) {
	  function get() {
	    var _global = this || self;

	    delete Object.prototype.__magic__;
	    return _global;
	  }

	  if (typeof globalThis === "object") {
	    return globalThis;
	  }

	  if (this) {
	    return get();
	  } else {
	    Object.defineProperty(Object.prototype, "__magic__", {
	      configurable: true,
	      get: get
	    });
	    var _global = __magic__;
	    return _global;
	  }
	}(Object);
	var formatImport =
	/** @type {formatImport}*/
	format;
	var parseImport =
	/** @type {parseImport}*/
	parse;
	var resolveImport =
	/** @type {resolveImport}*/
	resolve$1; // @ts-ignore

	var UrlImport =
	/** @type {UrlImport}*/
	Url_1;
	var URL = _globalThis.URL;
	/* eslint-disable-next-line unicorn/prevent-abbreviations */

	var URLSearchParams = _globalThis.URLSearchParams;
	var percentRegEx = /%/g;
	var backslashRegEx = /\\/g;
	var newlineRegEx = /\n/g;
	var carriageReturnRegEx = /\r/g;
	var tabRegEx = /\t/g;
	var CHAR_FORWARD_SLASH = 47;
	/**
	 * @param {unknown} instance
	 */

	function isURLInstance(instance) {
	  var resolved =
	  /** @type {URL|null} */
	  instance != null ? instance : null;
	  return Boolean(resolved !== null && (resolved == null ? void 0 : resolved.href) && (resolved == null ? void 0 : resolved.origin));
	}
	/**
	 * @param {URL} url
	 */


	function getPathFromURLPosix(url) {
	  if (url.hostname !== '') {
	    throw new TypeError("File URL host must be \"localhost\" or empty on browser");
	  }

	  var pathname = url.pathname;

	  for (var n = 0; n < pathname.length; n++) {
	    if (pathname[n] === '%') {
	      // @ts-ignore
	      var third = pathname.codePointAt(n + 2) | 0x20;

	      if (pathname[n + 1] === '2' && third === 102) {
	        throw new TypeError('File URL path must not include encoded / characters');
	      }
	    }
	  }

	  return decodeURIComponent(pathname);
	}
	/**
	 * @param {string} filepath
	 */


	function encodePathChars(filepath) {
	  if (filepath.includes('%')) {
	    filepath = filepath.replace(percentRegEx, '%25');
	  }

	  if (filepath.includes('\\')) {
	    filepath = filepath.replace(backslashRegEx, '%5C');
	  }

	  if (filepath.includes('\n')) {
	    filepath = filepath.replace(newlineRegEx, '%0A');
	  }

	  if (filepath.includes('\r')) {
	    filepath = filepath.replace(carriageReturnRegEx, '%0D');
	  }

	  if (filepath.includes('\t')) {
	    filepath = filepath.replace(tabRegEx, '%09');
	  }

	  return filepath;
	}

	var domainToASCII =
	/**
	 * @type {domainToASCII}
	 */
	function domainToASCII(domain) {
	  if (typeof domain === 'undefined') {
	    throw new TypeError('The "domain" argument must be specified');
	  }

	  return new URL("http://" + domain).hostname;
	};

	var domainToUnicode =
	/**
	 * @type {domainToUnicode}
	 */
	function domainToUnicode(domain) {
	  if (typeof domain === 'undefined') {
	    throw new TypeError('The "domain" argument must be specified');
	  }

	  return new URL("http://" + domain).hostname;
	};

	var pathToFileURL =
	/**
	 * @type {(url: string) => URL}
	 */
	function pathToFileURL(filepath) {
	  var outURL = new URL('file://');
	  var resolved = resolve(filepath);
	  var filePathLast = filepath.charCodeAt(filepath.length - 1);

	  if (filePathLast === CHAR_FORWARD_SLASH && resolved[resolved.length - 1] !== '/') {
	    resolved += '/';
	  }

	  outURL.pathname = encodePathChars(resolved);
	  return outURL;
	};

	var fileURLToPath =
	/**
	 * @type {fileURLToPath & ((path: string | URL) => string)}
	 */
	function fileURLToPath(path) {
	  if (!isURLInstance(path) && typeof path !== 'string') {
	    throw new TypeError("The \"path\" argument must be of type string or an instance of URL. Received type " + typeof path + " (" + path + ")");
	  }

	  var resolved = new URL(path);

	  if (resolved.protocol !== 'file:') {
	    throw new TypeError('The URL must be of scheme file');
	  }

	  return getPathFromURLPosix(resolved);
	};

	var formatImportWithOverloads =
	/**
	 * @type {(
	 *   ((urlObject: URL, options?: URLFormatOptions) => string) &
	 *   ((urlObject: UrlObject | string, options?: never) => string)
	 * )}
	 */
	function formatImportWithOverloads(urlObject, options) {
	  var _options$auth, _options$fragment, _options$search;

	  if (options === void 0) {
	    options = {};
	  }

	  if (!(urlObject instanceof URL)) {
	    return formatImport(urlObject);
	  }

	  if (typeof options !== 'object' || options === null) {
	    throw new TypeError('The "options" argument must be of type object.');
	  }

	  var auth = (_options$auth = options.auth) != null ? _options$auth : true;
	  var fragment = (_options$fragment = options.fragment) != null ? _options$fragment : true;
	  var search = (_options$search = options.search) != null ? _options$search : true;
	  var parsed = new URL(urlObject.toString());

	  if (!auth) {
	    parsed.username = '';
	    parsed.password = '';
	  }

	  if (!fragment) {
	    parsed.hash = '';
	  }

	  if (!search) {
	    parsed.search = '';
	  }

	  return parsed.toString();
	};

	var api = {
	  format: formatImportWithOverloads,
	  parse: parseImport,
	  resolve: resolveImport,
	  resolveObject: resolveObject,
	  Url: UrlImport,
	  URL: URL,
	  URLSearchParams: URLSearchParams,
	  domainToASCII: domainToASCII,
	  domainToUnicode: domainToUnicode,
	  pathToFileURL: pathToFileURL,
	  fileURLToPath: fileURLToPath
	};

	exports.URL = URL;
	exports.URLSearchParams = URLSearchParams;
	exports.Url = UrlImport;
	exports["default"] = api;
	exports.domainToASCII = domainToASCII;
	exports.domainToUnicode = domainToUnicode;
	exports.fileURLToPath = fileURLToPath;
	exports.format = formatImportWithOverloads;
	exports.parse = parseImport;
	exports.pathToFileURL = pathToFileURL;
	exports.resolve = resolveImport;
	exports.resolveObject = resolveObject;

	exports = module.exports = api;
	
} (url$5, url$5.exports));

var urlExports = url$5.exports;

(function (exports) {
	var ClientRequest = requestExports;
	var response = response$1;
	var extend = immutable;
	var statusCodes = browser;
	var url = urlExports;

	var http = exports;

	http.request = function (opts, cb) {
		if (typeof opts === 'string')
			opts = url.parse(opts);
		else
			opts = extend(opts);

		// Normally, the page is loaded from http or https, so not specifying a protocol
		// will result in a (valid) protocol-relative url. However, this won't work if
		// the protocol is something else, like 'file:'
		var defaultProtocol = commonjsGlobal.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

		var protocol = opts.protocol || defaultProtocol;
		var host = opts.hostname || opts.host;
		var port = opts.port;
		var path = opts.path || '/';

		// Necessary for IPv6 addresses
		if (host && host.indexOf(':') !== -1)
			host = '[' + host + ']';

		// This may be a relative url. The browser should always be able to interpret it correctly.
		opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;
		opts.method = (opts.method || 'GET').toUpperCase();
		opts.headers = opts.headers || {};

		// Also valid opts.auth, opts.mode

		var req = new ClientRequest(opts);
		if (cb)
			req.on('response', cb);
		return req
	};

	http.get = function get (opts, cb) {
		var req = http.request(opts, cb);
		req.end();
		return req
	};

	http.ClientRequest = ClientRequest;
	http.IncomingMessage = response.IncomingMessage;

	http.Agent = function () {};
	http.Agent.defaultMaxSockets = 4;

	http.globalAgent = new http.Agent();

	http.STATUS_CODES = statusCodes;

	http.METHODS = [
		'CHECKOUT',
		'CONNECT',
		'COPY',
		'DELETE',
		'GET',
		'HEAD',
		'LOCK',
		'M-SEARCH',
		'MERGE',
		'MKACTIVITY',
		'MKCOL',
		'MOVE',
		'NOTIFY',
		'OPTIONS',
		'PATCH',
		'POST',
		'PROPFIND',
		'PROPPATCH',
		'PURGE',
		'PUT',
		'REPORT',
		'SEARCH',
		'SUBSCRIBE',
		'TRACE',
		'UNLOCK',
		'UNSUBSCRIBE'
	]; 
} (streamHttp));

var httpsBrowserify = {exports: {}};

(function (module) {
	var http = streamHttp;
	var url = urlExports;

	var https = module.exports;

	for (var key in http) {
	  if (http.hasOwnProperty(key)) https[key] = http[key];
	}

	https.request = function (params, cb) {
	  params = validateParams(params);
	  return http.request.call(this, params, cb)
	};

	https.get = function (params, cb) {
	  params = validateParams(params);
	  return http.get.call(this, params, cb)
	};

	function validateParams (params) {
	  if (typeof params === 'string') {
	    params = url.parse(params);
	  }
	  if (!params.protocol) {
	    params.protocol = 'https:';
	  }
	  if (params.protocol !== 'https:') {
	    throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"')
	  }
	  return params
	} 
} (httpsBrowserify));

var httpsBrowserifyExports = httpsBrowserify.exports;

var HTTP_RESOURCE_PATTERN = /^http:\/\//;

function isHttpResource$1(uri) {
  return HTTP_RESOURCE_PATTERN.test(uri);
}

var isHttpResource_1 = isHttpResource$1;

var HTTPS_RESOURCE_PATTERN = /^https:\/\//;

function isHttpsResource$1(uri) {
  return HTTPS_RESOURCE_PATTERN.test(uri);
}

var isHttpsResource_1 = isHttpsResource$1;

var http = streamHttp;
var https = httpsBrowserifyExports;
var url$4 = urlExports;

var isHttpResource = isHttpResource_1;
var isHttpsResource = isHttpsResource_1;
var override$1 = override_1;

var HTTP_PROTOCOL$1 = 'http:';

function loadRemoteResource$1(uri, inlineRequest, inlineTimeout, callback) {
  var proxyProtocol = inlineRequest.protocol || inlineRequest.hostname;
  var errorHandled = false;
  var requestOptions;
  var fetch;

  requestOptions = override$1(
    url$4.parse(uri),
    inlineRequest || {}
  );

  if (inlineRequest.hostname !== undefined) {
    // overwrite as we always expect a http proxy currently
    requestOptions.protocol = inlineRequest.protocol || HTTP_PROTOCOL$1;
    requestOptions.path = requestOptions.href;
  }

  fetch = (proxyProtocol && !isHttpsResource(proxyProtocol)) || isHttpResource(uri)
    ? http.get
    : https.get;

  fetch(requestOptions, function(res) {
    var chunks = [];
    var movedUri;

    if (errorHandled) {
      return;
    }

    if (res.statusCode < 200 || res.statusCode > 399) {
      return callback(res.statusCode, null);
    } if (res.statusCode > 299) {
      movedUri = url$4.resolve(uri, res.headers.location);
      return loadRemoteResource$1(movedUri, inlineRequest, inlineTimeout, callback);
    }

    res.on('data', function(chunk) {
      chunks.push(chunk.toString());
    });
    res.on('end', function() {
      var body = chunks.join('');
      callback(null, body);
    });
  })
    .on('error', function(res) {
      if (errorHandled) {
        return;
      }

      errorHandled = true;
      callback(res.message, null);
    })
    .on('timeout', function() {
      if (errorHandled) {
        return;
      }

      errorHandled = true;
      callback('timeout', null);
    })
    .setTimeout(inlineTimeout);
}

var loadRemoteResource_1 = loadRemoteResource$1;

var loadRemoteResource = loadRemoteResource_1;

function fetchFrom$1(callback) {
  return callback || loadRemoteResource;
}

var fetch = fetchFrom$1;

function inlineOptionsFrom(rules) {
  if (Array.isArray(rules)) {
    return rules;
  }

  if (rules === false) {
    return ['none'];
  }

  return undefined === rules
    ? ['local']
    : rules.split(',');
}

var inline$1 = inlineOptionsFrom;

var url$3 = urlExports;

var override = override_1;

function inlineRequestFrom$1(option) {
  return override(
    /* jshint camelcase: false */
    proxyOptionsFrom({}.HTTP_PROXY || {}.http_proxy),
    option || {}
  );
}

function proxyOptionsFrom(httpProxy) {
  return httpProxy
    ? {
      hostname: url$3.parse(httpProxy).hostname,
      port: parseInt(url$3.parse(httpProxy).port)
    }
    : {};
}

var inlineRequest = inlineRequestFrom$1;

var DEFAULT_TIMEOUT = 5000;

function inlineTimeoutFrom$1(option) {
  return option || DEFAULT_TIMEOUT;
}

var inlineTimeout = inlineTimeoutFrom$1;

function pluginsFrom$1(plugins) {
  var flatPlugins = {
    level1Value: [],
    level1Property: [],
    level2Block: []
  };

  plugins = plugins || [];

  flatPlugins.level1Value = plugins
    .map(function(plugin) { return plugin.level1 && plugin.level1.value; })
    .filter(function(plugin) { return plugin != null; });

  flatPlugins.level1Property = plugins
    .map(function(plugin) { return plugin.level1 && plugin.level1.property; })
    .filter(function(plugin) { return plugin != null; });

  flatPlugins.level2Block = plugins
    .map(function(plugin) { return plugin.level2 && plugin.level2.block; })
    .filter(function(plugin) { return plugin != null; });

  return flatPlugins;
}

var plugins$1 = pluginsFrom$1;

function rebaseFrom$1(rebaseOption, rebaseToOption) {
  if (undefined !== rebaseToOption) {
    return true;
  } if (undefined === rebaseOption) {
    return false;
  }
  return !!rebaseOption;
}

var rebase$3 = rebaseFrom$1;

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) ; else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = dist.process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

var pathBrowserify = posix;

var path$7 = pathBrowserify;

function rebaseToFrom$1(option) {
  return option ? path$7.resolve(option) : dist.process.cwd();
}

var rebaseTo = rebaseToFrom$1;

var sourceMap = {};

var sourceMapGenerator = {};

var base64Vlq = {};

var base64$1 = {};

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
base64$1.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
base64$1.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = base64$1;

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
base64Vlq.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
base64Vlq.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};

var util$5 = {};

/* -*- Mode: js; js-indent-level: 2; -*- */

(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	/**
	 * This is a helper function for getting values from parameter/options
	 * objects.
	 *
	 * @param args The object we are extracting values from
	 * @param name The name of the property we are getting.
	 * @param defaultValue An optional value to return if the property is missing
	 * from the object. If this is not specified and the property is missing, an
	 * error will be thrown.
	 */
	function getArg(aArgs, aName, aDefaultValue) {
	  if (aName in aArgs) {
	    return aArgs[aName];
	  } else if (arguments.length === 3) {
	    return aDefaultValue;
	  } else {
	    throw new Error('"' + aName + '" is a required argument.');
	  }
	}
	exports.getArg = getArg;

	var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
	var dataUrlRegexp = /^data:.+\,.+$/;

	function urlParse(aUrl) {
	  var match = aUrl.match(urlRegexp);
	  if (!match) {
	    return null;
	  }
	  return {
	    scheme: match[1],
	    auth: match[2],
	    host: match[3],
	    port: match[4],
	    path: match[5]
	  };
	}
	exports.urlParse = urlParse;

	function urlGenerate(aParsedUrl) {
	  var url = '';
	  if (aParsedUrl.scheme) {
	    url += aParsedUrl.scheme + ':';
	  }
	  url += '//';
	  if (aParsedUrl.auth) {
	    url += aParsedUrl.auth + '@';
	  }
	  if (aParsedUrl.host) {
	    url += aParsedUrl.host;
	  }
	  if (aParsedUrl.port) {
	    url += ":" + aParsedUrl.port;
	  }
	  if (aParsedUrl.path) {
	    url += aParsedUrl.path;
	  }
	  return url;
	}
	exports.urlGenerate = urlGenerate;

	/**
	 * Normalizes a path, or the path portion of a URL:
	 *
	 * - Replaces consecutive slashes with one slash.
	 * - Removes unnecessary '.' parts.
	 * - Removes unnecessary '<dir>/..' parts.
	 *
	 * Based on code in the Node.js 'path' core module.
	 *
	 * @param aPath The path or url to normalize.
	 */
	function normalize(aPath) {
	  var path = aPath;
	  var url = urlParse(aPath);
	  if (url) {
	    if (!url.path) {
	      return aPath;
	    }
	    path = url.path;
	  }
	  var isAbsolute = exports.isAbsolute(path);

	  var parts = path.split(/\/+/);
	  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	    part = parts[i];
	    if (part === '.') {
	      parts.splice(i, 1);
	    } else if (part === '..') {
	      up++;
	    } else if (up > 0) {
	      if (part === '') {
	        // The first part is blank if the path is absolute. Trying to go
	        // above the root is a no-op. Therefore we can remove all '..' parts
	        // directly after the root.
	        parts.splice(i + 1, up);
	        up = 0;
	      } else {
	        parts.splice(i, 2);
	        up--;
	      }
	    }
	  }
	  path = parts.join('/');

	  if (path === '') {
	    path = isAbsolute ? '/' : '.';
	  }

	  if (url) {
	    url.path = path;
	    return urlGenerate(url);
	  }
	  return path;
	}
	exports.normalize = normalize;

	/**
	 * Joins two paths/URLs.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be joined with the root.
	 *
	 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	 *   first.
	 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	 *   is updated with the result and aRoot is returned. Otherwise the result
	 *   is returned.
	 *   - If aPath is absolute, the result is aPath.
	 *   - Otherwise the two paths are joined with a slash.
	 * - Joining for example 'http://' and 'www.example.com' is also supported.
	 */
	function join(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	  if (aPath === "") {
	    aPath = ".";
	  }
	  var aPathUrl = urlParse(aPath);
	  var aRootUrl = urlParse(aRoot);
	  if (aRootUrl) {
	    aRoot = aRootUrl.path || '/';
	  }

	  // `join(foo, '//www.example.org')`
	  if (aPathUrl && !aPathUrl.scheme) {
	    if (aRootUrl) {
	      aPathUrl.scheme = aRootUrl.scheme;
	    }
	    return urlGenerate(aPathUrl);
	  }

	  if (aPathUrl || aPath.match(dataUrlRegexp)) {
	    return aPath;
	  }

	  // `join('http://', 'www.example.com')`
	  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	    aRootUrl.host = aPath;
	    return urlGenerate(aRootUrl);
	  }

	  var joined = aPath.charAt(0) === '/'
	    ? aPath
	    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

	  if (aRootUrl) {
	    aRootUrl.path = joined;
	    return urlGenerate(aRootUrl);
	  }
	  return joined;
	}
	exports.join = join;

	exports.isAbsolute = function (aPath) {
	  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
	};

	/**
	 * Make a path relative to a URL or another path.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be made relative to aRoot.
	 */
	function relative(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }

	  aRoot = aRoot.replace(/\/$/, '');

	  // It is possible for the path to be above the root. In this case, simply
	  // checking whether the root is a prefix of the path won't work. Instead, we
	  // need to remove components from the root one by one, until either we find
	  // a prefix that fits, or we run out of components to remove.
	  var level = 0;
	  while (aPath.indexOf(aRoot + '/') !== 0) {
	    var index = aRoot.lastIndexOf("/");
	    if (index < 0) {
	      return aPath;
	    }

	    // If the only part of the root that is left is the scheme (i.e. http://,
	    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	    // have exhausted all components, so the path is not relative to the root.
	    aRoot = aRoot.slice(0, index);
	    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	      return aPath;
	    }

	    ++level;
	  }

	  // Make sure we add a "../" for each component we removed from the root.
	  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	}
	exports.relative = relative;

	var supportsNullProto = (function () {
	  var obj = Object.create(null);
	  return !('__proto__' in obj);
	}());

	function identity (s) {
	  return s;
	}

	/**
	 * Because behavior goes wacky when you set `__proto__` on objects, we
	 * have to prefix all the strings in our set with an arbitrary character.
	 *
	 * See https://github.com/mozilla/source-map/pull/31 and
	 * https://github.com/mozilla/source-map/issues/30
	 *
	 * @param String aStr
	 */
	function toSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return '$' + aStr;
	  }

	  return aStr;
	}
	exports.toSetString = supportsNullProto ? identity : toSetString;

	function fromSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return aStr.slice(1);
	  }

	  return aStr;
	}
	exports.fromSetString = supportsNullProto ? identity : fromSetString;

	function isProtoString(s) {
	  if (!s) {
	    return false;
	  }

	  var length = s.length;

	  if (length < 9 /* "__proto__".length */) {
	    return false;
	  }

	  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
	      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
	      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
	      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 9) !== 95  /* '_' */) {
	    return false;
	  }

	  for (var i = length - 10; i >= 0; i--) {
	    if (s.charCodeAt(i) !== 36 /* '$' */) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Comparator between two mappings where the original positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same original source/line/column, but different generated
	 * line and column the same. Useful when searching for a mapping with a
	 * stubbed out mapping.
	 */
	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	  var cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0 || onlyCompareOriginal) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByOriginalPositions = compareByOriginalPositions;

	/**
	 * Comparator between two mappings with deflated source and name indices where
	 * the generated positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same generated line and column, but different
	 * source/name/original line and column the same. Useful when searching for a
	 * mapping with a stubbed out mapping.
	 */
	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0 || onlyCompareGenerated) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

	function strcmp(aStr1, aStr2) {
	  if (aStr1 === aStr2) {
	    return 0;
	  }

	  if (aStr1 === null) {
	    return 1; // aStr2 !== null
	  }

	  if (aStr2 === null) {
	    return -1; // aStr1 !== null
	  }

	  if (aStr1 > aStr2) {
	    return 1;
	  }

	  return -1;
	}

	/**
	 * Comparator between two mappings with inflated source and name strings where
	 * the generated positions are compared.
	 */
	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

	/**
	 * Strip any JSON XSSI avoidance prefix from the string (as documented
	 * in the source maps specification), and then parse the string as
	 * JSON.
	 */
	function parseSourceMapInput(str) {
	  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
	}
	exports.parseSourceMapInput = parseSourceMapInput;

	/**
	 * Compute the URL of a source given the the source root, the source's
	 * URL, and the source map's URL.
	 */
	function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
	  sourceURL = sourceURL || '';

	  if (sourceRoot) {
	    // This follows what Chrome does.
	    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
	      sourceRoot += '/';
	    }
	    // The spec says:
	    //   Line 4: An optional source root, useful for relocating source
	    //   files on a server or removing repeated values in the
	    //   “sources” entry.  This value is prepended to the individual
	    //   entries in the “source” field.
	    sourceURL = sourceRoot + sourceURL;
	  }

	  // Historically, SourceMapConsumer did not take the sourceMapURL as
	  // a parameter.  This mode is still somewhat supported, which is why
	  // this code block is conditional.  However, it's preferable to pass
	  // the source map URL to SourceMapConsumer, so that this function
	  // can implement the source URL resolution algorithm as outlined in
	  // the spec.  This block is basically the equivalent of:
	  //    new URL(sourceURL, sourceMapURL).toString()
	  // ... except it avoids using URL, which wasn't available in the
	  // older releases of node still supported by this library.
	  //
	  // The spec says:
	  //   If the sources are not absolute URLs after prepending of the
	  //   “sourceRoot”, the sources are resolved relative to the
	  //   SourceMap (like resolving script src in a html document).
	  if (sourceMapURL) {
	    var parsed = urlParse(sourceMapURL);
	    if (!parsed) {
	      throw new Error("sourceMapURL could not be parsed");
	    }
	    if (parsed.path) {
	      // Strip the last path component, but keep the "/".
	      var index = parsed.path.lastIndexOf('/');
	      if (index >= 0) {
	        parsed.path = parsed.path.substring(0, index + 1);
	      }
	    }
	    sourceURL = join(urlGenerate(parsed), sourceURL);
	  }

	  return normalize(sourceURL);
	}
	exports.computeSourceURL = computeSourceURL; 
} (util$5));

var arraySet = {};

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util$4 = util$5;
var has$1 = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet$2() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet$2.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet$2();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet$2.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet$2.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util$4.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has$1.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet$2.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util$4.toSetString(aStr);
    return has$1.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet$2.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util$4.toSetString(aStr);
    if (has$1.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet$2.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet$2.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

arraySet.ArraySet = ArraySet$2;

var mappingList = {};

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util$3 = util$5;

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util$3.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList$1() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList$1.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList$1.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList$1.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util$3.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

mappingList.MappingList = MappingList$1;

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ$1 = base64Vlq;
var util$2 = util$5;
var ArraySet$1 = arraySet.ArraySet;
var MappingList = mappingList.MappingList;

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator$2(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util$2.getArg(aArgs, 'file', null);
  this._sourceRoot = util$2.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util$2.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet$1();
  this._names = new ArraySet$1();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator$2.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator$2.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator$2({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util$2.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util$2.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator$2.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util$2.getArg(aArgs, 'generated');
    var original = util$2.getArg(aArgs, 'original', null);
    var source = util$2.getArg(aArgs, 'source', null);
    var name = util$2.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator$2.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util$2.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util$2.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util$2.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator$2.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util$2.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet$1();
    var newNames = new ArraySet$1();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util$2.join(aSourceMapPath, mapping.source);
          }
          if (sourceRoot != null) {
            mapping.source = util$2.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util$2.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util$2.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator$2.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator$2.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = '';

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util$2.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ$1.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ$1.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ$1.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ$1.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ$1.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator$2.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util$2.relative(aSourceRoot, source);
      }
      var key = util$2.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator$2.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator$2.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

sourceMapGenerator.SourceMapGenerator = SourceMapGenerator$2;

var sourceMapConsumer = {};

var binarySearch$1 = {};

/* -*- Mode: js; js-indent-level: 2; -*- */

(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	exports.GREATEST_LOWER_BOUND = 1;
	exports.LEAST_UPPER_BOUND = 2;

	/**
	 * Recursive implementation of binary search.
	 *
	 * @param aLow Indices here and lower do not contain the needle.
	 * @param aHigh Indices here and higher do not contain the needle.
	 * @param aNeedle The element being searched for.
	 * @param aHaystack The non-empty array being searched.
	 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 */
	function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	  // This function terminates when one of the following is true:
	  //
	  //   1. We find the exact element we are looking for.
	  //
	  //   2. We did not find the exact element, but we can return the index of
	  //      the next-closest element.
	  //
	  //   3. We did not find the exact element, and there is no next-closest
	  //      element than the one we are searching for, so we return -1.
	  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	  var cmp = aCompare(aNeedle, aHaystack[mid], true);
	  if (cmp === 0) {
	    // Found the element we are looking for.
	    return mid;
	  }
	  else if (cmp > 0) {
	    // Our needle is greater than aHaystack[mid].
	    if (aHigh - mid > 1) {
	      // The element is in the upper half.
	      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // The exact needle element was not found in this haystack. Determine if
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return aHigh < aHaystack.length ? aHigh : -1;
	    } else {
	      return mid;
	    }
	  }
	  else {
	    // Our needle is less than aHaystack[mid].
	    if (mid - aLow > 1) {
	      // The element is in the lower half.
	      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return mid;
	    } else {
	      return aLow < 0 ? -1 : aLow;
	    }
	  }
	}

	/**
	 * This is an implementation of binary search which will always try and return
	 * the index of the closest element if there is no exact hit. This is because
	 * mappings between original and generated line/col pairs are single points,
	 * and there is an implicit region between each of them, so a miss just means
	 * that you aren't on the very start of a region.
	 *
	 * @param aNeedle The element you are looking for.
	 * @param aHaystack The array that is being searched.
	 * @param aCompare A function which takes the needle and an element in the
	 *     array and returns -1, 0, or 1 depending on whether the needle is less
	 *     than, equal to, or greater than the element, respectively.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	 */
	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	  if (aHaystack.length === 0) {
	    return -1;
	  }

	  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	  if (index < 0) {
	    return -1;
	  }

	  // We have found either the exact element, or the next-closest element than
	  // the one we are searching for. However, there may be more than one such
	  // element. Make sure we always return the smallest of these.
	  while (index - 1 >= 0) {
	    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	      break;
	    }
	    --index;
	  }

	  return index;
	}; 
} (binarySearch$1));

var quickSort$1 = {};

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
quickSort$1.quickSort = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util$1 = util$5;
var binarySearch = binarySearch$1;
var ArraySet = arraySet.ArraySet;
var base64VLQ = base64Vlq;
var quickSort = quickSort$1.quickSort;

function SourceMapConsumer$1(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util$1.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer$1.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
};

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer$1.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer$1.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer$1.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer$1.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer$1.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer$1.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer$1.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer$1.GENERATED_ORDER = 1;
SourceMapConsumer$1.ORIGINAL_ORDER = 2;

SourceMapConsumer$1.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer$1.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer$1.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer$1.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer$1.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer$1.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util$1.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer$1.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util$1.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util$1.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util$1.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util$1.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util$1.getArg(mapping, 'generatedLine', null),
            column: util$1.getArg(mapping, 'generatedColumn', null),
            lastColumn: util$1.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util$1.getArg(mapping, 'generatedLine', null),
            column: util$1.getArg(mapping, 'generatedColumn', null),
            lastColumn: util$1.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

sourceMapConsumer.SourceMapConsumer = SourceMapConsumer$1;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util$1.parseSourceMapInput(aSourceMap);
  }

  var version = util$1.getArg(sourceMap, 'version');
  var sources = util$1.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util$1.getArg(sourceMap, 'names', []);
  var sourceRoot = util$1.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util$1.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util$1.getArg(sourceMap, 'mappings');
  var file = util$1.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  if (sourceRoot) {
    sourceRoot = util$1.normalize(sourceRoot);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util$1.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util$1.isAbsolute(sourceRoot) && util$1.isAbsolute(source)
        ? util$1.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this._absoluteSources = this._sources.toArray().map(function (s) {
    return util$1.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer$1.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer$1;

/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util$1.relative(this.sourceRoot, relativeSource);
  }

  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }

  // Maybe aSource is an absolute URL as returned by |sources|.  In
  // this case we can't simply undo the transform.
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }

  return -1;
};

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util$1.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util$1.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._absoluteSources.slice();
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util$1.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util$1.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util$1.getArg(aArgs, 'line'),
      generatedColumn: util$1.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util$1.compareByGeneratedPositionsDeflated,
      util$1.getArg(aArgs, 'bias', SourceMapConsumer$1.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util$1.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util$1.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util$1.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util$1.getArg(mapping, 'originalLine', null),
          column: util$1.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util$1.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util$1.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util$1.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util$1.getArg(aArgs, 'line'),
      originalColumn: util$1.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util$1.compareByOriginalPositions,
      util$1.getArg(aArgs, 'bias', SourceMapConsumer$1.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util$1.getArg(mapping, 'generatedLine', null),
          column: util$1.getArg(mapping, 'generatedColumn', null),
          lastColumn: util$1.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

sourceMapConsumer.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util$1.parseSourceMapInput(aSourceMap);
  }

  var version = util$1.getArg(sourceMap, 'version');
  var sections = util$1.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util$1.getArg(s, 'offset');
    var offsetLine = util$1.getArg(offset, 'line');
    var offsetColumn = util$1.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer$1(util$1.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer$1.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer$1;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util$1.getArg(aArgs, 'line'),
      generatedColumn: util$1.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util$1.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util$1.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util$1.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util$1.compareByOriginalPositions);
  };

sourceMapConsumer.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

var sourceNode = {};

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator$1 = sourceMapGenerator.SourceMapGenerator;
var util = util$5;

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator$1(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

sourceNode.SourceNode = SourceNode;

/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

sourceMap.SourceMapGenerator = sourceMapGenerator.SourceMapGenerator;
sourceMap.SourceMapConsumer = sourceMapConsumer.SourceMapConsumer;
sourceMap.SourceNode = sourceNode.SourceNode;

var SourceMapConsumer = sourceMap.SourceMapConsumer;

function inputSourceMapTracker$1() {
  var maps = {};

  return {
    all: all$6.bind(null, maps),
    isTracking: isTracking.bind(null, maps),
    originalPositionFor: originalPositionFor.bind(null, maps),
    track: track$2.bind(null, maps)
  };
}

function all$6(maps) {
  return maps;
}

function isTracking(maps, source) {
  return source in maps;
}

function originalPositionFor(maps, metadata, range, selectorFallbacks) {
  var line = metadata[0];
  var column = metadata[1];
  var source = metadata[2];
  var position = {
    line: line,
    column: column + range
  };
  var originalPosition;

  while (!originalPosition && position.column > column) {
    position.column--;
    originalPosition = maps[source].originalPositionFor(position);
  }

  if (!originalPosition || originalPosition.column < 0) {
    return metadata;
  }

  if (originalPosition.line === null && line > 1 && selectorFallbacks > 0) {
    return originalPositionFor(maps, [line - 1, column, source], range, selectorFallbacks - 1);
  }

  return originalPosition.line !== null
    ? toMetadata(originalPosition)
    : metadata;
}

function toMetadata(asHash) {
  return [asHash.line, asHash.column, asHash.source];
}

function track$2(maps, source, data) {
  maps[source] = new SourceMapConsumer(data);
}

var inputSourceMapTracker_1 = inputSourceMapTracker$1;

var empty$4 = null;

var empty_1 = empty$4;

var REMOTE_RESOURCE_PATTERN = /^(\w+:\/\/|\/\/)/;
var FILE_RESOURCE_PATTERN = /^file:\/\//;

function isRemoteResource$5(uri) {
  return REMOTE_RESOURCE_PATTERN.test(uri) && !FILE_RESOURCE_PATTERN.test(uri);
}

var isRemoteResource_1 = isRemoteResource$5;

var NO_PROTOCOL_RESOURCE_PATTERN = /^\/\//;

function hasProtocol$4(uri) {
  return !NO_PROTOCOL_RESOURCE_PATTERN.test(uri);
}

var hasProtocol_1 = hasProtocol$4;

var path$6 = pathBrowserify;
var url$2 = urlExports;

var isRemoteResource$4 = isRemoteResource_1;
var hasProtocol$3 = hasProtocol_1;

var HTTP_PROTOCOL = 'http:';

function isAllowedResource$3(uri, isRemote, rules) {
  var match;
  var absoluteUri;
  var allowed = !isRemote;
  var rule;
  var isNegated;
  var normalizedRule;
  var i;

  if (rules.length === 0) {
    return false;
  }

  if (isRemote && !hasProtocol$3(uri)) {
    uri = HTTP_PROTOCOL + uri;
  }

  match = isRemote
    ? url$2.parse(uri).host
    : uri;

  absoluteUri = isRemote
    ? uri
    : path$6.resolve(uri);

  for (i = 0; i < rules.length; i++) {
    rule = rules[i];
    isNegated = rule[0] == '!';
    normalizedRule = rule.substring(1);

    if (isNegated && isRemote && isRemoteRule(normalizedRule)) {
      allowed = allowed && !isAllowedResource$3(uri, true, [normalizedRule]);
    } else if (isNegated && !isRemote && !isRemoteRule(normalizedRule)) {
      allowed = allowed && !isAllowedResource$3(uri, false, [normalizedRule]);
    } else if (isNegated) {
      allowed = allowed && true;
    } else if (rule == 'all') {
      allowed = true;
    } else if (isRemote && rule == 'local') {
      allowed = allowed || false;
    } else if (isRemote && rule == 'remote') {
      allowed = true;
    } else if (!isRemote && rule == 'remote') {
      allowed = false;
    } else if (!isRemote && rule == 'local') {
      allowed = true;
    } else if (rule === match) {
      allowed = true;
    } else if (rule === uri) {
      allowed = true;
    } else if (isRemote && absoluteUri.indexOf(rule) === 0) {
      allowed = true;
    } else if (!isRemote && absoluteUri.indexOf(path$6.resolve(rule)) === 0) {
      allowed = true;
    } else if (isRemote != isRemoteRule(normalizedRule)) {
      allowed = allowed && true;
    } else {
      allowed = false;
    }
  }

  return allowed;
}

function isRemoteRule(rule) {
  return isRemoteResource$4(rule) || url$2.parse(HTTP_PROTOCOL + '//' + rule).host == rule;
}

var isAllowedResource_1 = isAllowedResource$3;

var DATA_URI_PATTERN$1 = /^data:(\S*?)?(;charset=(?:(?!;charset=)[^;])+)?(;[^,]+?)?,(.+)/;

function matchDataUri$1(uri) {
  return DATA_URI_PATTERN$1.exec(uri);
}

var matchDataUri_1 = matchDataUri$1;

var path$5 = pathBrowserify;

function rebaseLocalMap$2(sourceMap, sourceUri, rebaseTo) {
  var currentPath = path$5.resolve('');
  var absoluteUri = path$5.resolve(currentPath, sourceUri);
  var absoluteUriDirectory = path$5.dirname(absoluteUri);

  sourceMap.sources = sourceMap.sources.map(function(source) {
    return path$5.relative(rebaseTo, path$5.resolve(absoluteUriDirectory, source));
  });

  return sourceMap;
}

var rebaseLocalMap_1 = rebaseLocalMap$2;

var path$4 = pathBrowserify;
var url$1 = urlExports;

function rebaseRemoteMap$2(sourceMap, sourceUri) {
  var sourceDirectory = path$4.dirname(sourceUri);

  sourceMap.sources = sourceMap.sources.map(function(source) {
    return url$1.resolve(sourceDirectory, source);
  });

  return sourceMap;
}

var rebaseRemoteMap_1 = rebaseRemoteMap$2;

var DATA_URI_PATTERN = /^data:(\S{0,31}?)?(;charset=(?:(?!;charset=)[^;])+)?(;[^,]+?)?,(.+)/;

function isDataUriResource$2(uri) {
  return DATA_URI_PATTERN.test(uri);
}

var isDataUriResource_1 = isDataUriResource$2;

var fs$2 = empty_1;
var path$3 = pathBrowserify;

var isAllowedResource$2 = isAllowedResource_1;
var matchDataUri = matchDataUri_1;
var rebaseLocalMap$1 = rebaseLocalMap_1;
var rebaseRemoteMap$1 = rebaseRemoteMap_1;

var Token$3 = token;
var hasProtocol$2 = hasProtocol_1;
var isDataUriResource$1 = isDataUriResource_1;
var isRemoteResource$3 = isRemoteResource_1;

var MAP_MARKER_PATTERN = /^\/\*# sourceMappingURL=(\S+) \*\/$/;

function applySourceMaps$1(tokens, context, callback) {
  var applyContext = {
    callback: callback,
    fetch: context.options.fetch,
    index: 0,
    inline: context.options.inline,
    inlineRequest: context.options.inlineRequest,
    inlineTimeout: context.options.inlineTimeout,
    inputSourceMapTracker: context.inputSourceMapTracker,
    localOnly: context.localOnly,
    processedTokens: [],
    rebaseTo: context.options.rebaseTo,
    sourceTokens: tokens,
    warnings: context.warnings
  };

  return context.options.sourceMap && tokens.length > 0
    ? doApplySourceMaps(applyContext)
    : callback(tokens);
}

function doApplySourceMaps(applyContext) {
  var singleSourceTokens = [];
  var lastSource = findTokenSource(applyContext.sourceTokens[0]);
  var source;
  var token;
  var l;

  for (l = applyContext.sourceTokens.length; applyContext.index < l; applyContext.index++) {
    token = applyContext.sourceTokens[applyContext.index];
    source = findTokenSource(token);

    if (source != lastSource) {
      singleSourceTokens = [];
      lastSource = source;
    }

    singleSourceTokens.push(token);
    applyContext.processedTokens.push(token);

    if (token[0] == Token$3.COMMENT && MAP_MARKER_PATTERN.test(token[1])) {
      return fetchAndApplySourceMap(token[1], source, singleSourceTokens, applyContext);
    }
  }

  return applyContext.callback(applyContext.processedTokens);
}

function findTokenSource(token) {
  var scope;
  var metadata;

  if (token[0] == Token$3.AT_RULE || token[0] == Token$3.COMMENT || token[0] == Token$3.RAW) {
    metadata = token[2][0];
  } else {
    scope = token[1][0];
    metadata = scope[2][0];
  }

  return metadata[2];
}

function fetchAndApplySourceMap(sourceMapComment, source, singleSourceTokens, applyContext) {
  return extractInputSourceMapFrom(sourceMapComment, applyContext, function(inputSourceMap) {
    if (inputSourceMap) {
      applyContext.inputSourceMapTracker.track(source, inputSourceMap);
      applySourceMapRecursively(singleSourceTokens, applyContext.inputSourceMapTracker);
    }

    applyContext.index++;
    return doApplySourceMaps(applyContext);
  });
}

function extractInputSourceMapFrom(sourceMapComment, applyContext, whenSourceMapReady) {
  var uri = MAP_MARKER_PATTERN.exec(sourceMapComment)[1];
  var absoluteUri;
  var sourceMap;
  var rebasedMap;

  if (isDataUriResource$1(uri)) {
    sourceMap = extractInputSourceMapFromDataUri(uri);
    return whenSourceMapReady(sourceMap);
  } if (isRemoteResource$3(uri)) {
    return loadInputSourceMapFromRemoteUri(uri, applyContext, function(sourceMap) {
      var parsedMap;

      if (sourceMap) {
        parsedMap = JSON.parse(sourceMap);
        rebasedMap = rebaseRemoteMap$1(parsedMap, uri);
        whenSourceMapReady(rebasedMap);
      } else {
        whenSourceMapReady(null);
      }
    });
  }
  // at this point `uri` is already rebased, see lib/reader/rebase.js#rebaseSourceMapComment
  // it is rebased to be consistent with rebasing other URIs
  // however here we need to resolve it back to read it from disk
  absoluteUri = path$3.resolve(applyContext.rebaseTo, uri);
  sourceMap = loadInputSourceMapFromLocalUri(absoluteUri, applyContext);

  if (sourceMap) {
    rebasedMap = rebaseLocalMap$1(sourceMap, absoluteUri, applyContext.rebaseTo);
    return whenSourceMapReady(rebasedMap);
  }
  return whenSourceMapReady(null);
}

function extractInputSourceMapFromDataUri(uri) {
  var dataUriMatch = matchDataUri(uri);
  var charset = dataUriMatch[2] ? dataUriMatch[2].split(/[=;]/)[2] : 'us-ascii';
  var encoding = dataUriMatch[3] ? dataUriMatch[3].split(';')[1] : 'utf8';
  var data = encoding == 'utf8' ? commonjsGlobal.unescape(dataUriMatch[4]) : dataUriMatch[4];

  var buffer = dist.Buffer.from(data, encoding);
  buffer.charset = charset;

  return JSON.parse(buffer.toString());
}

function loadInputSourceMapFromRemoteUri(uri, applyContext, whenLoaded) {
  var isAllowed = isAllowedResource$2(uri, true, applyContext.inline);
  var isRuntimeResource = !hasProtocol$2(uri);

  if (applyContext.localOnly) {
    applyContext.warnings.push('Cannot fetch remote resource from "' + uri + '" as no callback given.');
    return whenLoaded(null);
  } if (isRuntimeResource) {
    applyContext.warnings.push('Cannot fetch "' + uri + '" as no protocol given.');
    return whenLoaded(null);
  } if (!isAllowed) {
    applyContext.warnings.push('Cannot fetch "' + uri + '" as resource is not allowed.');
    return whenLoaded(null);
  }

  applyContext.fetch(uri, applyContext.inlineRequest, applyContext.inlineTimeout, function(error, body) {
    if (error) {
      applyContext.warnings.push('Missing source map at "' + uri + '" - ' + error);
      return whenLoaded(null);
    }

    whenLoaded(body);
  });
}

function loadInputSourceMapFromLocalUri(uri, applyContext) {
  var isAllowed = isAllowedResource$2(uri, false, applyContext.inline);
  var sourceMap;

  if (!fs$2.existsSync(uri) || !fs$2.statSync(uri).isFile()) {
    applyContext.warnings.push('Ignoring local source map at "' + uri + '" as resource is missing.');
    return null;
  } if (!isAllowed) {
    applyContext.warnings.push('Cannot fetch "' + uri + '" as resource is not allowed.');
    return null;
  } if (!fs$2.statSync(uri).size) {
    applyContext.warnings.push('Cannot fetch "' + uri + '" as resource is empty.');
    return null;
  }

  sourceMap = fs$2.readFileSync(uri, 'utf-8');
  return JSON.parse(sourceMap);
}

function applySourceMapRecursively(tokens, inputSourceMapTracker) {
  var token;
  var i, l;

  for (i = 0, l = tokens.length; i < l; i++) {
    token = tokens[i];

    switch (token[0]) {
    case Token$3.AT_RULE:
      applySourceMapTo(token, inputSourceMapTracker);
      break;
    case Token$3.AT_RULE_BLOCK:
      applySourceMapRecursively(token[1], inputSourceMapTracker);
      applySourceMapRecursively(token[2], inputSourceMapTracker);
      break;
    case Token$3.AT_RULE_BLOCK_SCOPE:
      applySourceMapTo(token, inputSourceMapTracker);
      break;
    case Token$3.NESTED_BLOCK:
      applySourceMapRecursively(token[1], inputSourceMapTracker);
      applySourceMapRecursively(token[2], inputSourceMapTracker);
      break;
    case Token$3.NESTED_BLOCK_SCOPE:
      applySourceMapTo(token, inputSourceMapTracker);
      break;
    case Token$3.COMMENT:
      applySourceMapTo(token, inputSourceMapTracker);
      break;
    case Token$3.PROPERTY:
      applySourceMapRecursively(token, inputSourceMapTracker);
      break;
    case Token$3.PROPERTY_BLOCK:
      applySourceMapRecursively(token[1], inputSourceMapTracker);
      break;
    case Token$3.PROPERTY_NAME:
      applySourceMapTo(token, inputSourceMapTracker);
      break;
    case Token$3.PROPERTY_VALUE:
      applySourceMapTo(token, inputSourceMapTracker);
      break;
    case Token$3.RULE:
      applySourceMapRecursively(token[1], inputSourceMapTracker);
      applySourceMapRecursively(token[2], inputSourceMapTracker);
      break;
    case Token$3.RULE_SCOPE:
      applySourceMapTo(token, inputSourceMapTracker);
    }
  }

  return tokens;
}

function applySourceMapTo(token, inputSourceMapTracker) {
  var value = token[1];
  var metadata = token[2];
  var newMetadata = [];
  var i, l;

  for (i = 0, l = metadata.length; i < l; i++) {
    newMetadata.push(inputSourceMapTracker.originalPositionFor(metadata[i], value.length));
  }

  token[2] = newMetadata;
}

var applySourceMaps_1 = applySourceMaps$1;

var split = split_1;

var BRACE_PREFIX = /^\(/;
var BRACE_SUFFIX = /\)$/;
var IMPORT_PREFIX_PATTERN$1 = /^@import/i;
var QUOTE_PREFIX_PATTERN$1 = /['"]\s{0,31}/;
var QUOTE_SUFFIX_PATTERN$1 = /\s{0,31}['"]/;
var URL_PREFIX_PATTERN$1 = /^url\(\s{0,31}/i;
var URL_SUFFIX_PATTERN$1 = /\s{0,31}\)/i;

function extractImportUrlAndMedia$2(atRuleValue) {
  var uri;
  var mediaQuery;
  var normalized;
  var parts;

  normalized = atRuleValue
    .replace(IMPORT_PREFIX_PATTERN$1, '')
    .trim()
    .replace(URL_PREFIX_PATTERN$1, '(')
    .replace(URL_SUFFIX_PATTERN$1, ') ')
    .replace(QUOTE_PREFIX_PATTERN$1, '')
    .replace(QUOTE_SUFFIX_PATTERN$1, '');

  parts = split(normalized, ' ');

  uri = parts[0]
    .replace(BRACE_PREFIX, '')
    .replace(BRACE_SUFFIX, '');
  mediaQuery = parts.slice(1).join(' ');

  return [uri, mediaQuery];
}

var extractImportUrlAndMedia_1 = extractImportUrlAndMedia$2;

var fs$1 = empty_1;
var path$2 = pathBrowserify;

var isAllowedResource$1 = isAllowedResource_1;

var hasProtocol$1 = hasProtocol_1;
var isRemoteResource$2 = isRemoteResource_1;

function loadOriginalSources$1(context, callback) {
  var loadContext = {
    callback: callback,
    fetch: context.options.fetch,
    index: 0,
    inline: context.options.inline,
    inlineRequest: context.options.inlineRequest,
    inlineTimeout: context.options.inlineTimeout,
    localOnly: context.localOnly,
    rebaseTo: context.options.rebaseTo,
    sourcesContent: context.sourcesContent,
    uriToSource: uriToSourceMapping(context.inputSourceMapTracker.all()),
    warnings: context.warnings
  };

  return context.options.sourceMap && context.options.sourceMapInlineSources
    ? doLoadOriginalSources(loadContext)
    : callback();
}

function uriToSourceMapping(allSourceMapConsumers) {
  var mapping = {};
  var consumer;
  var uri;
  var source;
  var i, l;

  for (source in allSourceMapConsumers) {
    consumer = allSourceMapConsumers[source];

    for (i = 0, l = consumer.sources.length; i < l; i++) {
      uri = consumer.sources[i];
      source = consumer.sourceContentFor(uri, true);

      mapping[uri] = source;
    }
  }

  return mapping;
}

function doLoadOriginalSources(loadContext) {
  var uris = Object.keys(loadContext.uriToSource);
  var uri;
  var source;
  var total;

  for (total = uris.length; loadContext.index < total; loadContext.index++) {
    uri = uris[loadContext.index];
    source = loadContext.uriToSource[uri];

    if (source) {
      loadContext.sourcesContent[uri] = source;
    } else {
      return loadOriginalSource(uri, loadContext);
    }
  }

  return loadContext.callback();
}

function loadOriginalSource(uri, loadContext) {
  var content;

  if (isRemoteResource$2(uri)) {
    return loadOriginalSourceFromRemoteUri(uri, loadContext, function(content) {
      loadContext.index++;
      loadContext.sourcesContent[uri] = content;
      return doLoadOriginalSources(loadContext);
    });
  }
  content = loadOriginalSourceFromLocalUri(uri, loadContext);
  loadContext.index++;
  loadContext.sourcesContent[uri] = content;
  return doLoadOriginalSources(loadContext);
}

function loadOriginalSourceFromRemoteUri(uri, loadContext, whenLoaded) {
  var isAllowed = isAllowedResource$1(uri, true, loadContext.inline);
  var isRuntimeResource = !hasProtocol$1(uri);

  if (loadContext.localOnly) {
    loadContext.warnings.push('Cannot fetch remote resource from "' + uri + '" as no callback given.');
    return whenLoaded(null);
  } if (isRuntimeResource) {
    loadContext.warnings.push('Cannot fetch "' + uri + '" as no protocol given.');
    return whenLoaded(null);
  } if (!isAllowed) {
    loadContext.warnings.push('Cannot fetch "' + uri + '" as resource is not allowed.');
    return whenLoaded(null);
  }

  loadContext.fetch(uri, loadContext.inlineRequest, loadContext.inlineTimeout, function(error, content) {
    if (error) {
      loadContext.warnings.push('Missing original source at "' + uri + '" - ' + error);
    }

    whenLoaded(content);
  });
}

function loadOriginalSourceFromLocalUri(relativeUri, loadContext) {
  var isAllowed = isAllowedResource$1(relativeUri, false, loadContext.inline);
  var absoluteUri = path$2.resolve(loadContext.rebaseTo, relativeUri);

  if (!fs$1.existsSync(absoluteUri) || !fs$1.statSync(absoluteUri).isFile()) {
    loadContext.warnings.push('Ignoring local source map at "' + absoluteUri + '" as resource is missing.');
    return null;
  } if (!isAllowed) {
    loadContext.warnings.push('Cannot fetch "' + absoluteUri + '" as resource is not allowed.');
    return null;
  }

  var result = fs$1.readFileSync(absoluteUri, 'utf8');
  if (result.charCodeAt(0) === 65279) {
    result = result.substring(1);
  }
  return result;
}

var loadOriginalSources_1 = loadOriginalSources$1;

var UNIX_SEPARATOR = '/';
var WINDOWS_SEPARATOR_PATTERN = /\\/g;

function normalizePath$1(path) {
  return path.replace(WINDOWS_SEPARATOR_PATTERN, UNIX_SEPARATOR);
}

var normalizePath_1 = normalizePath$1;

function restoreImport$2(uri, mediaQuery) {
  return ('@import ' + uri + ' ' + mediaQuery).trim();
}

var restoreImport_1 = restoreImport$2;

var path$1 = pathBrowserify;
var url = urlExports;

var isDataUriResource = isDataUriResource_1;

var DOUBLE_QUOTE = '"';
var SINGLE_QUOTE = '\'';
var URL_PREFIX = 'url(';
var URL_SUFFIX = ')';

var PROTOCOL_LESS_PREFIX_PATTERN = /^[^\w\d]*\/\//;
var QUOTE_PREFIX_PATTERN = /^["']/;
var QUOTE_SUFFIX_PATTERN = /["']$/;
var ROUND_BRACKETS_PATTERN = /[()]/;
var URL_PREFIX_PATTERN = /^url\(/i;
var URL_SUFFIX_PATTERN = /\)$/;
var WHITESPACE_PATTERN = /\s/;

var isWindows$1 = dist.process.platform == 'win32';

function rebase$2(uri, rebaseConfig) {
  if (!rebaseConfig) {
    return uri;
  }

  if (isAbsolute(uri) && !isRemote(rebaseConfig.toBase)) {
    return uri;
  }

  if (isRemote(uri) || isSVGMarker(uri) || isInternal(uri) || isDataUriResource(uri)) {
    return uri;
  }

  if (isRemote(rebaseConfig.toBase)) {
    return url.resolve(rebaseConfig.toBase, uri);
  }

  return rebaseConfig.absolute
    ? normalize$1(absolute(uri, rebaseConfig))
    : normalize$1(relative(uri, rebaseConfig));
}

function isAbsolute(uri) {
  return path$1.isAbsolute(uri);
}

function isSVGMarker(uri) {
  return uri[0] == '#';
}

function isInternal(uri) {
  return /^\w+:\w+/.test(uri);
}

function isRemote(uri) {
  return /^[^:]+?:\/\//.test(uri) || PROTOCOL_LESS_PREFIX_PATTERN.test(uri);
}

function absolute(uri, rebaseConfig) {
  return path$1
    .resolve(path$1.join(rebaseConfig.fromBase || '', uri))
    .replace(rebaseConfig.toBase, '');
}

function relative(uri, rebaseConfig) {
  return path$1.relative(rebaseConfig.toBase, path$1.join(rebaseConfig.fromBase || '', uri));
}

function normalize$1(uri) {
  return isWindows$1 ? uri.replace(/\\/g, '/') : uri;
}

function quoteFor(unquotedUrl) {
  if (unquotedUrl.indexOf(SINGLE_QUOTE) > -1) {
    return DOUBLE_QUOTE;
  } if (unquotedUrl.indexOf(DOUBLE_QUOTE) > -1) {
    return SINGLE_QUOTE;
  } if (hasWhitespace(unquotedUrl) || hasRoundBrackets(unquotedUrl)) {
    return SINGLE_QUOTE;
  }
  return '';
}

function hasWhitespace(url) {
  return WHITESPACE_PATTERN.test(url);
}

function hasRoundBrackets(url) {
  return ROUND_BRACKETS_PATTERN.test(url);
}

function rewriteUrl$1(originalUrl, rebaseConfig, pathOnly) {
  var strippedUrl = originalUrl
    .replace(URL_PREFIX_PATTERN, '')
    .replace(URL_SUFFIX_PATTERN, '')
    .trim();

  var unquotedUrl = strippedUrl
    .replace(QUOTE_PREFIX_PATTERN, '')
    .replace(QUOTE_SUFFIX_PATTERN, '')
    .trim();

  var quote = strippedUrl[0] == SINGLE_QUOTE || strippedUrl[0] == DOUBLE_QUOTE
    ? strippedUrl[0]
    : quoteFor(unquotedUrl);

  return pathOnly
    ? rebase$2(unquotedUrl, rebaseConfig)
    : URL_PREFIX + quote + rebase$2(unquotedUrl, rebaseConfig) + quote + URL_SUFFIX;
}

var rewriteUrl_1 = rewriteUrl$1;

var IMPORT_PREFIX_PATTERN = /^@import/i;

function isImport$2(value) {
  return IMPORT_PREFIX_PATTERN.test(value);
}

var isImport_1 = isImport$2;

var extractImportUrlAndMedia$1 = extractImportUrlAndMedia_1;
var restoreImport$1 = restoreImport_1;
var rewriteUrl = rewriteUrl_1;

var Token$2 = token;
var isImport$1 = isImport_1;

var SOURCE_MAP_COMMENT_PATTERN = /^\/\*# sourceMappingURL=(\S+) \*\/$/;

function rebase$1(tokens, rebaseAll, validator, rebaseConfig) {
  return rebaseAll
    ? rebaseEverything(tokens, validator, rebaseConfig)
    : rebaseAtRules(tokens, validator, rebaseConfig);
}

function rebaseEverything(tokens, validator, rebaseConfig) {
  var token;
  var i, l;

  for (i = 0, l = tokens.length; i < l; i++) {
    token = tokens[i];

    switch (token[0]) {
    case Token$2.AT_RULE:
      rebaseAtRule(token, validator, rebaseConfig);
      break;
    case Token$2.AT_RULE_BLOCK:
      rebaseProperties(token[2], validator, rebaseConfig);
      break;
    case Token$2.COMMENT:
      rebaseSourceMapComment(token, rebaseConfig);
      break;
    case Token$2.NESTED_BLOCK:
      rebaseEverything(token[2], validator, rebaseConfig);
      break;
    case Token$2.RULE:
      rebaseProperties(token[2], validator, rebaseConfig);
      break;
    }
  }

  return tokens;
}

function rebaseAtRules(tokens, validator, rebaseConfig) {
  var token;
  var i, l;

  for (i = 0, l = tokens.length; i < l; i++) {
    token = tokens[i];

    switch (token[0]) {
    case Token$2.AT_RULE:
      rebaseAtRule(token, validator, rebaseConfig);
      break;
    }
  }

  return tokens;
}

function rebaseAtRule(token, validator, rebaseConfig) {
  if (!isImport$1(token[1])) {
    return;
  }

  var uriAndMediaQuery = extractImportUrlAndMedia$1(token[1]);
  var newUrl = rewriteUrl(uriAndMediaQuery[0], rebaseConfig);
  var mediaQuery = uriAndMediaQuery[1];

  token[1] = restoreImport$1(newUrl, mediaQuery);
}

function rebaseSourceMapComment(token, rebaseConfig) {
  var matches = SOURCE_MAP_COMMENT_PATTERN.exec(token[1]);

  if (matches && matches[1].indexOf('data:') === -1) {
    token[1] = token[1].replace(matches[1], rewriteUrl(matches[1], rebaseConfig, true));
  }
}

function rebaseProperties(properties, validator, rebaseConfig) {
  var property;
  var value;
  var i, l;
  var j, m;

  for (i = 0, l = properties.length; i < l; i++) {
    property = properties[i];

    for (j = 2 /* 0 is Token.PROPERTY, 1 is name */, m = property.length; j < m; j++) {
      value = property[j][1];

      if (validator.isUrl(value)) {
        property[j][1] = rewriteUrl(value, rebaseConfig);
      }
    }
  }
}

var rebase_1 = rebase$1;

var Marker$1 = marker;
var Token$1 = token;

var formatPosition = formatPosition_1;

var Level = {
  BLOCK: 'block',
  COMMENT: 'comment',
  DOUBLE_QUOTE: 'double-quote',
  RULE: 'rule',
  SINGLE_QUOTE: 'single-quote'
};

var AT_RULES = [
  '@charset',
  '@import'
];

var BLOCK_RULES = [
  '@-moz-document',
  '@document',
  '@-moz-keyframes',
  '@-ms-keyframes',
  '@-o-keyframes',
  '@-webkit-keyframes',
  '@keyframes',
  '@media',
  '@supports',
  '@container',
  '@layer'
];

var IGNORE_END_COMMENT_PATTERN = /\/\* clean-css ignore:end \*\/$/;
var IGNORE_START_COMMENT_PATTERN = /^\/\* clean-css ignore:start \*\//;

var PAGE_MARGIN_BOXES = [
  '@bottom-center',
  '@bottom-left',
  '@bottom-left-corner',
  '@bottom-right',
  '@bottom-right-corner',
  '@left-bottom',
  '@left-middle',
  '@left-top',
  '@right-bottom',
  '@right-middle',
  '@right-top',
  '@top-center',
  '@top-left',
  '@top-left-corner',
  '@top-right',
  '@top-right-corner'
];

var EXTRA_PAGE_BOXES = [
  '@footnote',
  '@footnotes',
  '@left',
  '@page-float-bottom',
  '@page-float-top',
  '@right'
];

var REPEAT_PATTERN = /^\[\s{0,31}\d+\s{0,31}\]$/;
var TAIL_BROKEN_VALUE_PATTERN = /([^}])\}*$/;
var RULE_WORD_SEPARATOR_PATTERN = /[\s(]/;

function tokenize$1(source, externalContext) {
  var internalContext = {
    level: Level.BLOCK,
    position: {
      source: externalContext.source || undefined,
      line: 1,
      column: 0,
      index: 0
    }
  };

  return intoTokens(source, externalContext, internalContext, false);
}

function intoTokens(source, externalContext, internalContext, isNested) {
  var allTokens = [];
  var newTokens = allTokens;
  var lastToken;
  var ruleToken;
  var ruleTokens = [];
  var propertyToken;
  var metadata;
  var metadatas = [];
  var level = internalContext.level;
  var levels = [];
  var buffer = [];
  var buffers = [];
  var isBufferEmpty = true;
  var serializedBuffer;
  var serializedBufferPart;
  var roundBracketLevel = 0;
  var isQuoted;
  var isSpace;
  var isNewLineNix;
  var isNewLineWin;
  var isCarriageReturn;
  var isCommentStart;
  var wasCommentStart = false;
  var isCommentEnd;
  var wasCommentEnd = false;
  var isCommentEndMarker;
  var isEscaped;
  var wasEscaped = false;
  var characterWithNoSpecialMeaning;
  var isPreviousDash = false;
  var isVariable = false;
  var isRaw = false;
  var seekingValue = false;
  var seekingPropertyBlockClosing = false;
  var position = internalContext.position;
  var lastCommentStartAt;

  for (; position.index < source.length; position.index++) {
    var character = source[position.index];

    isQuoted = level == Level.SINGLE_QUOTE || level == Level.DOUBLE_QUOTE;
    isSpace = character == Marker$1.SPACE || character == Marker$1.TAB;
    isNewLineNix = character == Marker$1.NEW_LINE_NIX;
    isNewLineWin = character == Marker$1.NEW_LINE_NIX
      && source[position.index - 1] == Marker$1.CARRIAGE_RETURN;
    isCarriageReturn = character == Marker$1.CARRIAGE_RETURN
      && source[position.index + 1] && source[position.index + 1] != Marker$1.NEW_LINE_NIX;
    isCommentStart = !wasCommentEnd
      && level != Level.COMMENT && !isQuoted
      && character == Marker$1.ASTERISK && source[position.index - 1] == Marker$1.FORWARD_SLASH;
    isCommentEndMarker = !wasCommentStart
      && !isQuoted && character == Marker$1.FORWARD_SLASH
      && source[position.index - 1] == Marker$1.ASTERISK;
    isCommentEnd = level == Level.COMMENT && isCommentEndMarker;
    characterWithNoSpecialMeaning = !isSpace && !isCarriageReturn && (character >= 'A' && character <= 'Z' || character >= 'a' && character <= 'z' || character >= '0' && character <= '9' || character == '-');
    isVariable = isVariable || (level != Level.COMMENT && !seekingValue && isPreviousDash && character === '-' && buffer.length === 1);
    isPreviousDash = character === '-';
    roundBracketLevel = Math.max(roundBracketLevel, 0);

    metadata = isBufferEmpty
      ? [position.line, position.column, position.source]
      : metadata;

    if (isEscaped) {
      // previous character was a backslash
      buffer.push(character);
      isBufferEmpty = false;
    } else if (characterWithNoSpecialMeaning) {
      // it's just an alphanumeric character or a hyphen (part of any rule or property name) so let's end it quickly
      buffer.push(character);
      isBufferEmpty = false;
    } else if ((isSpace || isNewLineNix && !isNewLineWin) && (isQuoted || level == Level.COMMENT)) {
      buffer.push(character);
      isBufferEmpty = false;
    } else if ((isSpace || isNewLineNix && !isNewLineWin) && isBufferEmpty) ; else if (!isCommentEnd && level == Level.COMMENT) {
      buffer.push(character);
      isBufferEmpty = false;
    } else if (!isCommentStart && !isCommentEnd && isRaw) {
      buffer.push(character);
      isBufferEmpty = false;
    } else if (isCommentStart
        && isVariable
        && (level == Level.BLOCK || level == Level.RULE) && buffer.length > 1) {
      // comment start within a variable, e.g. var(/*<--
      buffer.push(character);
      isBufferEmpty = false;

      levels.push(level);
      level = Level.COMMENT;
    } else if (isCommentStart && (level == Level.BLOCK || level == Level.RULE) && buffer.length > 1) {
      // comment start within block preceded by some content, e.g. div/*<--
      metadatas.push(metadata);
      buffer.push(character);
      buffers.push(buffer.slice(0, -2));
      isBufferEmpty = false;

      buffer = buffer.slice(-2);
      metadata = [position.line, position.column - 1, position.source];

      levels.push(level);
      level = Level.COMMENT;
    } else if (isCommentStart) {
      // comment start, e.g. /*<--
      levels.push(level);
      level = Level.COMMENT;
      buffer.push(character);
      isBufferEmpty = false;
    } else if (isCommentEnd && isVariable) {
      // comment end within a variable, e.g. var(/*!*/<--
      buffer.push(character);
      level = levels.pop();
    } else if (isCommentEnd && isIgnoreStartComment(buffer)) {
      // ignore:start comment end, e.g. /* clean-css ignore:start */<--
      serializedBuffer = buffer.join('').trim() + character;
      lastToken = [
        Token$1.COMMENT,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ];
      newTokens.push(lastToken);

      isRaw = true;
      metadata = metadatas.pop() || null;
      buffer = buffers.pop() || [];
      isBufferEmpty = buffer.length === 0;
    } else if (isCommentEnd && isIgnoreEndComment(buffer)) {
      // ignore:start comment end, e.g. /* clean-css ignore:end */<--
      serializedBuffer = buffer.join('') + character;
      lastCommentStartAt = serializedBuffer.lastIndexOf(Marker$1.FORWARD_SLASH + Marker$1.ASTERISK);

      serializedBufferPart = serializedBuffer.substring(0, lastCommentStartAt);
      lastToken = [
        Token$1.RAW,
        serializedBufferPart,
        [originalMetadata(metadata, serializedBufferPart, externalContext)]
      ];
      newTokens.push(lastToken);

      serializedBufferPart = serializedBuffer.substring(lastCommentStartAt);
      metadata = [position.line, position.column - serializedBufferPart.length + 1, position.source];
      lastToken = [
        Token$1.COMMENT,
        serializedBufferPart,
        [originalMetadata(metadata, serializedBufferPart, externalContext)]
      ];
      newTokens.push(lastToken);

      isRaw = false;
      level = levels.pop();
      metadata = metadatas.pop() || null;
      buffer = buffers.pop() || [];
      isBufferEmpty = buffer.length === 0;
    } else if (isCommentEnd) {
      // comment end, e.g. /* comment */<--
      serializedBuffer = buffer.join('').trim() + character;
      lastToken = [
        Token$1.COMMENT,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ];
      newTokens.push(lastToken);

      level = levels.pop();
      metadata = metadatas.pop() || null;
      buffer = buffers.pop() || [];
      isBufferEmpty = buffer.length === 0;
    } else if (isCommentEndMarker && source[position.index + 1] != Marker$1.ASTERISK) {
      externalContext.warnings.push('Unexpected \'*/\' at ' + formatPosition([position.line, position.column, position.source]) + '.');
      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.SINGLE_QUOTE && !isQuoted) {
      // single quotation start, e.g. a[href^='https<--
      levels.push(level);
      level = Level.SINGLE_QUOTE;
      buffer.push(character);
      isBufferEmpty = false;
    } else if (character == Marker$1.SINGLE_QUOTE && level == Level.SINGLE_QUOTE) {
      // single quotation end, e.g. a[href^='https'<--
      level = levels.pop();
      buffer.push(character);
      isBufferEmpty = false;
    } else if (character == Marker$1.DOUBLE_QUOTE && !isQuoted) {
      // double quotation start, e.g. a[href^="<--
      levels.push(level);
      level = Level.DOUBLE_QUOTE;
      buffer.push(character);
      isBufferEmpty = false;
    } else if (character == Marker$1.DOUBLE_QUOTE && level == Level.DOUBLE_QUOTE) {
      // double quotation end, e.g. a[href^="https"<--
      level = levels.pop();
      buffer.push(character);
      isBufferEmpty = false;
    } else if (character != Marker$1.CLOSE_ROUND_BRACKET
      && character != Marker$1.OPEN_ROUND_BRACKET
      && level != Level.COMMENT && !isQuoted && roundBracketLevel > 0) {
      // character inside any function, e.g. hsla(.<--
      buffer.push(character);
      isBufferEmpty = false;
    } else if (character == Marker$1.OPEN_ROUND_BRACKET
      && !isQuoted && level != Level.COMMENT
      && !seekingValue) {
      // round open bracket, e.g. @import url(<--
      buffer.push(character);
      isBufferEmpty = false;

      roundBracketLevel++;
    } else if (character == Marker$1.CLOSE_ROUND_BRACKET
      && !isQuoted
      && level != Level.COMMENT
      && !seekingValue) {
      // round open bracket, e.g. @import url(test.css)<--
      buffer.push(character);
      isBufferEmpty = false;

      roundBracketLevel--;
    } else if (character == Marker$1.SEMICOLON && level == Level.BLOCK && buffer[0] == Marker$1.AT) {
      // semicolon ending rule at block level, e.g. @import '...';<--
      serializedBuffer = buffer.join('').trim();
      allTokens.push([
        Token$1.AT_RULE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);

      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.COMMA && level == Level.BLOCK && ruleToken) {
      // comma separator at block level, e.g. a,div,<--
      serializedBuffer = buffer.join('').trim();
      ruleToken[1].push([
        tokenScopeFrom(ruleToken[0]),
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext, ruleToken[1].length)]
      ]);

      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.COMMA && level == Level.BLOCK && tokenTypeFrom(buffer) == Token$1.AT_RULE) {
      // comma separator at block level, e.g. @import url(...) screen,<--
      // keep iterating as end semicolon will create the token
      buffer.push(character);
      isBufferEmpty = false;
    } else if (character == Marker$1.COMMA && level == Level.BLOCK) {
      // comma separator at block level, e.g. a,<--
      ruleToken = [tokenTypeFrom(buffer), [], []];
      serializedBuffer = buffer.join('').trim();
      ruleToken[1].push([
        tokenScopeFrom(ruleToken[0]),
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext, 0)]
      ]);

      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.OPEN_CURLY_BRACKET
      && level == Level.BLOCK
      && ruleToken
      && ruleToken[0] == Token$1.NESTED_BLOCK) {
      // open brace opening at-rule at block level, e.g. @media{<--
      serializedBuffer = buffer.join('').trim();
      ruleToken[1].push([
        Token$1.NESTED_BLOCK_SCOPE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);
      allTokens.push(ruleToken);

      levels.push(level);
      position.column++;
      position.index++;
      buffer = [];
      isBufferEmpty = true;

      ruleToken[2] = intoTokens(source, externalContext, internalContext, true);
      ruleToken = null;
    } else if (character == Marker$1.OPEN_CURLY_BRACKET
      && level == Level.BLOCK
      && tokenTypeFrom(buffer) == Token$1.NESTED_BLOCK) {
      // open brace opening at-rule at block level, e.g. @media{<--
      serializedBuffer = buffer.join('').trim();
      ruleToken = ruleToken || [Token$1.NESTED_BLOCK, [], []];
      ruleToken[1].push([
        Token$1.NESTED_BLOCK_SCOPE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);
      allTokens.push(ruleToken);

      levels.push(level);
      position.column++;
      position.index++;
      buffer = [];
      isBufferEmpty = true;
      isVariable = false;

      ruleToken[2] = intoTokens(source, externalContext, internalContext, true);
      ruleToken = null;
    } else if (character == Marker$1.OPEN_CURLY_BRACKET && level == Level.BLOCK) {
      // open brace opening rule at block level, e.g. div{<--
      serializedBuffer = buffer.join('').trim();
      ruleToken = ruleToken || [tokenTypeFrom(buffer), [], []];
      ruleToken[1].push([
        tokenScopeFrom(ruleToken[0]),
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext, ruleToken[1].length)]
      ]);
      newTokens = ruleToken[2];
      allTokens.push(ruleToken);

      levels.push(level);
      level = Level.RULE;
      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.OPEN_CURLY_BRACKET && level == Level.RULE && seekingValue) {
      // open brace opening rule at rule level, e.g. div{--variable:{<--
      ruleTokens.push(ruleToken);
      ruleToken = [Token$1.PROPERTY_BLOCK, []];
      propertyToken.push(ruleToken);
      newTokens = ruleToken[1];

      levels.push(level);
      level = Level.RULE;
      seekingValue = false;
    } else if (character == Marker$1.OPEN_CURLY_BRACKET && level == Level.RULE && isPageMarginBox(buffer)) {
      // open brace opening page-margin box at rule level, e.g. @page{@top-center{<--
      serializedBuffer = buffer.join('').trim();
      ruleTokens.push(ruleToken);
      ruleToken = [Token$1.AT_RULE_BLOCK, [], []];
      ruleToken[1].push([
        Token$1.AT_RULE_BLOCK_SCOPE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);
      newTokens.push(ruleToken);
      newTokens = ruleToken[2];

      levels.push(level);
      level = Level.RULE;
      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.COLON && level == Level.RULE && !seekingValue) {
      // colon at rule level, e.g. a{color:<--
      serializedBuffer = buffer.join('').trim();
      propertyToken = [
        Token$1.PROPERTY,
        [
          Token$1.PROPERTY_NAME,
          serializedBuffer,
          [originalMetadata(metadata, serializedBuffer, externalContext)]
        ]
      ];
      newTokens.push(propertyToken);

      seekingValue = true;
      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.SEMICOLON
      && level == Level.RULE
      && propertyToken
      && ruleTokens.length > 0
      && !isBufferEmpty
      && buffer[0] == Marker$1.AT) {
      // semicolon at rule level for at-rule, e.g. a{--color:{@apply(--other-color);<--
      serializedBuffer = buffer.join('').trim();
      ruleToken[1].push([
        Token$1.AT_RULE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);

      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.SEMICOLON && level == Level.RULE && propertyToken && !isBufferEmpty) {
      // semicolon at rule level, e.g. a{color:red;<--
      serializedBuffer = buffer.join('').trim();
      propertyToken.push([
        Token$1.PROPERTY_VALUE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);

      propertyToken = null;
      seekingValue = false;
      buffer = [];
      isBufferEmpty = true;
      isVariable = false;
    } else if (character == Marker$1.SEMICOLON
      && level == Level.RULE
      && propertyToken
      && isBufferEmpty
      && isVariable
      && !propertyToken[2]) {
      // semicolon after empty variable value at rule level, e.g. a{--color: ;<--
      propertyToken.push([Token$1.PROPERTY_VALUE, ' ', [originalMetadata(metadata, ' ', externalContext)]]);
      isVariable = false;
      propertyToken = null;
      seekingValue = false;
    } else if (character == Marker$1.SEMICOLON && level == Level.RULE && propertyToken && isBufferEmpty) {
      // semicolon after bracketed value at rule level, e.g. a{color:rgb(...);<--
      propertyToken = null;
      seekingValue = false;
    } else if (character == Marker$1.SEMICOLON
      && level == Level.RULE
      && !isBufferEmpty
      && buffer[0] == Marker$1.AT) {
      // semicolon for at-rule at rule level, e.g. a{@apply(--variable);<--
      serializedBuffer = buffer.join('');
      newTokens.push([
        Token$1.AT_RULE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);

      seekingValue = false;
      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.SEMICOLON && level == Level.RULE && seekingPropertyBlockClosing) {
      // close brace after a property block at rule level, e.g. a{--custom:{color:red;};<--
      seekingPropertyBlockClosing = false;
      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.SEMICOLON && level == Level.RULE && isBufferEmpty) ; else if (character == Marker$1.CLOSE_CURLY_BRACKET
      && level == Level.RULE
      && propertyToken
      && seekingValue
      && !isBufferEmpty && ruleTokens.length > 0) {
      // close brace at rule level, e.g. a{--color:{color:red}<--
      serializedBuffer = buffer.join('');
      propertyToken.push([
        Token$1.PROPERTY_VALUE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);
      propertyToken = null;
      ruleToken = ruleTokens.pop();
      newTokens = ruleToken[2];

      level = levels.pop();
      seekingValue = false;
      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.CLOSE_CURLY_BRACKET
      && level == Level.RULE
      && propertyToken
      && !isBufferEmpty
      && buffer[0] == Marker$1.AT
      && ruleTokens.length > 0) {
      // close brace at rule level for at-rule, e.g. a{--color:{@apply(--other-color)}<--
      serializedBuffer = buffer.join('');
      ruleToken[1].push([
        Token$1.AT_RULE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);
      propertyToken = null;
      ruleToken = ruleTokens.pop();
      newTokens = ruleToken[2];

      level = levels.pop();
      seekingValue = false;
      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.CLOSE_CURLY_BRACKET
      && level == Level.RULE
      && propertyToken
      && ruleTokens.length > 0) {
      // close brace at rule level after space, e.g. a{--color:{color:red }<--
      propertyToken = null;
      ruleToken = ruleTokens.pop();
      newTokens = ruleToken[2];

      level = levels.pop();
      seekingValue = false;
    } else if (character == Marker$1.CLOSE_CURLY_BRACKET
      && level == Level.RULE
      && propertyToken
      && !isBufferEmpty) {
      // close brace at rule level, e.g. a{color:red}<--
      serializedBuffer = buffer.join('');
      propertyToken.push([
        Token$1.PROPERTY_VALUE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);
      propertyToken = null;
      ruleToken = ruleTokens.pop();
      newTokens = allTokens;

      level = levels.pop();
      seekingValue = false;
      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.CLOSE_CURLY_BRACKET
      && level == Level.RULE
      && !isBufferEmpty
      && buffer[0] == Marker$1.AT) {
      // close brace after at-rule at rule level, e.g. a{@apply(--variable)}<--
      propertyToken = null;
      ruleToken = null;
      serializedBuffer = buffer.join('').trim();
      newTokens.push([
        Token$1.AT_RULE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);
      newTokens = allTokens;

      level = levels.pop();
      seekingValue = false;
      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.CLOSE_CURLY_BRACKET
      && level == Level.RULE
      && levels[levels.length - 1] == Level.RULE) {
      // close brace after a property block at rule level, e.g. a{--custom:{color:red;}<--
      propertyToken = null;
      ruleToken = ruleTokens.pop();
      newTokens = ruleToken[2];

      level = levels.pop();
      seekingValue = false;
      seekingPropertyBlockClosing = true;
      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.CLOSE_CURLY_BRACKET
      && level == Level.RULE
      && isVariable
      && propertyToken
      && !propertyToken[2]) {
      // close brace after an empty variable declaration inside a rule, e.g. a{--color: }<--
      propertyToken.push([Token$1.PROPERTY_VALUE, ' ', [originalMetadata(metadata, ' ', externalContext)]]);
      isVariable = false;
      propertyToken = null;
      ruleToken = null;
      newTokens = allTokens;

      level = levels.pop();
      seekingValue = false;
      isVariable = false;
    } else if (character == Marker$1.CLOSE_CURLY_BRACKET && level == Level.RULE) {
      // close brace after a rule, e.g. a{color:red;}<--
      propertyToken = null;
      ruleToken = null;
      newTokens = allTokens;

      level = levels.pop();
      seekingValue = false;
      isVariable = false;
    } else if (character == Marker$1.CLOSE_CURLY_BRACKET
      && level == Level.BLOCK
      && !isNested
      && position.index <= source.length - 1) {
      // stray close brace at block level, e.g. a{color:red}color:blue}<--
      externalContext.warnings.push('Unexpected \'}\' at ' + formatPosition([position.line, position.column, position.source]) + '.');
      buffer.push(character);
      isBufferEmpty = false;
    } else if (character == Marker$1.CLOSE_CURLY_BRACKET && level == Level.BLOCK) {
      // close brace at block level, e.g. @media screen {...}<--
      break;
    } else if (character == Marker$1.OPEN_ROUND_BRACKET && level == Level.RULE && seekingValue) {
      // round open bracket, e.g. a{color:hsla(<--
      buffer.push(character);
      isBufferEmpty = false;
      roundBracketLevel++;
    } else if (character == Marker$1.CLOSE_ROUND_BRACKET
      && level == Level.RULE
      && seekingValue
      && roundBracketLevel == 1) {
      // round close bracket, e.g. a{color:hsla(0,0%,0%)<--
      buffer.push(character);
      isBufferEmpty = false;
      serializedBuffer = buffer.join('').trim();
      propertyToken.push([
        Token$1.PROPERTY_VALUE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);

      roundBracketLevel--;
      buffer = [];
      isBufferEmpty = true;
      isVariable = false;
    } else if (character == Marker$1.CLOSE_ROUND_BRACKET && level == Level.RULE && seekingValue) {
      // round close bracket within other brackets, e.g. a{width:calc((10rem / 2)<--
      buffer.push(character);
      isBufferEmpty = false;
      isVariable = false;
      roundBracketLevel--;
    } else if (character == Marker$1.FORWARD_SLASH
      && source[position.index + 1] != Marker$1.ASTERISK
      && level == Level.RULE
      && seekingValue
      && !isBufferEmpty) {
      // forward slash within a property, e.g. a{background:url(image.png) 0 0/<--
      serializedBuffer = buffer.join('').trim();
      propertyToken.push([
        Token$1.PROPERTY_VALUE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);
      propertyToken.push([
        Token$1.PROPERTY_VALUE,
        character,
        [[position.line, position.column, position.source]]
      ]);

      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.FORWARD_SLASH
      && source[position.index + 1] != Marker$1.ASTERISK
      && level == Level.RULE
      && seekingValue) {
      // forward slash within a property after space, e.g. a{background:url(image.png) 0 0 /<--
      propertyToken.push([
        Token$1.PROPERTY_VALUE,
        character,
        [[position.line, position.column, position.source]]
      ]);

      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.COMMA && level == Level.RULE && seekingValue && !isBufferEmpty) {
      // comma within a property, e.g. a{background:url(image.png),<--
      serializedBuffer = buffer.join('').trim();
      propertyToken.push([
        Token$1.PROPERTY_VALUE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);
      propertyToken.push([
        Token$1.PROPERTY_VALUE,
        character,
        [[position.line, position.column, position.source]]
      ]);

      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.COMMA && level == Level.RULE && seekingValue) {
      // comma within a property after space, e.g. a{background:url(image.png) ,<--
      propertyToken.push([
        Token$1.PROPERTY_VALUE,
        character,
        [[position.line, position.column, position.source]]
      ]);

      buffer = [];
      isBufferEmpty = true;
    } else if (character == Marker$1.CLOSE_SQUARE_BRACKET
      && propertyToken
      && propertyToken.length > 1
      && !isBufferEmpty
      && isRepeatToken(buffer)) {
      buffer.push(character);
      serializedBuffer = buffer.join('').trim();
      propertyToken[propertyToken.length - 1][1] += serializedBuffer;

      buffer = [];
      isBufferEmpty = true;
    } else if ((isSpace || (isNewLineNix && !isNewLineWin))
      && level == Level.RULE
      && seekingValue
      && propertyToken
      && !isBufferEmpty) {
      // space or *nix newline within property, e.g. a{margin:0 <--
      serializedBuffer = buffer.join('').trim();
      propertyToken.push([
        Token$1.PROPERTY_VALUE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);

      buffer = [];
      isBufferEmpty = true;
    } else if (isNewLineWin && level == Level.RULE && seekingValue && propertyToken && buffer.length > 1) {
      // win newline within property, e.g. a{margin:0\r\n<--
      serializedBuffer = buffer.join('').trim();
      propertyToken.push([
        Token$1.PROPERTY_VALUE,
        serializedBuffer,
        [originalMetadata(metadata, serializedBuffer, externalContext)]
      ]);

      buffer = [];
      isBufferEmpty = true;
    } else if (isNewLineWin && level == Level.RULE && seekingValue) {
      // win newline
      buffer = [];
      isBufferEmpty = true;
    } else if (isNewLineWin && buffer.length == 1) {
      // ignore windows newline which is composed of two characters
      buffer.pop();
      isBufferEmpty = buffer.length === 0;
    } else if (!isBufferEmpty || !isSpace && !isNewLineNix && !isNewLineWin && !isCarriageReturn) {
      // any character
      buffer.push(character);
      isBufferEmpty = false;
    }

    wasEscaped = isEscaped;
    isEscaped = !wasEscaped && character == Marker$1.BACK_SLASH;
    wasCommentStart = isCommentStart;
    wasCommentEnd = isCommentEnd;

    position.line = (isNewLineWin || isNewLineNix || isCarriageReturn) ? position.line + 1 : position.line;
    position.column = (isNewLineWin || isNewLineNix || isCarriageReturn) ? 0 : position.column + 1;
  }

  if (seekingValue) {
    externalContext.warnings.push('Missing \'}\' at ' + formatPosition([position.line, position.column, position.source]) + '.');
  }

  if (seekingValue && buffer.length > 0) {
    serializedBuffer = buffer.join('').trimRight().replace(TAIL_BROKEN_VALUE_PATTERN, '$1').trimRight();
    propertyToken.push([
      Token$1.PROPERTY_VALUE,
      serializedBuffer,
      [originalMetadata(metadata, serializedBuffer, externalContext)]
    ]);

    buffer = [];
  }

  if (buffer.length > 0) {
    externalContext.warnings.push('Invalid character(s) \'' + buffer.join('') + '\' at ' + formatPosition(metadata) + '. Ignoring.');
  }

  return allTokens;
}

function isIgnoreStartComment(buffer) {
  return IGNORE_START_COMMENT_PATTERN.test(buffer.join('') + Marker$1.FORWARD_SLASH);
}

function isIgnoreEndComment(buffer) {
  return IGNORE_END_COMMENT_PATTERN.test(buffer.join('') + Marker$1.FORWARD_SLASH);
}

function originalMetadata(metadata, value, externalContext, selectorFallbacks) {
  var source = metadata[2];

  return externalContext.inputSourceMapTracker.isTracking(source)
    ? externalContext.inputSourceMapTracker.originalPositionFor(metadata, value.length, selectorFallbacks)
    : metadata;
}

function tokenTypeFrom(buffer) {
  var isAtRule = buffer[0] == Marker$1.AT || buffer[0] == Marker$1.UNDERSCORE;
  var ruleWord = buffer.join('').split(RULE_WORD_SEPARATOR_PATTERN)[0];

  if (isAtRule && BLOCK_RULES.indexOf(ruleWord) > -1) {
    return Token$1.NESTED_BLOCK;
  } if (isAtRule && AT_RULES.indexOf(ruleWord) > -1) {
    return Token$1.AT_RULE;
  } if (isAtRule) {
    return Token$1.AT_RULE_BLOCK;
  }
  return Token$1.RULE;
}

function tokenScopeFrom(tokenType) {
  if (tokenType == Token$1.RULE) {
    return Token$1.RULE_SCOPE;
  } if (tokenType == Token$1.NESTED_BLOCK) {
    return Token$1.NESTED_BLOCK_SCOPE;
  } if (tokenType == Token$1.AT_RULE_BLOCK) {
    return Token$1.AT_RULE_BLOCK_SCOPE;
  }
}

function isPageMarginBox(buffer) {
  var serializedBuffer = buffer.join('').trim();

  return PAGE_MARGIN_BOXES.indexOf(serializedBuffer) > -1 || EXTRA_PAGE_BOXES.indexOf(serializedBuffer) > -1;
}

function isRepeatToken(buffer) {
  return REPEAT_PATTERN.test(buffer.join('') + Marker$1.CLOSE_SQUARE_BRACKET);
}

var tokenize_1 = tokenize$1;

var fs = empty_1;
var path = pathBrowserify;

var applySourceMaps = applySourceMaps_1;
var extractImportUrlAndMedia = extractImportUrlAndMedia_1;
var isAllowedResource = isAllowedResource_1;
var loadOriginalSources = loadOriginalSources_1;
var normalizePath = normalizePath_1;
var rebase = rebase_1;
var rebaseLocalMap = rebaseLocalMap_1;
var rebaseRemoteMap = rebaseRemoteMap_1;
var restoreImport = restoreImport_1;

var tokenize = tokenize_1;
var Token = token;
var Marker = marker;
var hasProtocol = hasProtocol_1;
var isImport = isImport_1;
var isRemoteResource$1 = isRemoteResource_1;

var UNKNOWN_URI = 'uri:unknown';
var FILE_RESOURCE_PROTOCOL = 'file://';

function readSources$1(input, context, callback) {
  return doReadSources(input, context, function(tokens) {
    return applySourceMaps(tokens, context, function() {
      return loadOriginalSources(context, function() { return callback(tokens); });
    });
  });
}

function doReadSources(input, context, callback) {
  if (typeof input == 'string') {
    return fromString$1(input, context, callback);
  } if (dist.Buffer.isBuffer(input)) {
    return fromString$1(input.toString(), context, callback);
  } if (Array.isArray(input)) {
    return fromArray(input, context, callback);
  } if (typeof input == 'object') {
    return fromHash(input, context, callback);
  }
}

function fromString$1(input, context, callback) {
  context.source = undefined;
  context.sourcesContent[undefined] = input;
  context.stats.originalSize += input.length;

  return fromStyles(input, context, { inline: context.options.inline }, callback);
}

function fromArray(input, context, callback) {
  var inputAsImports = input.reduce(function(accumulator, uriOrHash) {
    if (typeof uriOrHash === 'string') {
      return addStringSource(uriOrHash, accumulator);
    }
    return addHashSource(uriOrHash, context, accumulator);
  }, []);

  return fromStyles(inputAsImports.join(''), context, { inline: ['all'] }, callback);
}

function fromHash(input, context, callback) {
  var inputAsImports = addHashSource(input, context, []);
  return fromStyles(inputAsImports.join(''), context, { inline: ['all'] }, callback);
}

function addStringSource(input, imports) {
  imports.push(restoreAsImport(normalizeUri(input)));
  return imports;
}

function addHashSource(input, context, imports) {
  var uri;
  var normalizedUri;
  var source;

  for (uri in input) {
    source = input[uri];
    normalizedUri = normalizeUri(uri);

    imports.push(restoreAsImport(normalizedUri));

    context.sourcesContent[normalizedUri] = source.styles;

    if (source.sourceMap) {
      trackSourceMap(source.sourceMap, normalizedUri, context);
    }
  }

  return imports;
}

function normalizeUri(uri) {
  var currentPath = path.resolve('');
  var absoluteUri;
  var relativeToCurrentPath;
  var normalizedUri;

  if (isRemoteResource$1(uri)) {
    return uri;
  }

  absoluteUri = path.isAbsolute(uri)
    ? uri
    : path.resolve(uri);
  relativeToCurrentPath = path.relative(currentPath, absoluteUri);
  normalizedUri = normalizePath(relativeToCurrentPath);

  return normalizedUri;
}

function trackSourceMap(sourceMap, uri, context) {
  var parsedMap = typeof sourceMap == 'string'
    ? JSON.parse(sourceMap)
    : sourceMap;
  var rebasedMap = isRemoteResource$1(uri)
    ? rebaseRemoteMap(parsedMap, uri)
    : rebaseLocalMap(parsedMap, uri || UNKNOWN_URI, context.options.rebaseTo);

  context.inputSourceMapTracker.track(uri, rebasedMap);
}

function restoreAsImport(uri) {
  return restoreImport('url(' + uri + ')', '') + Marker.SEMICOLON;
}

function fromStyles(styles, context, parentInlinerContext, callback) {
  var tokens;
  var rebaseConfig = {};

  if (!context.source) {
    rebaseConfig.fromBase = path.resolve('');
    rebaseConfig.toBase = context.options.rebaseTo;
  } else if (isRemoteResource$1(context.source)) {
    rebaseConfig.fromBase = context.source;
    rebaseConfig.toBase = context.source;
  } else if (path.isAbsolute(context.source)) {
    rebaseConfig.fromBase = path.dirname(context.source);
    rebaseConfig.toBase = context.options.rebaseTo;
  } else {
    rebaseConfig.fromBase = path.dirname(path.resolve(context.source));
    rebaseConfig.toBase = context.options.rebaseTo;
  }

  tokens = tokenize(styles, context);
  tokens = rebase(tokens, context.options.rebase, context.validator, rebaseConfig);

  return allowsAnyImports(parentInlinerContext.inline)
    ? inline(tokens, context, parentInlinerContext, callback)
    : callback(tokens);
}

function allowsAnyImports(inline) {
  return !(inline.length == 1 && inline[0] == 'none');
}

function inline(tokens, externalContext, parentInlinerContext, callback) {
  var inlinerContext = {
    afterContent: false,
    callback: callback,
    errors: externalContext.errors,
    externalContext: externalContext,
    fetch: externalContext.options.fetch,
    inlinedStylesheets: parentInlinerContext.inlinedStylesheets || externalContext.inlinedStylesheets,
    inline: parentInlinerContext.inline,
    inlineRequest: externalContext.options.inlineRequest,
    inlineTimeout: externalContext.options.inlineTimeout,
    isRemote: parentInlinerContext.isRemote || false,
    localOnly: externalContext.localOnly,
    outputTokens: [],
    rebaseTo: externalContext.options.rebaseTo,
    sourceTokens: tokens,
    warnings: externalContext.warnings
  };

  return doInlineImports(inlinerContext);
}

function doInlineImports(inlinerContext) {
  var token;
  var i, l;

  for (i = 0, l = inlinerContext.sourceTokens.length; i < l; i++) {
    token = inlinerContext.sourceTokens[i];

    if (token[0] == Token.AT_RULE && isImport(token[1])) {
      inlinerContext.sourceTokens.splice(0, i);
      return inlineStylesheet(token, inlinerContext);
    } if (token[0] == Token.AT_RULE || token[0] == Token.COMMENT) {
      inlinerContext.outputTokens.push(token);
    } else {
      inlinerContext.outputTokens.push(token);
      inlinerContext.afterContent = true;
    }
  }

  inlinerContext.sourceTokens = [];
  return inlinerContext.callback(inlinerContext.outputTokens);
}

function inlineStylesheet(token, inlinerContext) {
  var uriAndMediaQuery = extractImportUrlAndMedia(token[1]);
  var uri = uriAndMediaQuery[0];
  var mediaQuery = uriAndMediaQuery[1];
  var metadata = token[2];

  return isRemoteResource$1(uri)
    ? inlineRemoteStylesheet(uri, mediaQuery, metadata, inlinerContext)
    : inlineLocalStylesheet(uri, mediaQuery, metadata, inlinerContext);
}

function inlineRemoteStylesheet(uri, mediaQuery, metadata, inlinerContext) {
  var isAllowed = isAllowedResource(uri, true, inlinerContext.inline);
  var originalUri = uri;
  var isLoaded = uri in inlinerContext.externalContext.sourcesContent;
  var isRuntimeResource = !hasProtocol(uri);

  if (inlinerContext.inlinedStylesheets.indexOf(uri) > -1) {
    inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as it has already been imported.');
    inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
    return doInlineImports(inlinerContext);
  } if (inlinerContext.localOnly && inlinerContext.afterContent) {
    inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as no callback given and after other content.');
    inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
    return doInlineImports(inlinerContext);
  } if (isRuntimeResource) {
    inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as no protocol given.');
    inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
    inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
    return doInlineImports(inlinerContext);
  } if (inlinerContext.localOnly && !isLoaded) {
    inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as no callback given.');
    inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
    inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
    return doInlineImports(inlinerContext);
  } if (!isAllowed && inlinerContext.afterContent) {
    inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as resource is not allowed and after other content.');
    inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
    return doInlineImports(inlinerContext);
  } if (!isAllowed) {
    inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as resource is not allowed.');
    inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
    inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
    return doInlineImports(inlinerContext);
  }

  inlinerContext.inlinedStylesheets.push(uri);

  function whenLoaded(error, importedStyles) {
    if (error) {
      inlinerContext.errors.push('Broken @import declaration of "' + uri + '" - ' + error);

      return dist.process.nextTick(function() {
        inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        doInlineImports(inlinerContext);
      });
    }

    inlinerContext.inline = inlinerContext.externalContext.options.inline;
    inlinerContext.isRemote = true;

    inlinerContext.externalContext.source = originalUri;
    inlinerContext.externalContext.sourcesContent[uri] = importedStyles;
    inlinerContext.externalContext.stats.originalSize += importedStyles.length;

    return fromStyles(importedStyles, inlinerContext.externalContext, inlinerContext, function(importedTokens) {
      importedTokens = wrapInMedia(importedTokens, mediaQuery, metadata);

      inlinerContext.outputTokens = inlinerContext.outputTokens.concat(importedTokens);
      inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

      return doInlineImports(inlinerContext);
    });
  }

  return isLoaded
    ? whenLoaded(null, inlinerContext.externalContext.sourcesContent[uri])
    : inlinerContext.fetch(uri, inlinerContext.inlineRequest, inlinerContext.inlineTimeout, whenLoaded);
}

function inlineLocalStylesheet(uri, mediaQuery, metadata, inlinerContext) {
  var protocolLessUri = uri.replace(FILE_RESOURCE_PROTOCOL, '');
  var currentPath = path.resolve('');
  var absoluteUri = path.isAbsolute(protocolLessUri)
    ? path.resolve(currentPath, protocolLessUri[0] == '/' ? protocolLessUri.substring(1) : protocolLessUri)
    : path.resolve(inlinerContext.rebaseTo, protocolLessUri);
  var relativeToCurrentPath = path.relative(currentPath, absoluteUri);
  var importedStyles;
  var isAllowed = isAllowedResource(protocolLessUri, false, inlinerContext.inline);
  var normalizedPath = normalizePath(relativeToCurrentPath);
  var isLoaded = normalizedPath in inlinerContext.externalContext.sourcesContent;

  if (inlinerContext.inlinedStylesheets.indexOf(absoluteUri) > -1) {
    inlinerContext.warnings.push('Ignoring local @import of "' + protocolLessUri + '" as it has already been imported.');
  } else if (isAllowed && !isLoaded && (!fs.existsSync(absoluteUri) || !fs.statSync(absoluteUri).isFile())) {
    inlinerContext.errors.push('Ignoring local @import of "' + protocolLessUri + '" as resource is missing.');
  } else if (!isAllowed && inlinerContext.afterContent) {
    inlinerContext.warnings.push('Ignoring local @import of "' + protocolLessUri + '" as resource is not allowed and after other content.');
  } else if (inlinerContext.afterContent) {
    inlinerContext.warnings.push('Ignoring local @import of "' + protocolLessUri + '" as after other content.');
  } else if (!isAllowed) {
    inlinerContext.warnings.push('Skipping local @import of "' + protocolLessUri + '" as resource is not allowed.');
    inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
  } else {
    importedStyles = isLoaded
      ? inlinerContext.externalContext.sourcesContent[normalizedPath]
      : fs.readFileSync(absoluteUri, 'utf-8');

    if (importedStyles.charCodeAt(0) === 65279) {
      importedStyles = importedStyles.substring(1);
    }

    inlinerContext.inlinedStylesheets.push(absoluteUri);
    inlinerContext.inline = inlinerContext.externalContext.options.inline;

    inlinerContext.externalContext.source = normalizedPath;
    inlinerContext.externalContext.sourcesContent[normalizedPath] = importedStyles;
    inlinerContext.externalContext.stats.originalSize += importedStyles.length;

    return fromStyles(importedStyles, inlinerContext.externalContext, inlinerContext, function(importedTokens) {
      importedTokens = wrapInMedia(importedTokens, mediaQuery, metadata);

      inlinerContext.outputTokens = inlinerContext.outputTokens.concat(importedTokens);
      inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

      return doInlineImports(inlinerContext);
    });
  }

  inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

  return doInlineImports(inlinerContext);
}

function wrapInMedia(tokens, mediaQuery, metadata) {
  if (mediaQuery) {
    return [[Token.NESTED_BLOCK, [[Token.NESTED_BLOCK_SCOPE, '@media ' + mediaQuery, metadata]], tokens]];
  }
  return tokens;
}

var readSources_1 = readSources$1;

var all$5 = helpers$1.all;

function store$1(serializeContext, token) {
  var value = typeof token == 'string'
    ? token
    : token[1];
  var wrap = serializeContext.wrap;

  wrap(serializeContext, value);
  track$1(serializeContext, value);
  serializeContext.output.push(value);
}

function wrap$1(serializeContext, value) {
  if (serializeContext.column + value.length > serializeContext.format.wrapAt) {
    track$1(serializeContext, serializeContext.format.breakWith);
    serializeContext.output.push(serializeContext.format.breakWith);
  }
}

function track$1(serializeContext, value) {
  var parts = value.split('\n');

  serializeContext.line += parts.length - 1;
  serializeContext.column = parts.length > 1 ? 0 : (serializeContext.column + parts.pop().length);
}

function serializeStyles$1(tokens, context) {
  var serializeContext = {
    column: 0,
    format: context.options.format,
    indentBy: 0,
    indentWith: '',
    line: 1,
    output: [],
    spaceAfterClosingBrace: context.options.compatibility.properties.spaceAfterClosingBrace,
    store: store$1,
    wrap: context.options.format.wrapAt
      ? wrap$1
      : function() { /* noop */ }
  };

  all$5(serializeContext, tokens);

  return { styles: serializeContext.output.join('') };
}

var simple = serializeStyles$1;

var SourceMapGenerator = sourceMap.SourceMapGenerator;
var all$4 = helpers$1.all;

var isRemoteResource = isRemoteResource_1;

var isWindows = dist.process.platform == 'win32';

var NIX_SEPARATOR_PATTERN = /\//g;
var UNKNOWN_SOURCE = '$stdin';
var WINDOWS_SEPARATOR = '\\';

function store(serializeContext, element) {
  var fromString = typeof element == 'string';
  var value = fromString ? element : element[1];
  var mappings = fromString ? null : element[2];
  var wrap = serializeContext.wrap;

  wrap(serializeContext, value);
  track(serializeContext, value, mappings);
  serializeContext.output.push(value);
}

function wrap(serializeContext, value) {
  if (serializeContext.column + value.length > serializeContext.format.wrapAt) {
    track(serializeContext, serializeContext.format.breakWith, false);
    serializeContext.output.push(serializeContext.format.breakWith);
  }
}

function track(serializeContext, value, mappings) {
  var parts = value.split('\n');

  if (mappings) {
    trackAllMappings(serializeContext, mappings);
  }

  serializeContext.line += parts.length - 1;
  serializeContext.column = parts.length > 1 ? 0 : (serializeContext.column + parts.pop().length);
}

function trackAllMappings(serializeContext, mappings) {
  for (var i = 0, l = mappings.length; i < l; i++) {
    trackMapping(serializeContext, mappings[i]);
  }
}

function trackMapping(serializeContext, mapping) {
  var line = mapping[0];
  var column = mapping[1];
  var originalSource = mapping[2];
  var source = originalSource;
  var storedSource = source || UNKNOWN_SOURCE;

  if (isWindows && source && !isRemoteResource(source)) {
    storedSource = source.replace(NIX_SEPARATOR_PATTERN, WINDOWS_SEPARATOR);
  }

  serializeContext.outputMap.addMapping({
    generated: {
      line: serializeContext.line,
      column: serializeContext.column
    },
    source: storedSource,
    original: {
      line: line,
      column: column
    }
  });

  if (serializeContext.inlineSources && (originalSource in serializeContext.sourcesContent)) {
    serializeContext.outputMap.setSourceContent(
      storedSource,
      serializeContext.sourcesContent[originalSource]
    );
  }
}

function serializeStylesAndSourceMap$1(tokens, context) {
  var serializeContext = {
    column: 0,
    format: context.options.format,
    indentBy: 0,
    indentWith: '',
    inlineSources: context.options.sourceMapInlineSources,
    line: 1,
    output: [],
    outputMap: new SourceMapGenerator(),
    sourcesContent: context.sourcesContent,
    spaceAfterClosingBrace: context.options.compatibility.properties.spaceAfterClosingBrace,
    store: store,
    wrap: context.options.format.wrapAt
      ? wrap
      : function() { /* noop */ }
  };

  all$4(serializeContext, tokens);

  return {
    sourceMap: serializeContext.outputMap,
    styles: serializeContext.output.join('')
  };
}

var sourceMaps = serializeStylesAndSourceMap$1;

var level0Optimize = optimize$4;
var level1Optimize = optimize$3;
var level2Optimize = optimize$1;
var validator = validator_1;

var compatibilityFrom = compatibility;
var fetchFrom = fetch;
var formatFrom = format.formatFrom;
var inlineFrom = inline$1;
var inlineRequestFrom = inlineRequest;
var inlineTimeoutFrom = inlineTimeout;
var OptimizationLevel = optimizationLevel.OptimizationLevel;
var optimizationLevelFrom = optimizationLevel.optimizationLevelFrom;
var pluginsFrom = plugins$1;
var rebaseFrom = rebase$3;
var rebaseToFrom = rebaseTo;

var inputSourceMapTracker = inputSourceMapTracker_1;
var readSources = readSources_1;

var serializeStyles = simple;
var serializeStylesAndSourceMap = sourceMaps;

var CleanCSS$1 = clean$4.exports = function CleanCSS(options) {
  options = options || {};

  this.options = {
    batch: !!options.batch,
    compatibility: compatibilityFrom(options.compatibility),
    explicitRebaseTo: 'rebaseTo' in options,
    fetch: fetchFrom(options.fetch),
    format: formatFrom(options.format),
    inline: inlineFrom(options.inline),
    inlineRequest: inlineRequestFrom(options.inlineRequest),
    inlineTimeout: inlineTimeoutFrom(options.inlineTimeout),
    level: optimizationLevelFrom(options.level),
    plugins: pluginsFrom(options.plugins),
    rebase: rebaseFrom(options.rebase, options.rebaseTo),
    rebaseTo: rebaseToFrom(options.rebaseTo),
    returnPromise: !!options.returnPromise,
    sourceMap: !!options.sourceMap,
    sourceMapInlineSources: !!options.sourceMapInlineSources
  };
};

// for compatibility with optimize-css-assets-webpack-plugin
CleanCSS$1.process = function(input, opts) {
  var cleanCss;
  var optsTo = opts.to;

  delete opts.to;
  cleanCss = new CleanCSS$1(Object.assign({
    returnPromise: true, rebaseTo: optsTo
  }, opts));

  return cleanCss.minify(input)
    .then(function(output) {
      return { css: output.styles };
    });
};

CleanCSS$1.prototype.minify = function(input, maybeSourceMap, maybeCallback) {
  var options = this.options;

  if (options.returnPromise) {
    return new Promise(function(resolve, reject) {
      minifyAll(input, options, maybeSourceMap, function(errors, output) {
        return errors
          ? reject(errors)
          : resolve(output);
      });
    });
  }
  return minifyAll(input, options, maybeSourceMap, maybeCallback);
};

function minifyAll(input, options, maybeSourceMap, maybeCallback) {
  if (options.batch && Array.isArray(input)) {
    return minifyInBatchesFromArray(input, options, maybeSourceMap, maybeCallback);
  } if (options.batch && (typeof input == 'object')) {
    return minifyInBatchesFromHash(input, options, maybeSourceMap, maybeCallback);
  }
  return minify$4(input, options, maybeSourceMap, maybeCallback);
}

function minifyInBatchesFromArray(input, options, maybeSourceMap, maybeCallback) {
  var callback = typeof maybeCallback == 'function'
    ? maybeCallback
    : (typeof maybeSourceMap == 'function' ? maybeSourceMap : null);
  var errors = [];
  var outputAsHash = {};
  var inputValue;
  var i, l;

  function whenHashBatchDone(innerErrors, output) {
    outputAsHash = Object.assign(outputAsHash, output);

    if (innerErrors !== null) {
      errors = errors.concat(innerErrors);
    }
  }

  for (i = 0, l = input.length; i < l; i++) {
    if (typeof input[i] == 'object') {
      minifyInBatchesFromHash(input[i], options, whenHashBatchDone);
    } else {
      inputValue = input[i];

      outputAsHash[inputValue] = minify$4([inputValue], options);
      errors = errors.concat(outputAsHash[inputValue].errors);
    }
  }

  return callback
    ? callback(errors.length > 0 ? errors : null, outputAsHash)
    : outputAsHash;
}

function minifyInBatchesFromHash(input, options, maybeSourceMap, maybeCallback) {
  var callback = typeof maybeCallback == 'function'
    ? maybeCallback
    : (typeof maybeSourceMap == 'function' ? maybeSourceMap : null);
  var errors = [];
  var outputAsHash = {};
  var inputKey;
  var inputValue;

  for (inputKey in input) {
    inputValue = input[inputKey];

    outputAsHash[inputKey] = minify$4(inputValue.styles, options, inputValue.sourceMap);
    errors = errors.concat(outputAsHash[inputKey].errors);
  }

  return callback
    ? callback(errors.length > 0 ? errors : null, outputAsHash)
    : outputAsHash;
}

function minify$4(input, options, maybeSourceMap, maybeCallback) {
  var sourceMap = typeof maybeSourceMap != 'function'
    ? maybeSourceMap
    : null;
  var callback = typeof maybeCallback == 'function'
    ? maybeCallback
    : (typeof maybeSourceMap == 'function' ? maybeSourceMap : null);
  var context = {
    stats: {
      efficiency: 0,
      minifiedSize: 0,
      originalSize: 0,
      startedAt: Date.now(),
      timeSpent: 0
    },
    cache: { specificity: {} },
    errors: [],
    inlinedStylesheets: [],
    inputSourceMapTracker: inputSourceMapTracker(),
    localOnly: !callback,
    options: options,
    source: null,
    sourcesContent: {},
    validator: validator(options.compatibility),
    warnings: []
  };
  var implicitRebaseToWarning;

  if (sourceMap) {
    context.inputSourceMapTracker.track(undefined, sourceMap);
  }

  if (options.rebase && !options.explicitRebaseTo) {
    implicitRebaseToWarning = 'You have set `rebase: true` without giving `rebaseTo` option, which, in this case, defaults to the current working directory. '
      + 'You are then warned this can lead to unexpected URL rebasing (aka here be dragons)! '
      + 'If you are OK with the clean-css output, then you can get rid of this warning by giving clean-css a `rebaseTo: process.cwd()` option.';
    context.warnings.push(implicitRebaseToWarning);
  }

  return runner(context.localOnly)(function() {
    return readSources(input, context, function(tokens) {
      var serialize = context.options.sourceMap
        ? serializeStylesAndSourceMap
        : serializeStyles;

      var optimizedTokens = optimize(tokens, context);
      var optimizedStyles = serialize(optimizedTokens, context);
      var output = withMetadata(optimizedStyles, context);

      return callback
        ? callback(context.errors.length > 0 ? context.errors : null, output)
        : output;
    });
  });
}

function runner(localOnly) {
  // to always execute code asynchronously when a callback is given
  // more at blog.izs.me/post/59142742143/designing-apis-for-asynchrony
  return localOnly
    ? function(callback) { return callback(); }
    : dist.process.nextTick;
}

function optimize(tokens, context) {
  var optimized = level0Optimize(tokens);

  optimized = OptimizationLevel.One in context.options.level
    ? level1Optimize(tokens, context)
    : tokens;
  optimized = OptimizationLevel.Two in context.options.level
    ? level2Optimize(tokens, context, true)
    : optimized;

  return optimized;
}

function withMetadata(output, context) {
  output.stats = calculateStatsFrom(output.styles, context);
  output.errors = context.errors;
  output.inlinedStylesheets = context.inlinedStylesheets;
  output.warnings = context.warnings;

  return output;
}

function calculateStatsFrom(styles, context) {
  var finishedAt = Date.now();
  var timeSpent = finishedAt - context.stats.startedAt;

  delete context.stats.startedAt;
  context.stats.timeSpent = timeSpent;
  context.stats.efficiency = 1 - styles.length / context.stats.originalSize;
  context.stats.minifiedSize = styles.length;

  return context.stats;
}

var cleanExports = clean$4.exports;

var cleanCss = cleanExports;

const CleanCSS = /*@__PURE__*/getDefaultExportFromCjs(cleanCss);

/**
 * @typedef {import('hast').Nodes} Nodes
 */

/**
 * Set the plain-text value of a hast node.
 *
 * This is like the DOMs `Node#textContent` setter.
 * The given node is returned.
 *
 * @param {Nodes} node
 *   Node to change.
 * @param {string | null | undefined} [value='']
 *   Value to use (default: `''`)
 * @returns {undefined}
 *   Nothing.
 */
function fromString(node, value) {
  const normalized = value === undefined || value === null ? '' : String(value);

  if ('children' in node) {
    node.children = [];

    if (value) {
      node.children.push({type: 'text', value: normalized});
    }
  } else if (node.type !== 'doctype') {
    node.value = normalized;
  }
}

/**
 * @typedef {import('hast').Nodes} Nodes
 */


/**
 * Check whether a hast node is a `<style>` that contains CSS.
 *
 * Returns `true` if `node` is a `<style>` element that has no `type`, an empty
 * `type`, or `'text/css'` as its `type`.
 *
 * @param {Nodes} node
 *   Node to check.
 * @returns {boolean}
 *   Whether `node` is a CSS style element.
 */
function isCssStyle(node) {
  if (node.type !== 'element' || node.tagName !== 'style') {
    return false
  }

  const value = collapseWhiteSpace(String(node.properties.type || ''), {
    style: 'html',
    trim: true
  }).toLowerCase();

  return value === '' || value === 'text/css'
}

/**
 * @typedef {import('hast').Nodes} Nodes
 * @typedef {import('hast').Parents} Parents
 */

/**
 * Get the plain-text value of a hast node.
 *
 * @param {Nodes} node
 *   Node to serialize.
 * @returns {string}
 *   Serialized node.
 */
function toString(node) {
  // “The concatenation of data of all the Text node descendants of the context
  // object, in tree order.”
  if ('children' in node) {
    return all$3(node)
  }

  // “Context object’s data.”
  return 'value' in node ? node.value : ''
}

/**
 * @param {Nodes} node
 *   Node.
 * @returns {string}
 *   Serialized node.
 */
function one$2(node) {
  if (node.type === 'text') {
    return node.value
  }

  return 'children' in node ? all$3(node) : ''
}

/**
 * @param {Parents} node
 *   Node.
 * @returns {string}
 *   Serialized node.
 */
function all$3(node) {
  let index = -1;
  /** @type {Array<string>} */
  const result = [];

  while (++index < node.children.length) {
    result[index] = one$2(node.children[index]);
  }

  return result.join('')
}

/**
 * @typedef {import('hast').Root} Root
 */


const clean$3 = new CleanCSS();

/**
 * Minify CSS `<style>` elements.
 *
 * @returns
 *   Transform.
 */
function rehypeMinifyCssStyle() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      if (isCssStyle(node)) {
        try {
          const value = toString(node);
          fromString(node, clean$3.minify(value).styles || value);
          /* c8 ignore next -- in a try/catch for potential future third party errors */
        } catch {}
      }
    });
  }
}

/**
 * @typedef {import('./info.js').Info} Info
 * @typedef {Record<string, Info>} Properties
 * @typedef {Record<string, string>} Normal
 */

class Schema {
  /**
   * @constructor
   * @param {Properties} property
   * @param {Normal} normal
   * @param {string} [space]
   */
  constructor(property, normal, space) {
    this.property = property;
    this.normal = normal;
    if (space) {
      this.space = space;
    }
  }
}

/** @type {Properties} */
Schema.prototype.property = {};
/** @type {Normal} */
Schema.prototype.normal = {};
/** @type {string|null} */
Schema.prototype.space = null;

/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 */


/**
 * @param {Schema[]} definitions
 * @param {string} [space]
 * @returns {Schema}
 */
function merge$1(definitions, space) {
  /** @type {Properties} */
  const property = {};
  /** @type {Normal} */
  const normal = {};
  let index = -1;

  while (++index < definitions.length) {
    Object.assign(property, definitions[index].property);
    Object.assign(normal, definitions[index].normal);
  }

  return new Schema(property, normal, space)
}

/**
 * @param {string} value
 * @returns {string}
 */
function normalize(value) {
  return value.toLowerCase()
}

class Info {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   */
  constructor(property, attribute) {
    /** @type {string} */
    this.property = property;
    /** @type {string} */
    this.attribute = attribute;
  }
}

/** @type {string|null} */
Info.prototype.space = null;
Info.prototype.boolean = false;
Info.prototype.booleanish = false;
Info.prototype.overloadedBoolean = false;
Info.prototype.number = false;
Info.prototype.commaSeparated = false;
Info.prototype.spaceSeparated = false;
Info.prototype.commaOrSpaceSeparated = false;
Info.prototype.mustUseProperty = false;
Info.prototype.defined = false;

let powers = 0;

const boolean = increment();
const booleanish = increment();
const overloadedBoolean = increment();
const number = increment();
const spaceSeparated = increment();
const commaSeparated = increment();
const commaOrSpaceSeparated = increment();

function increment() {
  return 2 ** ++powers
}

const types = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  boolean,
  booleanish,
  commaOrSpaceSeparated,
  commaSeparated,
  number,
  overloadedBoolean,
  spaceSeparated
}, Symbol.toStringTag, { value: 'Module' }));

/** @type {Array<keyof types>} */
// @ts-expect-error: hush.
const checks = Object.keys(types);

class DefinedInfo extends Info {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  constructor(property, attribute, mask, space) {
    let index = -1;

    super(property, attribute);

    mark(this, 'space', space);

    if (typeof mask === 'number') {
      while (++index < checks.length) {
        const check = checks[index];
        mark(this, checks[index], (mask & types[check]) === types[check]);
      }
    }
  }
}

DefinedInfo.prototype.defined = true;

/**
 * @param {DefinedInfo} values
 * @param {string} key
 * @param {unknown} value
 */
function mark(values, key, value) {
  if (value) {
    // @ts-expect-error: assume `value` matches the expected value of `key`.
    values[key] = value;
  }
}

/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 *
 * @typedef {Record<string, string>} Attributes
 *
 * @typedef {Object} Definition
 * @property {Record<string, number|null>} properties
 * @property {(attributes: Attributes, property: string) => string} transform
 * @property {string} [space]
 * @property {Attributes} [attributes]
 * @property {Array<string>} [mustUseProperty]
 */


const own$4 = {}.hasOwnProperty;

/**
 * @param {Definition} definition
 * @returns {Schema}
 */
function create(definition) {
  /** @type {Properties} */
  const property = {};
  /** @type {Normal} */
  const normal = {};
  /** @type {string} */
  let prop;

  for (prop in definition.properties) {
    if (own$4.call(definition.properties, prop)) {
      const value = definition.properties[prop];
      const info = new DefinedInfo(
        prop,
        definition.transform(definition.attributes || {}, prop),
        value,
        definition.space
      );

      if (
        definition.mustUseProperty &&
        definition.mustUseProperty.includes(prop)
      ) {
        info.mustUseProperty = true;
      }

      property[prop] = info;

      normal[normalize(prop)] = prop;
      normal[normalize(info.attribute)] = prop;
    }
  }

  return new Schema(property, normal, definition.space)
}

const xlink = create({
  space: 'xlink',
  transform(_, prop) {
    return 'xlink:' + prop.slice(5).toLowerCase()
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});

const xml = create({
  space: 'xml',
  transform(_, prop) {
    return 'xml:' + prop.slice(3).toLowerCase()
  },
  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}
});

/**
 * @param {Record<string, string>} attributes
 * @param {string} attribute
 * @returns {string}
 */
function caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute
}

/**
 * @param {Record<string, string>} attributes
 * @param {string} property
 * @returns {string}
 */
function caseInsensitiveTransform(attributes, property) {
  return caseSensitiveTransform(attributes, property.toLowerCase())
}

const xmlns = create({
  space: 'xmlns',
  attributes: {xmlnsxlink: 'xmlns:xlink'},
  transform: caseInsensitiveTransform,
  properties: {xmlns: null, xmlnsXLink: null}
});

const aria = create({
  transform(_, prop) {
    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: booleanish,
    ariaAutoComplete: null,
    ariaBusy: booleanish,
    ariaChecked: booleanish,
    ariaColCount: number,
    ariaColIndex: number,
    ariaColSpan: number,
    ariaControls: spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: spaceSeparated,
    ariaDetails: null,
    ariaDisabled: booleanish,
    ariaDropEffect: spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: booleanish,
    ariaFlowTo: spaceSeparated,
    ariaGrabbed: booleanish,
    ariaHasPopup: null,
    ariaHidden: booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: spaceSeparated,
    ariaLevel: number,
    ariaLive: null,
    ariaModal: booleanish,
    ariaMultiLine: booleanish,
    ariaMultiSelectable: booleanish,
    ariaOrientation: null,
    ariaOwns: spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: number,
    ariaPressed: booleanish,
    ariaReadOnly: booleanish,
    ariaRelevant: null,
    ariaRequired: booleanish,
    ariaRoleDescription: spaceSeparated,
    ariaRowCount: number,
    ariaRowIndex: number,
    ariaRowSpan: number,
    ariaSelected: booleanish,
    ariaSetSize: number,
    ariaSort: null,
    ariaValueMax: number,
    ariaValueMin: number,
    ariaValueNow: number,
    ariaValueText: null,
    role: null
  }
});

const html$1 = create({
  space: 'html',
  attributes: {
    acceptcharset: 'accept-charset',
    classname: 'class',
    htmlfor: 'for',
    httpequiv: 'http-equiv'
  },
  transform: caseInsensitiveTransform,
  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: commaSeparated,
    acceptCharset: spaceSeparated,
    accessKey: spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: boolean,
    allowPaymentRequest: boolean,
    allowUserMedia: boolean,
    alt: null,
    as: null,
    async: boolean,
    autoCapitalize: null,
    autoComplete: spaceSeparated,
    autoFocus: boolean,
    autoPlay: boolean,
    blocking: spaceSeparated,
    capture: boolean,
    charSet: null,
    checked: boolean,
    cite: null,
    className: spaceSeparated,
    cols: number,
    colSpan: null,
    content: null,
    contentEditable: booleanish,
    controls: boolean,
    controlsList: spaceSeparated,
    coords: number | commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: boolean,
    defer: boolean,
    dir: null,
    dirName: null,
    disabled: boolean,
    download: overloadedBoolean,
    draggable: booleanish,
    encType: null,
    enterKeyHint: null,
    fetchPriority: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: boolean,
    formTarget: null,
    headers: spaceSeparated,
    height: number,
    hidden: boolean,
    high: number,
    href: null,
    hrefLang: null,
    htmlFor: spaceSeparated,
    httpEquiv: spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inert: boolean,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: boolean,
    itemId: null,
    itemProp: spaceSeparated,
    itemRef: spaceSeparated,
    itemScope: boolean,
    itemType: spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: boolean,
    low: number,
    manifest: null,
    max: null,
    maxLength: number,
    media: null,
    method: null,
    min: null,
    minLength: number,
    multiple: boolean,
    muted: boolean,
    name: null,
    nonce: null,
    noModule: boolean,
    noValidate: boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: boolean,
    optimum: number,
    pattern: null,
    ping: spaceSeparated,
    placeholder: null,
    playsInline: boolean,
    popover: null,
    popoverTarget: null,
    popoverTargetAction: null,
    poster: null,
    preload: null,
    readOnly: boolean,
    referrerPolicy: null,
    rel: spaceSeparated,
    required: boolean,
    reversed: boolean,
    rows: number,
    rowSpan: number,
    sandbox: spaceSeparated,
    scope: null,
    scoped: boolean,
    seamless: boolean,
    selected: boolean,
    shape: null,
    size: number,
    sizes: null,
    slot: null,
    span: number,
    spellCheck: booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: number,
    step: null,
    style: null,
    tabIndex: number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: boolean,
    useMap: null,
    value: booleanish,
    width: number,
    wrap: null,

    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null, // Several. Use CSS `text-align` instead,
    aLink: null, // `<body>`. Use CSS `a:active {color}` instead
    archive: spaceSeparated, // `<object>`. List of URIs to archives
    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null, // `<body>`. Use CSS `background-image` instead
    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead
    border: number, // `<table>`. Use CSS `border-width` instead,
    borderColor: null, // `<table>`. Use CSS `border-color` instead,
    bottomMargin: number, // `<body>`
    cellPadding: null, // `<table>`
    cellSpacing: null, // `<table>`
    char: null, // Several table elements. When `align=char`, sets the character to align on
    charOff: null, // Several table elements. When `char`, offsets the alignment
    classId: null, // `<object>`
    clear: null, // `<br>`. Use CSS `clear` instead
    code: null, // `<object>`
    codeBase: null, // `<object>`
    codeType: null, // `<object>`
    color: null, // `<font>` and `<hr>`. Use CSS instead
    compact: boolean, // Lists. Use CSS to reduce space between items instead
    declare: boolean, // `<object>`
    event: null, // `<script>`
    face: null, // `<font>`. Use CSS instead
    frame: null, // `<table>`
    frameBorder: null, // `<iframe>`. Use CSS `border` instead
    hSpace: number, // `<img>` and `<object>`
    leftMargin: number, // `<body>`
    link: null, // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null, // `<img>`. Use a `<picture>`
    marginHeight: number, // `<body>`
    marginWidth: number, // `<body>`
    noResize: boolean, // `<frame>`
    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`
    noShade: boolean, // `<hr>`. Use background-color and height instead of borders
    noWrap: boolean, // `<td>` and `<th>`
    object: null, // `<applet>`
    profile: null, // `<head>`
    prompt: null, // `<isindex>`
    rev: null, // `<link>`
    rightMargin: number, // `<body>`
    rules: null, // `<table>`
    scheme: null, // `<meta>`
    scrolling: booleanish, // `<frame>`. Use overflow in the child context
    standby: null, // `<object>`
    summary: null, // `<table>`
    text: null, // `<body>`. Use CSS `color` instead
    topMargin: number, // `<body>`
    valueType: null, // `<param>`
    version: null, // `<html>`. Use a doctype.
    vAlign: null, // Several. Use CSS `vertical-align` instead
    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: number, // `<img>` and `<object>`

    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: boolean,
    disableRemotePlayback: boolean,
    prefix: null,
    property: null,
    results: number,
    security: null,
    unselectable: null
  }
});

const svg$1 = create({
  space: 'svg',
  attributes: {
    accentHeight: 'accent-height',
    alignmentBaseline: 'alignment-baseline',
    arabicForm: 'arabic-form',
    baselineShift: 'baseline-shift',
    capHeight: 'cap-height',
    className: 'class',
    clipPath: 'clip-path',
    clipRule: 'clip-rule',
    colorInterpolation: 'color-interpolation',
    colorInterpolationFilters: 'color-interpolation-filters',
    colorProfile: 'color-profile',
    colorRendering: 'color-rendering',
    crossOrigin: 'crossorigin',
    dataType: 'datatype',
    dominantBaseline: 'dominant-baseline',
    enableBackground: 'enable-background',
    fillOpacity: 'fill-opacity',
    fillRule: 'fill-rule',
    floodColor: 'flood-color',
    floodOpacity: 'flood-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    fontSizeAdjust: 'font-size-adjust',
    fontStretch: 'font-stretch',
    fontStyle: 'font-style',
    fontVariant: 'font-variant',
    fontWeight: 'font-weight',
    glyphName: 'glyph-name',
    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
    glyphOrientationVertical: 'glyph-orientation-vertical',
    hrefLang: 'hreflang',
    horizAdvX: 'horiz-adv-x',
    horizOriginX: 'horiz-origin-x',
    horizOriginY: 'horiz-origin-y',
    imageRendering: 'image-rendering',
    letterSpacing: 'letter-spacing',
    lightingColor: 'lighting-color',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    navDown: 'nav-down',
    navDownLeft: 'nav-down-left',
    navDownRight: 'nav-down-right',
    navLeft: 'nav-left',
    navNext: 'nav-next',
    navPrev: 'nav-prev',
    navRight: 'nav-right',
    navUp: 'nav-up',
    navUpLeft: 'nav-up-left',
    navUpRight: 'nav-up-right',
    onAbort: 'onabort',
    onActivate: 'onactivate',
    onAfterPrint: 'onafterprint',
    onBeforePrint: 'onbeforeprint',
    onBegin: 'onbegin',
    onCancel: 'oncancel',
    onCanPlay: 'oncanplay',
    onCanPlayThrough: 'oncanplaythrough',
    onChange: 'onchange',
    onClick: 'onclick',
    onClose: 'onclose',
    onCopy: 'oncopy',
    onCueChange: 'oncuechange',
    onCut: 'oncut',
    onDblClick: 'ondblclick',
    onDrag: 'ondrag',
    onDragEnd: 'ondragend',
    onDragEnter: 'ondragenter',
    onDragExit: 'ondragexit',
    onDragLeave: 'ondragleave',
    onDragOver: 'ondragover',
    onDragStart: 'ondragstart',
    onDrop: 'ondrop',
    onDurationChange: 'ondurationchange',
    onEmptied: 'onemptied',
    onEnd: 'onend',
    onEnded: 'onended',
    onError: 'onerror',
    onFocus: 'onfocus',
    onFocusIn: 'onfocusin',
    onFocusOut: 'onfocusout',
    onHashChange: 'onhashchange',
    onInput: 'oninput',
    onInvalid: 'oninvalid',
    onKeyDown: 'onkeydown',
    onKeyPress: 'onkeypress',
    onKeyUp: 'onkeyup',
    onLoad: 'onload',
    onLoadedData: 'onloadeddata',
    onLoadedMetadata: 'onloadedmetadata',
    onLoadStart: 'onloadstart',
    onMessage: 'onmessage',
    onMouseDown: 'onmousedown',
    onMouseEnter: 'onmouseenter',
    onMouseLeave: 'onmouseleave',
    onMouseMove: 'onmousemove',
    onMouseOut: 'onmouseout',
    onMouseOver: 'onmouseover',
    onMouseUp: 'onmouseup',
    onMouseWheel: 'onmousewheel',
    onOffline: 'onoffline',
    onOnline: 'ononline',
    onPageHide: 'onpagehide',
    onPageShow: 'onpageshow',
    onPaste: 'onpaste',
    onPause: 'onpause',
    onPlay: 'onplay',
    onPlaying: 'onplaying',
    onPopState: 'onpopstate',
    onProgress: 'onprogress',
    onRateChange: 'onratechange',
    onRepeat: 'onrepeat',
    onReset: 'onreset',
    onResize: 'onresize',
    onScroll: 'onscroll',
    onSeeked: 'onseeked',
    onSeeking: 'onseeking',
    onSelect: 'onselect',
    onShow: 'onshow',
    onStalled: 'onstalled',
    onStorage: 'onstorage',
    onSubmit: 'onsubmit',
    onSuspend: 'onsuspend',
    onTimeUpdate: 'ontimeupdate',
    onToggle: 'ontoggle',
    onUnload: 'onunload',
    onVolumeChange: 'onvolumechange',
    onWaiting: 'onwaiting',
    onZoom: 'onzoom',
    overlinePosition: 'overline-position',
    overlineThickness: 'overline-thickness',
    paintOrder: 'paint-order',
    panose1: 'panose-1',
    pointerEvents: 'pointer-events',
    referrerPolicy: 'referrerpolicy',
    renderingIntent: 'rendering-intent',
    shapeRendering: 'shape-rendering',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strikethroughPosition: 'strikethrough-position',
    strikethroughThickness: 'strikethrough-thickness',
    strokeDashArray: 'stroke-dasharray',
    strokeDashOffset: 'stroke-dashoffset',
    strokeLineCap: 'stroke-linecap',
    strokeLineJoin: 'stroke-linejoin',
    strokeMiterLimit: 'stroke-miterlimit',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    tabIndex: 'tabindex',
    textAnchor: 'text-anchor',
    textDecoration: 'text-decoration',
    textRendering: 'text-rendering',
    transformOrigin: 'transform-origin',
    typeOf: 'typeof',
    underlinePosition: 'underline-position',
    underlineThickness: 'underline-thickness',
    unicodeBidi: 'unicode-bidi',
    unicodeRange: 'unicode-range',
    unitsPerEm: 'units-per-em',
    vAlphabetic: 'v-alphabetic',
    vHanging: 'v-hanging',
    vIdeographic: 'v-ideographic',
    vMathematical: 'v-mathematical',
    vectorEffect: 'vector-effect',
    vertAdvY: 'vert-adv-y',
    vertOriginX: 'vert-origin-x',
    vertOriginY: 'vert-origin-y',
    wordSpacing: 'word-spacing',
    writingMode: 'writing-mode',
    xHeight: 'x-height',
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: 'playbackorder',
    timelineBegin: 'timelinebegin'
  },
  transform: caseSensitiveTransform,
  properties: {
    about: commaOrSpaceSeparated,
    accentHeight: number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: number,
    amplitude: number,
    arabicForm: null,
    ascent: number,
    attributeName: null,
    attributeType: null,
    azimuth: number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: number,
    by: null,
    calcMode: null,
    capHeight: number,
    className: spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: number,
    diffuseConstant: number,
    direction: null,
    display: null,
    dur: null,
    divisor: number,
    dominantBaseline: null,
    download: boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: commaSeparated,
    g2: commaSeparated,
    glyphName: commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: number,
    horizOriginX: number,
    horizOriginY: number,
    id: null,
    ideographic: number,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: number,
    k: number,
    k1: number,
    k2: number,
    k3: number,
    k4: number,
    kernelMatrix: commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null, // SEMI_COLON_SEPARATED
    keySplines: null, // SEMI_COLON_SEPARATED
    keyTimes: null, // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: number,
    overlineThickness: number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: number,
    pointsAtY: number,
    pointsAtZ: number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: commaOrSpaceSeparated,
    rev: commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: commaOrSpaceSeparated,
    requiredFeatures: commaOrSpaceSeparated,
    requiredFonts: commaOrSpaceSeparated,
    requiredFormats: commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: number,
    specularExponent: number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: number,
    strikethroughThickness: number,
    string: null,
    stroke: null,
    strokeDashArray: commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: number,
    strokeOpacity: number,
    strokeWidth: null,
    style: null,
    surfaceScale: number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: commaOrSpaceSeparated,
    tabIndex: number,
    tableValues: null,
    target: null,
    targetX: number,
    targetY: number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: commaOrSpaceSeparated,
    to: null,
    transform: null,
    transformOrigin: null,
    u1: null,
    u2: null,
    underlinePosition: number,
    underlineThickness: number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: number,
    values: null,
    vAlphabetic: number,
    vMathematical: number,
    vectorEffect: null,
    vHanging: number,
    vIdeographic: number,
    version: null,
    vertAdvY: number,
    vertOriginX: number,
    vertOriginY: number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});

/**
 * @typedef {import('./util/schema.js').Schema} Schema
 */


const valid = /^data[-\w.:]+$/i;
const dash = /-[a-z]/g;
const cap = /[A-Z]/g;

/**
 * @param {Schema} schema
 * @param {string} value
 * @returns {Info}
 */
function find(schema, value) {
  const normal = normalize(value);
  let prop = value;
  let Type = Info;

  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]]
  }

  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
    // Attribute or property.
    if (value.charAt(4) === '-') {
      // Turn it into a property.
      const rest = value.slice(5).replace(dash, camelcase);
      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      // Turn it into an attribute.
      const rest = value.slice(4);

      if (!dash.test(rest)) {
        let dashes = rest.replace(cap, kebab);

        if (dashes.charAt(0) !== '-') {
          dashes = '-' + dashes;
        }

        value = 'data' + dashes;
      }
    }

    Type = DefinedInfo;
  }

  return new Type(prop, value)
}

/**
 * @param {string} $0
 * @returns {string}
 */
function kebab($0) {
  return '-' + $0.toLowerCase()
}

/**
 * @param {string} $0
 * @returns {string}
 */
function camelcase($0) {
  return $0.charAt(1).toUpperCase()
}

/**
 * @typedef {import('./lib/util/info.js').Info} Info
 * @typedef {import('./lib/util/schema.js').Schema} Schema
 */

const html = merge$1([xml, xlink, xmlns, aria, html$1], 'html');
const svg = merge$1([xml, xlink, xmlns, aria, svg$1], 'svg');

const emptyMulticharIndex = {};
const emptyRegularIndex = {};
function extendIndex(item, index) {
    let currentIndex = index;
    for (let pos = 0; pos < item.length; pos++) {
        const isLast = pos === item.length - 1;
        const char = item.charAt(pos);
        const charIndex = currentIndex[char] || (currentIndex[char] = { chars: {} });
        if (isLast) {
            charIndex.self = item;
        }
        currentIndex = charIndex.chars;
    }
}
function createMulticharIndex(items) {
    if (items.length === 0) {
        return emptyMulticharIndex;
    }
    const index = {};
    for (const item of items) {
        extendIndex(item, index);
    }
    return index;
}
function createRegularIndex(items) {
    if (items.length === 0) {
        return emptyRegularIndex;
    }
    const result = {};
    for (const item of items) {
        result[item] = true;
    }
    return result;
}

const emptyPseudoSignatures = {};
const defaultPseudoSignature = {
    type: 'String',
    optional: true
};
function calculatePseudoSignature(types) {
    const result = {
        type: 'NoArgument',
        optional: false
    };
    function setResultType(type) {
        if (result.type && result.type !== type && result.type !== 'NoArgument') {
            throw new Error(`Conflicting pseudo-class argument type: "${result.type}" vs "${type}".`);
        }
        result.type = type;
    }
    for (const type of types) {
        if (type === 'NoArgument') {
            result.optional = true;
        }
        if (type === 'Formula') {
            setResultType('Formula');
        }
        if (type === 'FormulaOfSelector') {
            setResultType('Formula');
            result.ofSelector = true;
        }
        if (type === 'String') {
            setResultType('String');
        }
        if (type === 'Selector') {
            setResultType('Selector');
        }
    }
    return result;
}
function inverseCategories(obj) {
    const result = {};
    for (const category of Object.keys(obj)) {
        const items = obj[category];
        if (items) {
            for (const item of items) {
                (result[item] || (result[item] = [])).push(category);
            }
        }
    }
    return result;
}
function calculatePseudoSignatures(definitions) {
    const pseudoClassesToArgumentTypes = inverseCategories(definitions);
    const result = {};
    for (const pseudoClass of Object.keys(pseudoClassesToArgumentTypes)) {
        const argumentTypes = pseudoClassesToArgumentTypes[pseudoClass];
        if (argumentTypes) {
            result[pseudoClass] = calculatePseudoSignature(argumentTypes);
        }
    }
    return result;
}

const emptyXmlOptions = {};
const defaultXmlOptions = { wildcard: true };
function getXmlOptions(param) {
    if (param) {
        if (typeof param === 'boolean') {
            return defaultXmlOptions;
        }
        else {
            return param;
        }
    }
    else {
        return emptyXmlOptions;
    }
}
function withMigration(migration, merge) {
    return (base, extension) => merge(migration(base), migration(extension));
}
function withNoNegative(merge) {
    return (base, extension) => {
        const result = merge(base, extension);
        if (!result) {
            throw new Error(`Syntax definition cannot be null or undefined.`);
        }
        return result;
    };
}
function withPositive(positive, merge) {
    return (base, extension) => {
        if (extension === true) {
            return positive;
        }
        return merge(base === true ? positive : base, extension);
    };
}
function mergeSection(values) {
    return (base, extension) => {
        if (!extension || !base) {
            return extension;
        }
        if (typeof extension !== 'object' || extension === null) {
            throw new Error(`Unexpected syntax definition extension type: ${extension}.`);
        }
        const result = { ...base };
        for (const [key, value] of Object.entries(extension)) {
            const mergeSchema = values[key];
            result[key] = mergeSchema(base[key], value);
        }
        return result;
    };
}
function replaceValueIfSpecified(base, extension) {
    if (extension !== undefined) {
        return extension;
    }
    return base;
}
function concatArray(base, extension) {
    if (!extension) {
        return base;
    }
    if (!base) {
        return extension;
    }
    return base.concat(extension);
}
function mergeDefinitions(base, extension) {
    if (!extension) {
        return base;
    }
    if (!base) {
        return extension;
    }
    const result = { ...base };
    for (const [key, value] of Object.entries(extension)) {
        if (!value) {
            delete result[key];
            continue;
        }
        const baseValue = base[key];
        if (!baseValue) {
            result[key] = value;
            continue;
        }
        result[key] = baseValue.concat(value);
    }
    return result;
}
const extendSyntaxDefinition = withNoNegative(mergeSection({
    baseSyntax: replaceValueIfSpecified,
    tag: withPositive(defaultXmlOptions, mergeSection({
        wildcard: replaceValueIfSpecified
    })),
    ids: replaceValueIfSpecified,
    classNames: replaceValueIfSpecified,
    namespace: withPositive(defaultXmlOptions, mergeSection({
        wildcard: replaceValueIfSpecified
    })),
    combinators: concatArray,
    attributes: mergeSection({
        operators: concatArray,
        caseSensitivityModifiers: concatArray,
        unknownCaseSensitivityModifiers: replaceValueIfSpecified
    }),
    pseudoClasses: mergeSection({
        unknown: replaceValueIfSpecified,
        definitions: mergeDefinitions
    }),
    pseudoElements: mergeSection({
        unknown: replaceValueIfSpecified,
        notation: replaceValueIfSpecified,
        definitions: withMigration((definitions) => (Array.isArray(definitions) ? { NoArgument: definitions } : definitions), mergeDefinitions)
    })
}));
const css1SyntaxDefinition = {
    tag: {},
    ids: true,
    classNames: true,
    combinators: [],
    pseudoElements: {
        unknown: 'reject',
        notation: 'singleColon',
        definitions: ['first-letter', 'first-line']
    },
    pseudoClasses: {
        unknown: 'reject',
        definitions: {
            NoArgument: ['link', 'visited', 'active']
        }
    }
};
const css2SyntaxDefinition = extendSyntaxDefinition(css1SyntaxDefinition, {
    tag: { wildcard: true },
    combinators: ['>', '+'],
    attributes: {
        unknownCaseSensitivityModifiers: 'reject',
        operators: ['=', '~=', '|=']
    },
    pseudoElements: {
        definitions: ['before', 'after']
    },
    pseudoClasses: {
        unknown: 'reject',
        definitions: {
            NoArgument: ['hover', 'focus', 'first-child'],
            String: ['lang']
        }
    }
});
const selectors3SyntaxDefinition = extendSyntaxDefinition(css2SyntaxDefinition, {
    namespace: {
        wildcard: true
    },
    combinators: ['~'],
    attributes: {
        operators: ['^=', '$=', '*=']
    },
    pseudoElements: {
        notation: 'both'
    },
    pseudoClasses: {
        definitions: {
            NoArgument: [
                'root',
                'last-child',
                'first-of-type',
                'last-of-type',
                'only-child',
                'only-of-type',
                'empty',
                'target',
                'enabled',
                'disabled',
                'checked',
                'indeterminate'
            ],
            Formula: ['nth-child', 'nth-last-child', 'nth-of-type', 'nth-last-of-type'],
            Selector: ['not']
        }
    }
});
const selectors4SyntaxDefinition = extendSyntaxDefinition(selectors3SyntaxDefinition, {
    combinators: ['||'],
    attributes: {
        caseSensitivityModifiers: ['i', 'I', 's', 'S']
    },
    pseudoClasses: {
        definitions: {
            NoArgument: [
                'any-link',
                'local-link',
                'target-within',
                'scope',
                'current',
                'past',
                'future',
                'focus-within',
                'focus-visible',
                'read-write',
                'read-only',
                'placeholder-shown',
                'default',
                'valid',
                'invalid',
                'in-range',
                'out-of-range',
                'required',
                'optional',
                'blank',
                'user-invalid'
            ],
            Formula: ['nth-col', 'nth-last-col'],
            String: ['dir'],
            FormulaOfSelector: ['nth-child', 'nth-last-child'],
            Selector: ['current', 'is', 'where', 'has']
        }
    }
});
const progressiveSyntaxDefinition = extendSyntaxDefinition(selectors4SyntaxDefinition, {
    pseudoElements: {
        unknown: 'accept'
    },
    pseudoClasses: {
        unknown: 'accept'
    },
    attributes: {
        unknownCaseSensitivityModifiers: 'accept'
    }
});
const cssSyntaxDefinitions = {
    css1: css1SyntaxDefinition,
    css2: css2SyntaxDefinition,
    css3: selectors3SyntaxDefinition,
    'selectors-3': selectors3SyntaxDefinition,
    'selectors-4': selectors4SyntaxDefinition,
    latest: selectors4SyntaxDefinition,
    progressive: progressiveSyntaxDefinition
};

function isIdentStart(c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c === '-' || c === '_' || c === '\\';
}
function isIdent(c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c === '-' || c === '_';
}
function isHex(c) {
    return (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F') || (c >= '0' && c <= '9');
}
const stringEscapeChars = {
    n: '\n',
    r: '\r',
    t: '\t',
    f: '\f',
    '\\': '\\'
};
const whitespaceChars = {
    ' ': true,
    '\t': true,
    '\n': true,
    '\r': true,
    '\f': true
};
const quoteChars = {
    '"': true,
    "'": true
};
const digitsChars = {
    0: true,
    1: true,
    2: true,
    3: true,
    4: true,
    5: true,
    6: true,
    7: true,
    8: true,
    9: true
};

const errorPrefix = `css-selector-parser parse error: `;
/**
 * Creates a parse function to be used later to parse CSS selectors.
 */
function createParser(options = {}) {
    const { syntax = 'latest', substitutes, strict = true } = options;
    let syntaxDefinition = typeof syntax === 'object' ? syntax : cssSyntaxDefinitions[syntax];
    if (syntaxDefinition.baseSyntax) {
        syntaxDefinition = extendSyntaxDefinition(cssSyntaxDefinitions[syntaxDefinition.baseSyntax], syntaxDefinition);
    }
    const [tagNameEnabled, tagNameWildcardEnabled] = syntaxDefinition.tag
        ? [true, Boolean(getXmlOptions(syntaxDefinition.tag).wildcard)]
        : [false, false];
    const idEnabled = Boolean(syntaxDefinition.ids);
    const classNamesEnabled = Boolean(syntaxDefinition.classNames);
    const namespaceEnabled = Boolean(syntaxDefinition.namespace);
    const namespaceWildcardEnabled = syntaxDefinition.namespace &&
        (syntaxDefinition.namespace === true || syntaxDefinition.namespace.wildcard === true);
    if (namespaceEnabled && !tagNameEnabled) {
        throw new Error(`${errorPrefix}Namespaces cannot be enabled while tags are disabled.`);
    }
    const substitutesEnabled = Boolean(substitutes);
    const combinatorsIndex = syntaxDefinition.combinators
        ? createMulticharIndex(syntaxDefinition.combinators)
        : emptyMulticharIndex;
    const [attributesEnabled, attributesOperatorsIndex, attributesCaseSensitivityModifiers, attributesAcceptUnknownCaseSensitivityModifiers] = syntaxDefinition.attributes
        ? [
            true,
            syntaxDefinition.attributes.operators
                ? createMulticharIndex(syntaxDefinition.attributes.operators)
                : emptyMulticharIndex,
            syntaxDefinition.attributes.caseSensitivityModifiers
                ? createRegularIndex(syntaxDefinition.attributes.caseSensitivityModifiers)
                : emptyRegularIndex,
            syntaxDefinition.attributes.unknownCaseSensitivityModifiers === 'accept'
        ]
        : [false, emptyMulticharIndex, emptyRegularIndex, false];
    const attributesCaseSensitivityModifiersEnabled = attributesAcceptUnknownCaseSensitivityModifiers || Object.keys(attributesCaseSensitivityModifiers).length > 0;
    const [pseudoClassesEnabled, pseudoClassesDefinitions, pseudoClassesAcceptUnknown] = syntaxDefinition.pseudoClasses
        ? [
            true,
            syntaxDefinition.pseudoClasses.definitions
                ? calculatePseudoSignatures(syntaxDefinition.pseudoClasses.definitions)
                : emptyPseudoSignatures,
            syntaxDefinition.pseudoClasses.unknown === 'accept'
        ]
        : [false, emptyPseudoSignatures, false];
    const [pseudoElementsEnabled, pseudoElementsSingleColonNotationEnabled, pseudoElementsDoubleColonNotationEnabled, pseudoElementsDefinitions, pseudoElementsAcceptUnknown] = syntaxDefinition.pseudoElements
        ? [
            true,
            syntaxDefinition.pseudoElements.notation === 'singleColon' ||
                syntaxDefinition.pseudoElements.notation === 'both',
            !syntaxDefinition.pseudoElements.notation ||
                syntaxDefinition.pseudoElements.notation === 'doubleColon' ||
                syntaxDefinition.pseudoElements.notation === 'both',
            syntaxDefinition.pseudoElements.definitions
                ? calculatePseudoSignatures(Array.isArray(syntaxDefinition.pseudoElements.definitions)
                    ? { NoArgument: syntaxDefinition.pseudoElements.definitions }
                    : syntaxDefinition.pseudoElements.definitions)
                : emptyPseudoSignatures,
            syntaxDefinition.pseudoElements.unknown === 'accept'
        ]
        : [false, false, false, emptyPseudoSignatures, false];
    let str = '';
    let l = str.length;
    let pos = 0;
    let chr = '';
    const is = (comparison) => chr === comparison;
    const isTagStart = () => is('*') || isIdentStart(chr);
    const rewind = (newPos) => {
        pos = newPos;
        chr = str.charAt(pos);
    };
    const next = () => {
        pos++;
        chr = str.charAt(pos);
    };
    const readAndNext = () => {
        const current = chr;
        pos++;
        chr = str.charAt(pos);
        return current;
    };
    /** @throws ParserError */
    function fail(errorMessage) {
        const position = Math.min(l - 1, pos);
        const error = new Error(`${errorPrefix}${errorMessage} Pos: ${position}.`);
        error.position = position;
        error.name = 'ParserError';
        throw error;
    }
    function assert(condition, errorMessage) {
        if (!condition) {
            return fail(errorMessage);
        }
    }
    const assertNonEof = () => {
        assert(pos < l, 'Unexpected end of input.');
    };
    const isEof = () => pos >= l;
    const pass = (character) => {
        assert(pos < l, `Expected "${character}" but end of input reached.`);
        assert(chr === character, `Expected "${character}" but "${chr}" found.`);
        pos++;
        chr = str.charAt(pos);
    };
    function matchMulticharIndex(index) {
        const match = matchMulticharIndexPos(index, pos);
        if (match) {
            pos += match.length;
            chr = str.charAt(pos);
            return match;
        }
    }
    function matchMulticharIndexPos(index, subPos) {
        const char = str.charAt(subPos);
        const charIndex = index[char];
        if (charIndex) {
            const subMatch = matchMulticharIndexPos(charIndex.chars, subPos + 1);
            if (subMatch) {
                return subMatch;
            }
            if (charIndex.self) {
                return charIndex.self;
            }
        }
    }
    function parseHex() {
        let hex = readAndNext();
        while (isHex(chr)) {
            hex += readAndNext();
        }
        if (is(' ')) {
            next();
        }
        return String.fromCharCode(parseInt(hex, 16));
    }
    function parseString(quote) {
        let result = '';
        pass(quote);
        while (pos < l) {
            if (is(quote)) {
                next();
                return result;
            }
            else if (is('\\')) {
                next();
                let esc;
                if (is(quote)) {
                    result += quote;
                }
                else if ((esc = stringEscapeChars[chr]) !== undefined) {
                    result += esc;
                }
                else if (isHex(chr)) {
                    result += parseHex();
                    continue;
                }
                else {
                    result += chr;
                }
            }
            else {
                result += chr;
            }
            next();
        }
        return result;
    }
    function parseIdentifier() {
        let result = '';
        while (pos < l) {
            if (isIdent(chr)) {
                result += readAndNext();
            }
            else if (is('\\')) {
                next();
                assertNonEof();
                if (isHex(chr)) {
                    result += parseHex();
                }
                else {
                    result += readAndNext();
                }
            }
            else {
                return result;
            }
        }
        return result;
    }
    function parsePseudoClassString() {
        let result = '';
        while (pos < l) {
            if (is(')')) {
                break;
            }
            else if (is('\\')) {
                next();
                if (isEof() && !strict) {
                    return (result + '\\').trim();
                }
                assertNonEof();
                if (isHex(chr)) {
                    result += parseHex();
                }
                else {
                    result += readAndNext();
                }
            }
            else {
                result += readAndNext();
            }
        }
        return result.trim();
    }
    function skipWhitespace() {
        while (whitespaceChars[chr]) {
            next();
        }
    }
    function parseSelector(relative = false) {
        skipWhitespace();
        const rules = [parseRule(relative)];
        while (is(',')) {
            next();
            skipWhitespace();
            rules.push(parseRule(relative));
        }
        return {
            type: 'Selector',
            rules
        };
    }
    function parseAttribute() {
        pass('[');
        skipWhitespace();
        let attr;
        if (is('|')) {
            assert(namespaceEnabled, 'Namespaces are not enabled.');
            next();
            attr = {
                type: 'Attribute',
                name: parseIdentifier(),
                namespace: { type: 'NoNamespace' }
            };
        }
        else if (is('*')) {
            assert(namespaceEnabled, 'Namespaces are not enabled.');
            assert(namespaceWildcardEnabled, 'Wildcard namespace is not enabled.');
            next();
            pass('|');
            attr = {
                type: 'Attribute',
                name: parseIdentifier(),
                namespace: { type: 'WildcardNamespace' }
            };
        }
        else {
            const identifier = parseIdentifier();
            attr = {
                type: 'Attribute',
                name: identifier
            };
            if (is('|')) {
                const savedPos = pos;
                next();
                if (isIdentStart(chr)) {
                    assert(namespaceEnabled, 'Namespaces are not enabled.');
                    attr = {
                        type: 'Attribute',
                        name: parseIdentifier(),
                        namespace: { type: 'NamespaceName', name: identifier }
                    };
                }
                else {
                    rewind(savedPos);
                }
            }
        }
        assert(attr.name, 'Expected attribute name.');
        skipWhitespace();
        if (isEof() && !strict) {
            return attr;
        }
        if (is(']')) {
            next();
        }
        else {
            attr.operator = matchMulticharIndex(attributesOperatorsIndex);
            assert(attr.operator, 'Expected a valid attribute selector operator.');
            skipWhitespace();
            assertNonEof();
            if (quoteChars[chr]) {
                attr.value = {
                    type: 'String',
                    value: parseString(chr)
                };
            }
            else if (substitutesEnabled && is('$')) {
                next();
                attr.value = {
                    type: 'Substitution',
                    name: parseIdentifier()
                };
                assert(attr.value.name, 'Expected substitute name.');
            }
            else {
                attr.value = {
                    type: 'String',
                    value: parseIdentifier()
                };
                assert(attr.value.value, 'Expected attribute value.');
            }
            skipWhitespace();
            if (isEof() && !strict) {
                return attr;
            }
            if (!is(']')) {
                attr.caseSensitivityModifier = parseIdentifier();
                assert(attr.caseSensitivityModifier, 'Expected end of attribute selector.');
                assert(attributesCaseSensitivityModifiersEnabled, 'Attribute case sensitivity modifiers are not enabled.');
                assert(attributesAcceptUnknownCaseSensitivityModifiers ||
                    attributesCaseSensitivityModifiers[attr.caseSensitivityModifier], 'Unknown attribute case sensitivity modifier.');
                skipWhitespace();
                if (isEof() && !strict) {
                    return attr;
                }
            }
            pass(']');
        }
        return attr;
    }
    function parseNumber() {
        let result = '';
        while (digitsChars[chr]) {
            result += readAndNext();
        }
        assert(result !== '', 'Formula parse error.');
        return parseInt(result);
    }
    const isNumberStart = () => is('-') || is('+') || digitsChars[chr];
    function parseFormula() {
        if (is('e') || is('o')) {
            const ident = parseIdentifier();
            if (ident === 'even') {
                skipWhitespace();
                return [2, 0];
            }
            if (ident === 'odd') {
                skipWhitespace();
                return [2, 1];
            }
        }
        let firstNumber = null;
        let firstNumberMultiplier = 1;
        if (is('-')) {
            next();
            firstNumberMultiplier = -1;
        }
        if (isNumberStart()) {
            if (is('+')) {
                next();
            }
            firstNumber = parseNumber();
            if (!is('\\') && !is('n')) {
                return [0, firstNumber * firstNumberMultiplier];
            }
        }
        if (firstNumber === null) {
            firstNumber = 1;
        }
        firstNumber *= firstNumberMultiplier;
        let identifier;
        if (is('\\')) {
            next();
            if (isHex(chr)) {
                identifier = parseHex();
            }
            else {
                identifier = readAndNext();
            }
        }
        else {
            identifier = readAndNext();
        }
        assert(identifier === 'n', 'Formula parse error: expected "n".');
        skipWhitespace();
        if (is('+') || is('-')) {
            const sign = is('+') ? 1 : -1;
            next();
            skipWhitespace();
            return [firstNumber, sign * parseNumber()];
        }
        else {
            return [firstNumber, 0];
        }
    }
    function parsePseudoArgument(pseudoName, type, signature) {
        let argument;
        if (is('(')) {
            next();
            skipWhitespace();
            if (substitutesEnabled && is('$')) {
                next();
                argument = {
                    type: 'Substitution',
                    name: parseIdentifier()
                };
                assert(argument.name, 'Expected substitute name.');
            }
            else if (signature.type === 'String') {
                argument = {
                    type: 'String',
                    value: parsePseudoClassString()
                };
                assert(argument.value, `Expected ${type} argument value.`);
            }
            else if (signature.type === 'Selector') {
                argument = parseSelector(true);
            }
            else if (signature.type === 'Formula') {
                const [a, b] = parseFormula();
                argument = {
                    type: 'Formula',
                    a,
                    b
                };
                if (signature.ofSelector) {
                    skipWhitespace();
                    if (is('o') || is('\\')) {
                        const ident = parseIdentifier();
                        assert(ident === 'of', 'Formula of selector parse error.');
                        skipWhitespace();
                        argument = {
                            type: 'FormulaOfSelector',
                            a,
                            b,
                            selector: parseRule()
                        };
                    }
                }
            }
            else {
                return fail(`Invalid ${type} signature.`);
            }
            skipWhitespace();
            if (isEof() && !strict) {
                return argument;
            }
            pass(')');
        }
        else {
            assert(signature.optional, `Argument is required for ${type} "${pseudoName}".`);
        }
        return argument;
    }
    function parseTagName() {
        if (is('*')) {
            assert(tagNameWildcardEnabled, 'Wildcard tag name is not enabled.');
            next();
            return { type: 'WildcardTag' };
        }
        else if (isIdentStart(chr)) {
            assert(tagNameEnabled, 'Tag names are not enabled.');
            return {
                type: 'TagName',
                name: parseIdentifier()
            };
        }
        else {
            return fail('Expected tag name.');
        }
    }
    function parseTagNameWithNamespace() {
        if (is('*')) {
            const savedPos = pos;
            next();
            if (!is('|')) {
                rewind(savedPos);
                return parseTagName();
            }
            next();
            if (!isTagStart()) {
                rewind(savedPos);
                return parseTagName();
            }
            assert(namespaceEnabled, 'Namespaces are not enabled.');
            assert(namespaceWildcardEnabled, 'Wildcard namespace is not enabled.');
            const tagName = parseTagName();
            tagName.namespace = { type: 'WildcardNamespace' };
            return tagName;
        }
        else if (is('|')) {
            assert(namespaceEnabled, 'Namespaces are not enabled.');
            next();
            const tagName = parseTagName();
            tagName.namespace = { type: 'NoNamespace' };
            return tagName;
        }
        else if (isIdentStart(chr)) {
            const identifier = parseIdentifier();
            if (!is('|')) {
                assert(tagNameEnabled, 'Tag names are not enabled.');
                return {
                    type: 'TagName',
                    name: identifier
                };
            }
            const savedPos = pos;
            next();
            if (!isTagStart()) {
                rewind(savedPos);
                return {
                    type: 'TagName',
                    name: identifier
                };
            }
            assert(namespaceEnabled, 'Namespaces are not enabled.');
            const tagName = parseTagName();
            tagName.namespace = { type: 'NamespaceName', name: identifier };
            return tagName;
        }
        else {
            return fail('Expected tag name.');
        }
    }
    function parseRule(relative = false) {
        const rule = { type: 'Rule', items: [] };
        if (relative) {
            const combinator = matchMulticharIndex(combinatorsIndex);
            if (combinator) {
                rule.combinator = combinator;
                skipWhitespace();
            }
        }
        while (pos < l) {
            if (isTagStart()) {
                assert(rule.items.length === 0, 'Unexpected tag/namespace start.');
                rule.items.push(parseTagNameWithNamespace());
            }
            else if (is('|')) {
                const savedPos = pos;
                next();
                if (isTagStart()) {
                    assert(rule.items.length === 0, 'Unexpected tag/namespace start.');
                    rewind(savedPos);
                    rule.items.push(parseTagNameWithNamespace());
                }
                else {
                    rewind(savedPos);
                    break;
                }
            }
            else if (is('.')) {
                assert(classNamesEnabled, 'Class names are not enabled.');
                next();
                const className = parseIdentifier();
                assert(className, 'Expected class name.');
                rule.items.push({ type: 'ClassName', name: className });
            }
            else if (is('#')) {
                assert(idEnabled, 'IDs are not enabled.');
                next();
                const idName = parseIdentifier();
                assert(idName, 'Expected ID name.');
                rule.items.push({ type: 'Id', name: idName });
            }
            else if (is('[')) {
                assert(attributesEnabled, 'Attributes are not enabled.');
                rule.items.push(parseAttribute());
            }
            else if (is(':')) {
                let isDoubleColon = false;
                let isPseudoElement = false;
                next();
                if (is(':')) {
                    assert(pseudoElementsEnabled, 'Pseudo elements are not enabled.');
                    assert(pseudoElementsDoubleColonNotationEnabled, 'Pseudo elements double colon notation is not enabled.');
                    isDoubleColon = true;
                    next();
                }
                const pseudoName = parseIdentifier();
                assert(isDoubleColon || pseudoName, 'Expected pseudo-class name.');
                assert(!isDoubleColon || pseudoName, 'Expected pseudo-element name.');
                assert(!isDoubleColon ||
                    pseudoElementsAcceptUnknown ||
                    Object.prototype.hasOwnProperty.call(pseudoElementsDefinitions, pseudoName), `Unknown pseudo-element "${pseudoName}".`);
                isPseudoElement =
                    pseudoElementsEnabled &&
                        (isDoubleColon ||
                            (!isDoubleColon &&
                                pseudoElementsSingleColonNotationEnabled &&
                                Object.prototype.hasOwnProperty.call(pseudoElementsDefinitions, pseudoName)));
                if (isPseudoElement) {
                    const signature = pseudoElementsDefinitions[pseudoName] ??
                        (pseudoElementsAcceptUnknown && defaultPseudoSignature);
                    const pseudoElement = {
                        type: 'PseudoElement',
                        name: pseudoName
                    };
                    const argument = parsePseudoArgument(pseudoName, 'pseudo-element', signature);
                    if (argument) {
                        assert(argument.type !== 'Formula' && argument.type !== 'FormulaOfSelector', 'Pseudo-elements cannot have formula argument.');
                        pseudoElement.argument = argument;
                    }
                    rule.items.push(pseudoElement);
                }
                else {
                    assert(pseudoClassesEnabled, 'Pseudo-classes are not enabled.');
                    const signature = pseudoClassesDefinitions[pseudoName] ?? (pseudoClassesAcceptUnknown && defaultPseudoSignature);
                    assert(signature, `Unknown pseudo-class: "${pseudoName}".`);
                    const argument = parsePseudoArgument(pseudoName, 'pseudo-class', signature);
                    const pseudoClass = {
                        type: 'PseudoClass',
                        name: pseudoName
                    };
                    if (argument) {
                        pseudoClass.argument = argument;
                    }
                    rule.items.push(pseudoClass);
                }
            }
            else {
                break;
            }
        }
        if (rule.items.length === 0) {
            if (isEof()) {
                return fail('Expected rule but end of input reached.');
            }
            else {
                return fail(`Expected rule but "${chr}" found.`);
            }
        }
        skipWhitespace();
        if (!isEof() && !is(',') && !is(')')) {
            const combinator = matchMulticharIndex(combinatorsIndex);
            skipWhitespace();
            rule.nestedRule = parseRule();
            rule.nestedRule.combinator = combinator;
        }
        return rule;
    }
    return (input) => {
        // noinspection SuspiciousTypeOfGuard
        if (typeof input !== 'string') {
            throw new Error(`${errorPrefix}Expected string input.`);
        }
        str = input;
        l = str.length;
        pos = 0;
        chr = str.charAt(0);
        return parseSelector();
    };
}

/**
 * @typedef {import('css-selector-parser').AstSelector} AstSelector
 */


const cssSelectorParse = createParser({syntax: 'selectors-4'});

/**
 * @param {string} selector
 *   Selector to parse.
 * @returns {AstSelector}
 *   Parsed selector.
 */
function parse$4(selector) {
  if (typeof selector !== 'string') {
    throw new TypeError('Expected `string` as selector, not `' + selector + '`')
  }

  return cssSelectorParse(selector)
}

const rtlRange = '\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC';
const ltrRange =
  'A-Za-z\u00C0-\u00D6\u00D8-\u00F6' +
  '\u00F8-\u02B8\u0300-\u0590\u0800-\u1FFF\u200E\u2C00-\uFB1C' +
  '\uFE00-\uFE6F\uFEFD-\uFFFF';

/* eslint-disable no-misleading-character-class */
const rtl = new RegExp('^[^' + ltrRange + ']*[' + rtlRange + ']');
const ltr = new RegExp('^[^' + rtlRange + ']*[' + ltrRange + ']');
/* eslint-enable no-misleading-character-class */

/**
 * Detect the direction of text: left-to-right, right-to-left, or neutral
 *
 * @param {string} value
 * @returns {'rtl'|'ltr'|'neutral'}
 */
function direction(value) {
  const source = String(value || '');
  return rtl.test(source) ? 'rtl' : ltr.test(source) ? 'ltr' : 'neutral'
}

/**
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Nodes} Nodes
 *
 * @typedef {import('unist-util-visit').Visitor<ElementContent>} Visitor
 *
 * @typedef {import('./index.js').Direction} Direction
 * @typedef {import('./index.js').State} State
 */


/**
 * Enter a node.
 *
 * The caller is responsible for calling the return value `exit`.
 *
 * @param {State} state
 *   Current state.
 *
 *   Will be mutated: `exit` undos the changes.
 * @param {Nodes} node
 *   Node to enter.
 * @returns {() => undefined}
 *   Call to exit.
 */
// eslint-disable-next-line complexity
function enterState(state, node) {
  const schema = state.schema;
  const language = state.language;
  const currentDirection = state.direction;
  const editableOrEditingHost = state.editableOrEditingHost;
  /** @type {Direction | undefined} */
  let dirInferred;

  if (node.type === 'element') {
    const lang = node.properties.xmlLang || node.properties.lang;
    const type = node.properties.type || 'text';
    const dir = dirProperty(node);

    if (lang !== null && lang !== undefined) {
      state.language = String(lang);
    }

    if (schema && schema.space === 'html') {
      if (node.properties.contentEditable === 'true') {
        state.editableOrEditingHost = true;
      }

      if (node.tagName === 'svg') {
        state.schema = svg;
      }

      // See: <https://html.spec.whatwg.org/#the-directionality>.
      // Explicit `[dir=rtl]`.
      if (dir === 'rtl') {
        dirInferred = dir;
      } else if (
        // Explicit `[dir=ltr]`.
        dir === 'ltr' ||
        // HTML with an invalid or no `[dir]`.
        (dir !== 'auto' && node.tagName === 'html') ||
        // `input[type=tel]` with an invalid or no `[dir]`.
        (dir !== 'auto' && node.tagName === 'input' && type === 'tel')
      ) {
        dirInferred = 'ltr';
        // `[dir=auto]` or `bdi` with an invalid or no `[dir]`.
      } else if (dir === 'auto' || node.tagName === 'bdi') {
        if (node.tagName === 'textarea') {
          // Check contents of `<textarea>`.
          dirInferred = dirBidi(toString(node));
        } else if (
          node.tagName === 'input' &&
          (type === 'email' ||
            type === 'search' ||
            type === 'tel' ||
            type === 'text')
        ) {
          // Check value of `<input>`.
          dirInferred = node.properties.value
            ? dirBidi(String(node.properties.value))
            : 'ltr';
        } else {
          // Check text nodes in `node`.
          visit(node, inferDirectionality);
        }
      }

      if (dirInferred) {
        state.direction = dirInferred;
      }
    }
    // Turn off editing mode in non-HTML spaces.
    else if (state.editableOrEditingHost) {
      state.editableOrEditingHost = false;
    }
  }

  return reset

  /**
   * @returns {undefined}
   *   Nothing.
   */
  function reset() {
    state.schema = schema;
    state.language = language;
    state.direction = currentDirection;
    state.editableOrEditingHost = editableOrEditingHost;
  }

  /** @type {Visitor} */
  function inferDirectionality(child) {
    if (child.type === 'text') {
      dirInferred = dirBidi(child.value);
      return dirInferred ? EXIT : undefined
    }

    if (
      child !== node &&
      child.type === 'element' &&
      (child.tagName === 'bdi' ||
        child.tagName === 'script' ||
        child.tagName === 'style' ||
        child.tagName === 'textare' ||
        dirProperty(child))
    ) {
      return SKIP
    }
  }
}

/**
 * See `wooorm/direction`.
 *
 * @param {string} value
 *   Value to check.
 * @returns {Exclude<Direction, 'auto'> | undefined}
 *   Directionality.
 */
function dirBidi(value) {
  const result = direction(value);
  return result === 'neutral' ? undefined : result
}

/**
 * @param {ElementContent} node
 *   Node to check.
 * @returns {Direction | undefined}
 *   Directionality.
 */
function dirProperty(node) {
  const value =
    node.type === 'element' && typeof node.properties.dir === 'string'
      ? node.properties.dir.toLowerCase()
      : undefined;

  return value === 'auto' || value === 'ltr' || value === 'rtl'
    ? value
    : undefined
}

/**
 * @typedef Options
 *   Configuration for `stringify`.
 * @property {boolean} [padLeft=true]
 *   Whether to pad a space before a token.
 * @property {boolean} [padRight=false]
 *   Whether to pad a space after a token.
 */

/**
 * @typedef {Options} StringifyOptions
 *   Please use `StringifyOptions` instead.
 */

/**
 * Parse comma-separated tokens to an array.
 *
 * @param {string} value
 *   Comma-separated tokens.
 * @returns {Array<string>}
 *   List of tokens.
 */
function parse$3(value) {
  /** @type {Array<string>} */
  const tokens = [];
  const input = String(value || '');
  let index = input.indexOf(',');
  let start = 0;
  /** @type {boolean} */
  let end = false;

  while (!end) {
    if (index === -1) {
      index = input.length;
      end = true;
    }

    const token = input.slice(start, index).trim();

    if (token || !end) {
      tokens.push(token);
    }

    start = index + 1;
    index = input.indexOf(',', start);
  }

  return tokens
}

/**
 * Serialize an array of strings or numbers to comma-separated tokens.
 *
 * @param {Array<string|number>} values
 *   List of tokens.
 * @param {Options} [options]
 *   Configuration for `stringify` (optional).
 * @returns {string}
 *   Comma-separated tokens.
 */
function stringify$2(values, options) {
  const settings = options || {};

  // Ensure the last empty entry is seen.
  const input = values[values.length - 1] === '' ? [...values, ''] : values;

  return input
    .join(
      (settings.padRight ? ' ' : '') +
        ',' +
        (settings.padLeft === false ? '' : ' ')
    )
    .trim()
}

function ok$1() {}

/**
 * Parse space-separated tokens to an array of strings.
 *
 * @param {string} value
 *   Space-separated tokens.
 * @returns {Array<string>}
 *   List of tokens.
 */
function parse$2(value) {
  const input = String(value || '').trim();
  return input ? input.split(/[ \t\n\r\f]+/g) : []
}

/**
 * Serialize an array of strings as space separated-tokens.
 *
 * @param {Array<string|number>} values
 *   List of tokens.
 * @returns {string}
 *   Space-separated tokens.
 */
function stringify$1(values) {
  return values.join(' ').trim()
}

/**
 * @typedef {import('css-selector-parser').AstAttribute} AstAttribute
 *
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 *
 * @typedef {import('property-information').Info} Info
 * @typedef {import('property-information').Schema} Schema
 */


/**
 * @param {AstAttribute} query
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {Schema} schema
 *   Schema of element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function attribute(query, element, schema) {
  const info = find(schema, query.name);
  const propertyValue = element.properties[info.property];
  let value = normalizeValue(propertyValue, info);

  // Exists.
  if (!query.value) {
    return value !== undefined
  }

  ok$1(query.value.type === 'String');
  let key = query.value.value;

  // Case-sensitivity.
  if (query.caseSensitivityModifier === 'i') {
    key = key.toLowerCase();

    if (value) {
      value = value.toLowerCase();
    }
  }

  if (value !== undefined) {
    switch (query.operator) {
      // Exact.
      case '=': {
        return key === value
      }

      // Ends.
      case '$=': {
        return key === value.slice(-key.length)
      }

      // Contains.
      case '*=': {
        return value.includes(key)
      }

      // Begins.
      case '^=': {
        return key === value.slice(0, key.length)
      }

      // Exact or prefix.
      case '|=': {
        return (
          key === value ||
          (key === value.slice(0, key.length) &&
            value.charAt(key.length) === '-')
        )
      }

      // Space-separated list.
      case '~=': {
        return (
          // For all other values (including comma-separated lists), return whether this
          // is an exact match.
          key === value ||
          // If this is a space-separated list, and the query is contained in it, return
          // true.
          parse$2(value).includes(key)
        )
      }
      // Other values are not yet supported by CSS.
      // No default
    }
  }

  return false
}

/**
 *
 * @param {Properties[keyof Properties]} value
 * @param {Info} info
 * @returns {string | undefined}
 */
function normalizeValue(value, info) {
  if (value === null || value === undefined) ; else if (typeof value === 'boolean') {
    if (value) {
      return info.attribute
    }
  } else if (Array.isArray(value)) {
    if (value.length > 0) {
      return (info.commaSeparated ? stringify$2 : stringify$1)(value)
    }
  } else {
    return String(value)
  }
}

/**
 * @typedef {import('css-selector-parser').AstClassName} AstClassName
 * @typedef {import('hast').Element} Element
 */

/** @type {Array<never>} */
const emptyClassNames = [];

/**
 * Check whether an element has all class names.
 *
 * @param {AstClassName} query
 *   AST rule (with `classNames`).
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function className(query, element) {
  // Assume array.
  const value = /** @type {Readonly<Array<string>>} */ (
    element.properties.className || emptyClassNames
  );

  return value.includes(query.name)
}

/**
 * @typedef {import('css-selector-parser').AstId} AstId
 *
 * @typedef {import('hast').Element} Element
 */


/**
 * Check whether an element has an ID.
 *
 * @param {AstId} query
 *   AST rule (with `ids`).
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function id(query, element) {
  return element.properties.id === query.name
}

/**
 * @typedef {import('css-selector-parser').AstTagName} AstTagName
 *
 * @typedef {import('hast').Element} Element
 */


/**
 * Check whether an element has a tag name.
 *
 * @param {AstTagName} query
 *   AST rule (with `tag`).
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function name(query, element) {
  return query.name === element.tagName
}

/**
 * See <https://tools.ietf.org/html/rfc4647#section-3.1>
 * for more info on the algorithms.
 */

/**
 * @typedef {string} Tag
 *   BCP-47 tag.
 * @typedef {Array<Tag>} Tags
 *   List of BCP-47 tags.
 * @typedef {string} Range
 *   RFC 4647 range.
 * @typedef {Array<Range>} Ranges
 *   List of RFC 4647 range.
 *
 * @callback Check
 *   An internal check.
 * @param {Tag} tag
 *   BCP-47 tag.
 * @param {Range} range
 *   RFC 4647 range.
 * @returns {boolean}
 *   Whether the range matches the tag.
 *
 * @typedef {FilterOrLookup<true>} Filter
 *   Filter: yields all tags that match a range.
 * @typedef {FilterOrLookup<false>} Lookup
 *   Lookup: yields the best tag that matches a range.
 */

/**
 * @template {boolean} IsFilter
 *   Whether to filter or perform a lookup.
 * @callback FilterOrLookup
 *   A check.
 * @param {Tag|Tags} tags
 *   One or more BCP-47 tags.
 * @param {Range|Ranges|undefined} [ranges='*']
 *   One or more RFC 4647 ranges.
 * @returns {IsFilter extends true ? Tags : Tag|undefined}
 *   Result.
 */

/**
 * Factory to perform a filter or a lookup.
 *
 * This factory creates a function that accepts a list of tags and a list of
 * ranges, and contains logic to exit early for lookups.
 * `check` just has to deal with one tag and one range.
 * This match function iterates over ranges, and for each range,
 * iterates over tags.
 * That way, earlier ranges matching any tag have precedence over later ranges.
 *
 * @template {boolean} IsFilter
 * @param {Check} check
 *   A check.
 * @param {IsFilter} filter
 *   Whether to filter or perform a lookup.
 * @returns {FilterOrLookup<IsFilter>}
 *   Filter or lookup.
 */
function factory(check, filter) {
  /**
   * @param {Tag|Tags} tags
   *   One or more BCP-47 tags.
   * @param {Range|Ranges|undefined} [ranges='*']
   *   One or more RFC 4647 ranges.
   * @returns {IsFilter extends true ? Tags : Tag|undefined}
   *   Result.
   */
  return function (tags, ranges) {
    let left = cast(tags, 'tag');
    const right = cast(
      ranges === null || ranges === undefined ? '*' : ranges,
      'range'
    );
    /** @type {Tags} */
    const matches = [];
    let rightIndex = -1;

    while (++rightIndex < right.length) {
      const range = right[rightIndex].toLowerCase();

      // Ignore wildcards in lookup mode.
      if (!filter && range === '*') continue

      let leftIndex = -1;
      /** @type {Tags} */
      const next = [];

      while (++leftIndex < left.length) {
        if (check(left[leftIndex].toLowerCase(), range)) {
          // Exit if this is a lookup and we have a match.
          if (!filter) {
            return /** @type {IsFilter extends true ? Tags : Tag|undefined} */ (
              left[leftIndex]
            )
          }

          matches.push(left[leftIndex]);
        } else {
          next.push(left[leftIndex]);
        }
      }

      left = next;
    }

    // If this is a filter, return the list.  If it’s a lookup, we didn’t find
    // a match, so return `undefined`.
    return /** @type {IsFilter extends true ? Tags : Tag|undefined} */ (
      filter ? matches : undefined
    )
  }
}

/**
 * Extended Filtering (Section 3.3.2) matches a language priority list
 * consisting of extended language ranges (Section 2.2) to sets of language
 * tags.
 *
 * @param {Tag|Tags} tags
 *   One or more BCP-47 tags.
 * @param {Range|Ranges|undefined} [ranges='*']
 *   One or more RFC 4647 ranges.
 * @returns {Tags}
 *   List of BCP-47 tags.
 */
const extendedFilter = factory(function (tag, range) {
  // 3.3.2.1
  const left = tag.split('-');
  const right = range.split('-');
  let leftIndex = 0;
  let rightIndex = 0;

  // 3.3.2.2
  if (right[rightIndex] !== '*' && left[leftIndex] !== right[rightIndex]) {
    return false
  }

  leftIndex++;
  rightIndex++;

  // 3.3.2.3
  while (rightIndex < right.length) {
    // 3.3.2.3.A
    if (right[rightIndex] === '*') {
      rightIndex++;
      continue
    }

    // 3.3.2.3.B
    if (!left[leftIndex]) return false

    // 3.3.2.3.C
    if (left[leftIndex] === right[rightIndex]) {
      leftIndex++;
      rightIndex++;
      continue
    }

    // 3.3.2.3.D
    if (left[leftIndex].length === 1) return false

    // 3.3.2.3.E
    leftIndex++;
  }

  // 3.3.2.4
  return true
}, true);

/**
 * Validate tags or ranges, and cast them to arrays.
 *
 * @param {string|Array<string>} values
 * @param {string} name
 * @returns {Array<string>}
 */
function cast(values, name) {
  const value = values && typeof values === 'string' ? [values] : values;

  if (!value || typeof value !== 'object' || !('length' in value)) {
    throw new Error(
      'Invalid ' + name + ' `' + value + '`, expected non-empty string'
    )
  }

  return value
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Nodes} Nodes
 */

const own$3 = {}.hasOwnProperty;

/**
 * Check if `node` is an element and has a `name` property.
 *
 * @template {string} Key
 *   Type of key.
 * @param {Nodes} node
 *   Node to check (typically `Element`).
 * @param {Key} name
 *   Property name to check.
 * @returns {node is Element & {properties: Record<Key, Array<number | string> | number | string | true>}}}
 *   Whether `node` is an element that has a `name` property.
 *
 *   Note: see <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/27c9274/types/hast/index.d.ts#L37C29-L37C98>.
 */
function hasProperty(node, name) {
  const value =
    node.type === 'element' &&
    own$3.call(node.properties, name) &&
    node.properties[name];

  return value !== null && value !== undefined && value !== false
}

/**
 * @typedef {import('hast').Nodes} Nodes
 */

// HTML whitespace expression.
// See <https://infra.spec.whatwg.org/#ascii-whitespace>.
const re$1 = /[ \t\n\f\r]/g;

/**
 * Check if the given value is *inter-element whitespace*.
 *
 * @param {Nodes | string} thing
 *   Thing to check (`Node` or `string`).
 * @returns {boolean}
 *   Whether the `value` is inter-element whitespace (`boolean`): consisting of
 *   zero or more of space, tab (`\t`), line feed (`\n`), carriage return
 *   (`\r`), or form feed (`\f`); if a node is passed it must be a `Text` node,
 *   whose `value` field is checked.
 */
function whitespace$1(thing) {
  return typeof thing === 'object'
    ? thing.type === 'text'
      ? empty$3(thing.value)
      : false
    : empty$3(thing)
}

/**
 * @param {string} value
 * @returns {boolean}
 */
function empty$3(value) {
  return value.replace(re$1, '') === ''
}

// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo
// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is " \t\r\n\f"
const whitespace = new Set([9, 10, 12, 13, 32]);
const ZERO = "0".charCodeAt(0);
const NINE = "9".charCodeAt(0);
/**
 * Parses an expression.
 *
 * @throws An `Error` if parsing fails.
 * @returns An array containing the integer step size and the integer offset of the nth rule.
 * @example nthCheck.parse("2n+3"); // returns [2, 3]
 */
function parse$1(formula) {
    formula = formula.trim().toLowerCase();
    if (formula === "even") {
        return [2, 0];
    }
    else if (formula === "odd") {
        return [2, 1];
    }
    // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
    let idx = 0;
    let a = 0;
    let sign = readSign();
    let number = readNumber();
    if (idx < formula.length && formula.charAt(idx) === "n") {
        idx++;
        a = sign * (number !== null && number !== void 0 ? number : 1);
        skipWhitespace();
        if (idx < formula.length) {
            sign = readSign();
            skipWhitespace();
            number = readNumber();
        }
        else {
            sign = number = 0;
        }
    }
    // Throw if there is anything else
    if (number === null || idx < formula.length) {
        throw new Error(`n-th rule couldn't be parsed ('${formula}')`);
    }
    return [a, sign * number];
    function readSign() {
        if (formula.charAt(idx) === "-") {
            idx++;
            return -1;
        }
        if (formula.charAt(idx) === "+") {
            idx++;
        }
        return 1;
    }
    function readNumber() {
        const start = idx;
        let value = 0;
        while (idx < formula.length &&
            formula.charCodeAt(idx) >= ZERO &&
            formula.charCodeAt(idx) <= NINE) {
            value = value * 10 + (formula.charCodeAt(idx) - ZERO);
            idx++;
        }
        // Return `null` if we didn't read anything.
        return idx === start ? null : value;
    }
    function skipWhitespace() {
        while (idx < formula.length &&
            whitespace.has(formula.charCodeAt(idx))) {
            idx++;
        }
    }
}

var boolbase = {
	trueFunc: function trueFunc(){
		return true;
	},
	falseFunc: function falseFunc(){
		return false;
	}
};

const boolbase$1 = /*@__PURE__*/getDefaultExportFromCjs(boolbase);

/**
 * Returns a function that checks if an elements index matches the given rule
 * highly optimized to return the fastest solution.
 *
 * @param parsed A tuple [a, b], as returned by `parse`.
 * @returns A highly optimized function that returns whether an index matches the nth-check.
 * @example
 *
 * ```js
 * const check = nthCheck.compile([2, 3]);
 *
 * check(0); // `false`
 * check(1); // `false`
 * check(2); // `true`
 * check(3); // `false`
 * check(4); // `true`
 * check(5); // `false`
 * check(6); // `true`
 * ```
 */
function compile(parsed) {
    const a = parsed[0];
    // Subtract 1 from `b`, to convert from one- to zero-indexed.
    const b = parsed[1] - 1;
    /*
     * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.
     * Besides, the specification states that no elements are
     * matched when `a` and `b` are 0.
     *
     * `b < 0` here as we subtracted 1 from `b` above.
     */
    if (b < 0 && a <= 0)
        return boolbase$1.falseFunc;
    // When `a` is in the range -1..1, it matches any element (so only `b` is checked).
    if (a === -1)
        return (index) => index <= b;
    if (a === 0)
        return (index) => index === b;
    // When `b <= 0` and `a === 1`, they match any element.
    if (a === 1)
        return b < 0 ? boolbase$1.trueFunc : (index) => index >= b;
    /*
     * Otherwise, modulo can be used to check if there is a match.
     *
     * Modulo doesn't care about the sign, so let's use `a`s absolute value.
     */
    const absA = Math.abs(a);
    // Get `b mod a`, + a if this is negative.
    const bMod = ((b % absA) + absA) % absA;
    return a > 1
        ? (index) => index >= b && index % absA === bMod
        : (index) => index <= b && index % absA === bMod;
}

/**
 * Parses and compiles a formula to a highly optimized function.
 * Combination of {@link parse} and {@link compile}.
 *
 * If the formula doesn't match any elements,
 * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.
 * Otherwise, a function accepting an _index_ is returned, which returns
 * whether or not the passed _index_ matches the formula.
 *
 * Note: The nth-rule starts counting at `1`, the returned function at `0`.
 *
 * @param formula The formula to compile.
 * @example
 * const check = nthCheck("2n+3");
 *
 * check(0); // `false`
 * check(1); // `false`
 * check(2); // `true`
 * check(3); // `false`
 * check(4); // `true`
 * check(5); // `false`
 * check(6); // `true`
 */
function nthCheck$1(formula) {
    return compile(parse$1(formula));
}

/**
 * @callback Handler
 *   Handle a value, with a certain ID field set to a certain value.
 *   The ID field is passed to `zwitch`, and it’s value is this function’s
 *   place on the `handlers` record.
 * @param {...any} parameters
 *   Arbitrary parameters passed to the zwitch.
 *   The first will be an object with a certain ID field set to a certain value.
 * @returns {any}
 *   Anything!
 */

/**
 * @callback UnknownHandler
 *   Handle values that do have a certain ID field, but it’s set to a value
 *   that is not listed in the `handlers` record.
 * @param {unknown} value
 *   An object with a certain ID field set to an unknown value.
 * @param {...any} rest
 *   Arbitrary parameters passed to the zwitch.
 * @returns {any}
 *   Anything!
 */

/**
 * @callback InvalidHandler
 *   Handle values that do not have a certain ID field.
 * @param {unknown} value
 *   Any unknown value.
 * @param {...any} rest
 *   Arbitrary parameters passed to the zwitch.
 * @returns {void|null|undefined|never}
 *   This should crash or return nothing.
 */

/**
 * @template {InvalidHandler} [Invalid=InvalidHandler]
 * @template {UnknownHandler} [Unknown=UnknownHandler]
 * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]
 * @typedef Options
 *   Configuration (required).
 * @property {Invalid} [invalid]
 *   Handler to use for invalid values.
 * @property {Unknown} [unknown]
 *   Handler to use for unknown values.
 * @property {Handlers} [handlers]
 *   Handlers to use.
 */

const own$2 = {}.hasOwnProperty;

/**
 * Handle values based on a field.
 *
 * @template {InvalidHandler} [Invalid=InvalidHandler]
 * @template {UnknownHandler} [Unknown=UnknownHandler]
 * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]
 * @param {string} key
 *   Field to switch on.
 * @param {Options<Invalid, Unknown, Handlers>} [options]
 *   Configuration (required).
 * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}
 */
function zwitch(key, options) {
  const settings = options || {};

  /**
   * Handle one value.
   *
   * Based on the bound `key`, a respective handler will be called.
   * If `value` is not an object, or doesn’t have a `key` property, the special
   * “invalid” handler will be called.
   * If `value` has an unknown `key`, the special “unknown” handler will be
   * called.
   *
   * All arguments, and the context object, are passed through to the handler,
   * and it’s result is returned.
   *
   * @this {unknown}
   *   Any context object.
   * @param {unknown} [value]
   *   Any value.
   * @param {...unknown} parameters
   *   Arbitrary parameters passed to the zwitch.
   * @property {Handler} invalid
   *   Handle for values that do not have a certain ID field.
   * @property {Handler} unknown
   *   Handle values that do have a certain ID field, but it’s set to a value
   *   that is not listed in the `handlers` record.
   * @property {Handlers} handlers
   *   Record of handlers.
   * @returns {unknown}
   *   Anything.
   */
  function one(value, ...parameters) {
    /** @type {Handler|undefined} */
    let fn = one.invalid;
    const handlers = one.handlers;

    if (value && own$2.call(value, key)) {
      // @ts-expect-error Indexable.
      const id = String(value[key]);
      // @ts-expect-error Indexable.
      fn = own$2.call(handlers, id) ? handlers[id] : one.unknown;
    }

    if (fn) {
      return fn.call(this, value, ...parameters)
    }
  }

  one.handlers = settings.handlers || {};
  one.invalid = settings.invalid;
  one.unknown = settings.unknown;

  // @ts-expect-error: matches!
  return one
}

/**
 * @typedef {import('css-selector-parser').AstPseudoClass} AstPseudoClass
 *
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Parents} Parents
 *
 * @typedef {import('./index.js').State} State
 */


/** @type {import('nth-check').default} */
// @ts-expect-error: types are broken.
const nthCheck = nthCheck$1.default || nthCheck$1;

/** @type {(rule: AstPseudoClass, element: Element, index: number | undefined, parent: Parents | undefined, state: State) => boolean} */
const pseudo = zwitch('name', {
  handlers: {
    'any-link': anyLink,
    blank,
    checked,
    dir,
    disabled,
    empty: empty$2,
    enabled,
    'first-child': firstChild,
    'first-of-type': firstOfType,
    has,
    is,
    lang,
    'last-child': lastChild,
    'last-of-type': lastOfType,
    not,
    'nth-child': nthChild,
    'nth-last-child': nthLastChild,
    'nth-last-of-type': nthLastOfType,
    'nth-of-type': nthOfType,
    'only-child': onlyChild,
    'only-of-type': onlyOfType,
    optional,
    'read-only': readOnly,
    'read-write': readWrite,
    required,
    root,
    scope
  },
  invalid: invalidPseudo,
  unknown: unknownPseudo
});

/**
 * Check whether an element matches an `:any-link` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function anyLink(_, element) {
  return (
    (element.tagName === 'a' ||
      element.tagName === 'area' ||
      element.tagName === 'link') &&
    hasProperty(element, 'href')
  )
}

/**
 * @param {State} state
 *   State.
 * @param {AstPseudoClass} query
 *   Query.
 */
function assertDeep(state, query) {
  if (state.shallow) {
    throw new Error('Cannot use `:' + query.name + '` without parent')
  }
}

/**
 * Check whether an element matches a `:blank` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function blank(_, element) {
  return !someChildren(element, check)

  /**
   * @param {ElementContent} child
   * @returns {boolean}
   */
  function check(child) {
    return (
      child.type === 'element' || (child.type === 'text' && !whitespace$1(child))
    )
  }
}

/**
 * Check whether an element matches a `:checked` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function checked(_, element) {
  if (element.tagName === 'input' || element.tagName === 'menuitem') {
    return Boolean(
      (element.properties.type === 'checkbox' ||
        element.properties.type === 'radio') &&
        hasProperty(element, 'checked')
    )
  }

  if (element.tagName === 'option') {
    return hasProperty(element, 'selected')
  }

  return false
}

/**
 * Check whether an element matches a `:dir()` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function dir(query, _1, _2, _3, state) {
  ok$1(query.argument);
  ok$1(query.argument.type === 'String');
  return state.direction === query.argument.value
}

/**
 * Check whether an element matches a `:disabled` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function disabled(_, element) {
  return (
    (element.tagName === 'button' ||
      element.tagName === 'input' ||
      element.tagName === 'select' ||
      element.tagName === 'textarea' ||
      element.tagName === 'optgroup' ||
      element.tagName === 'option' ||
      element.tagName === 'menuitem' ||
      element.tagName === 'fieldset') &&
    hasProperty(element, 'disabled')
  )
}

/**
 * Check whether an element matches an `:empty` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function empty$2(_, element) {
  return !someChildren(element, check)

  /**
   * @param {ElementContent} child
   * @returns {boolean}
   */
  function check(child) {
    return child.type === 'element' || child.type === 'text'
  }
}

/**
 * Check whether an element matches an `:enabled` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function enabled(query, element) {
  return !disabled(query, element)
}

/**
 * Check whether an element matches a `:first-child` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function firstChild(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return state.elementIndex === 0
}

/**
 * Check whether an element matches a `:first-of-type` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function firstOfType(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return state.typeIndex === 0
}

/**
 * @param {AstPseudoClass} query
 *   Query.
 * @returns {(value: number) => boolean}
 *   N.
 */
function getCachedNthCheck(query) {
  /** @type {(value: number) => boolean} */
  // @ts-expect-error: cache.
  let fn = query._cachedFn;

  if (!fn) {
    const value = query.argument;

    if (value.type !== 'Formula') {
      throw new Error(
        'Expected `nth` formula, such as `even` or `2n+1` (`of` is not yet supported)'
      )
    }

    fn = nthCheck(value.a + 'n+' + value.b);
    // @ts-expect-error: cache.
    query._cachedFn = fn;
  }

  return fn
}

/**
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} _1
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _2
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function has(query, element, _1, _2, state) {
  ok$1(query.argument);
  ok$1(query.argument.type === 'Selector');

  /** @type {State} */
  const childState = {
    ...state,
    // Not found yet.
    found: false,
    // One result is enough.
    one: true,
    results: [],
    rootQuery: query.argument,
    scopeElements: [element],
    // Do walk deep.
    shallow: false
  };

  walk(childState, {type: 'root', children: element.children});

  return childState.results.length > 0
}

// Shouldn’t be called, parser gives correct data.
/* c8 ignore next 3 */
function invalidPseudo() {
}

/**
 * Check whether an element `:is` further selectors.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} _1
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _2
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function is(query, element, _1, _2, state) {
  ok$1(query.argument);
  ok$1(query.argument.type === 'Selector');

  /** @type {State} */
  const childState = {
    ...state,
    // Not found yet.
    found: false,
    // One result is enough.
    one: true,
    results: [],
    rootQuery: query.argument,
    scopeElements: [element],
    // Do walk deep.
    shallow: false
  };

  walk(childState, element);

  return childState.results[0] === element
}

/**
 * Check whether an element matches a `:lang()` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function lang(query, _1, _2, _3, state) {
  ok$1(query.argument);
  ok$1(query.argument.type === 'String');

  return (
    state.language !== '' &&
    state.language !== undefined &&
    extendedFilter(state.language, parse$3(query.argument.value)).length > 0
  )
}

/**
 * Check whether an element matches a `:last-child` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function lastChild(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return Boolean(
    state.elementCount && state.elementIndex === state.elementCount - 1
  )
}

/**
 * Check whether an element matches a `:last-of-type` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function lastOfType(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return (
    typeof state.typeIndex === 'number' &&
    typeof state.typeCount === 'number' &&
    state.typeIndex === state.typeCount - 1
  )
}

/**
 * Check whether an element does `:not` match further selectors.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} index
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} parent
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function not(query, element, index, parent, state) {
  return !is(query, element, index, parent, state)
}

/**
 * Check whether an element matches an `:nth-child` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function nthChild(query, _1, _2, _3, state) {
  const fn = getCachedNthCheck(query);
  assertDeep(state, query);
  return typeof state.elementIndex === 'number' && fn(state.elementIndex)
}

/**
 * Check whether an element matches an `:nth-last-child` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function nthLastChild(query, _1, _2, _3, state) {
  const fn = getCachedNthCheck(query);
  assertDeep(state, query);
  return Boolean(
    typeof state.elementCount === 'number' &&
      typeof state.elementIndex === 'number' &&
      fn(state.elementCount - state.elementIndex - 1)
  )
}

/**
 * Check whether an element matches a `:nth-last-of-type` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function nthLastOfType(query, _1, _2, _3, state) {
  const fn = getCachedNthCheck(query);
  assertDeep(state, query);
  return (
    typeof state.typeCount === 'number' &&
    typeof state.typeIndex === 'number' &&
    fn(state.typeCount - 1 - state.typeIndex)
  )
}

/**
 * Check whether an element matches an `:nth-of-type` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function nthOfType(query, _1, _2, _3, state) {
  const fn = getCachedNthCheck(query);
  assertDeep(state, query);
  return typeof state.typeIndex === 'number' && fn(state.typeIndex)
}

/**
 * Check whether an element matches an `:only-child` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function onlyChild(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return state.elementCount === 1
}

/**
 * Check whether an element matches an `:only-of-type` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function onlyOfType(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return state.typeCount === 1
}

/**
 * Check whether an element matches an `:optional` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function optional(query, element) {
  return !required(query, element)
}

/**
 * Check whether an element matches a `:read-only` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} index
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} parent
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function readOnly(query, element, index, parent, state) {
  return !readWrite(query, element, index, parent, state)
}

/**
 * Check whether an element matches a `:read-write` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} _1
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _2
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function readWrite(_, element, _1, _2, state) {
  return element.tagName === 'input' || element.tagName === 'textarea'
    ? !hasProperty(element, 'readOnly') && !hasProperty(element, 'disabled')
    : Boolean(state.editableOrEditingHost)
}

/**
 * Check whether an element matches a `:required` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function required(_, element) {
  return (
    (element.tagName === 'input' ||
      element.tagName === 'textarea' ||
      element.tagName === 'select') &&
    hasProperty(element, 'required')
  )
}

/**
 * Check whether an element matches a `:root` pseudo.
 *
 * @param {AstPseudoClass} _1
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} parent
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function root(_1, element, _2, parent, state) {
  return Boolean(
    (!parent || parent.type === 'root') &&
      state.schema &&
      (state.schema.space === 'html' || state.schema.space === 'svg') &&
      (element.tagName === 'html' || element.tagName === 'svg')
  )
}

/**
 * Check whether an element matches a `:scope` pseudo.
 *
 * @param {AstPseudoClass} _1
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function scope(_1, element, _2, _3, state) {
  return state.scopeElements.includes(element)
}

/**
 * Check children.
 *
 * @param {Element} element
 *   Element.
 * @param {(child: ElementContent) => boolean} check
 *   Check.
 * @returns {boolean}
 *   Whether a child of `element` matches `check`.
 */
function someChildren(element, check) {
  const children = element.children;
  let index = -1;

  while (++index < children.length) {
    if (check(children[index])) return true
  }

  return false
}

/**
 * @param {unknown} query_
 *   Query-like value.
 * @returns {never}
 *   Nothing.
 * @throws
 *   Exception.
 */
function unknownPseudo(query_) {
  // Runtime JS guarantees it has a `name`.
  const query = /** @type {AstPseudoClass} */ (query_);
  throw new Error('Unknown pseudo-selector `' + query.name + '`')
}

/**
 * @typedef {import('css-selector-parser').AstRule} AstRule
 *
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Parents} Parents
 *
 * @typedef {import('./index.js').State} State
 */


/**
 * Test a rule.
 *
 * @param {AstRule} query
 *   AST rule (with `pseudoClasses`).
 * @param {Element} element
 *   Element.
 * @param {number | undefined} index
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} parent
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */
function test(query, element, index, parent, state) {
  for (const item of query.items) {
    // eslint-disable-next-line unicorn/prefer-switch
    if (item.type === 'Attribute') {
      if (!attribute(item, element, state.schema)) return false
    } else if (item.type === 'Id') {
      if (!id(item, element)) return false
    } else if (item.type === 'ClassName') {
      if (!className(item, element)) return false
    } else if (item.type === 'PseudoClass') {
      if (!pseudo(item, element, index, parent, state)) return false
    } else if (item.type === 'PseudoElement') {
      throw new Error('Invalid selector: `::' + item.name + '`')
    } else if (item.type === 'TagName') {
      if (!name(item, element)) return false
    } else ;
  }

  return true
}

/**
 * @typedef {import('css-selector-parser').AstRule} AstRule
 *
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Nodes} Nodes
 * @typedef {import('hast').Parents} Parents
 *
 * @typedef {import('./index.js').State} State
 */


/** @type {Array<never>} */
const empty$1 = [];

/**
 * Walk a tree.
 *
 * @param {State} state
 *   State.
 * @param {Nodes | undefined} tree
 *   Tree.
 */
function walk(state, tree) {
  if (tree) {
    one$1(state, [], tree, undefined, undefined, tree);
  }
}

/**
 * Add a rule to a nesting map.
 *
 * @param {Nest} nest
 *   Nesting.
 * @param {keyof Nest} field
 *   Field.
 * @param {AstRule} rule
 *   Rule.
 */
function add$1(nest, field, rule) {
  const list = nest[field];
  if (list) {
    list.push(rule);
  } else {
    nest[field] = [rule];
  }
}

/**
 * Check in a parent.
 *
 * @param {State} state
 *   State.
 * @param {Nest} nest
 *   Nesting.
 * @param {Parents} node
 *   Parent.
 * @param {Nodes} tree
 *   Tree.
 * @returns {undefined}
 *   Nothing.
 */
function all$2(state, nest, node, tree) {
  const fromParent = combine(nest.descendant, nest.directChild);
  /** @type {Array<AstRule> | undefined} */
  let fromSibling;
  let index = -1;
  /**
   * Total counts.
   * @type {Counts}
   */
  const total = {count: 0, types: new Map()};
  /**
   * Counts of previous siblings.
   * @type {Counts}
   */
  const before = {count: 0, types: new Map()};

  while (++index < node.children.length) {
    count(total, node.children[index]);
  }

  index = -1;

  while (++index < node.children.length) {
    const child = node.children[index];
    // Uppercase to prevent prototype polution, injecting `constructor` or so.
    // Normalize because HTML is insensitive.
    const name =
      child.type === 'element' ? child.tagName.toUpperCase() : undefined;
    // Before counting further elements:
    state.elementIndex = before.count;
    state.typeIndex = name ? before.types.get(name) || 0 : 0;
    // After counting all elements.
    state.elementCount = total.count;
    state.typeCount = name ? total.types.get(name) : 0;

    // Only apply if this is a parent, this should be an element, but we check
    // for parents so that we delve into custom nodes too.
    if ('children' in child) {
      const forSibling = combine(fromParent, fromSibling);
      const nest = one$1(
        state,
        forSibling,
        node.children[index],
        index,
        node,
        tree
      );
      fromSibling = combine(nest.generalSibling, nest.adjacentSibling);
    }

    // We found one thing, and one is enough.
    if (state.one && state.found) {
      break
    }

    count(before, node.children[index]);
  }
}

/**
 * Apply selectors to an element.
 *
 * @param {State} state
 *   Current state.
 * @param {Array<AstRule>} rules
 *   Rules to apply.
 * @param {Element} node
 *   Element to apply rules to.
 * @param {number | undefined} index
 *   Index of `node` in `parent`.
 * @param {Parents | undefined} parent
 *   Parent of `node`.
 * @returns {Nest}
 *   Further rules.
 */
function applySelectors(state, rules, node, index, parent) {
  /** @type {Nest} */
  const nestResult = {
    adjacentSibling: undefined,
    descendant: undefined,
    directChild: undefined,
    generalSibling: undefined
  };
  let selectorIndex = -1;

  while (++selectorIndex < rules.length) {
    const rule = rules[selectorIndex];

    // We found one thing, and one is enough.
    if (state.one && state.found) {
      break
    }

    // When shallow, we don’t allow nested rules.
    // Idea: we could allow a stack of parents?
    // Might get quite complex though.
    if (state.shallow && rule.nestedRule) {
      throw new Error('Expected selector without nesting')
    }

    // If this rule matches:
    if (test(rule, node, index, parent, state)) {
      const nest = rule.nestedRule;

      // Are there more?
      if (nest) {
        /** @type {keyof Nest} */
        const label =
          nest.combinator === '+'
            ? 'adjacentSibling'
            : nest.combinator === '~'
            ? 'generalSibling'
            : nest.combinator === '>'
            ? 'directChild'
            : 'descendant';
        add$1(nestResult, label, nest);
      } else {
        // We have a match!
        state.found = true;

        if (!state.results.includes(node)) {
          state.results.push(node);
        }
      }
    }

    // Descendant.
    if (rule.combinator === undefined) {
      add$1(nestResult, 'descendant', rule);
    }
    // Adjacent.
    else if (rule.combinator === '~') {
      add$1(nestResult, 'generalSibling', rule);
    }
    // Drop direct child (`>`), adjacent sibling (`+`).
  }

  return nestResult
}

/**
 * Combine two lists, if needed.
 *
 * This is optimized to create as few lists as possible.
 *
 * @param {Array<AstRule> | undefined} left
 *   Rules.
 * @param {Array<AstRule> | undefined} right
 *   Rules.
 * @returns {Array<AstRule>}
 *   Rules.
 */
function combine(left, right) {
  return left && right && left.length > 0 && right.length > 0
    ? [...left, ...right]
    : left && left.length > 0
    ? left
    : right && right.length > 0
    ? right
    : empty$1
}

/**
 * Count a node.
 *
 * @param {Counts} counts
 *   Counts.
 * @param {Nodes} node
 *   Node (we’re looking for elements).
 * @returns {undefined}
 *   Nothing.
 */
function count(counts, node) {
  if (node.type === 'element') {
    // Uppercase to prevent prototype polution, injecting `constructor` or so.
    // Normalize because HTML is insensitive.
    const name = node.tagName.toUpperCase();
    const count = (counts.types.get(name) || 0) + 1;
    counts.count++;
    counts.types.set(name, count);
  }
}

/**
 * Check a node.
 *
 * @param {State} state
 *   State.
 * @param {Array<AstRule>} currentRules
 *   Rules.
 * @param {Nodes} node
 *   Node.
 * @param {number | undefined} index
 *   Index of `node` in `parent`.
 * @param {Parents | undefined} parent
 *   Parent of `node`.
 * @param {Nodes} tree
 *   Tree.
 * @returns {Nest}
 *   Nesting.
 */
function one$1(state, currentRules, node, index, parent, tree) {
  /** @type {Nest} */
  let nestResult = {
    adjacentSibling: undefined,
    descendant: undefined,
    directChild: undefined,
    generalSibling: undefined
  };

  const exit = enterState(state, node);

  if (node.type === 'element') {
    let rootRules = state.rootQuery.rules;

    // Remove direct child rules if this is the root.
    // This only happens for a `:has()` rule, which can be like
    // `a:has(> b)`.
    if (parent && parent !== tree) {
      rootRules = state.rootQuery.rules.filter(
        (d) =>
          d.combinator === undefined ||
          (d.combinator === '>' && parent === tree)
      );
    }

    nestResult = applySelectors(
      state,
      // Try the root rules for this element too.
      combine(currentRules, rootRules),
      node,
      index,
      parent
    );
  }

  // If this is a parent, and we want to delve into them, and we haven’t found
  // our single result yet.
  if ('children' in node && !state.shallow && !(state.one && state.found)) {
    all$2(state, nestResult, node, tree);
  }

  exit();

  return nestResult
}

/**
 * @typedef {import('css-selector-parser').AstSelector} AstSelector
 *
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Nodes} Nodes
 * @typedef {import('hast').RootContent} RootContent
 *
 * @typedef {import('property-information').Schema} Schema
 */


/**
 * Check that the given `node` matches `selector`.
 *
 * This only checks the element itself, not the surrounding tree.
 * Thus, nesting in selectors is not supported (`p b`, `p > b`), neither are
 * selectors like `:first-child`, etc.
 * This only checks that the given element matches the selector.
 *
 * @param {string} selector
 *   CSS selector, such as (`h1`, `a, b`).
 * @param {Nodes | null | undefined} [node]
 *   Node that might match `selector`, should be an element (optional).
 * @param {Space | null | undefined} [space='html']
 *   Name of namespace (default: `'html'`).
 * @returns {boolean}
 *   Whether `node` matches `selector`.
 */
function matches$1(selector, node, space) {
  const state = createState(selector, node, space);
  state.one = true;
  state.shallow = true;
  walk(state, node || undefined);
  return state.results.length > 0
}

/**
 * @param {string} selector
 *   CSS selector, such as (`h1`, `a, b`).
 * @param {Nodes | null | undefined} [tree]
 *   Tree to search (optional).
 * @param {Space | null | undefined} [space='html']
 *   Name of namespace (default: `'html'`).
 * @returns {State} State
 *   State.
 */
function createState(selector, tree, space) {
  return {
    direction: 'ltr',
    editableOrEditingHost: false,
    elementCount: undefined,
    elementIndex: undefined,
    found: false,
    language: undefined,
    one: false,
    // State of the query.
    results: [],
    rootQuery: parse$4(selector),
    schema: space === 'svg' ? svg : html,
    scopeElements: tree ? (tree.type === 'root' ? tree.children : [tree]) : [],
    shallow: false,
    typeIndex: undefined,
    typeCount: undefined
  }
}

/**
 * @typedef Definition
 *   Info.
 * @property {true} [allowUnknown=false]
 *   Whether arbitrary values are allowed (default: `false`).
 * @property {true} [caseSensitive=false]
 *   Enumerated values are often treated case-insensitive, except when this
 *   field is on (default: `false`).
 * @property {string | null} [invalid]
 *   Invalid value default; `null` means a particular unnamed state.
 * @property {string | null} [missing]
 *   Missing value default; `null` means a particular unnamed state.
 * @property {string | undefined} [selector]
 *   Simple CSS selector; can contain commas; missing means it applies to all
 *   elements.
 * @property {Array<Array<string> | string | null>} states
 *   Possible states.
 */

/**
 * Enumerated HTML attributes.
 *
 * @type {Record<string, Array<Definition> | Definition>}
 */
const enumeratedAttributes = {
  autocomplete: {
    invalid: '',
    missing: '',
    selector: 'form',
    states: [['', 'on'], 'off']
  },
  behavior: {
    missing: 'scroll',
    selector: 'marquee',
    states: ['alternate', 'scroll', 'slide']
  },
  charset: {
    selector: 'meta, script',
    // In HTML5, utf8 is implied.
    // But we let it be here for older versions.
    states: [
      ['utf8', 'utf-8', 'unicode-1-1-utf-8'],
      ['866', 'cp866', 'ibm866', 'csibm866'],
      [
        'l1',
        'ascii',
        'cp819',
        'cp1252',
        'ibm819',
        'latin1',
        'us-ascii',
        'x-cp1252',
        'iso88591',
        'iso8859-1',
        'iso_8859-1',
        'iso-8859-1',
        'iso-ir-100',
        'csisolatin1',
        'windows-1252',
        'ansi_x3.4-1968',
        'iso_8859-1:1987'
      ],
      [
        'l2',
        'csisolatin2',
        'iso-8859-2',
        'iso-ir-101',
        'iso8859-2',
        'iso88592',
        'iso_8859-2',
        'iso_8859-2:1987',
        'latin2'
      ],
      [
        'l3',
        'csisolatin3',
        'iso-8859-3',
        'iso-ir-109',
        'iso8859-3',
        'iso88593',
        'iso_8859-3',
        'iso_8859-3:1988',
        'latin3'
      ],
      [
        'l4',
        'csisolatin4',
        'iso-8859-4',
        'iso-ir-110',
        'iso8859-4',
        'iso88594',
        'iso_8859-4',
        'iso_8859-4:1988',
        'latin4'
      ],
      [
        'l5',
        'latin5',
        'cp1254',
        'x-cp1254',
        'iso88599',
        'iso8859-9',
        'iso-8859-9',
        'iso_8859-9',
        'iso-ir-148',
        'csisolatin5',
        'windows-1254',
        'iso_8859-9:1989'
      ],
      [
        'l6',
        'latin6',
        'iso885910',
        'iso-ir-157',
        'iso8859-10',
        'csisolatin6',
        'iso-8859-10'
      ],
      [
        'l9',
        'iso885915',
        'iso8859-15',
        'iso-8859-15',
        'iso_8859-15',
        'csisolatin9'
      ],
      ['cp1250', 'x-cp1250', 'windows-1250'],
      ['cp1251', 'x-cp1251', 'windows-1251'],
      ['cp1253', 'x-cp1253', 'windows-1253'],
      ['cp1255', 'x-cp1255', 'windows-1255'],
      ['cp1256', 'x-cp1256', 'windows-1256'],
      ['cp1257', 'x-cp1257', 'windows-1257'],
      ['cp1258', 'x-cp1258', 'windows-1258'],
      [
        'cyrillic',
        'iso88595',
        'iso8859-5',
        'iso-8859-5',
        'iso_8859-5',
        'iso-ir-144',
        'iso_8859-5:1988',
        'csisolatincyrillic'
      ],
      [
        'arabic',
        'iso88596',
        'ecma-114',
        'asmo-708',
        'iso8859-6',
        'iso-ir-127',
        'iso_8859-6',
        'iso-8859-6',
        'csiso88596e',
        'csiso88596i',
        'iso-8859-6-e',
        'iso-8859-6-i',
        'iso_8859-6:1987',
        'csisolatinarabic'
      ],
      [
        'greek',
        'greek8',
        'iso88597',
        'ecma-118',
        'elot_928',
        'iso8859-7',
        'iso-8859-7',
        'iso_8859-7',
        'iso-ir-126',
        'sun_eu_greek',
        'iso_8859-7:1987',
        'csisolatingreek'
      ],
      [
        'hebrew',
        'visual',
        'iso88598',
        'iso8859-8',
        'iso-8859-8',
        'iso_8859-8',
        'iso-ir-138',
        'csiso88598e',
        'iso-8859-8-e',
        'iso_8859-8:1988',
        'csisolatinhebrew'
      ],
      ['logical', 'csiso88598i', 'iso-8859-8-i'],
      ['iso885913', 'iso8859-13', 'iso-8859-13'],
      ['iso885914', 'iso8859-14', 'iso-8859-14'],
      ['iso-8859-16'],
      ['koi', 'koi8', 'koi8-r', 'koi8_r', 'cskoi8r'],
      ['koi8-u', 'koi8-ru'],
      ['mac', 'macintosh', 'csmacintosh', 'x-mac-roman'],
      [
        'dos-874',
        'tis-620',
        'iso885911',
        'iso8859-11',
        'iso-8859-11',
        'windows-874'
      ],
      ['x-mac-cyrillic', 'x-mac-ukrainian'],
      [
        'gbk',
        'x-gbk',
        'gb2312',
        'chinese',
        'gb_2312',
        'csgb2312',
        'iso-ir-58',
        'gb_2312-80',
        'csiso58gb231280'
      ],
      ['gb18030'],
      ['big5', 'csbig5', 'cn-big5', 'x-x-big5', 'big5-hkscs'],
      ['euc-jp', 'x-euc-jp', 'cseucpkdfmtjapanese'],
      ['csiso2022jp', 'iso-2022-jp'],
      [
        'ms932',
        'sjis',
        'x-sjis',
        'ms_kanji',
        'shift-jis',
        'shift_jis',
        'csshiftjis',
        'windows-31j'
      ],
      [
        'korean',
        'euc-kr',
        'cseuckr',
        'ksc5601',
        'ksc_5601',
        'iso-ir-149',
        'windows-949',
        'csksc56011987',
        'ks_c_5601-1987',
        'ks_c_5601-1989'
      ],
      [
        'hz-gb-2312',
        'csiso2022kr',
        'iso-2022-kr',
        'iso-2022-cn',
        'iso-2022-cn-ext'
      ],
      ['utf-16be'],
      ['utf-16', 'utf-16le'],
      ['x-user-defined']
    ]
  },
  contenteditable: {
    invalid: null,
    missing: null,
    states: [null, ['', 'true'], 'false']
  },
  crossorigin: {
    invalid: '',
    missing: null,
    selector: 'link, img, audio, video, script',
    states: [['', 'anonymous'], 'use-credentials']
  },
  decoding: {
    invalid: '',
    missing: '',
    selector: 'img',
    states: ['sync', 'async', ['', 'auto']]
  },
  dir: {
    invalid: '',
    missing: '',
    states: ['', 'ltr', 'rtl', 'auto']
  },
  direction: {
    missing: 'left',
    selector: 'marquee',
    states: ['left', 'right', 'up', 'down']
  },
  draggable: {
    missing: null,
    states: [null, 'true', 'false']
  },
  // When changing `encType`, please also change `formenctype`.
  enctype: {
    invalid: 'application/x-www-form-urlencoded',
    missing: 'application/x-www-form-urlencoded',
    selector: 'form',
    states: [
      'application/x-www-form-urlencoded',
      'multipart/form-data',
      'text/plain'
    ]
  },
  // When changing `formenctype`, please also change `encType`.
  formenctype: {
    invalid: 'application/x-www-form-urlencoded',
    // Note that `missing: null` here is intentionally different from `encType`.
    missing: null,
    selector: 'button, input',
    states: [
      'application/x-www-form-urlencoded',
      'multipart/form-data',
      'text/plain'
    ]
  },
  // When changing `formmethod`, please also change `method`.
  formmethod: {
    invalid: 'get',
    // Note that `missing: null` here is intentionally different from `formmethod`.
    missing: null,
    selector: 'button, input',
    states: ['dialog', 'get', 'post']
  },
  // When changing `formtarget`, please also change `target`.
  formtarget: {
    allowUnknown: true,
    // Note that `missing: null` here is intentionally different from `target`.
    missing: null,
    selector: 'button, input',
    // Note that `formtarget` uses `_self` and `target` uses `['', '_self']`,
    // which is intentional.
    states: ['_blank', '_parent', '_self', '_top']
  },
  inputmode: {
    invalid: '',
    missing: '',
    // In fact only applies to `text`, `search`, and `password`.
    selector: 'input',
    states: [
      '',
      'email',
      'full-width-latin',
      'kana',
      'kana-name',
      'katakana',
      'latin',
      'latin-name',
      'latin-prose',
      'numeric',
      'tel',
      'url',
      'verbatim'
    ]
  },
  keytype: {
    missing: 'rsa',
    selector: 'keygen',
    states: ['', 'rsa']
  },
  kind: {
    invalid: 'metadata',
    missing: 'subtitles',
    selector: 'track',
    states: ['captions', 'chapters', 'descriptions', 'metadata', 'subtitles']
  },
  loading: {
    invalid: 'eager',
    missing: 'eager',
    selector: 'iframe, img',
    states: ['eager', 'lazy']
  },
  // When changing `method`, please also change `formmethod`.
  method: {
    invalid: 'get',
    missing: 'get',
    selector: 'form',
    states: ['dialog', 'get', 'post']
  },
  preload: {
    selector: 'audio, video',
    // Note: https://html.spec.whatwg.org/#attr-media-preload
    states: [['', 'auto'], 'metadata', 'none']
  },
  // Should also apply to `content` on `meta[name=referrer]`.
  referrerpolicy: {
    invalid: '',
    missing: '',
    selector: 'a, area, iframe, img, link',
    states: [
      '',
      'no-referrer',
      'no-referrer-when-downgrade',
      'origin',
      'origin-when-cross-origin',
      'unsafe-url'
    ]
  },
  scope: {
    missing: '',
    selector: 'th',
    states: ['', 'col', 'colgroup', 'row', 'rowgroup']
  },
  shadowrootmode: {
    missing: null,
    invalid: null,
    selector: 'template',
    states: [null, 'closed', 'open']
  },
  shape: {
    missing: 'rect',
    selector: 'area',
    states: [
      // The latter are non-conforming.
      ['rect', 'rectangle'],
      ['poly', 'polygon'],
      ['circle', 'circ'],
      'default'
    ]
  },
  spellcheck: {
    invalid: null,
    missing: null,
    states: [null, ['', 'true'], 'false']
  },
  // When changing `target`, please also change `formtarget`.
  target: {
    allowUnknown: true,
    missing: '',
    selector: 'a, area, base, form',
    states: ['_blank', '_parent', ['', '_self'], '_top']
  },
  translate: {
    invalid: null,
    missing: null,
    states: [['', 'yes'], 'no']
  },
  type: [
    {
      missing: 'submit',
      selector: 'button',
      states: ['button', 'menu', 'reset', 'submit']
    },
    {
      missing: 'text',
      selector: 'input',
      states: [
        'button',
        'checkbox',
        'color',
        'date',
        'datetime-local',
        'email',
        'file',
        'hidden',
        'image',
        'number',
        'month',
        'password',
        'radio',
        'range',
        'reset',
        'search',
        'submit',
        'tel',
        'text',
        'time',
        'url',
        'week'
      ]
    },
    {
      caseSensitive: true,
      invalid: '',
      missing: '',
      selector: 'li',
      states: ['1', 'a', 'A', 'i', 'I', 'circle', 'disc', 'square']
    },
    {
      missing: '',
      selector: 'menu',
      states: ['', 'context', 'toolbar']
    },
    {
      missing: 'command',
      selector: 'menuitem',
      states: ['checkbox', 'command', 'radio']
    },
    {
      caseSensitive: true,
      invalid: '1',
      missing: '1',
      selector: 'ol',
      states: ['1', 'a', 'A', 'i', 'I']
    },
    {
      invalid: '',
      missing: '',
      selector: 'ul',
      states: ['circle', 'disc', 'square']
    }
  ],
  wrap: {
    missing: 'soft',
    selector: 'textarea',
    states: ['hard', 'soft']
  }
};

/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('html-enumerated-attributes').Definition} Definition
 */


/**
 * Minify enumerated attributes.
 *
 * @returns
 *   Transform.
 */
function rehypeMinifyEnumeratedAttribute() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      /** @type {string} */
      let prop;

      for (prop in node.properties) {
        if (Object.hasOwn(node.properties, prop)) {
          const attribute = find(html, prop).attribute;

          if (Object.hasOwn(enumeratedAttributes, attribute)) {
            let value = node.properties[prop];

            // Note: we don’t really handle enumerated as lists, so instead
            // we cast them to a string (assuming they are space-separated).
            if (Array.isArray(value)) {
              value = stringify$1(value);
            }

            if (typeof value === 'string') {
              const definition = enumeratedAttributes[attribute];
              const definitions = Array.isArray(definition)
                ? definition
                : [definition];
              let index = -1;

              // eslint-disable-next-line max-depth
              while (++index < definitions.length) {
                const definition = definitions[index];

                // eslint-disable-next-line max-depth
                if (
                  !definition.selector ||
                  matches$1(definition.selector, node)
                ) {
                  node.properties[prop] = minify$3(value, definition);
                }
              }
            }
          }
        }
      }
    });
  }
}

/**
 * @param {string} value
 *   Value.
 * @param {Definition} info
 *   Info.
 * @returns {string | undefined}
 *   Result.
 */
function minify$3(value, info) {
  const insensitive = info.caseSensitive ? value : value.toLowerCase();
  const states = info.states;
  let index = -1;
  let known = false;
  /** @type {string | null} */
  let result = null;
  /** @type {Array<string> | string | null} */
  let state = null;

  while (++index < states.length) {
    state = states[index];

    if (state === null) {
      continue
    }

    if (typeof state === 'string') {
      state = [state];
    }

    if (state.includes(insensitive)) {
      known = true;
      break
    }
  }

  // So, this is a valid enumerated attribute.
  // Lets’s optimize it.
  if (known && state) {
    result = state[0];
  } else if (typeof info.invalid === 'string') {
    result = info.invalid;
  } else if (typeof info.missing === 'string' && !info.allowUnknown) {
    result = info.missing;
  } else {
    return value
  }

  // Should be a setting.
  // There’s a missing value defined, so we can just as well remove the property
  // all-together if they’re the same.
  if (result === info.missing) {
    return
  }

  if (result === info.invalid) {
    // If the invalid state is longer that one character, we explicitly set a
    // short keyword, namely “a” (never used as a keyword so always invalid).
    // Otherwise, we keep the result (it’s often an empty string)
    result = result.length > 1 ? 'a' : result;
  }

  return result
}

var node = {};

const require$$1 = [
	"$&",
	"$'",
	"$*",
	"$+",
	"$1",
	"$2",
	"$3",
	"$4",
	"$5",
	"$6",
	"$7",
	"$8",
	"$9",
	"$_",
	"$`",
	"$input",
	"-moz-animation",
	"-moz-animation-delay",
	"-moz-animation-direction",
	"-moz-animation-duration",
	"-moz-animation-fill-mode",
	"-moz-animation-iteration-count",
	"-moz-animation-name",
	"-moz-animation-play-state",
	"-moz-animation-timing-function",
	"-moz-appearance",
	"-moz-backface-visibility",
	"-moz-binding",
	"-moz-border-end",
	"-moz-border-end-color",
	"-moz-border-end-style",
	"-moz-border-end-width",
	"-moz-border-image",
	"-moz-border-start",
	"-moz-border-start-color",
	"-moz-border-start-style",
	"-moz-border-start-width",
	"-moz-box-align",
	"-moz-box-direction",
	"-moz-box-flex",
	"-moz-box-ordinal-group",
	"-moz-box-orient",
	"-moz-box-pack",
	"-moz-box-sizing",
	"-moz-column-count",
	"-moz-column-fill",
	"-moz-column-gap",
	"-moz-column-rule",
	"-moz-column-rule-color",
	"-moz-column-rule-style",
	"-moz-column-rule-width",
	"-moz-column-width",
	"-moz-columns",
	"-moz-float-edge",
	"-moz-font-feature-settings",
	"-moz-font-language-override",
	"-moz-force-broken-image-icon",
	"-moz-hyphens",
	"-moz-image-region",
	"-moz-margin-end",
	"-moz-margin-start",
	"-moz-orient",
	"-moz-outline-radius",
	"-moz-outline-radius-bottomleft",
	"-moz-outline-radius-bottomright",
	"-moz-outline-radius-topleft",
	"-moz-outline-radius-topright",
	"-moz-padding-end",
	"-moz-padding-start",
	"-moz-perspective",
	"-moz-perspective-origin",
	"-moz-stack-sizing",
	"-moz-tab-size",
	"-moz-text-size-adjust",
	"-moz-transform",
	"-moz-transform-origin",
	"-moz-transform-style",
	"-moz-transition",
	"-moz-transition-delay",
	"-moz-transition-duration",
	"-moz-transition-property",
	"-moz-transition-timing-function",
	"-moz-user-focus",
	"-moz-user-input",
	"-moz-user-modify",
	"-moz-user-select",
	"-moz-window-dragging",
	"-webkit-align-content",
	"-webkit-align-items",
	"-webkit-align-self",
	"-webkit-animation",
	"-webkit-animation-delay",
	"-webkit-animation-direction",
	"-webkit-animation-duration",
	"-webkit-animation-fill-mode",
	"-webkit-animation-iteration-count",
	"-webkit-animation-name",
	"-webkit-animation-play-state",
	"-webkit-animation-timing-function",
	"-webkit-appearance",
	"-webkit-backface-visibility",
	"-webkit-background-clip",
	"-webkit-background-origin",
	"-webkit-background-size",
	"-webkit-border-bottom-left-radius",
	"-webkit-border-bottom-right-radius",
	"-webkit-border-image",
	"-webkit-border-radius",
	"-webkit-border-top-left-radius",
	"-webkit-border-top-right-radius",
	"-webkit-box-align",
	"-webkit-box-direction",
	"-webkit-box-flex",
	"-webkit-box-ordinal-group",
	"-webkit-box-orient",
	"-webkit-box-pack",
	"-webkit-box-shadow",
	"-webkit-box-sizing",
	"-webkit-filter",
	"-webkit-flex",
	"-webkit-flex-basis",
	"-webkit-flex-direction",
	"-webkit-flex-flow",
	"-webkit-flex-grow",
	"-webkit-flex-shrink",
	"-webkit-flex-wrap",
	"-webkit-justify-content",
	"-webkit-line-clamp",
	"-webkit-mask",
	"-webkit-mask-clip",
	"-webkit-mask-composite",
	"-webkit-mask-image",
	"-webkit-mask-origin",
	"-webkit-mask-position",
	"-webkit-mask-position-x",
	"-webkit-mask-position-y",
	"-webkit-mask-repeat",
	"-webkit-mask-size",
	"-webkit-order",
	"-webkit-perspective",
	"-webkit-perspective-origin",
	"-webkit-text-fill-color",
	"-webkit-text-size-adjust",
	"-webkit-text-stroke",
	"-webkit-text-stroke-color",
	"-webkit-text-stroke-width",
	"-webkit-transform",
	"-webkit-transform-origin",
	"-webkit-transform-style",
	"-webkit-transition",
	"-webkit-transition-delay",
	"-webkit-transition-duration",
	"-webkit-transition-property",
	"-webkit-transition-timing-function",
	"-webkit-user-select",
	"0",
	"1",
	"10",
	"11",
	"12",
	"13",
	"14",
	"15",
	"16",
	"17",
	"18",
	"19",
	"2",
	"20",
	"21",
	"22",
	"23",
	"24",
	"25",
	"26",
	"27",
	"28",
	"29",
	"3",
	"30",
	"31",
	"32",
	"33",
	"34",
	"35",
	"36",
	"37",
	"38",
	"39",
	"4",
	"40",
	"41",
	"42",
	"43",
	"44",
	"45",
	"46",
	"47",
	"48",
	"49",
	"5",
	"50",
	"51",
	"6",
	"7",
	"8",
	"9",
	"@@iterator",
	"ABORT_ERR",
	"ACTIVE",
	"ACTIVE_ATTRIBUTES",
	"ACTIVE_TEXTURE",
	"ACTIVE_UNIFORMS",
	"ACTIVE_UNIFORM_BLOCKS",
	"ADDITION",
	"ALIASED_LINE_WIDTH_RANGE",
	"ALIASED_POINT_SIZE_RANGE",
	"ALLOW_KEYBOARD_INPUT",
	"ALLPASS",
	"ALPHA",
	"ALPHA_BITS",
	"ALREADY_SIGNALED",
	"ALT_MASK",
	"ALWAYS",
	"ANDROID",
	"ANGLE_instanced_arrays",
	"ANY_SAMPLES_PASSED",
	"ANY_SAMPLES_PASSED_CONSERVATIVE",
	"ANY_TYPE",
	"ANY_UNORDERED_NODE_TYPE",
	"APP_UPDATE",
	"ARM",
	"ARRAY_BUFFER",
	"ARRAY_BUFFER_BINDING",
	"ATTACHED_SHADERS",
	"ATTRIBUTE_NODE",
	"AT_TARGET",
	"AbortController",
	"AbortSignal",
	"AbsoluteOrientationSensor",
	"AbstractRange",
	"Accelerometer",
	"ActiveXObject",
	"AddSearchProvider",
	"AesGcmEncryptResult",
	"AggregateError",
	"AnalyserNode",
	"Animation",
	"AnimationEffect",
	"AnimationEvent",
	"AnimationPlaybackEvent",
	"AnimationTimeline",
	"AnonXMLHttpRequest",
	"AppBannerPromptResult",
	"ApplicationCache",
	"ApplicationCacheErrorEvent",
	"Array",
	"ArrayBuffer",
	"Atomics",
	"Attr",
	"Audio",
	"AudioBuffer",
	"AudioBufferSourceNode",
	"AudioContext",
	"AudioDestinationNode",
	"AudioListener",
	"AudioNode",
	"AudioParam",
	"AudioParamMap",
	"AudioProcessingEvent",
	"AudioScheduledSourceNode",
	"AudioStreamTrack",
	"AudioTrack",
	"AudioTrackList",
	"AudioWorklet",
	"AudioWorkletNode",
	"AuthenticatorAssertionResponse",
	"AuthenticatorAttestationResponse",
	"AuthenticatorResponse",
	"AutocompleteErrorEvent",
	"BACK",
	"BAD_BOUNDARYPOINTS_ERR",
	"BAD_REQUEST",
	"BANDPASS",
	"BLEND",
	"BLEND_COLOR",
	"BLEND_DST_ALPHA",
	"BLEND_DST_RGB",
	"BLEND_EQUATION",
	"BLEND_EQUATION_ALPHA",
	"BLEND_EQUATION_RGB",
	"BLEND_SRC_ALPHA",
	"BLEND_SRC_RGB",
	"BLUE_BITS",
	"BLUR",
	"BOOL",
	"BOOLEAN_TYPE",
	"BOOL_VEC2",
	"BOOL_VEC3",
	"BOOL_VEC4",
	"BOTH",
	"BROWSER_DEFAULT_WEBGL",
	"BUBBLING_PHASE",
	"BUFFER_SIZE",
	"BUFFER_USAGE",
	"BYTE",
	"BYTES_PER_ELEMENT",
	"BackgroundFetchManager",
	"BackgroundFetchRecord",
	"BackgroundFetchRegistration",
	"BarProp",
	"BarcodeDetector",
	"BaseAudioContext",
	"BaseHref",
	"BatteryManager",
	"BeforeInstallPromptEvent",
	"BeforeLoadEvent",
	"BeforeUnloadEvent",
	"BigInt",
	"BigInt64Array",
	"BigUint64Array",
	"BiquadFilterNode",
	"Blob",
	"BlobEvent",
	"Bluetooth",
	"BluetoothCharacteristicProperties",
	"BluetoothDevice",
	"BluetoothRemoteGATTCharacteristic",
	"BluetoothRemoteGATTDescriptor",
	"BluetoothRemoteGATTServer",
	"BluetoothRemoteGATTService",
	"BluetoothUUID",
	"BookmarkCollection",
	"Boolean",
	"BroadcastChannel",
	"ByteLengthQueuingStrategy",
	"CANNOT_RUN",
	"CAPTURING_PHASE",
	"CCW",
	"CDATASection",
	"CDATA_SECTION_NODE",
	"CHANGE",
	"CHARSET_RULE",
	"CHECKING",
	"CHROME_UPDATE",
	"CLAMP_TO_EDGE",
	"CLICK",
	"CLOSED",
	"CLOSING",
	"COLOR",
	"COLOR_ATTACHMENT0",
	"COLOR_ATTACHMENT1",
	"COLOR_ATTACHMENT10",
	"COLOR_ATTACHMENT11",
	"COLOR_ATTACHMENT12",
	"COLOR_ATTACHMENT13",
	"COLOR_ATTACHMENT14",
	"COLOR_ATTACHMENT15",
	"COLOR_ATTACHMENT2",
	"COLOR_ATTACHMENT3",
	"COLOR_ATTACHMENT4",
	"COLOR_ATTACHMENT5",
	"COLOR_ATTACHMENT6",
	"COLOR_ATTACHMENT7",
	"COLOR_ATTACHMENT8",
	"COLOR_ATTACHMENT9",
	"COLOR_BUFFER_BIT",
	"COLOR_CLEAR_VALUE",
	"COLOR_WRITEMASK",
	"COMMENT_NODE",
	"COMPARE_REF_TO_TEXTURE",
	"COMPILE_STATUS",
	"COMPRESSED_RGBA_S3TC_DXT1_EXT",
	"COMPRESSED_RGBA_S3TC_DXT3_EXT",
	"COMPRESSED_RGBA_S3TC_DXT5_EXT",
	"COMPRESSED_RGB_S3TC_DXT1_EXT",
	"COMPRESSED_TEXTURE_FORMATS",
	"CONDITION_SATISFIED",
	"CONFIGURATION_UNSUPPORTED",
	"CONNECTING",
	"CONSTANT_ALPHA",
	"CONSTANT_COLOR",
	"CONSTRAINT_ERR",
	"CONTENT",
	"CONTEXT_LOST_WEBGL",
	"CONTROL_MASK",
	"COPY_READ_BUFFER",
	"COPY_READ_BUFFER_BINDING",
	"COPY_WRITE_BUFFER",
	"COPY_WRITE_BUFFER_BINDING",
	"COUNTER_STYLE_RULE",
	"CROS",
	"CSS",
	"CSS2Properties",
	"CSSAnimation",
	"CSSCharsetRule",
	"CSSConditionRule",
	"CSSCounterStyleRule",
	"CSSFontFaceRule",
	"CSSFontFeatureValuesRule",
	"CSSGroupingRule",
	"CSSImageValue",
	"CSSImportRule",
	"CSSKeyframeRule",
	"CSSKeyframesRule",
	"CSSKeywordValue",
	"CSSMathInvert",
	"CSSMathMax",
	"CSSMathMin",
	"CSSMathNegate",
	"CSSMathProduct",
	"CSSMathSum",
	"CSSMathValue",
	"CSSMatrixComponent",
	"CSSMediaRule",
	"CSSMozDocumentRule",
	"CSSNameSpaceRule",
	"CSSNamespaceRule",
	"CSSNumericArray",
	"CSSNumericValue",
	"CSSPageRule",
	"CSSPerspective",
	"CSSPositionValue",
	"CSSPrimitiveValue",
	"CSSRotate",
	"CSSRule",
	"CSSRuleList",
	"CSSScale",
	"CSSSkew",
	"CSSSkewX",
	"CSSSkewY",
	"CSSStyleDeclaration",
	"CSSStyleRule",
	"CSSStyleSheet",
	"CSSStyleValue",
	"CSSSupportsRule",
	"CSSTransformComponent",
	"CSSTransformValue",
	"CSSTransition",
	"CSSTranslate",
	"CSSUnitValue",
	"CSSUnknownRule",
	"CSSUnparsedValue",
	"CSSValue",
	"CSSValueList",
	"CSSVariableReferenceValue",
	"CSSVariablesDeclaration",
	"CSSVariablesRule",
	"CSSViewportRule",
	"CSS_ATTR",
	"CSS_CM",
	"CSS_COUNTER",
	"CSS_CUSTOM",
	"CSS_DEG",
	"CSS_DIMENSION",
	"CSS_EMS",
	"CSS_EXS",
	"CSS_FILTER_BLUR",
	"CSS_FILTER_BRIGHTNESS",
	"CSS_FILTER_CONTRAST",
	"CSS_FILTER_CUSTOM",
	"CSS_FILTER_DROP_SHADOW",
	"CSS_FILTER_GRAYSCALE",
	"CSS_FILTER_HUE_ROTATE",
	"CSS_FILTER_INVERT",
	"CSS_FILTER_OPACITY",
	"CSS_FILTER_REFERENCE",
	"CSS_FILTER_SATURATE",
	"CSS_FILTER_SEPIA",
	"CSS_GRAD",
	"CSS_HZ",
	"CSS_IDENT",
	"CSS_IN",
	"CSS_INHERIT",
	"CSS_KHZ",
	"CSS_MATRIX",
	"CSS_MATRIX3D",
	"CSS_MM",
	"CSS_MS",
	"CSS_NUMBER",
	"CSS_PC",
	"CSS_PERCENTAGE",
	"CSS_PERSPECTIVE",
	"CSS_PRIMITIVE_VALUE",
	"CSS_PT",
	"CSS_PX",
	"CSS_RAD",
	"CSS_RECT",
	"CSS_RGBCOLOR",
	"CSS_ROTATE",
	"CSS_ROTATE3D",
	"CSS_ROTATEX",
	"CSS_ROTATEY",
	"CSS_ROTATEZ",
	"CSS_S",
	"CSS_SCALE",
	"CSS_SCALE3D",
	"CSS_SCALEX",
	"CSS_SCALEY",
	"CSS_SCALEZ",
	"CSS_SKEW",
	"CSS_SKEWX",
	"CSS_SKEWY",
	"CSS_STRING",
	"CSS_TRANSLATE",
	"CSS_TRANSLATE3D",
	"CSS_TRANSLATEX",
	"CSS_TRANSLATEY",
	"CSS_TRANSLATEZ",
	"CSS_UNKNOWN",
	"CSS_URI",
	"CSS_VALUE_LIST",
	"CSS_VH",
	"CSS_VMAX",
	"CSS_VMIN",
	"CSS_VW",
	"CULL_FACE",
	"CULL_FACE_MODE",
	"CURRENT_PROGRAM",
	"CURRENT_QUERY",
	"CURRENT_VERTEX_ATTRIB",
	"CUSTOM",
	"CW",
	"Cache",
	"CacheStorage",
	"CanvasCaptureMediaStream",
	"CanvasCaptureMediaStreamTrack",
	"CanvasGradient",
	"CanvasPattern",
	"CanvasPixelArray",
	"CanvasRenderingContext2D",
	"CaretPosition",
	"ChannelMergerNode",
	"ChannelSplitterNode",
	"CharacterData",
	"Chrome PDF Plugin",
	"Chrome PDF Viewer",
	"ClientRect",
	"ClientRectList",
	"Clipboard",
	"ClipboardEvent",
	"ClipboardItem",
	"CloseEvent",
	"Collator",
	"CollectGarbage",
	"CommandEvent",
	"Comment",
	"CompileError",
	"CompositionEvent",
	"CompressionStream",
	"Console",
	"ConstantSourceNode",
	"ControlRangeCollection",
	"Controllers",
	"ConvolverNode",
	"Coordinates",
	"CountQueuingStrategy",
	"Counter",
	"Credential",
	"CredentialsContainer",
	"Crypto",
	"CryptoKey",
	"CryptoOperation",
	"CustomElementRegistry",
	"CustomEvent",
	"DATABASE_ERR",
	"DATA_CLONE_ERR",
	"DATA_ERR",
	"DBLCLICK",
	"DECR",
	"DECR_WRAP",
	"DELETE_STATUS",
	"DEPTH",
	"DEPTH24_STENCIL8",
	"DEPTH32F_STENCIL8",
	"DEPTH_ATTACHMENT",
	"DEPTH_BITS",
	"DEPTH_BUFFER_BIT",
	"DEPTH_CLEAR_VALUE",
	"DEPTH_COMPONENT",
	"DEPTH_COMPONENT16",
	"DEPTH_COMPONENT24",
	"DEPTH_COMPONENT32F",
	"DEPTH_FUNC",
	"DEPTH_RANGE",
	"DEPTH_STENCIL",
	"DEPTH_STENCIL_ATTACHMENT",
	"DEPTH_TEST",
	"DEPTH_WRITEMASK",
	"DEVICE_INELIGIBLE",
	"DIRECTION_DOWN",
	"DIRECTION_LEFT",
	"DIRECTION_RIGHT",
	"DIRECTION_UP",
	"DISABLED",
	"DISPATCH_REQUEST_ERR",
	"DITHER",
	"DOCUMENT_FRAGMENT_NODE",
	"DOCUMENT_NODE",
	"DOCUMENT_POSITION_CONTAINED_BY",
	"DOCUMENT_POSITION_CONTAINS",
	"DOCUMENT_POSITION_DISCONNECTED",
	"DOCUMENT_POSITION_FOLLOWING",
	"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
	"DOCUMENT_POSITION_PRECEDING",
	"DOCUMENT_TYPE_NODE",
	"DOMCursor",
	"DOMError",
	"DOMException",
	"DOMImplementation",
	"DOMImplementationLS",
	"DOMMatrix",
	"DOMMatrixReadOnly",
	"DOMParser",
	"DOMPoint",
	"DOMPointReadOnly",
	"DOMQuad",
	"DOMRect",
	"DOMRectList",
	"DOMRectReadOnly",
	"DOMRequest",
	"DOMSTRING_SIZE_ERR",
	"DOMSettableTokenList",
	"DOMStringList",
	"DOMStringMap",
	"DOMTokenList",
	"DOMTransactionEvent",
	"DOM_DELTA_LINE",
	"DOM_DELTA_PAGE",
	"DOM_DELTA_PIXEL",
	"DOM_INPUT_METHOD_DROP",
	"DOM_INPUT_METHOD_HANDWRITING",
	"DOM_INPUT_METHOD_IME",
	"DOM_INPUT_METHOD_KEYBOARD",
	"DOM_INPUT_METHOD_MULTIMODAL",
	"DOM_INPUT_METHOD_OPTION",
	"DOM_INPUT_METHOD_PASTE",
	"DOM_INPUT_METHOD_SCRIPT",
	"DOM_INPUT_METHOD_UNKNOWN",
	"DOM_INPUT_METHOD_VOICE",
	"DOM_KEY_LOCATION_JOYSTICK",
	"DOM_KEY_LOCATION_LEFT",
	"DOM_KEY_LOCATION_MOBILE",
	"DOM_KEY_LOCATION_NUMPAD",
	"DOM_KEY_LOCATION_RIGHT",
	"DOM_KEY_LOCATION_STANDARD",
	"DOM_VK_0",
	"DOM_VK_1",
	"DOM_VK_2",
	"DOM_VK_3",
	"DOM_VK_4",
	"DOM_VK_5",
	"DOM_VK_6",
	"DOM_VK_7",
	"DOM_VK_8",
	"DOM_VK_9",
	"DOM_VK_A",
	"DOM_VK_ACCEPT",
	"DOM_VK_ADD",
	"DOM_VK_ALT",
	"DOM_VK_ALTGR",
	"DOM_VK_AMPERSAND",
	"DOM_VK_ASTERISK",
	"DOM_VK_AT",
	"DOM_VK_ATTN",
	"DOM_VK_B",
	"DOM_VK_BACKSPACE",
	"DOM_VK_BACK_QUOTE",
	"DOM_VK_BACK_SLASH",
	"DOM_VK_BACK_SPACE",
	"DOM_VK_C",
	"DOM_VK_CANCEL",
	"DOM_VK_CAPS_LOCK",
	"DOM_VK_CIRCUMFLEX",
	"DOM_VK_CLEAR",
	"DOM_VK_CLOSE_BRACKET",
	"DOM_VK_CLOSE_CURLY_BRACKET",
	"DOM_VK_CLOSE_PAREN",
	"DOM_VK_COLON",
	"DOM_VK_COMMA",
	"DOM_VK_CONTEXT_MENU",
	"DOM_VK_CONTROL",
	"DOM_VK_CONVERT",
	"DOM_VK_CRSEL",
	"DOM_VK_CTRL",
	"DOM_VK_D",
	"DOM_VK_DECIMAL",
	"DOM_VK_DELETE",
	"DOM_VK_DIVIDE",
	"DOM_VK_DOLLAR",
	"DOM_VK_DOUBLE_QUOTE",
	"DOM_VK_DOWN",
	"DOM_VK_E",
	"DOM_VK_EISU",
	"DOM_VK_END",
	"DOM_VK_ENTER",
	"DOM_VK_EQUALS",
	"DOM_VK_EREOF",
	"DOM_VK_ESCAPE",
	"DOM_VK_EXCLAMATION",
	"DOM_VK_EXECUTE",
	"DOM_VK_EXSEL",
	"DOM_VK_F",
	"DOM_VK_F1",
	"DOM_VK_F10",
	"DOM_VK_F11",
	"DOM_VK_F12",
	"DOM_VK_F13",
	"DOM_VK_F14",
	"DOM_VK_F15",
	"DOM_VK_F16",
	"DOM_VK_F17",
	"DOM_VK_F18",
	"DOM_VK_F19",
	"DOM_VK_F2",
	"DOM_VK_F20",
	"DOM_VK_F21",
	"DOM_VK_F22",
	"DOM_VK_F23",
	"DOM_VK_F24",
	"DOM_VK_F25",
	"DOM_VK_F26",
	"DOM_VK_F27",
	"DOM_VK_F28",
	"DOM_VK_F29",
	"DOM_VK_F3",
	"DOM_VK_F30",
	"DOM_VK_F31",
	"DOM_VK_F32",
	"DOM_VK_F33",
	"DOM_VK_F34",
	"DOM_VK_F35",
	"DOM_VK_F36",
	"DOM_VK_F4",
	"DOM_VK_F5",
	"DOM_VK_F6",
	"DOM_VK_F7",
	"DOM_VK_F8",
	"DOM_VK_F9",
	"DOM_VK_FINAL",
	"DOM_VK_FRONT",
	"DOM_VK_G",
	"DOM_VK_GREATER_THAN",
	"DOM_VK_H",
	"DOM_VK_HANGUL",
	"DOM_VK_HANJA",
	"DOM_VK_HASH",
	"DOM_VK_HELP",
	"DOM_VK_HK_TOGGLE",
	"DOM_VK_HOME",
	"DOM_VK_HYPHEN_MINUS",
	"DOM_VK_I",
	"DOM_VK_INSERT",
	"DOM_VK_J",
	"DOM_VK_JUNJA",
	"DOM_VK_K",
	"DOM_VK_KANA",
	"DOM_VK_KANJI",
	"DOM_VK_L",
	"DOM_VK_LEFT",
	"DOM_VK_LEFT_TAB",
	"DOM_VK_LESS_THAN",
	"DOM_VK_M",
	"DOM_VK_META",
	"DOM_VK_MODECHANGE",
	"DOM_VK_MULTIPLY",
	"DOM_VK_N",
	"DOM_VK_NONCONVERT",
	"DOM_VK_NUMPAD0",
	"DOM_VK_NUMPAD1",
	"DOM_VK_NUMPAD2",
	"DOM_VK_NUMPAD3",
	"DOM_VK_NUMPAD4",
	"DOM_VK_NUMPAD5",
	"DOM_VK_NUMPAD6",
	"DOM_VK_NUMPAD7",
	"DOM_VK_NUMPAD8",
	"DOM_VK_NUMPAD9",
	"DOM_VK_NUM_LOCK",
	"DOM_VK_O",
	"DOM_VK_OEM_1",
	"DOM_VK_OEM_102",
	"DOM_VK_OEM_2",
	"DOM_VK_OEM_3",
	"DOM_VK_OEM_4",
	"DOM_VK_OEM_5",
	"DOM_VK_OEM_6",
	"DOM_VK_OEM_7",
	"DOM_VK_OEM_8",
	"DOM_VK_OEM_COMMA",
	"DOM_VK_OEM_MINUS",
	"DOM_VK_OEM_PERIOD",
	"DOM_VK_OEM_PLUS",
	"DOM_VK_OPEN_BRACKET",
	"DOM_VK_OPEN_CURLY_BRACKET",
	"DOM_VK_OPEN_PAREN",
	"DOM_VK_P",
	"DOM_VK_PA1",
	"DOM_VK_PAGEDOWN",
	"DOM_VK_PAGEUP",
	"DOM_VK_PAGE_DOWN",
	"DOM_VK_PAGE_UP",
	"DOM_VK_PAUSE",
	"DOM_VK_PERCENT",
	"DOM_VK_PERIOD",
	"DOM_VK_PIPE",
	"DOM_VK_PLAY",
	"DOM_VK_PLUS",
	"DOM_VK_PRINT",
	"DOM_VK_PRINTSCREEN",
	"DOM_VK_PROCESSKEY",
	"DOM_VK_PROPERITES",
	"DOM_VK_Q",
	"DOM_VK_QUESTION_MARK",
	"DOM_VK_QUOTE",
	"DOM_VK_R",
	"DOM_VK_REDO",
	"DOM_VK_RETURN",
	"DOM_VK_RIGHT",
	"DOM_VK_S",
	"DOM_VK_SCROLL_LOCK",
	"DOM_VK_SELECT",
	"DOM_VK_SEMICOLON",
	"DOM_VK_SEPARATOR",
	"DOM_VK_SHIFT",
	"DOM_VK_SLASH",
	"DOM_VK_SLEEP",
	"DOM_VK_SPACE",
	"DOM_VK_SUBTRACT",
	"DOM_VK_T",
	"DOM_VK_TAB",
	"DOM_VK_TILDE",
	"DOM_VK_U",
	"DOM_VK_UNDERSCORE",
	"DOM_VK_UNDO",
	"DOM_VK_UNICODE",
	"DOM_VK_UP",
	"DOM_VK_V",
	"DOM_VK_VOLUME_DOWN",
	"DOM_VK_VOLUME_MUTE",
	"DOM_VK_VOLUME_UP",
	"DOM_VK_W",
	"DOM_VK_WIN",
	"DOM_VK_WINDOW",
	"DOM_VK_WIN_ICO_00",
	"DOM_VK_WIN_ICO_CLEAR",
	"DOM_VK_WIN_ICO_HELP",
	"DOM_VK_WIN_OEM_ATTN",
	"DOM_VK_WIN_OEM_AUTO",
	"DOM_VK_WIN_OEM_BACKTAB",
	"DOM_VK_WIN_OEM_CLEAR",
	"DOM_VK_WIN_OEM_COPY",
	"DOM_VK_WIN_OEM_CUSEL",
	"DOM_VK_WIN_OEM_ENLW",
	"DOM_VK_WIN_OEM_FINISH",
	"DOM_VK_WIN_OEM_FJ_JISHO",
	"DOM_VK_WIN_OEM_FJ_LOYA",
	"DOM_VK_WIN_OEM_FJ_MASSHOU",
	"DOM_VK_WIN_OEM_FJ_ROYA",
	"DOM_VK_WIN_OEM_FJ_TOUROKU",
	"DOM_VK_WIN_OEM_JUMP",
	"DOM_VK_WIN_OEM_PA1",
	"DOM_VK_WIN_OEM_PA2",
	"DOM_VK_WIN_OEM_PA3",
	"DOM_VK_WIN_OEM_RESET",
	"DOM_VK_WIN_OEM_WSCTRL",
	"DOM_VK_X",
	"DOM_VK_XF86XK_ADD_FAVORITE",
	"DOM_VK_XF86XK_APPLICATION_LEFT",
	"DOM_VK_XF86XK_APPLICATION_RIGHT",
	"DOM_VK_XF86XK_AUDIO_CYCLE_TRACK",
	"DOM_VK_XF86XK_AUDIO_FORWARD",
	"DOM_VK_XF86XK_AUDIO_LOWER_VOLUME",
	"DOM_VK_XF86XK_AUDIO_MEDIA",
	"DOM_VK_XF86XK_AUDIO_MUTE",
	"DOM_VK_XF86XK_AUDIO_NEXT",
	"DOM_VK_XF86XK_AUDIO_PAUSE",
	"DOM_VK_XF86XK_AUDIO_PLAY",
	"DOM_VK_XF86XK_AUDIO_PREV",
	"DOM_VK_XF86XK_AUDIO_RAISE_VOLUME",
	"DOM_VK_XF86XK_AUDIO_RANDOM_PLAY",
	"DOM_VK_XF86XK_AUDIO_RECORD",
	"DOM_VK_XF86XK_AUDIO_REPEAT",
	"DOM_VK_XF86XK_AUDIO_REWIND",
	"DOM_VK_XF86XK_AUDIO_STOP",
	"DOM_VK_XF86XK_AWAY",
	"DOM_VK_XF86XK_BACK",
	"DOM_VK_XF86XK_BACK_FORWARD",
	"DOM_VK_XF86XK_BATTERY",
	"DOM_VK_XF86XK_BLUE",
	"DOM_VK_XF86XK_BLUETOOTH",
	"DOM_VK_XF86XK_BOOK",
	"DOM_VK_XF86XK_BRIGHTNESS_ADJUST",
	"DOM_VK_XF86XK_CALCULATOR",
	"DOM_VK_XF86XK_CALENDAR",
	"DOM_VK_XF86XK_CD",
	"DOM_VK_XF86XK_CLOSE",
	"DOM_VK_XF86XK_COMMUNITY",
	"DOM_VK_XF86XK_CONTRAST_ADJUST",
	"DOM_VK_XF86XK_COPY",
	"DOM_VK_XF86XK_CUT",
	"DOM_VK_XF86XK_CYCLE_ANGLE",
	"DOM_VK_XF86XK_DISPLAY",
	"DOM_VK_XF86XK_DOCUMENTS",
	"DOM_VK_XF86XK_DOS",
	"DOM_VK_XF86XK_EJECT",
	"DOM_VK_XF86XK_EXCEL",
	"DOM_VK_XF86XK_EXPLORER",
	"DOM_VK_XF86XK_FAVORITES",
	"DOM_VK_XF86XK_FINANCE",
	"DOM_VK_XF86XK_FORWARD",
	"DOM_VK_XF86XK_FRAME_BACK",
	"DOM_VK_XF86XK_FRAME_FORWARD",
	"DOM_VK_XF86XK_GAME",
	"DOM_VK_XF86XK_GO",
	"DOM_VK_XF86XK_GREEN",
	"DOM_VK_XF86XK_HIBERNATE",
	"DOM_VK_XF86XK_HISTORY",
	"DOM_VK_XF86XK_HOME_PAGE",
	"DOM_VK_XF86XK_HOT_LINKS",
	"DOM_VK_XF86XK_I_TOUCH",
	"DOM_VK_XF86XK_KBD_BRIGHTNESS_DOWN",
	"DOM_VK_XF86XK_KBD_BRIGHTNESS_UP",
	"DOM_VK_XF86XK_KBD_LIGHT_ON_OFF",
	"DOM_VK_XF86XK_LAUNCH0",
	"DOM_VK_XF86XK_LAUNCH1",
	"DOM_VK_XF86XK_LAUNCH2",
	"DOM_VK_XF86XK_LAUNCH3",
	"DOM_VK_XF86XK_LAUNCH4",
	"DOM_VK_XF86XK_LAUNCH5",
	"DOM_VK_XF86XK_LAUNCH6",
	"DOM_VK_XF86XK_LAUNCH7",
	"DOM_VK_XF86XK_LAUNCH8",
	"DOM_VK_XF86XK_LAUNCH9",
	"DOM_VK_XF86XK_LAUNCH_A",
	"DOM_VK_XF86XK_LAUNCH_B",
	"DOM_VK_XF86XK_LAUNCH_C",
	"DOM_VK_XF86XK_LAUNCH_D",
	"DOM_VK_XF86XK_LAUNCH_E",
	"DOM_VK_XF86XK_LAUNCH_F",
	"DOM_VK_XF86XK_LIGHT_BULB",
	"DOM_VK_XF86XK_LOG_OFF",
	"DOM_VK_XF86XK_MAIL",
	"DOM_VK_XF86XK_MAIL_FORWARD",
	"DOM_VK_XF86XK_MARKET",
	"DOM_VK_XF86XK_MEETING",
	"DOM_VK_XF86XK_MEMO",
	"DOM_VK_XF86XK_MENU_KB",
	"DOM_VK_XF86XK_MENU_PB",
	"DOM_VK_XF86XK_MESSENGER",
	"DOM_VK_XF86XK_MON_BRIGHTNESS_DOWN",
	"DOM_VK_XF86XK_MON_BRIGHTNESS_UP",
	"DOM_VK_XF86XK_MUSIC",
	"DOM_VK_XF86XK_MY_COMPUTER",
	"DOM_VK_XF86XK_MY_SITES",
	"DOM_VK_XF86XK_NEW",
	"DOM_VK_XF86XK_NEWS",
	"DOM_VK_XF86XK_OFFICE_HOME",
	"DOM_VK_XF86XK_OPEN",
	"DOM_VK_XF86XK_OPEN_URL",
	"DOM_VK_XF86XK_OPTION",
	"DOM_VK_XF86XK_PASTE",
	"DOM_VK_XF86XK_PHONE",
	"DOM_VK_XF86XK_PICTURES",
	"DOM_VK_XF86XK_POWER_DOWN",
	"DOM_VK_XF86XK_POWER_OFF",
	"DOM_VK_XF86XK_RED",
	"DOM_VK_XF86XK_REFRESH",
	"DOM_VK_XF86XK_RELOAD",
	"DOM_VK_XF86XK_REPLY",
	"DOM_VK_XF86XK_ROCKER_DOWN",
	"DOM_VK_XF86XK_ROCKER_ENTER",
	"DOM_VK_XF86XK_ROCKER_UP",
	"DOM_VK_XF86XK_ROTATE_WINDOWS",
	"DOM_VK_XF86XK_ROTATION_KB",
	"DOM_VK_XF86XK_ROTATION_PB",
	"DOM_VK_XF86XK_SAVE",
	"DOM_VK_XF86XK_SCREEN_SAVER",
	"DOM_VK_XF86XK_SCROLL_CLICK",
	"DOM_VK_XF86XK_SCROLL_DOWN",
	"DOM_VK_XF86XK_SCROLL_UP",
	"DOM_VK_XF86XK_SEARCH",
	"DOM_VK_XF86XK_SEND",
	"DOM_VK_XF86XK_SHOP",
	"DOM_VK_XF86XK_SPELL",
	"DOM_VK_XF86XK_SPLIT_SCREEN",
	"DOM_VK_XF86XK_STANDBY",
	"DOM_VK_XF86XK_START",
	"DOM_VK_XF86XK_STOP",
	"DOM_VK_XF86XK_SUBTITLE",
	"DOM_VK_XF86XK_SUPPORT",
	"DOM_VK_XF86XK_SUSPEND",
	"DOM_VK_XF86XK_TASK_PANE",
	"DOM_VK_XF86XK_TERMINAL",
	"DOM_VK_XF86XK_TIME",
	"DOM_VK_XF86XK_TOOLS",
	"DOM_VK_XF86XK_TOP_MENU",
	"DOM_VK_XF86XK_TO_DO_LIST",
	"DOM_VK_XF86XK_TRAVEL",
	"DOM_VK_XF86XK_USER1KB",
	"DOM_VK_XF86XK_USER2KB",
	"DOM_VK_XF86XK_USER_PB",
	"DOM_VK_XF86XK_UWB",
	"DOM_VK_XF86XK_VENDOR_HOME",
	"DOM_VK_XF86XK_VIDEO",
	"DOM_VK_XF86XK_VIEW",
	"DOM_VK_XF86XK_WAKE_UP",
	"DOM_VK_XF86XK_WEB_CAM",
	"DOM_VK_XF86XK_WHEEL_BUTTON",
	"DOM_VK_XF86XK_WLAN",
	"DOM_VK_XF86XK_WORD",
	"DOM_VK_XF86XK_WWW",
	"DOM_VK_XF86XK_XFER",
	"DOM_VK_XF86XK_YELLOW",
	"DOM_VK_XF86XK_ZOOM_IN",
	"DOM_VK_XF86XK_ZOOM_OUT",
	"DOM_VK_Y",
	"DOM_VK_Z",
	"DOM_VK_ZOOM",
	"DONE",
	"DONT_CARE",
	"DOWNLOADING",
	"DRAGDROP",
	"DRAW_BUFFER0",
	"DRAW_BUFFER1",
	"DRAW_BUFFER10",
	"DRAW_BUFFER11",
	"DRAW_BUFFER12",
	"DRAW_BUFFER13",
	"DRAW_BUFFER14",
	"DRAW_BUFFER15",
	"DRAW_BUFFER2",
	"DRAW_BUFFER3",
	"DRAW_BUFFER4",
	"DRAW_BUFFER5",
	"DRAW_BUFFER6",
	"DRAW_BUFFER7",
	"DRAW_BUFFER8",
	"DRAW_BUFFER9",
	"DRAW_FRAMEBUFFER",
	"DRAW_FRAMEBUFFER_BINDING",
	"DST_ALPHA",
	"DST_COLOR",
	"DYNAMIC_COPY",
	"DYNAMIC_DRAW",
	"DYNAMIC_READ",
	"DataChannel",
	"DataCue",
	"DataTransfer",
	"DataTransferItem",
	"DataTransferItemList",
	"DataView",
	"Database",
	"Date",
	"DateTimeFormat",
	"Debug",
	"DecompressionStream",
	"Default Browser Helper",
	"DelayNode",
	"DesktopNotification",
	"DesktopNotificationCenter",
	"DeviceAcceleration",
	"DeviceLightEvent",
	"DeviceMotionEvent",
	"DeviceMotionEventAcceleration",
	"DeviceMotionEventRotationRate",
	"DeviceOrientationEvent",
	"DeviceProximityEvent",
	"DeviceRotationRate",
	"DeviceStorage",
	"DeviceStorageChangeEvent",
	"Directory",
	"DisplayNames",
	"Document",
	"DocumentFragment",
	"DocumentTimeline",
	"DocumentType",
	"DragEvent",
	"DynamicsCompressorNode",
	"E",
	"ELEMENT_ARRAY_BUFFER",
	"ELEMENT_ARRAY_BUFFER_BINDING",
	"ELEMENT_NODE",
	"EMPTY",
	"ENCODING_ERR",
	"ENDED",
	"END_TO_END",
	"END_TO_START",
	"ENTITY_NODE",
	"ENTITY_REFERENCE_NODE",
	"EPSILON",
	"EQUAL",
	"EQUALPOWER",
	"ERROR",
	"EXPONENTIAL_DISTANCE",
	"EXT_texture_filter_anisotropic",
	"Element",
	"ElementInternals",
	"ElementQuery",
	"EnterPictureInPictureEvent",
	"Entity",
	"EntityReference",
	"Enumerator",
	"Error",
	"ErrorEvent",
	"EvalError",
	"Event",
	"EventException",
	"EventSource",
	"EventTarget",
	"External",
	"FASTEST",
	"FIDOSDK",
	"FILTER_ACCEPT",
	"FILTER_INTERRUPT",
	"FILTER_REJECT",
	"FILTER_SKIP",
	"FINISHED_STATE",
	"FIRST_ORDERED_NODE_TYPE",
	"FLOAT",
	"FLOAT_32_UNSIGNED_INT_24_8_REV",
	"FLOAT_MAT2",
	"FLOAT_MAT2x3",
	"FLOAT_MAT2x4",
	"FLOAT_MAT3",
	"FLOAT_MAT3x2",
	"FLOAT_MAT3x4",
	"FLOAT_MAT4",
	"FLOAT_MAT4x2",
	"FLOAT_MAT4x3",
	"FLOAT_VEC2",
	"FLOAT_VEC3",
	"FLOAT_VEC4",
	"FOCUS",
	"FONT_FACE_RULE",
	"FONT_FEATURE_VALUES_RULE",
	"FRAGMENT_SHADER",
	"FRAGMENT_SHADER_DERIVATIVE_HINT",
	"FRAGMENT_SHADER_DERIVATIVE_HINT_OES",
	"FRAMEBUFFER",
	"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",
	"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",
	"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",
	"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",
	"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",
	"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",
	"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
	"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
	"FRAMEBUFFER_ATTACHMENT_RED_SIZE",
	"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",
	"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
	"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",
	"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
	"FRAMEBUFFER_BINDING",
	"FRAMEBUFFER_COMPLETE",
	"FRAMEBUFFER_DEFAULT",
	"FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
	"FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
	"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
	"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",
	"FRAMEBUFFER_UNSUPPORTED",
	"FRONT",
	"FRONT_AND_BACK",
	"FRONT_FACE",
	"FUNC_ADD",
	"FUNC_REVERSE_SUBTRACT",
	"FUNC_SUBTRACT",
	"FeaturePolicy",
	"FederatedCredential",
	"Feed",
	"FeedEntry",
	"File",
	"FileError",
	"FileList",
	"FileReader",
	"FileSystem",
	"FileSystemDirectoryEntry",
	"FileSystemDirectoryReader",
	"FileSystemEntry",
	"FileSystemFileEntry",
	"FinalizationRegistry",
	"FindInPage",
	"Float32Array",
	"Float64Array",
	"FocusEvent",
	"FontFace",
	"FontFaceSet",
	"FontFaceSetLoadEvent",
	"FormData",
	"FormDataEvent",
	"FragmentDirective",
	"Function",
	"GENERATE_MIPMAP_HINT",
	"GEQUAL",
	"GREATER",
	"GREEN_BITS",
	"GainNode",
	"Gamepad",
	"GamepadButton",
	"GamepadEvent",
	"GamepadHapticActuator",
	"GamepadPose",
	"Geolocation",
	"GeolocationCoordinates",
	"GeolocationPosition",
	"GeolocationPositionError",
	"GestureEvent",
	"Global",
	"Gyroscope",
	"HALF_FLOAT",
	"HAVE_CURRENT_DATA",
	"HAVE_ENOUGH_DATA",
	"HAVE_FUTURE_DATA",
	"HAVE_METADATA",
	"HAVE_NOTHING",
	"HEADERS_RECEIVED",
	"HIDDEN",
	"HIERARCHY_REQUEST_ERR",
	"HIGHPASS",
	"HIGHSHELF",
	"HIGH_FLOAT",
	"HIGH_INT",
	"HORIZONTAL",
	"HORIZONTAL_AXIS",
	"HRTF",
	"HTMLAllCollection",
	"HTMLAnchorElement",
	"HTMLAppletElement",
	"HTMLAreaElement",
	"HTMLAreasCollection",
	"HTMLAudioElement",
	"HTMLBGSoundElement",
	"HTMLBRElement",
	"HTMLBaseElement",
	"HTMLBaseFontElement",
	"HTMLBlockElement",
	"HTMLBlockquoteElement",
	"HTMLBodyElement",
	"HTMLButtonElement",
	"HTMLCanvasElement",
	"HTMLCollection",
	"HTMLCommandElement",
	"HTMLContentElement",
	"HTMLDDElement",
	"HTMLDListElement",
	"HTMLDTElement",
	"HTMLDataElement",
	"HTMLDataListElement",
	"HTMLDetailsElement",
	"HTMLDialogElement",
	"HTMLDirectoryElement",
	"HTMLDivElement",
	"HTMLDocument",
	"HTMLElement",
	"HTMLEmbedElement",
	"HTMLFieldSetElement",
	"HTMLFontElement",
	"HTMLFormControlsCollection",
	"HTMLFormElement",
	"HTMLFrameElement",
	"HTMLFrameSetElement",
	"HTMLHRElement",
	"HTMLHeadElement",
	"HTMLHeadingElement",
	"HTMLHtmlElement",
	"HTMLIFrameElement",
	"HTMLImageElement",
	"HTMLInputElement",
	"HTMLIsIndexElement",
	"HTMLKeygenElement",
	"HTMLLIElement",
	"HTMLLabelElement",
	"HTMLLegendElement",
	"HTMLLinkElement",
	"HTMLMapElement",
	"HTMLMarqueeElement",
	"HTMLMediaElement",
	"HTMLMenuElement",
	"HTMLMenuItemElement",
	"HTMLMetaElement",
	"HTMLMeterElement",
	"HTMLModElement",
	"HTMLNextIdElement",
	"HTMLOListElement",
	"HTMLObjectElement",
	"HTMLOptGroupElement",
	"HTMLOptionElement",
	"HTMLOptionsCollection",
	"HTMLOutputElement",
	"HTMLParagraphElement",
	"HTMLParamElement",
	"HTMLPhraseElement",
	"HTMLPictureElement",
	"HTMLPreElement",
	"HTMLProgressElement",
	"HTMLPropertiesCollection",
	"HTMLQuoteElement",
	"HTMLScriptElement",
	"HTMLSelectElement",
	"HTMLShadowElement",
	"HTMLSlotElement",
	"HTMLSourceElement",
	"HTMLSpanElement",
	"HTMLStyleElement",
	"HTMLTableCaptionElement",
	"HTMLTableCellElement",
	"HTMLTableColElement",
	"HTMLTableDataCellElement",
	"HTMLTableElement",
	"HTMLTableHeaderCellElement",
	"HTMLTableRowElement",
	"HTMLTableSectionElement",
	"HTMLTemplateElement",
	"HTMLTextAreaElement",
	"HTMLTimeElement",
	"HTMLTitleElement",
	"HTMLTrackElement",
	"HTMLUListElement",
	"HTMLUnknownElement",
	"HTMLVideoElement",
	"HashChangeEvent",
	"Headers",
	"History",
	"Hz",
	"ICE_CHECKING",
	"ICE_CLOSED",
	"ICE_COMPLETED",
	"ICE_CONNECTED",
	"ICE_FAILED",
	"ICE_GATHERING",
	"ICE_WAITING",
	"IDBCursor",
	"IDBCursorWithValue",
	"IDBDatabase",
	"IDBDatabaseException",
	"IDBFactory",
	"IDBFileHandle",
	"IDBFileRequest",
	"IDBIndex",
	"IDBKeyRange",
	"IDBMutableFile",
	"IDBObjectStore",
	"IDBOpenDBRequest",
	"IDBRequest",
	"IDBTransaction",
	"IDBVersionChangeEvent",
	"IDLE",
	"IIRFilterNode",
	"IMPLEMENTATION_COLOR_READ_FORMAT",
	"IMPLEMENTATION_COLOR_READ_TYPE",
	"IMPORT_RULE",
	"INCR",
	"INCR_WRAP",
	"INDEX_SIZE_ERR",
	"INSTALL",
	"INSTALLED",
	"INT",
	"INTERLEAVED_ATTRIBS",
	"INT_2_10_10_10_REV",
	"INT_SAMPLER_2D",
	"INT_SAMPLER_2D_ARRAY",
	"INT_SAMPLER_3D",
	"INT_SAMPLER_CUBE",
	"INT_VEC2",
	"INT_VEC3",
	"INT_VEC4",
	"INUSE_ATTRIBUTE_ERR",
	"INVALID_ACCESS_ERR",
	"INVALID_CHARACTER_ERR",
	"INVALID_ENUM",
	"INVALID_EXPRESSION_ERR",
	"INVALID_FRAMEBUFFER_OPERATION",
	"INVALID_INDEX",
	"INVALID_MODIFICATION_ERR",
	"INVALID_NODE_TYPE_ERR",
	"INVALID_OPERATION",
	"INVALID_STATE_ERR",
	"INVALID_VALUE",
	"INVERSE_DISTANCE",
	"INVERT",
	"IceCandidate",
	"IdleDeadline",
	"Image",
	"ImageBitmap",
	"ImageBitmapRenderingContext",
	"ImageCapture",
	"ImageData",
	"Infinity",
	"InputDeviceCapabilities",
	"InputDeviceInfo",
	"InputEvent",
	"InputMethodContext",
	"InstallState",
	"InstallTrigger",
	"Instance",
	"Int16Array",
	"Int32Array",
	"Int8Array",
	"Intent",
	"InternalError",
	"IntersectionObserver",
	"IntersectionObserverEntry",
	"Intl",
	"IsSearchProviderInstalled",
	"Iterator",
	"JSON",
	"Java Deployment Toolkit 7.0.250.17",
	"Java(TM) Platform SE 7 U25",
	"KEEP",
	"KEYDOWN",
	"KEYFRAMES_RULE",
	"KEYFRAME_RULE",
	"KEYPRESS",
	"KEYUP",
	"Key",
	"KeyEvent",
	"KeyOperation",
	"KeyPair",
	"Keyboard",
	"KeyboardEvent",
	"KeyboardLayoutMap",
	"KeyframeEffect",
	"LENGTHADJUST_SPACING",
	"LENGTHADJUST_SPACINGANDGLYPHS",
	"LENGTHADJUST_UNKNOWN",
	"LEQUAL",
	"LESS",
	"LINEAR",
	"LINEAR_DISTANCE",
	"LINEAR_MIPMAP_LINEAR",
	"LINEAR_MIPMAP_NEAREST",
	"LINES",
	"LINE_LOOP",
	"LINE_STRIP",
	"LINE_WIDTH",
	"LINK_STATUS",
	"LINUX",
	"LIVE",
	"LN10",
	"LN2",
	"LOADED",
	"LOADING",
	"LOCALE",
	"LOG10E",
	"LOG2E",
	"LOWPASS",
	"LOWSHELF",
	"LOW_FLOAT",
	"LOW_INT",
	"LSException",
	"LSParserFilter",
	"LUMINANCE",
	"LUMINANCE_ALPHA",
	"LargestContentfulPaint",
	"LayoutShift",
	"LayoutShiftAttribution",
	"LinearAccelerationSensor",
	"LinkError",
	"ListFormat",
	"LocalMediaStream",
	"Locale",
	"Location",
	"Lock",
	"LockManager",
	"MAC",
	"MAX",
	"MAX_3D_TEXTURE_SIZE",
	"MAX_ARRAY_TEXTURE_LAYERS",
	"MAX_CLIENT_WAIT_TIMEOUT_WEBGL",
	"MAX_COLOR_ATTACHMENTS",
	"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",
	"MAX_COMBINED_TEXTURE_IMAGE_UNITS",
	"MAX_COMBINED_UNIFORM_BLOCKS",
	"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",
	"MAX_CUBE_MAP_TEXTURE_SIZE",
	"MAX_DRAW_BUFFERS",
	"MAX_ELEMENTS_INDICES",
	"MAX_ELEMENTS_VERTICES",
	"MAX_ELEMENT_INDEX",
	"MAX_FRAGMENT_INPUT_COMPONENTS",
	"MAX_FRAGMENT_UNIFORM_BLOCKS",
	"MAX_FRAGMENT_UNIFORM_COMPONENTS",
	"MAX_FRAGMENT_UNIFORM_VECTORS",
	"MAX_PROGRAM_TEXEL_OFFSET",
	"MAX_RENDERBUFFER_SIZE",
	"MAX_SAFE_INTEGER",
	"MAX_SAMPLES",
	"MAX_SERVER_WAIT_TIMEOUT",
	"MAX_TEXTURE_IMAGE_UNITS",
	"MAX_TEXTURE_LOD_BIAS",
	"MAX_TEXTURE_MAX_ANISOTROPY_EXT",
	"MAX_TEXTURE_SIZE",
	"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",
	"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",
	"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",
	"MAX_UNIFORM_BLOCK_SIZE",
	"MAX_UNIFORM_BUFFER_BINDINGS",
	"MAX_VALUE",
	"MAX_VARYING_COMPONENTS",
	"MAX_VARYING_VECTORS",
	"MAX_VERTEX_ATTRIBS",
	"MAX_VERTEX_OUTPUT_COMPONENTS",
	"MAX_VERTEX_TEXTURE_IMAGE_UNITS",
	"MAX_VERTEX_UNIFORM_BLOCKS",
	"MAX_VERTEX_UNIFORM_COMPONENTS",
	"MAX_VERTEX_UNIFORM_VECTORS",
	"MAX_VIEWPORT_DIMS",
	"MEDIA_ERR_ABORTED",
	"MEDIA_ERR_DECODE",
	"MEDIA_ERR_ENCRYPTED",
	"MEDIA_ERR_NETWORK",
	"MEDIA_ERR_SRC_NOT_SUPPORTED",
	"MEDIA_KEYERR_CLIENT",
	"MEDIA_KEYERR_DOMAIN",
	"MEDIA_KEYERR_HARDWARECHANGE",
	"MEDIA_KEYERR_OUTPUT",
	"MEDIA_KEYERR_SERVICE",
	"MEDIA_KEYERR_UNKNOWN",
	"MEDIA_RULE",
	"MEDIUM_FLOAT",
	"MEDIUM_INT",
	"META_MASK",
	"MIDIAccess",
	"MIDIConnectionEvent",
	"MIDIInput",
	"MIDIInputMap",
	"MIDIMessageEvent",
	"MIDIOutput",
	"MIDIOutputMap",
	"MIDIPort",
	"MIN",
	"MIN_PROGRAM_TEXEL_OFFSET",
	"MIN_SAFE_INTEGER",
	"MIN_VALUE",
	"MIRRORED_REPEAT",
	"MODE_ASYNCHRONOUS",
	"MODE_SYNCHRONOUS",
	"MODIFICATION",
	"MOUSEDOWN",
	"MOUSEDRAG",
	"MOUSEMOVE",
	"MOUSEOUT",
	"MOUSEOVER",
	"MOUSEUP",
	"MOZ_KEYFRAMES_RULE",
	"MOZ_KEYFRAME_RULE",
	"MOZ_SOURCE_CURSOR",
	"MOZ_SOURCE_ERASER",
	"MOZ_SOURCE_KEYBOARD",
	"MOZ_SOURCE_MOUSE",
	"MOZ_SOURCE_PEN",
	"MOZ_SOURCE_TOUCH",
	"MOZ_SOURCE_UNKNOWN",
	"MSBehaviorUrnsCollection",
	"MSBlobBuilder",
	"MSCSSMatrix",
	"MSCSSProperties",
	"MSCSSRuleList",
	"MSCompatibleInfo",
	"MSCompatibleInfoCollection",
	"MSCurrentStyleCSSProperties",
	"MSEventObj",
	"MSGESTURE_FLAG_BEGIN",
	"MSGESTURE_FLAG_CANCEL",
	"MSGESTURE_FLAG_END",
	"MSGESTURE_FLAG_INERTIA",
	"MSGESTURE_FLAG_NONE",
	"MSGesture",
	"MSGestureEvent",
	"MSGraphicsTrust",
	"MSInputMethodContext",
	"MSManipulationEvent",
	"MSMediaKeyError",
	"MSMediaKeyMessageEvent",
	"MSMediaKeyNeededEvent",
	"MSMediaKeySession",
	"MSMediaKeys",
	"MSMimeTypesCollection",
	"MSPOINTER_TYPE_MOUSE",
	"MSPOINTER_TYPE_PEN",
	"MSPOINTER_TYPE_TOUCH",
	"MSPluginsCollection",
	"MSPointerEvent",
	"MSRangeCollection",
	"MSSiteModeEvent",
	"MSStream",
	"MSStreamReader",
	"MSStyleCSSProperties",
	"MS_ASYNC_CALLBACK_STATUS_ASSIGN_DELEGATE",
	"MS_ASYNC_CALLBACK_STATUS_CANCEL",
	"MS_ASYNC_CALLBACK_STATUS_CHOOSEANY",
	"MS_ASYNC_CALLBACK_STATUS_ERROR",
	"MS_ASYNC_CALLBACK_STATUS_JOIN",
	"MS_ASYNC_OP_STATUS_CANCELED",
	"MS_ASYNC_OP_STATUS_ERROR",
	"MS_ASYNC_OP_STATUS_SUCCESS",
	"MS_MANIPULATION_STATE_ACTIVE",
	"MS_MANIPULATION_STATE_CANCELLED",
	"MS_MANIPULATION_STATE_COMMITTED",
	"MS_MANIPULATION_STATE_DRAGGING",
	"MS_MANIPULATION_STATE_INERTIA",
	"MS_MANIPULATION_STATE_PRESELECT",
	"MS_MANIPULATION_STATE_SELECTING",
	"MS_MANIPULATION_STATE_STOPPED",
	"MS_MEDIA_ERR_ENCRYPTED",
	"MS_MEDIA_KEYERR_CLIENT",
	"MS_MEDIA_KEYERR_DOMAIN",
	"MS_MEDIA_KEYERR_HARDWARECHANGE",
	"MS_MEDIA_KEYERR_OUTPUT",
	"MS_MEDIA_KEYERR_SERVICE",
	"MS_MEDIA_KEYERR_UNKNOWN",
	"Map",
	"Math",
	"MathMLElement",
	"MediaCapabilities",
	"MediaCapabilitiesInfo",
	"MediaController",
	"MediaDeviceInfo",
	"MediaDevices",
	"MediaElementAudioSourceNode",
	"MediaEncryptedEvent",
	"MediaError",
	"MediaKeyError",
	"MediaKeyEvent",
	"MediaKeyMessageEvent",
	"MediaKeyNeededEvent",
	"MediaKeySession",
	"MediaKeyStatusMap",
	"MediaKeySystemAccess",
	"MediaKeys",
	"MediaList",
	"MediaMetadata",
	"MediaQueryList",
	"MediaQueryListEvent",
	"MediaRecorder",
	"MediaRecorderErrorEvent",
	"MediaSession",
	"MediaSettingsRange",
	"MediaSource",
	"MediaStream",
	"MediaStreamAudioDestinationNode",
	"MediaStreamAudioSourceNode",
	"MediaStreamEvent",
	"MediaStreamTrack",
	"MediaStreamTrackAudioSourceNode",
	"MediaStreamTrackEvent",
	"Memory",
	"MessageChannel",
	"MessageEvent",
	"MessagePort",
	"Methods",
	"Microsoft® DRM",
	"MimeType",
	"MimeTypeArray",
	"Module",
	"MouseEvent",
	"MouseScrollEvent",
	"MouseWheelEvent",
	"MozAnimation",
	"MozAnimationDelay",
	"MozAnimationDirection",
	"MozAnimationDuration",
	"MozAnimationFillMode",
	"MozAnimationIterationCount",
	"MozAnimationName",
	"MozAnimationPlayState",
	"MozAnimationTimingFunction",
	"MozAppearance",
	"MozBackfaceVisibility",
	"MozBinding",
	"MozBorderBottomColors",
	"MozBorderEnd",
	"MozBorderEndColor",
	"MozBorderEndStyle",
	"MozBorderEndWidth",
	"MozBorderImage",
	"MozBorderLeftColors",
	"MozBorderRightColors",
	"MozBorderStart",
	"MozBorderStartColor",
	"MozBorderStartStyle",
	"MozBorderStartWidth",
	"MozBorderTopColors",
	"MozBoxAlign",
	"MozBoxDirection",
	"MozBoxFlex",
	"MozBoxOrdinalGroup",
	"MozBoxOrient",
	"MozBoxPack",
	"MozBoxSizing",
	"MozCSSKeyframeRule",
	"MozCSSKeyframesRule",
	"MozColumnCount",
	"MozColumnFill",
	"MozColumnGap",
	"MozColumnRule",
	"MozColumnRuleColor",
	"MozColumnRuleStyle",
	"MozColumnRuleWidth",
	"MozColumnWidth",
	"MozColumns",
	"MozContactChangeEvent",
	"MozFloatEdge",
	"MozFontFeatureSettings",
	"MozFontLanguageOverride",
	"MozForceBrokenImageIcon",
	"MozHyphens",
	"MozImageRegion",
	"MozMarginEnd",
	"MozMarginStart",
	"MozMmsEvent",
	"MozMmsMessage",
	"MozMobileMessageThread",
	"MozOSXFontSmoothing",
	"MozOrient",
	"MozOutlineRadius",
	"MozOutlineRadiusBottomleft",
	"MozOutlineRadiusBottomright",
	"MozOutlineRadiusTopleft",
	"MozOutlineRadiusTopright",
	"MozPaddingEnd",
	"MozPaddingStart",
	"MozPerspective",
	"MozPerspectiveOrigin",
	"MozPowerManager",
	"MozSettingsEvent",
	"MozSmsEvent",
	"MozSmsMessage",
	"MozStackSizing",
	"MozTabSize",
	"MozTextAlignLast",
	"MozTextDecorationColor",
	"MozTextDecorationLine",
	"MozTextDecorationStyle",
	"MozTextSizeAdjust",
	"MozTransform",
	"MozTransformOrigin",
	"MozTransformStyle",
	"MozTransition",
	"MozTransitionDelay",
	"MozTransitionDuration",
	"MozTransitionProperty",
	"MozTransitionTimingFunction",
	"MozUserFocus",
	"MozUserInput",
	"MozUserModify",
	"MozUserSelect",
	"MozWindowDragging",
	"MozWindowShadow",
	"MutationEvent",
	"MutationObserver",
	"MutationRecord",
	"NAMESPACE_ERR",
	"NAMESPACE_RULE",
	"NEAREST",
	"NEAREST_MIPMAP_LINEAR",
	"NEAREST_MIPMAP_NEAREST",
	"NEGATIVE_INFINITY",
	"NETWORK_EMPTY",
	"NETWORK_ERR",
	"NETWORK_IDLE",
	"NETWORK_LOADED",
	"NETWORK_LOADING",
	"NETWORK_NO_SOURCE",
	"NEVER",
	"NEW",
	"NEXT",
	"NEXT_NO_DUPLICATE",
	"NICEST",
	"NODE_AFTER",
	"NODE_BEFORE",
	"NODE_BEFORE_AND_AFTER",
	"NODE_INSIDE",
	"NONE",
	"NON_TRANSIENT_ERR",
	"NOTATION_NODE",
	"NOTCH",
	"NOTEQUAL",
	"NOT_ALLOWED_ERR",
	"NOT_FOUND_ERR",
	"NOT_INSTALLED",
	"NOT_READABLE_ERR",
	"NOT_SUPPORTED_ERR",
	"NO_DATA_ALLOWED_ERR",
	"NO_ERR",
	"NO_ERROR",
	"NO_MODIFICATION_ALLOWED_ERR",
	"NO_UPDATE",
	"NUMBER_TYPE",
	"NUM_COMPRESSED_TEXTURE_FORMATS",
	"NaN",
	"NamedNodeMap",
	"Native Client",
	"NavigationPreloadManager",
	"Navigator",
	"NearbyLinks",
	"NetworkInformation",
	"Node",
	"NodeFilter",
	"NodeIterator",
	"NodeList",
	"Notation",
	"Notification",
	"NotifyPaintEvent",
	"Number",
	"NumberFormat",
	"OBJECT_TYPE",
	"OBSOLETE",
	"OES_element_index_uint",
	"OES_standard_derivatives",
	"OES_texture_float",
	"OES_texture_float_linear",
	"OK",
	"ONE",
	"ONE_MINUS_CONSTANT_ALPHA",
	"ONE_MINUS_CONSTANT_COLOR",
	"ONE_MINUS_DST_ALPHA",
	"ONE_MINUS_DST_COLOR",
	"ONE_MINUS_SRC_ALPHA",
	"ONE_MINUS_SRC_COLOR",
	"OPEN",
	"OPENBSD",
	"OPENED",
	"OPENING",
	"ORDERED_NODE_ITERATOR_TYPE",
	"ORDERED_NODE_SNAPSHOT_TYPE",
	"OS_UPDATE",
	"OTHER_ERROR",
	"OUT_OF_MEMORY",
	"Object",
	"OfflineAudioCompletionEvent",
	"OfflineAudioContext",
	"OfflineResourceList",
	"OffscreenCanvas",
	"OffscreenCanvasRenderingContext2D",
	"OnInstalledReason",
	"OnRestartRequiredReason",
	"Option",
	"OrientationSensor",
	"OscillatorNode",
	"OverconstrainedError",
	"OverconstrainedErrorEvent",
	"OverflowEvent",
	"PACKAGE",
	"PACK_ALIGNMENT",
	"PACK_ROW_LENGTH",
	"PACK_SKIP_PIXELS",
	"PACK_SKIP_ROWS",
	"PAGE_RULE",
	"PARSE_ERR",
	"PATHSEG_ARC_ABS",
	"PATHSEG_ARC_REL",
	"PATHSEG_CLOSEPATH",
	"PATHSEG_CURVETO_CUBIC_ABS",
	"PATHSEG_CURVETO_CUBIC_REL",
	"PATHSEG_CURVETO_CUBIC_SMOOTH_ABS",
	"PATHSEG_CURVETO_CUBIC_SMOOTH_REL",
	"PATHSEG_CURVETO_QUADRATIC_ABS",
	"PATHSEG_CURVETO_QUADRATIC_REL",
	"PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS",
	"PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL",
	"PATHSEG_LINETO_ABS",
	"PATHSEG_LINETO_HORIZONTAL_ABS",
	"PATHSEG_LINETO_HORIZONTAL_REL",
	"PATHSEG_LINETO_REL",
	"PATHSEG_LINETO_VERTICAL_ABS",
	"PATHSEG_LINETO_VERTICAL_REL",
	"PATHSEG_MOVETO_ABS",
	"PATHSEG_MOVETO_REL",
	"PATHSEG_UNKNOWN",
	"PATH_EXISTS_ERR",
	"PEAKING",
	"PERIODIC",
	"PERMISSION_DENIED",
	"PERSISTENT",
	"PI",
	"PIXEL_PACK_BUFFER",
	"PIXEL_PACK_BUFFER_BINDING",
	"PIXEL_UNPACK_BUFFER",
	"PIXEL_UNPACK_BUFFER_BINDING",
	"PLAYING_STATE",
	"POINTS",
	"POLYGON_OFFSET_FACTOR",
	"POLYGON_OFFSET_FILL",
	"POLYGON_OFFSET_UNITS",
	"POSITION_UNAVAILABLE",
	"POSITIVE_INFINITY",
	"PREV",
	"PREV_NO_DUPLICATE",
	"PROCESSING_INSTRUCTION_NODE",
	"PageChangeEvent",
	"PageTransitionEvent",
	"PaintRequest",
	"PaintRequestList",
	"PannerNode",
	"PasswordCredential",
	"Path2D",
	"PaymentAddress",
	"PaymentInstruments",
	"PaymentManager",
	"PaymentMethodChangeEvent",
	"PaymentRequest",
	"PaymentRequestUpdateEvent",
	"PaymentResponse",
	"Performance",
	"PerformanceElementTiming",
	"PerformanceEntry",
	"PerformanceEventTiming",
	"PerformanceLongTaskTiming",
	"PerformanceMark",
	"PerformanceMeasure",
	"PerformanceNavigation",
	"PerformanceNavigationTiming",
	"PerformanceObserver",
	"PerformanceObserverEntryList",
	"PerformancePaintTiming",
	"PerformanceResourceTiming",
	"PerformanceServerTiming",
	"PerformanceTiming",
	"PeriodicSyncManager",
	"PeriodicWave",
	"PermissionStatus",
	"Permissions",
	"PhotoCapabilities",
	"PictureInPictureWindow",
	"PlatformArch",
	"PlatformNaclArch",
	"PlatformOs",
	"Plugin",
	"PluginArray",
	"PluralRules",
	"PointerEvent",
	"PopStateEvent",
	"PopupBlockedEvent",
	"Position",
	"PositionError",
	"Presentation",
	"PresentationAvailability",
	"PresentationConnection",
	"PresentationConnectionAvailableEvent",
	"PresentationConnectionCloseEvent",
	"PresentationConnectionList",
	"PresentationReceiver",
	"PresentationRequest",
	"ProcessingInstruction",
	"ProgressEvent",
	"Promise",
	"PromiseRejectionEvent",
	"PropertyNodeList",
	"Proxy",
	"PublicKeyCredential",
	"PushManager",
	"PushSubscription",
	"PushSubscriptionOptions",
	"Q",
	"QUERY_RESULT",
	"QUERY_RESULT_AVAILABLE",
	"QUOTA_ERR",
	"QUOTA_EXCEEDED_ERR",
	"QueryInterface",
	"R11F_G11F_B10F",
	"R16F",
	"R16I",
	"R16UI",
	"R32F",
	"R32I",
	"R32UI",
	"R8",
	"R8I",
	"R8UI",
	"R8_SNORM",
	"RASTERIZER_DISCARD",
	"READY_TO_RUN",
	"READ_BUFFER",
	"READ_FRAMEBUFFER",
	"READ_FRAMEBUFFER_BINDING",
	"READ_ONLY",
	"READ_ONLY_ERR",
	"READ_WRITE",
	"RED",
	"RED_BITS",
	"RED_INTEGER",
	"REMOVAL",
	"RENDERBUFFER",
	"RENDERBUFFER_ALPHA_SIZE",
	"RENDERBUFFER_BINDING",
	"RENDERBUFFER_BLUE_SIZE",
	"RENDERBUFFER_DEPTH_SIZE",
	"RENDERBUFFER_GREEN_SIZE",
	"RENDERBUFFER_HEIGHT",
	"RENDERBUFFER_INTERNAL_FORMAT",
	"RENDERBUFFER_RED_SIZE",
	"RENDERBUFFER_SAMPLES",
	"RENDERBUFFER_STENCIL_SIZE",
	"RENDERBUFFER_WIDTH",
	"RENDERER",
	"RENDERING_INTENT_ABSOLUTE_COLORIMETRIC",
	"RENDERING_INTENT_AUTO",
	"RENDERING_INTENT_PERCEPTUAL",
	"RENDERING_INTENT_RELATIVE_COLORIMETRIC",
	"RENDERING_INTENT_SATURATION",
	"RENDERING_INTENT_UNKNOWN",
	"REPEAT",
	"REPLACE",
	"RG",
	"RG16F",
	"RG16I",
	"RG16UI",
	"RG32F",
	"RG32I",
	"RG32UI",
	"RG8",
	"RG8I",
	"RG8UI",
	"RG8_SNORM",
	"RGB",
	"RGB10_A2",
	"RGB10_A2UI",
	"RGB16F",
	"RGB16I",
	"RGB16UI",
	"RGB32F",
	"RGB32I",
	"RGB32UI",
	"RGB565",
	"RGB5_A1",
	"RGB8",
	"RGB8I",
	"RGB8UI",
	"RGB8_SNORM",
	"RGB9_E5",
	"RGBA",
	"RGBA16F",
	"RGBA16I",
	"RGBA16UI",
	"RGBA32F",
	"RGBA32I",
	"RGBA32UI",
	"RGBA4",
	"RGBA8",
	"RGBA8I",
	"RGBA8UI",
	"RGBA8_SNORM",
	"RGBA_INTEGER",
	"RGBColor",
	"RGB_INTEGER",
	"RG_INTEGER",
	"ROTATION_CLOCKWISE",
	"ROTATION_COUNTERCLOCKWISE",
	"RTCCertificate",
	"RTCDTMFSender",
	"RTCDTMFToneChangeEvent",
	"RTCDataChannel",
	"RTCDataChannelEvent",
	"RTCDtlsTransport",
	"RTCError",
	"RTCErrorEvent",
	"RTCIceCandidate",
	"RTCIceTransport",
	"RTCPeerConnection",
	"RTCPeerConnectionIceErrorEvent",
	"RTCPeerConnectionIceEvent",
	"RTCRtpReceiver",
	"RTCRtpSender",
	"RTCRtpTransceiver",
	"RTCSctpTransport",
	"RTCSessionDescription",
	"RTCStatsReport",
	"RTCTrackEvent",
	"RUNNING",
	"RadioNodeList",
	"Range",
	"RangeError",
	"RangeException",
	"ReadableByteStream",
	"ReadableStream",
	"ReadableStreamDefaultReader",
	"RecordErrorEvent",
	"Rect",
	"ReferenceError",
	"Reflect",
	"RegExp",
	"RelativeOrientationSensor",
	"RelativeTimeFormat",
	"RemotePlayback",
	"ReportingObserver",
	"Request",
	"RequestUpdateCheckStatus",
	"ResizeObserver",
	"ResizeObserverEntry",
	"ResizeObserverSize",
	"Response",
	"RunningState",
	"RuntimeError",
	"SAMPLER_2D",
	"SAMPLER_2D_ARRAY",
	"SAMPLER_2D_ARRAY_SHADOW",
	"SAMPLER_2D_SHADOW",
	"SAMPLER_3D",
	"SAMPLER_BINDING",
	"SAMPLER_CUBE",
	"SAMPLER_CUBE_SHADOW",
	"SAMPLES",
	"SAMPLE_ALPHA_TO_COVERAGE",
	"SAMPLE_BUFFERS",
	"SAMPLE_COVERAGE",
	"SAMPLE_COVERAGE_INVERT",
	"SAMPLE_COVERAGE_VALUE",
	"SAWTOOTH",
	"SCHEDULED_STATE",
	"SCISSOR_BOX",
	"SCISSOR_TEST",
	"SCROLL_PAGE_DOWN",
	"SCROLL_PAGE_UP",
	"SDP_ANSWER",
	"SDP_OFFER",
	"SDP_PRANSWER",
	"SECURITY_ERR",
	"SELECT",
	"SEPARATE_ATTRIBS",
	"SERIALIZE_ERR",
	"SEVERITY_ERROR",
	"SEVERITY_FATAL_ERROR",
	"SEVERITY_WARNING",
	"SHADER_COMPILER",
	"SHADER_TYPE",
	"SHADING_LANGUAGE_VERSION",
	"SHARED_MODULE_UPDATE",
	"SHIFT_MASK",
	"SHORT",
	"SHOWING",
	"SHOW_ALL",
	"SHOW_ATTRIBUTE",
	"SHOW_CDATA_SECTION",
	"SHOW_COMMENT",
	"SHOW_DOCUMENT",
	"SHOW_DOCUMENT_FRAGMENT",
	"SHOW_DOCUMENT_TYPE",
	"SHOW_ELEMENT",
	"SHOW_ENTITY",
	"SHOW_ENTITY_REFERENCE",
	"SHOW_NOTATION",
	"SHOW_PROCESSING_INSTRUCTION",
	"SHOW_TEXT",
	"SIGNALED",
	"SIGNED_NORMALIZED",
	"SINE",
	"SKIN",
	"SOUNDFIELD",
	"SQLError",
	"SQLException",
	"SQLResultSet",
	"SQLResultSetRowList",
	"SQLTransaction",
	"SQRT1_2",
	"SQRT2",
	"SQUARE",
	"SRC_ALPHA",
	"SRC_ALPHA_SATURATE",
	"SRC_COLOR",
	"SRGB",
	"SRGB8",
	"SRGB8_ALPHA8",
	"START_TO_END",
	"START_TO_START",
	"STATIC_COPY",
	"STATIC_DRAW",
	"STATIC_READ",
	"STENCIL",
	"STENCIL_ATTACHMENT",
	"STENCIL_BACK_FAIL",
	"STENCIL_BACK_FUNC",
	"STENCIL_BACK_PASS_DEPTH_FAIL",
	"STENCIL_BACK_PASS_DEPTH_PASS",
	"STENCIL_BACK_REF",
	"STENCIL_BACK_VALUE_MASK",
	"STENCIL_BACK_WRITEMASK",
	"STENCIL_BITS",
	"STENCIL_BUFFER_BIT",
	"STENCIL_CLEAR_VALUE",
	"STENCIL_FAIL",
	"STENCIL_FUNC",
	"STENCIL_INDEX",
	"STENCIL_INDEX8",
	"STENCIL_PASS_DEPTH_FAIL",
	"STENCIL_PASS_DEPTH_PASS",
	"STENCIL_REF",
	"STENCIL_TEST",
	"STENCIL_VALUE_MASK",
	"STENCIL_WRITEMASK",
	"STREAM_COPY",
	"STREAM_DRAW",
	"STREAM_READ",
	"STRING_TYPE",
	"STYLE_RULE",
	"SUBPIXEL_BITS",
	"SUPPORTS_RULE",
	"SVGAElement",
	"SVGAltGlyphDefElement",
	"SVGAltGlyphElement",
	"SVGAltGlyphItemElement",
	"SVGAngle",
	"SVGAnimateColorElement",
	"SVGAnimateElement",
	"SVGAnimateMotionElement",
	"SVGAnimateTransformElement",
	"SVGAnimatedAngle",
	"SVGAnimatedBoolean",
	"SVGAnimatedEnumeration",
	"SVGAnimatedInteger",
	"SVGAnimatedLength",
	"SVGAnimatedLengthList",
	"SVGAnimatedNumber",
	"SVGAnimatedNumberList",
	"SVGAnimatedPreserveAspectRatio",
	"SVGAnimatedRect",
	"SVGAnimatedString",
	"SVGAnimatedTransformList",
	"SVGAnimationElement",
	"SVGCircleElement",
	"SVGClipPathElement",
	"SVGColor",
	"SVGComponentTransferFunctionElement",
	"SVGCursorElement",
	"SVGDefsElement",
	"SVGDescElement",
	"SVGDiscardElement",
	"SVGDocument",
	"SVGElement",
	"SVGElementInstance",
	"SVGElementInstanceList",
	"SVGEllipseElement",
	"SVGException",
	"SVGFEBlendElement",
	"SVGFEColorMatrixElement",
	"SVGFEComponentTransferElement",
	"SVGFECompositeElement",
	"SVGFEConvolveMatrixElement",
	"SVGFEDiffuseLightingElement",
	"SVGFEDisplacementMapElement",
	"SVGFEDistantLightElement",
	"SVGFEDropShadowElement",
	"SVGFEFloodElement",
	"SVGFEFuncAElement",
	"SVGFEFuncBElement",
	"SVGFEFuncGElement",
	"SVGFEFuncRElement",
	"SVGFEGaussianBlurElement",
	"SVGFEImageElement",
	"SVGFEMergeElement",
	"SVGFEMergeNodeElement",
	"SVGFEMorphologyElement",
	"SVGFEOffsetElement",
	"SVGFEPointLightElement",
	"SVGFESpecularLightingElement",
	"SVGFESpotLightElement",
	"SVGFETileElement",
	"SVGFETurbulenceElement",
	"SVGFilterElement",
	"SVGFontElement",
	"SVGFontFaceElement",
	"SVGFontFaceFormatElement",
	"SVGFontFaceNameElement",
	"SVGFontFaceSrcElement",
	"SVGFontFaceUriElement",
	"SVGForeignObjectElement",
	"SVGGElement",
	"SVGGeometryElement",
	"SVGGlyphElement",
	"SVGGlyphRefElement",
	"SVGGradientElement",
	"SVGGraphicsElement",
	"SVGHKernElement",
	"SVGImageElement",
	"SVGLength",
	"SVGLengthList",
	"SVGLineElement",
	"SVGLinearGradientElement",
	"SVGMPathElement",
	"SVGMarkerElement",
	"SVGMaskElement",
	"SVGMatrix",
	"SVGMetadataElement",
	"SVGMissingGlyphElement",
	"SVGNumber",
	"SVGNumberList",
	"SVGPaint",
	"SVGPathElement",
	"SVGPathSeg",
	"SVGPathSegArcAbs",
	"SVGPathSegArcRel",
	"SVGPathSegClosePath",
	"SVGPathSegCurvetoCubicAbs",
	"SVGPathSegCurvetoCubicRel",
	"SVGPathSegCurvetoCubicSmoothAbs",
	"SVGPathSegCurvetoCubicSmoothRel",
	"SVGPathSegCurvetoQuadraticAbs",
	"SVGPathSegCurvetoQuadraticRel",
	"SVGPathSegCurvetoQuadraticSmoothAbs",
	"SVGPathSegCurvetoQuadraticSmoothRel",
	"SVGPathSegLinetoAbs",
	"SVGPathSegLinetoHorizontalAbs",
	"SVGPathSegLinetoHorizontalRel",
	"SVGPathSegLinetoRel",
	"SVGPathSegLinetoVerticalAbs",
	"SVGPathSegLinetoVerticalRel",
	"SVGPathSegList",
	"SVGPathSegMovetoAbs",
	"SVGPathSegMovetoRel",
	"SVGPatternElement",
	"SVGPoint",
	"SVGPointList",
	"SVGPolygonElement",
	"SVGPolylineElement",
	"SVGPreserveAspectRatio",
	"SVGRadialGradientElement",
	"SVGRect",
	"SVGRectElement",
	"SVGRenderingIntent",
	"SVGSVGElement",
	"SVGScriptElement",
	"SVGSetElement",
	"SVGStopElement",
	"SVGStringList",
	"SVGStyleElement",
	"SVGSwitchElement",
	"SVGSymbolElement",
	"SVGTRefElement",
	"SVGTSpanElement",
	"SVGTextContentElement",
	"SVGTextElement",
	"SVGTextPathElement",
	"SVGTextPositioningElement",
	"SVGTitleElement",
	"SVGTransform",
	"SVGTransformList",
	"SVGUnitTypes",
	"SVGUseElement",
	"SVGVKernElement",
	"SVGViewElement",
	"SVGViewSpec",
	"SVGZoomAndPan",
	"SVGZoomEvent",
	"SVG_ANGLETYPE_DEG",
	"SVG_ANGLETYPE_GRAD",
	"SVG_ANGLETYPE_RAD",
	"SVG_ANGLETYPE_UNKNOWN",
	"SVG_ANGLETYPE_UNSPECIFIED",
	"SVG_CHANNEL_A",
	"SVG_CHANNEL_B",
	"SVG_CHANNEL_G",
	"SVG_CHANNEL_R",
	"SVG_CHANNEL_UNKNOWN",
	"SVG_COLORTYPE_CURRENTCOLOR",
	"SVG_COLORTYPE_RGBCOLOR",
	"SVG_COLORTYPE_RGBCOLOR_ICCCOLOR",
	"SVG_COLORTYPE_UNKNOWN",
	"SVG_EDGEMODE_DUPLICATE",
	"SVG_EDGEMODE_NONE",
	"SVG_EDGEMODE_UNKNOWN",
	"SVG_EDGEMODE_WRAP",
	"SVG_FEBLEND_MODE_COLOR",
	"SVG_FEBLEND_MODE_COLOR_BURN",
	"SVG_FEBLEND_MODE_COLOR_DODGE",
	"SVG_FEBLEND_MODE_DARKEN",
	"SVG_FEBLEND_MODE_DIFFERENCE",
	"SVG_FEBLEND_MODE_EXCLUSION",
	"SVG_FEBLEND_MODE_HARD_LIGHT",
	"SVG_FEBLEND_MODE_HUE",
	"SVG_FEBLEND_MODE_LIGHTEN",
	"SVG_FEBLEND_MODE_LUMINOSITY",
	"SVG_FEBLEND_MODE_MULTIPLY",
	"SVG_FEBLEND_MODE_NORMAL",
	"SVG_FEBLEND_MODE_OVERLAY",
	"SVG_FEBLEND_MODE_SATURATION",
	"SVG_FEBLEND_MODE_SCREEN",
	"SVG_FEBLEND_MODE_SOFT_LIGHT",
	"SVG_FEBLEND_MODE_UNKNOWN",
	"SVG_FECOLORMATRIX_TYPE_HUEROTATE",
	"SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA",
	"SVG_FECOLORMATRIX_TYPE_MATRIX",
	"SVG_FECOLORMATRIX_TYPE_SATURATE",
	"SVG_FECOLORMATRIX_TYPE_UNKNOWN",
	"SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE",
	"SVG_FECOMPONENTTRANSFER_TYPE_GAMMA",
	"SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY",
	"SVG_FECOMPONENTTRANSFER_TYPE_LINEAR",
	"SVG_FECOMPONENTTRANSFER_TYPE_TABLE",
	"SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN",
	"SVG_FECOMPOSITE_OPERATOR_ARITHMETIC",
	"SVG_FECOMPOSITE_OPERATOR_ATOP",
	"SVG_FECOMPOSITE_OPERATOR_IN",
	"SVG_FECOMPOSITE_OPERATOR_OUT",
	"SVG_FECOMPOSITE_OPERATOR_OVER",
	"SVG_FECOMPOSITE_OPERATOR_UNKNOWN",
	"SVG_FECOMPOSITE_OPERATOR_XOR",
	"SVG_INVALID_VALUE_ERR",
	"SVG_LENGTHTYPE_CM",
	"SVG_LENGTHTYPE_EMS",
	"SVG_LENGTHTYPE_EXS",
	"SVG_LENGTHTYPE_IN",
	"SVG_LENGTHTYPE_MM",
	"SVG_LENGTHTYPE_NUMBER",
	"SVG_LENGTHTYPE_PC",
	"SVG_LENGTHTYPE_PERCENTAGE",
	"SVG_LENGTHTYPE_PT",
	"SVG_LENGTHTYPE_PX",
	"SVG_LENGTHTYPE_UNKNOWN",
	"SVG_MARKERUNITS_STROKEWIDTH",
	"SVG_MARKERUNITS_UNKNOWN",
	"SVG_MARKERUNITS_USERSPACEONUSE",
	"SVG_MARKER_ORIENT_ANGLE",
	"SVG_MARKER_ORIENT_AUTO",
	"SVG_MARKER_ORIENT_UNKNOWN",
	"SVG_MASKTYPE_ALPHA",
	"SVG_MASKTYPE_LUMINANCE",
	"SVG_MATRIX_NOT_INVERTABLE",
	"SVG_MEETORSLICE_MEET",
	"SVG_MEETORSLICE_SLICE",
	"SVG_MEETORSLICE_UNKNOWN",
	"SVG_MORPHOLOGY_OPERATOR_DILATE",
	"SVG_MORPHOLOGY_OPERATOR_ERODE",
	"SVG_MORPHOLOGY_OPERATOR_UNKNOWN",
	"SVG_PAINTTYPE_CURRENTCOLOR",
	"SVG_PAINTTYPE_NONE",
	"SVG_PAINTTYPE_RGBCOLOR",
	"SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR",
	"SVG_PAINTTYPE_UNKNOWN",
	"SVG_PAINTTYPE_URI",
	"SVG_PAINTTYPE_URI_CURRENTCOLOR",
	"SVG_PAINTTYPE_URI_NONE",
	"SVG_PAINTTYPE_URI_RGBCOLOR",
	"SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR",
	"SVG_PRESERVEASPECTRATIO_NONE",
	"SVG_PRESERVEASPECTRATIO_UNKNOWN",
	"SVG_PRESERVEASPECTRATIO_XMAXYMAX",
	"SVG_PRESERVEASPECTRATIO_XMAXYMID",
	"SVG_PRESERVEASPECTRATIO_XMAXYMIN",
	"SVG_PRESERVEASPECTRATIO_XMIDYMAX",
	"SVG_PRESERVEASPECTRATIO_XMIDYMID",
	"SVG_PRESERVEASPECTRATIO_XMIDYMIN",
	"SVG_PRESERVEASPECTRATIO_XMINYMAX",
	"SVG_PRESERVEASPECTRATIO_XMINYMID",
	"SVG_PRESERVEASPECTRATIO_XMINYMIN",
	"SVG_SPREADMETHOD_PAD",
	"SVG_SPREADMETHOD_REFLECT",
	"SVG_SPREADMETHOD_REPEAT",
	"SVG_SPREADMETHOD_UNKNOWN",
	"SVG_STITCHTYPE_NOSTITCH",
	"SVG_STITCHTYPE_STITCH",
	"SVG_STITCHTYPE_UNKNOWN",
	"SVG_TRANSFORM_MATRIX",
	"SVG_TRANSFORM_ROTATE",
	"SVG_TRANSFORM_SCALE",
	"SVG_TRANSFORM_SKEWX",
	"SVG_TRANSFORM_SKEWY",
	"SVG_TRANSFORM_TRANSLATE",
	"SVG_TRANSFORM_UNKNOWN",
	"SVG_TURBULENCE_TYPE_FRACTALNOISE",
	"SVG_TURBULENCE_TYPE_TURBULENCE",
	"SVG_TURBULENCE_TYPE_UNKNOWN",
	"SVG_UNIT_TYPE_OBJECTBOUNDINGBOX",
	"SVG_UNIT_TYPE_UNKNOWN",
	"SVG_UNIT_TYPE_USERSPACEONUSE",
	"SVG_WRONG_TYPE_ERR",
	"SVG_ZOOMANDPAN_DISABLE",
	"SVG_ZOOMANDPAN_MAGNIFY",
	"SVG_ZOOMANDPAN_UNKNOWN",
	"SYNC_CONDITION",
	"SYNC_FENCE",
	"SYNC_FLAGS",
	"SYNC_FLUSH_COMMANDS_BIT",
	"SYNC_GPU_COMMANDS_COMPLETE",
	"SYNC_STATUS",
	"SYNTAX_ERR",
	"SavedPages",
	"Screen",
	"ScreenOrientation",
	"Script",
	"ScriptEngine",
	"ScriptEngineBuildVersion",
	"ScriptEngineMajorVersion",
	"ScriptEngineMinorVersion",
	"ScriptProcessorNode",
	"ScrollAreaEvent",
	"SecurityPolicyViolationEvent",
	"Selection",
	"Sensor",
	"SensorErrorEvent",
	"ServiceWorker",
	"ServiceWorkerContainer",
	"ServiceWorkerMessageEvent",
	"ServiceWorkerRegistration",
	"SessionDescription",
	"Set",
	"ShadowRoot",
	"SharedArrayBuffer",
	"SharedWorker",
	"SimpleGestureEvent",
	"SourceBuffer",
	"SourceBufferList",
	"SpeechSynthesis",
	"SpeechSynthesisErrorEvent",
	"SpeechSynthesisEvent",
	"SpeechSynthesisUtterance",
	"SpeechSynthesisVoice",
	"StaticRange",
	"StereoPannerNode",
	"StopIteration",
	"Storage",
	"StorageEvent",
	"StorageManager",
	"String",
	"StyleMedia",
	"StylePropertyMap",
	"StylePropertyMapReadOnly",
	"StyleSheet",
	"StyleSheetList",
	"StyleSheetPageList",
	"SubmitEvent",
	"SubtleCrypto",
	"Symbol",
	"SyncManager",
	"SyntaxError",
	"TEMPORARY",
	"TEXTPATH_METHODTYPE_ALIGN",
	"TEXTPATH_METHODTYPE_STRETCH",
	"TEXTPATH_METHODTYPE_UNKNOWN",
	"TEXTPATH_SPACINGTYPE_AUTO",
	"TEXTPATH_SPACINGTYPE_EXACT",
	"TEXTPATH_SPACINGTYPE_UNKNOWN",
	"TEXTURE",
	"TEXTURE0",
	"TEXTURE1",
	"TEXTURE10",
	"TEXTURE11",
	"TEXTURE12",
	"TEXTURE13",
	"TEXTURE14",
	"TEXTURE15",
	"TEXTURE16",
	"TEXTURE17",
	"TEXTURE18",
	"TEXTURE19",
	"TEXTURE2",
	"TEXTURE20",
	"TEXTURE21",
	"TEXTURE22",
	"TEXTURE23",
	"TEXTURE24",
	"TEXTURE25",
	"TEXTURE26",
	"TEXTURE27",
	"TEXTURE28",
	"TEXTURE29",
	"TEXTURE3",
	"TEXTURE30",
	"TEXTURE31",
	"TEXTURE4",
	"TEXTURE5",
	"TEXTURE6",
	"TEXTURE7",
	"TEXTURE8",
	"TEXTURE9",
	"TEXTURE_2D",
	"TEXTURE_2D_ARRAY",
	"TEXTURE_3D",
	"TEXTURE_BASE_LEVEL",
	"TEXTURE_BINDING_2D",
	"TEXTURE_BINDING_2D_ARRAY",
	"TEXTURE_BINDING_3D",
	"TEXTURE_BINDING_CUBE_MAP",
	"TEXTURE_COMPARE_FUNC",
	"TEXTURE_COMPARE_MODE",
	"TEXTURE_CUBE_MAP",
	"TEXTURE_CUBE_MAP_NEGATIVE_X",
	"TEXTURE_CUBE_MAP_NEGATIVE_Y",
	"TEXTURE_CUBE_MAP_NEGATIVE_Z",
	"TEXTURE_CUBE_MAP_POSITIVE_X",
	"TEXTURE_CUBE_MAP_POSITIVE_Y",
	"TEXTURE_CUBE_MAP_POSITIVE_Z",
	"TEXTURE_IMMUTABLE_FORMAT",
	"TEXTURE_IMMUTABLE_LEVELS",
	"TEXTURE_MAG_FILTER",
	"TEXTURE_MAX_ANISOTROPY_EXT",
	"TEXTURE_MAX_LEVEL",
	"TEXTURE_MAX_LOD",
	"TEXTURE_MIN_FILTER",
	"TEXTURE_MIN_LOD",
	"TEXTURE_WRAP_R",
	"TEXTURE_WRAP_S",
	"TEXTURE_WRAP_T",
	"TEXT_NODE",
	"THROTTLED",
	"TIMEOUT",
	"TIMEOUT_ERR",
	"TIMEOUT_EXPIRED",
	"TIMEOUT_IGNORED",
	"TOO_LARGE_ERR",
	"TRANSACTION_INACTIVE_ERR",
	"TRANSFORM_FEEDBACK",
	"TRANSFORM_FEEDBACK_ACTIVE",
	"TRANSFORM_FEEDBACK_BINDING",
	"TRANSFORM_FEEDBACK_BUFFER",
	"TRANSFORM_FEEDBACK_BUFFER_BINDING",
	"TRANSFORM_FEEDBACK_BUFFER_MODE",
	"TRANSFORM_FEEDBACK_BUFFER_SIZE",
	"TRANSFORM_FEEDBACK_BUFFER_START",
	"TRANSFORM_FEEDBACK_PAUSED",
	"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",
	"TRANSFORM_FEEDBACK_VARYINGS",
	"TRIANGLE",
	"TRIANGLES",
	"TRIANGLE_FAN",
	"TRIANGLE_STRIP",
	"TYPE_BACK_FORWARD",
	"TYPE_ERR",
	"TYPE_MISMATCH_ERR",
	"TYPE_NAVIGATE",
	"TYPE_RELOAD",
	"TYPE_RESERVED",
	"Table",
	"TaskAttributionTiming",
	"Text",
	"TextDecoder",
	"TextDecoderStream",
	"TextEncoder",
	"TextEncoderStream",
	"TextEvent",
	"TextMetrics",
	"TextRange",
	"TextRangeCollection",
	"TextTrack",
	"TextTrackCue",
	"TextTrackCueList",
	"TextTrackList",
	"TimeEvent",
	"TimeRanges",
	"Touch",
	"TouchEvent",
	"TouchList",
	"TrackEvent",
	"TransformStream",
	"TransitionEvent",
	"TreeWalker",
	"TrustedHTML",
	"TrustedScript",
	"TrustedScriptURL",
	"TrustedTypePolicy",
	"TrustedTypePolicyFactory",
	"TypeError",
	"U2F",
	"UIEvent",
	"UNCACHED",
	"UNIFORM_ARRAY_STRIDE",
	"UNIFORM_BLOCK_ACTIVE_UNIFORMS",
	"UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",
	"UNIFORM_BLOCK_BINDING",
	"UNIFORM_BLOCK_DATA_SIZE",
	"UNIFORM_BLOCK_INDEX",
	"UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",
	"UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",
	"UNIFORM_BUFFER",
	"UNIFORM_BUFFER_BINDING",
	"UNIFORM_BUFFER_OFFSET_ALIGNMENT",
	"UNIFORM_BUFFER_SIZE",
	"UNIFORM_BUFFER_START",
	"UNIFORM_IS_ROW_MAJOR",
	"UNIFORM_MATRIX_STRIDE",
	"UNIFORM_OFFSET",
	"UNIFORM_SIZE",
	"UNIFORM_TYPE",
	"UNKNOWN_ERR",
	"UNKNOWN_RULE",
	"UNMASKED_RENDERER_WEBGL",
	"UNMASKED_VENDOR_WEBGL",
	"UNORDERED_NODE_ITERATOR_TYPE",
	"UNORDERED_NODE_SNAPSHOT_TYPE",
	"UNPACK_ALIGNMENT",
	"UNPACK_COLORSPACE_CONVERSION_WEBGL",
	"UNPACK_FLIP_Y_WEBGL",
	"UNPACK_IMAGE_HEIGHT",
	"UNPACK_PREMULTIPLY_ALPHA_WEBGL",
	"UNPACK_ROW_LENGTH",
	"UNPACK_SKIP_IMAGES",
	"UNPACK_SKIP_PIXELS",
	"UNPACK_SKIP_ROWS",
	"UNSCHEDULED_STATE",
	"UNSENT",
	"UNSIGNALED",
	"UNSIGNED_BYTE",
	"UNSIGNED_INT",
	"UNSIGNED_INT_10F_11F_11F_REV",
	"UNSIGNED_INT_24_8",
	"UNSIGNED_INT_2_10_10_10_REV",
	"UNSIGNED_INT_5_9_9_9_REV",
	"UNSIGNED_INT_SAMPLER_2D",
	"UNSIGNED_INT_SAMPLER_2D_ARRAY",
	"UNSIGNED_INT_SAMPLER_3D",
	"UNSIGNED_INT_SAMPLER_CUBE",
	"UNSIGNED_INT_VEC2",
	"UNSIGNED_INT_VEC3",
	"UNSIGNED_INT_VEC4",
	"UNSIGNED_NORMALIZED",
	"UNSIGNED_SHORT",
	"UNSIGNED_SHORT_4_4_4_4",
	"UNSIGNED_SHORT_5_5_5_1",
	"UNSIGNED_SHORT_5_6_5",
	"UNSPECIFIED_EVENT_TYPE_ERR",
	"UPDATE",
	"UPDATEREADY",
	"UPDATE_AVAILABLE",
	"URIError",
	"URL",
	"URLSearchParams",
	"URLUnencoded",
	"URL_MISMATCH_ERR",
	"USB",
	"USBAlternateInterface",
	"USBConfiguration",
	"USBConnectionEvent",
	"USBDevice",
	"USBEndpoint",
	"USBInTransferResult",
	"USBInterface",
	"USBIsochronousInTransferPacket",
	"USBIsochronousInTransferResult",
	"USBIsochronousOutTransferPacket",
	"USBIsochronousOutTransferResult",
	"USBOutTransferResult",
	"UTC",
	"Uint16Array",
	"Uint32Array",
	"Uint8Array",
	"Uint8ClampedArray",
	"UserActivation",
	"UserMessageHandler",
	"UserMessageHandlersNamespace",
	"UserProximityEvent",
	"VALIDATE_STATUS",
	"VALIDATION_ERR",
	"VARIABLES_RULE",
	"VBArray",
	"VENDOR",
	"VERSION",
	"VERSION_CHANGE",
	"VERSION_ERR",
	"VERTEX_ARRAY_BINDING",
	"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
	"VERTEX_ATTRIB_ARRAY_DIVISOR",
	"VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE",
	"VERTEX_ATTRIB_ARRAY_ENABLED",
	"VERTEX_ATTRIB_ARRAY_INTEGER",
	"VERTEX_ATTRIB_ARRAY_NORMALIZED",
	"VERTEX_ATTRIB_ARRAY_POINTER",
	"VERTEX_ATTRIB_ARRAY_SIZE",
	"VERTEX_ATTRIB_ARRAY_STRIDE",
	"VERTEX_ATTRIB_ARRAY_TYPE",
	"VERTEX_SHADER",
	"VERTICAL",
	"VERTICAL_AXIS",
	"VER_ERR",
	"VIEWPORT",
	"VIEWPORT_RULE",
	"VRDisplay",
	"VRDisplayCapabilities",
	"VRDisplayEvent",
	"VREyeParameters",
	"VRFieldOfView",
	"VRFrameData",
	"VRPose",
	"VRStageParameters",
	"VTTCue",
	"VTTRegion",
	"ValidityState",
	"VideoPlaybackQuality",
	"VideoStreamTrack",
	"VideoTrack",
	"VideoTrackList",
	"VisualViewport",
	"WAIT_FAILED",
	"WEBGL_compressed_texture_s3tc",
	"WEBGL_debug_renderer_info",
	"WEBKIT_FILTER_RULE",
	"WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN",
	"WEBKIT_FORCE_AT_MOUSE_DOWN",
	"WEBKIT_KEYFRAMES_RULE",
	"WEBKIT_KEYFRAME_RULE",
	"WEBKIT_REGION_RULE",
	"WIN",
	"WRONG_DOCUMENT_ERR",
	"WakeLock",
	"WakeLockSentinel",
	"WaveShaperNode",
	"WeakMap",
	"WeakRef",
	"WeakSet",
	"WebAssembly",
	"WebGL2RenderingContext",
	"WebGLActiveInfo",
	"WebGLBuffer",
	"WebGLContextEvent",
	"WebGLFramebuffer",
	"WebGLObject",
	"WebGLProgram",
	"WebGLQuery",
	"WebGLRenderbuffer",
	"WebGLRenderingContext",
	"WebGLSampler",
	"WebGLShader",
	"WebGLShaderPrecisionFormat",
	"WebGLSync",
	"WebGLTexture",
	"WebGLTransformFeedback",
	"WebGLUniformLocation",
	"WebGLVertexArray",
	"WebGLVertexArrayObject",
	"WebKit built-in PDF",
	"WebKitAnimationEvent",
	"WebKitBlobBuilder",
	"WebKitCSSFilterRule",
	"WebKitCSSFilterValue",
	"WebKitCSSKeyframeRule",
	"WebKitCSSKeyframesRule",
	"WebKitCSSMatrix",
	"WebKitCSSRegionRule",
	"WebKitCSSTransformValue",
	"WebKitDataCue",
	"WebKitGamepad",
	"WebKitMediaKeyError",
	"WebKitMediaKeyMessageEvent",
	"WebKitMediaKeyNeededEvent",
	"WebKitMediaKeySession",
	"WebKitMediaKeys",
	"WebKitMediaSource",
	"WebKitMutationObserver",
	"WebKitNamespace",
	"WebKitPlaybackTargetAvailabilityEvent",
	"WebKitPoint",
	"WebKitShadowRoot",
	"WebKitSourceBuffer",
	"WebKitSourceBufferList",
	"WebKitTransitionEvent",
	"WebSocket",
	"WebkitAlignContent",
	"WebkitAlignItems",
	"WebkitAlignSelf",
	"WebkitAnimation",
	"WebkitAnimationDelay",
	"WebkitAnimationDirection",
	"WebkitAnimationDuration",
	"WebkitAnimationFillMode",
	"WebkitAnimationIterationCount",
	"WebkitAnimationName",
	"WebkitAnimationPlayState",
	"WebkitAnimationTimingFunction",
	"WebkitAppearance",
	"WebkitBackfaceVisibility",
	"WebkitBackgroundClip",
	"WebkitBackgroundOrigin",
	"WebkitBackgroundSize",
	"WebkitBorderBottomLeftRadius",
	"WebkitBorderBottomRightRadius",
	"WebkitBorderImage",
	"WebkitBorderRadius",
	"WebkitBorderTopLeftRadius",
	"WebkitBorderTopRightRadius",
	"WebkitBoxAlign",
	"WebkitBoxDirection",
	"WebkitBoxFlex",
	"WebkitBoxOrdinalGroup",
	"WebkitBoxOrient",
	"WebkitBoxPack",
	"WebkitBoxShadow",
	"WebkitBoxSizing",
	"WebkitFilter",
	"WebkitFlex",
	"WebkitFlexBasis",
	"WebkitFlexDirection",
	"WebkitFlexFlow",
	"WebkitFlexGrow",
	"WebkitFlexShrink",
	"WebkitFlexWrap",
	"WebkitJustifyContent",
	"WebkitLineClamp",
	"WebkitMask",
	"WebkitMaskClip",
	"WebkitMaskComposite",
	"WebkitMaskImage",
	"WebkitMaskOrigin",
	"WebkitMaskPosition",
	"WebkitMaskPositionX",
	"WebkitMaskPositionY",
	"WebkitMaskRepeat",
	"WebkitMaskSize",
	"WebkitOrder",
	"WebkitPerspective",
	"WebkitPerspectiveOrigin",
	"WebkitTextFillColor",
	"WebkitTextSizeAdjust",
	"WebkitTextStroke",
	"WebkitTextStrokeColor",
	"WebkitTextStrokeWidth",
	"WebkitTransform",
	"WebkitTransformOrigin",
	"WebkitTransformStyle",
	"WebkitTransition",
	"WebkitTransitionDelay",
	"WebkitTransitionDuration",
	"WebkitTransitionProperty",
	"WebkitTransitionTimingFunction",
	"WebkitUserSelect",
	"WheelEvent",
	"Window",
	"Windows Media Player Plug-in Dynamic Link Library",
	"Windows Presentation Foundation",
	"Worker",
	"Worklet",
	"WritableStream",
	"WritableStreamDefaultWriter",
	"X86_32",
	"X86_64",
	"XMLDocument",
	"XMLHttpRequest",
	"XMLHttpRequestEventTarget",
	"XMLHttpRequestException",
	"XMLHttpRequestProgressEvent",
	"XMLHttpRequestUpload",
	"XMLSerializer",
	"XMLStylesheetProcessingInstruction",
	"XPathEvaluator",
	"XPathException",
	"XPathExpression",
	"XPathNSResolver",
	"XPathResult",
	"XR",
	"XRBoundedReferenceSpace",
	"XRDOMOverlayState",
	"XRFrame",
	"XRHitTestResult",
	"XRHitTestSource",
	"XRInputSource",
	"XRInputSourceArray",
	"XRInputSourceEvent",
	"XRInputSourcesChangeEvent",
	"XRLayer",
	"XRPose",
	"XRRay",
	"XRReferenceSpace",
	"XRReferenceSpaceEvent",
	"XRRenderState",
	"XRRigidTransform",
	"XRSession",
	"XRSessionEvent",
	"XRSpace",
	"XRSystem",
	"XRTransientInputHitTestResult",
	"XRTransientInputHitTestSource",
	"XRView",
	"XRViewerPose",
	"XRViewport",
	"XRWebGLLayer",
	"XSLTProcessor",
	"ZERO",
	"_XD0M_",
	"_YD0M_",
	"__defineGetter__",
	"__defineSetter__",
	"__lookupGetter__",
	"__lookupSetter__",
	"__opera",
	"__proto__",
	"__relevantExtensionKeys",
	"_browserjsran",
	"a",
	"aLink",
	"abbr",
	"abort",
	"aborted",
	"abs",
	"absolute",
	"acceleration",
	"accelerationIncludingGravity",
	"accelerator",
	"accept",
	"acceptCharset",
	"acceptNode",
	"accessKey",
	"accessKeyLabel",
	"accuracy",
	"acos",
	"acosh",
	"action",
	"actionURL",
	"actions",
	"activated",
	"active",
	"activeCues",
	"activeElement",
	"activeSourceBuffers",
	"activeSourceCount",
	"activeTexture",
	"activeVRDisplays",
	"actualBoundingBoxAscent",
	"actualBoundingBoxDescent",
	"actualBoundingBoxLeft",
	"actualBoundingBoxRight",
	"add",
	"addAll",
	"addBehavior",
	"addCandidate",
	"addColorStop",
	"addCue",
	"addElement",
	"addEventListener",
	"addFilter",
	"addFromString",
	"addFromUri",
	"addIceCandidate",
	"addImport",
	"addListener",
	"addModule",
	"addNamed",
	"addPageRule",
	"addPath",
	"addPointer",
	"addRange",
	"addRegion",
	"addRule",
	"addRules",
	"addSearchEngine",
	"addSourceBuffer",
	"addStream",
	"addTextTrack",
	"addTrack",
	"addTransceiver",
	"addWakeLockListener",
	"added",
	"addedNodes",
	"additionalName",
	"additiveSymbols",
	"addons",
	"address",
	"addressLine",
	"adoptNode",
	"adoptText",
	"adoptedCallback",
	"adoptedStyleSheets",
	"adr",
	"advance",
	"after",
	"album",
	"alert",
	"algorithm",
	"align",
	"align-content",
	"align-items",
	"align-self",
	"alignContent",
	"alignItems",
	"alignSelf",
	"alignmentBaseline",
	"alinkColor",
	"all",
	"allSettled",
	"allow",
	"allowFullscreen",
	"allowPaymentRequest",
	"allowTransparency",
	"allowedDirections",
	"allowedFeatures",
	"allowsFeature",
	"alpha",
	"alphabeticBaseline",
	"alt",
	"altGraphKey",
	"altHtml",
	"altKey",
	"altLeft",
	"alternate",
	"alternateSetting",
	"alternates",
	"altitude",
	"altitudeAccuracy",
	"amplitude",
	"ancestorOrigins",
	"anchor",
	"anchorNode",
	"anchorOffset",
	"anchors",
	"and",
	"angle",
	"angularAcceleration",
	"angularVelocity",
	"animVal",
	"animate",
	"animatedInstanceRoot",
	"animatedNormalizedPathSegList",
	"animatedPathSegList",
	"animatedPoints",
	"animation",
	"animation-delay",
	"animation-direction",
	"animation-duration",
	"animation-fill-mode",
	"animation-iteration-count",
	"animation-name",
	"animation-play-state",
	"animation-timing-function",
	"animationDelay",
	"animationDirection",
	"animationDuration",
	"animationFillMode",
	"animationIterationCount",
	"animationName",
	"animationPlayState",
	"animationStartTime",
	"animationTimingFunction",
	"animationsPaused",
	"anniversary",
	"antialias",
	"any",
	"app",
	"appCodeName",
	"appMinorVersion",
	"appName",
	"appNotifications",
	"appVersion",
	"appearance",
	"append",
	"appendBuffer",
	"appendChild",
	"appendData",
	"appendItem",
	"appendMedium",
	"appendNamed",
	"appendRule",
	"appendStream",
	"appendWindowEnd",
	"appendWindowStart",
	"appleTrailingWord",
	"applets",
	"application/apple-default-browser",
	"application/asx",
	"application/java-deployment-toolkit",
	"application/pdf",
	"application/postscript",
	"application/x-drm",
	"application/x-drm-v2",
	"application/x-google-chrome-pdf",
	"application/x-java-applet",
	"application/x-java-applet;deploy=10.25.2",
	"application/x-java-applet;javafx=2.2.25",
	"application/x-java-applet;jpi-version=1.7.0_25",
	"application/x-java-applet;version=1.1",
	"application/x-java-applet;version=1.1.1",
	"application/x-java-applet;version=1.1.2",
	"application/x-java-applet;version=1.1.3",
	"application/x-java-applet;version=1.2",
	"application/x-java-applet;version=1.2.1",
	"application/x-java-applet;version=1.2.2",
	"application/x-java-applet;version=1.3",
	"application/x-java-applet;version=1.3.1",
	"application/x-java-applet;version=1.4",
	"application/x-java-applet;version=1.4.1",
	"application/x-java-applet;version=1.4.2",
	"application/x-java-applet;version=1.5",
	"application/x-java-applet;version=1.6",
	"application/x-java-applet;version=1.7",
	"application/x-java-bean",
	"application/x-java-bean;jpi-version=1.7.0_25",
	"application/x-java-bean;version=1.1",
	"application/x-java-bean;version=1.1.1",
	"application/x-java-bean;version=1.1.2",
	"application/x-java-bean;version=1.1.3",
	"application/x-java-bean;version=1.2",
	"application/x-java-bean;version=1.2.1",
	"application/x-java-bean;version=1.2.2",
	"application/x-java-bean;version=1.3",
	"application/x-java-bean;version=1.3.1",
	"application/x-java-bean;version=1.4",
	"application/x-java-bean;version=1.4.1",
	"application/x-java-bean;version=1.4.2",
	"application/x-java-bean;version=1.5",
	"application/x-java-bean;version=1.6",
	"application/x-java-bean;version=1.7",
	"application/x-java-vm",
	"application/x-java-vm-npruntime",
	"application/x-mplayer2",
	"application/x-ms-xbap",
	"application/x-nacl",
	"application/x-pnacl",
	"application/xaml+xml",
	"applicationCache",
	"applicationServerKey",
	"apply",
	"applyConstraints",
	"applyElement",
	"arc",
	"arcTo",
	"archive",
	"areas",
	"arguments",
	"aria-activedescendant",
	"aria-busy",
	"aria-checked",
	"aria-controls",
	"aria-describedby",
	"aria-disabled",
	"aria-expanded",
	"aria-flowto",
	"aria-haspopup",
	"aria-hidden",
	"aria-invalid",
	"aria-labelledby",
	"aria-level",
	"aria-live",
	"aria-multiselectable",
	"aria-owns",
	"aria-posinset",
	"aria-pressed",
	"aria-readonly",
	"aria-relevant",
	"aria-required",
	"aria-secret",
	"aria-selected",
	"aria-setsize",
	"aria-valuemax",
	"aria-valuemin",
	"aria-valuenow",
	"ariaAtomic",
	"ariaAutoComplete",
	"ariaBusy",
	"ariaChecked",
	"ariaColCount",
	"ariaColIndex",
	"ariaColSpan",
	"ariaCurrent",
	"ariaDescription",
	"ariaDisabled",
	"ariaExpanded",
	"ariaHasPopup",
	"ariaHidden",
	"ariaKeyShortcuts",
	"ariaLabel",
	"ariaLevel",
	"ariaLive",
	"ariaModal",
	"ariaMultiLine",
	"ariaMultiSelectable",
	"ariaOrientation",
	"ariaPlaceholder",
	"ariaPosInSet",
	"ariaPressed",
	"ariaReadOnly",
	"ariaRelevant",
	"ariaRequired",
	"ariaRoleDescription",
	"ariaRowCount",
	"ariaRowIndex",
	"ariaRowSpan",
	"ariaSelected",
	"ariaSetSize",
	"ariaSort",
	"ariaValueMax",
	"ariaValueMin",
	"ariaValueNow",
	"ariaValueText",
	"arrayBuffer",
	"artist",
	"artwork",
	"as",
	"asIntN",
	"asUintN",
	"asin",
	"asinh",
	"assert",
	"assign",
	"assignedElements",
	"assignedNodes",
	"assignedSlot",
	"async",
	"asyncIterator",
	"atEnd",
	"atan",
	"atan2",
	"atanh",
	"atob",
	"atomic",
	"attachEvent",
	"attachInternals",
	"attachShader",
	"attachShadow",
	"attachments",
	"attack",
	"attestationObject",
	"attrChange",
	"attrName",
	"attributeChangedCallback",
	"attributeFilter",
	"attributeName",
	"attributeNamespace",
	"attributeOldValue",
	"attributeStyleMap",
	"attributes",
	"attribution",
	"audio/x-ms-wax",
	"audio/x-ms-wma",
	"audioBitsPerSecond",
	"audioTracks",
	"audioWorklet",
	"authenticatedSignedWrites",
	"authenticatorData",
	"autoIncrement",
	"autobuffer",
	"autocapitalize",
	"autocomplete",
	"autocorrect",
	"autofocus",
	"automationRate",
	"autoplay",
	"availHeight",
	"availLeft",
	"availTop",
	"availWidth",
	"availability",
	"available",
	"aversion",
	"ax",
	"axes",
	"axis",
	"ay",
	"azimuth",
	"b",
	"back",
	"backdropFilter",
	"backface-visibility",
	"backfaceVisibility",
	"background",
	"background-attachment",
	"background-blend-mode",
	"background-clip",
	"background-color",
	"background-image",
	"background-origin",
	"background-position",
	"background-position-x",
	"background-position-y",
	"background-repeat",
	"background-size",
	"backgroundAttachment",
	"backgroundBlendMode",
	"backgroundClip",
	"backgroundColor",
	"backgroundFetch",
	"backgroundImage",
	"backgroundOrigin",
	"backgroundPosition",
	"backgroundPositionX",
	"backgroundPositionY",
	"backgroundRepeat",
	"backgroundRepeatX",
	"backgroundRepeatY",
	"backgroundSize",
	"badInput",
	"badge",
	"balance",
	"baseFrequencyX",
	"baseFrequencyY",
	"baseLatency",
	"baseLayer",
	"baseName",
	"baseNode",
	"baseOffset",
	"baseURI",
	"baseVal",
	"baselineShift",
	"battery",
	"bday",
	"before",
	"beginElement",
	"beginElementAt",
	"beginPath",
	"beginQuery",
	"beginTransformFeedback",
	"behavior",
	"behaviorCookie",
	"behaviorPart",
	"behaviorUrns",
	"beta",
	"bezierCurveTo",
	"bgColor",
	"bgProperties",
	"bias",
	"big",
	"binaryType",
	"bind",
	"bindAttribLocation",
	"bindBuffer",
	"bindBufferBase",
	"bindBufferRange",
	"bindFramebuffer",
	"bindRenderbuffer",
	"bindSampler",
	"bindTexture",
	"bindTransformFeedback",
	"bindVertexArray",
	"blendColor",
	"blendEquation",
	"blendEquationSeparate",
	"blendFunc",
	"blendFuncSeparate",
	"blink",
	"blitFramebuffer",
	"blob",
	"block-size",
	"blockDirection",
	"blockSize",
	"blockedURI",
	"blue",
	"bluetooth",
	"blur",
	"body",
	"bodyUsed",
	"bold",
	"bookmarks",
	"booleanValue",
	"border",
	"border-block",
	"border-block-color",
	"border-block-end",
	"border-block-end-color",
	"border-block-end-style",
	"border-block-end-width",
	"border-block-start",
	"border-block-start-color",
	"border-block-start-style",
	"border-block-start-width",
	"border-block-style",
	"border-block-width",
	"border-bottom",
	"border-bottom-color",
	"border-bottom-left-radius",
	"border-bottom-right-radius",
	"border-bottom-style",
	"border-bottom-width",
	"border-collapse",
	"border-color",
	"border-end-end-radius",
	"border-end-start-radius",
	"border-image",
	"border-image-outset",
	"border-image-repeat",
	"border-image-slice",
	"border-image-source",
	"border-image-width",
	"border-inline",
	"border-inline-color",
	"border-inline-end",
	"border-inline-end-color",
	"border-inline-end-style",
	"border-inline-end-width",
	"border-inline-start",
	"border-inline-start-color",
	"border-inline-start-style",
	"border-inline-start-width",
	"border-inline-style",
	"border-inline-width",
	"border-left",
	"border-left-color",
	"border-left-style",
	"border-left-width",
	"border-radius",
	"border-right",
	"border-right-color",
	"border-right-style",
	"border-right-width",
	"border-spacing",
	"border-start-end-radius",
	"border-start-start-radius",
	"border-style",
	"border-top",
	"border-top-color",
	"border-top-left-radius",
	"border-top-right-radius",
	"border-top-style",
	"border-top-width",
	"border-width",
	"borderBlock",
	"borderBlockColor",
	"borderBlockEnd",
	"borderBlockEndColor",
	"borderBlockEndStyle",
	"borderBlockEndWidth",
	"borderBlockStart",
	"borderBlockStartColor",
	"borderBlockStartStyle",
	"borderBlockStartWidth",
	"borderBlockStyle",
	"borderBlockWidth",
	"borderBottom",
	"borderBottomColor",
	"borderBottomLeftRadius",
	"borderBottomRightRadius",
	"borderBottomStyle",
	"borderBottomWidth",
	"borderBoxSize",
	"borderCollapse",
	"borderColor",
	"borderColorDark",
	"borderColorLight",
	"borderEndEndRadius",
	"borderEndStartRadius",
	"borderImage",
	"borderImageOutset",
	"borderImageRepeat",
	"borderImageSlice",
	"borderImageSource",
	"borderImageWidth",
	"borderInline",
	"borderInlineColor",
	"borderInlineEnd",
	"borderInlineEndColor",
	"borderInlineEndStyle",
	"borderInlineEndWidth",
	"borderInlineStart",
	"borderInlineStartColor",
	"borderInlineStartStyle",
	"borderInlineStartWidth",
	"borderInlineStyle",
	"borderInlineWidth",
	"borderLeft",
	"borderLeftColor",
	"borderLeftStyle",
	"borderLeftWidth",
	"borderRadius",
	"borderRight",
	"borderRightColor",
	"borderRightStyle",
	"borderRightWidth",
	"borderSpacing",
	"borderStartEndRadius",
	"borderStartStartRadius",
	"borderStyle",
	"borderTop",
	"borderTopColor",
	"borderTopLeftRadius",
	"borderTopRightRadius",
	"borderTopStyle",
	"borderTopWidth",
	"borderWidth",
	"bottom",
	"bottomMargin",
	"bound",
	"boundElements",
	"boundingClientRect",
	"boundingHeight",
	"boundingLeft",
	"boundingTop",
	"boundingWidth",
	"bounds",
	"boundsGeometry",
	"box-decoration-break",
	"box-shadow",
	"box-sizing",
	"boxDecorationBreak",
	"boxShadow",
	"boxSizing",
	"break-after",
	"break-before",
	"break-inside",
	"breakAfter",
	"breakBefore",
	"breakInside",
	"breakType",
	"broadcast",
	"browserLanguage",
	"btoa",
	"bubbles",
	"buffer",
	"bufferData",
	"bufferDepth",
	"bufferSize",
	"bufferSubData",
	"buffered",
	"bufferedAmount",
	"bufferedAmountLowThreshold",
	"bufferedRendering",
	"buildID",
	"buildNumber",
	"button",
	"buttonID",
	"buttons",
	"byteLength",
	"byteOffset",
	"bytesWritten",
	"c",
	"cache",
	"caches",
	"calendar",
	"call",
	"caller",
	"canBeFormatted",
	"canBeMounted",
	"canBeShared",
	"canHaveChildren",
	"canHaveHTML",
	"canInsertDTMF",
	"canMakePayment",
	"canPlayType",
	"canPresent",
	"canTrickleIceCandidates",
	"cancel",
	"cancelAndHoldAtTime",
	"cancelAnimationFrame",
	"cancelBubble",
	"cancelIdleCallback",
	"cancelScheduledValues",
	"cancelVideoFrameCallback",
	"cancelWatchAvailability",
	"cancelable",
	"candidate",
	"canonicalUUID",
	"canvas",
	"capabilities",
	"caption",
	"caption-side",
	"captionSide",
	"capture",
	"captureEvents",
	"captureStackTrace",
	"captureStream",
	"caret-color",
	"caretBidiLevel",
	"caretColor",
	"caretPositionFromPoint",
	"caretRangeFromPoint",
	"caseFirst",
	"cast",
	"catch",
	"category",
	"cbrt",
	"cd",
	"ceil",
	"cellIndex",
	"cellPadding",
	"cellSpacing",
	"cells",
	"ch",
	"chOff",
	"chain",
	"challenge",
	"changeType",
	"changeVersion",
	"changedTouches",
	"channel",
	"channelCount",
	"channelCountMode",
	"channelInterpretation",
	"char",
	"charAt",
	"charCode",
	"charCodeAt",
	"charIndex",
	"charLength",
	"characterData",
	"characterDataOldValue",
	"characterSet",
	"characteristic",
	"charging",
	"chargingTime",
	"charset",
	"check",
	"checkEnclosure",
	"checkFramebufferStatus",
	"checkInstalled",
	"checkIntersection",
	"checkValidity",
	"checked",
	"childElementCount",
	"childList",
	"childNodes",
	"children",
	"chrome",
	"ciphertext",
	"cite",
	"city",
	"claimInterface",
	"claimed",
	"classList",
	"className",
	"classid",
	"clear",
	"clearAppBadge",
	"clearAttributes",
	"clearBufferfi",
	"clearBufferfv",
	"clearBufferiv",
	"clearBufferuiv",
	"clearColor",
	"clearData",
	"clearDepth",
	"clearHalt",
	"clearImmediate",
	"clearInterval",
	"clearLiveSeekableRange",
	"clearMarks",
	"clearMeasures",
	"clearParameters",
	"clearRect",
	"clearResourceTimings",
	"clearShadow",
	"clearStencil",
	"clearTimeout",
	"clearWatch",
	"click",
	"clickCount",
	"clientDataJSON",
	"clientHeight",
	"clientInformation",
	"clientLeft",
	"clientRect",
	"clientRects",
	"clientTop",
	"clientWaitSync",
	"clientWidth",
	"clientX",
	"clientY",
	"clip",
	"clip-path",
	"clip-rule",
	"clipBottom",
	"clipLeft",
	"clipPath",
	"clipPathUnits",
	"clipRight",
	"clipRule",
	"clipTop",
	"clipboard",
	"clipboardData",
	"clone",
	"cloneContents",
	"cloneNode",
	"cloneRange",
	"close",
	"closePath",
	"closed",
	"closest",
	"clz",
	"clz32",
	"cm",
	"cmp",
	"code",
	"codeBase",
	"codePointAt",
	"codeType",
	"colSpan",
	"collapse",
	"collapseToEnd",
	"collapseToStart",
	"collapsed",
	"collation",
	"collect",
	"colno",
	"color",
	"color-adjust",
	"color-interpolation",
	"color-interpolation-filters",
	"colorAdjust",
	"colorDepth",
	"colorInterpolation",
	"colorInterpolationFilters",
	"colorMask",
	"colorProfile",
	"colorRendering",
	"colorScheme",
	"colorType",
	"cols",
	"column",
	"column-count",
	"column-fill",
	"column-gap",
	"column-rule",
	"column-rule-color",
	"column-rule-style",
	"column-rule-width",
	"column-span",
	"column-width",
	"columnCount",
	"columnFill",
	"columnGap",
	"columnNumber",
	"columnRule",
	"columnRuleColor",
	"columnRuleStyle",
	"columnRuleWidth",
	"columnSpan",
	"columnWidth",
	"columns",
	"command",
	"commit",
	"commitLoadTime",
	"commitPreferences",
	"commitStyles",
	"commonAncestorContainer",
	"compact",
	"compare",
	"compareBoundaryPoints",
	"compareDocumentPosition",
	"compareEndPoints",
	"compareExchange",
	"compareNode",
	"comparePoint",
	"compatMode",
	"compatible",
	"compile",
	"compileShader",
	"compileStreaming",
	"complete",
	"component",
	"componentFromPoint",
	"composed",
	"composedPath",
	"composite",
	"compositionEndOffset",
	"compositionStartOffset",
	"compressedTexImage2D",
	"compressedTexImage3D",
	"compressedTexSubImage2D",
	"compressedTexSubImage3D",
	"computedStyleMap",
	"concat",
	"conditionText",
	"coneInnerAngle",
	"coneOuterAngle",
	"coneOuterGain",
	"configuration",
	"configurationName",
	"configurationValue",
	"configurations",
	"confirm",
	"confirmComposition",
	"confirmSiteSpecificTrackingException",
	"confirmWebWideTrackingException",
	"connect",
	"connectEnd",
	"connectStart",
	"connected",
	"connectedCallback",
	"connection",
	"connectionInfo",
	"connectionList",
	"connectionSpeed",
	"connectionState",
	"connections",
	"console",
	"consoleHistory",
	"consolidate",
	"constraint",
	"constrictionActive",
	"construct",
	"constructor",
	"contactID",
	"contain",
	"containIntrinsicSize",
	"containerId",
	"containerName",
	"containerSrc",
	"containerType",
	"contains",
	"containsNode",
	"content",
	"contentBoxSize",
	"contentDocument",
	"contentEditable",
	"contentHint",
	"contentOverflow",
	"contentRect",
	"contentScriptType",
	"contentStyleType",
	"contentType",
	"contentWindow",
	"context",
	"contextMenu",
	"contextmenu",
	"continue",
	"continuePrimaryKey",
	"continuous",
	"control",
	"controlTransferIn",
	"controlTransferOut",
	"controller",
	"controls",
	"controlsList",
	"convertToBlob",
	"convertToSpecifiedUnits",
	"cookie",
	"cookieEnabled",
	"coords",
	"copyBufferSubData",
	"copyFromChannel",
	"copyTexImage2D",
	"copyTexSubImage2D",
	"copyTexSubImage3D",
	"copyToChannel",
	"copyWithin",
	"correspondingElement",
	"correspondingUseElement",
	"corruptedVideoFrames",
	"cos",
	"cosh",
	"count",
	"countReset",
	"counter-increment",
	"counter-reset",
	"counter-set",
	"counterIncrement",
	"counterReset",
	"counterSet",
	"country",
	"cpuClass",
	"cpuSleepAllowed",
	"create",
	"createAnalyser",
	"createAnswer",
	"createAttribute",
	"createAttributeNS",
	"createBiquadFilter",
	"createBuffer",
	"createBufferSource",
	"createCDATASection",
	"createCSSStyleSheet",
	"createCaption",
	"createChannelMerger",
	"createChannelSplitter",
	"createComment",
	"createConstantSource",
	"createContextualFragment",
	"createControlRange",
	"createConvolver",
	"createDTMFSender",
	"createDataChannel",
	"createDelay",
	"createDelayNode",
	"createDocument",
	"createDocumentFragment",
	"createDocumentType",
	"createDynamicsCompressor",
	"createElement",
	"createElementNS",
	"createEntityReference",
	"createEvent",
	"createEventObject",
	"createExpression",
	"createFramebuffer",
	"createFunction",
	"createGain",
	"createGainNode",
	"createHTML",
	"createHTMLDocument",
	"createIIRFilter",
	"createImageBitmap",
	"createImageData",
	"createIndex",
	"createJavaScriptNode",
	"createLinearGradient",
	"createMediaElementSource",
	"createMediaKeys",
	"createMediaStreamDestination",
	"createMediaStreamSource",
	"createMediaStreamTrackSource",
	"createMutableFile",
	"createNSResolver",
	"createNodeIterator",
	"createNotification",
	"createObjectStore",
	"createObjectURL",
	"createOffer",
	"createOscillator",
	"createPanner",
	"createPattern",
	"createPeriodicWave",
	"createPolicy",
	"createPopup",
	"createProcessingInstruction",
	"createProgram",
	"createQuery",
	"createRadialGradient",
	"createRange",
	"createRangeCollection",
	"createReader",
	"createRenderbuffer",
	"createSVGAngle",
	"createSVGLength",
	"createSVGMatrix",
	"createSVGNumber",
	"createSVGPathSegArcAbs",
	"createSVGPathSegArcRel",
	"createSVGPathSegClosePath",
	"createSVGPathSegCurvetoCubicAbs",
	"createSVGPathSegCurvetoCubicRel",
	"createSVGPathSegCurvetoCubicSmoothAbs",
	"createSVGPathSegCurvetoCubicSmoothRel",
	"createSVGPathSegCurvetoQuadraticAbs",
	"createSVGPathSegCurvetoQuadraticRel",
	"createSVGPathSegCurvetoQuadraticSmoothAbs",
	"createSVGPathSegCurvetoQuadraticSmoothRel",
	"createSVGPathSegLinetoAbs",
	"createSVGPathSegLinetoHorizontalAbs",
	"createSVGPathSegLinetoHorizontalRel",
	"createSVGPathSegLinetoRel",
	"createSVGPathSegLinetoVerticalAbs",
	"createSVGPathSegLinetoVerticalRel",
	"createSVGPathSegMovetoAbs",
	"createSVGPathSegMovetoRel",
	"createSVGPoint",
	"createSVGRect",
	"createSVGTransform",
	"createSVGTransformFromMatrix",
	"createSampler",
	"createScript",
	"createScriptProcessor",
	"createScriptURL",
	"createSession",
	"createShader",
	"createShadowRoot",
	"createStereoPanner",
	"createStyleSheet",
	"createTBody",
	"createTFoot",
	"createTHead",
	"createTextNode",
	"createTextRange",
	"createTexture",
	"createTouch",
	"createTouchList",
	"createTransformFeedback",
	"createTreeWalker",
	"createVertexArray",
	"createWaveShaper",
	"creationTime",
	"credentials",
	"crossOrigin",
	"crossOriginIsolated",
	"crypto",
	"csi",
	"csp",
	"cssFloat",
	"cssRules",
	"cssText",
	"cssValueType",
	"ctrlKey",
	"ctrlLeft",
	"cues",
	"cullFace",
	"currency",
	"currencyDisplay",
	"current",
	"currentDirection",
	"currentLocalDescription",
	"currentNode",
	"currentPage",
	"currentRect",
	"currentRemoteDescription",
	"currentScale",
	"currentScript",
	"currentSrc",
	"currentState",
	"currentStyle",
	"currentTarget",
	"currentTime",
	"currentTranslate",
	"currentView",
	"cursor",
	"curve",
	"customElements",
	"customError",
	"customSections",
	"cx",
	"cy",
	"d",
	"data",
	"dataFld",
	"dataFormatAs",
	"dataLoss",
	"dataLossMessage",
	"dataPageSize",
	"dataSrc",
	"dataTransfer",
	"database",
	"databases",
	"dataset",
	"dateTime",
	"day",
	"db",
	"debug",
	"debuggerEnabled",
	"declare",
	"decode",
	"decodeAudioData",
	"decodeURI",
	"decodeURIComponent",
	"decodedBodySize",
	"decoding",
	"decodingInfo",
	"decrypt",
	"default",
	"defaultCharset",
	"defaultChecked",
	"defaultMuted",
	"defaultPlaybackRate",
	"defaultPolicy",
	"defaultPrevented",
	"defaultRequest",
	"defaultSelected",
	"defaultStatus",
	"defaultURL",
	"defaultValue",
	"defaultView",
	"defaultstatus",
	"defer",
	"define",
	"defineMagicFunction",
	"defineMagicVariable",
	"defineProperties",
	"defineProperty",
	"deg",
	"delay",
	"delayTime",
	"delegatesFocus",
	"delete",
	"deleteBuffer",
	"deleteCaption",
	"deleteCell",
	"deleteContents",
	"deleteData",
	"deleteDatabase",
	"deleteFramebuffer",
	"deleteFromDocument",
	"deleteIndex",
	"deleteMedium",
	"deleteObjectStore",
	"deleteProgram",
	"deleteProperty",
	"deleteQuery",
	"deleteRenderbuffer",
	"deleteRow",
	"deleteRule",
	"deleteSampler",
	"deleteShader",
	"deleteSync",
	"deleteTFoot",
	"deleteTHead",
	"deleteTexture",
	"deleteTransformFeedback",
	"deleteVertexArray",
	"deliverChangeRecords",
	"delivery",
	"deliveryInfo",
	"deliveryStatus",
	"deliveryTimestamp",
	"delta",
	"deltaMode",
	"deltaX",
	"deltaY",
	"deltaZ",
	"dependentLocality",
	"depthFar",
	"depthFunc",
	"depthMask",
	"depthNear",
	"depthRange",
	"deref",
	"deriveBits",
	"deriveKey",
	"description",
	"deselectAll",
	"designMode",
	"desiredSize",
	"destination",
	"destinationURL",
	"detach",
	"detachEvent",
	"detachShader",
	"detail",
	"details",
	"detect",
	"detune",
	"device",
	"deviceClass",
	"deviceId",
	"deviceMemory",
	"devicePixelContentBoxSize",
	"devicePixelRatio",
	"deviceProtocol",
	"deviceSessionId",
	"deviceSubclass",
	"deviceVersionMajor",
	"deviceVersionMinor",
	"deviceVersionSubminor",
	"deviceXDPI",
	"deviceYDPI",
	"didTimeout",
	"diffuseConstant",
	"digest",
	"dimensions",
	"dir",
	"dirName",
	"dirXml",
	"direction",
	"dirxml",
	"disable",
	"disablePictureInPicture",
	"disableRemotePlayback",
	"disableVertexAttribArray",
	"disabled",
	"dischargingTime",
	"disconnect",
	"disconnectedCallback",
	"dispatch",
	"dispatchEvent",
	"dispatchToListener",
	"display",
	"displayId",
	"displayName",
	"disposition",
	"distanceModel",
	"div",
	"divisor",
	"djsapi",
	"djsproxy",
	"doImport",
	"doNotTrack",
	"doScroll",
	"doctype",
	"document",
	"documentElement",
	"documentMode",
	"documentURI",
	"dolphin",
	"dolphinGameCenter",
	"dolphininfo",
	"dolphinmeta",
	"domComplete",
	"domContentLoadedEventEnd",
	"domContentLoadedEventStart",
	"domInteractive",
	"domLoading",
	"domOverlayState",
	"domain",
	"domainLookupEnd",
	"domainLookupStart",
	"dominant-baseline",
	"dominantBaseline",
	"done",
	"dopplerFactor",
	"dotAll",
	"downDegrees",
	"downlink",
	"download",
	"downloadTotal",
	"downloaded",
	"dpcm",
	"dpi",
	"dppx",
	"dragDrop",
	"draggable",
	"drawArrays",
	"drawArraysInstanced",
	"drawArraysInstancedANGLE",
	"drawBuffers",
	"drawCustomFocusRing",
	"drawElements",
	"drawElementsInstanced",
	"drawElementsInstancedANGLE",
	"drawFocusIfNeeded",
	"drawImage",
	"drawImageFromRect",
	"drawRangeElements",
	"drawSystemFocusRing",
	"drawingBufferHeight",
	"drawingBufferWidth",
	"dropEffect",
	"droppedVideoFrames",
	"dropzone",
	"dtmf",
	"dump",
	"duplicate",
	"durability",
	"duration",
	"dvname",
	"dvnum",
	"dx",
	"dy",
	"dynsrc",
	"e",
	"edgeMode",
	"effect",
	"effectAllowed",
	"effectiveDirective",
	"effectiveType",
	"elapsedTime",
	"element",
	"elementFromPoint",
	"elementTiming",
	"elements",
	"elementsFromPoint",
	"elevation",
	"ellipse",
	"em",
	"emHeightAscent",
	"emHeightDescent",
	"email",
	"embeds",
	"emma",
	"empty",
	"empty-cells",
	"emptyCells",
	"emptyHTML",
	"emptyScript",
	"emulatedPosition",
	"enable",
	"enableBackground",
	"enableDelegations",
	"enableStyleSheetsForSet",
	"enableVertexAttribArray",
	"enabled",
	"enabledPlugin",
	"encode",
	"encodeInto",
	"encodeURI",
	"encodeURIComponent",
	"encodedBodySize",
	"encoding",
	"encodingInfo",
	"encrypt",
	"enctype",
	"end",
	"endContainer",
	"endElement",
	"endElementAt",
	"endOfStream",
	"endOffset",
	"endQuery",
	"endTime",
	"endTransformFeedback",
	"ended",
	"endpoint",
	"endpointNumber",
	"endpoints",
	"endsWith",
	"enterKeyHint",
	"entities",
	"entries",
	"entryType",
	"enumerate",
	"enumerateDevices",
	"enumerateEditable",
	"environmentBlendMode",
	"epubCaptionSide",
	"epubTextCombine",
	"epubTextEmphasis",
	"epubTextEmphasisColor",
	"epubTextEmphasisStyle",
	"epubTextOrientation",
	"epubTextTransform",
	"epubWordBreak",
	"epubWritingMode",
	"equals",
	"era",
	"error",
	"errorCode",
	"errorDetail",
	"errorText",
	"escape",
	"estimate",
	"eval",
	"evaluate",
	"event",
	"eventPhase",
	"every",
	"ex",
	"exception",
	"exchange",
	"exec",
	"execCommand",
	"execCommandShowHelp",
	"execScript",
	"executeSql",
	"exitFullscreen",
	"exitPictureInPicture",
	"exitPointerLock",
	"exitPresent",
	"exp",
	"expand",
	"expandEntityReferences",
	"expando",
	"expansion",
	"expiration",
	"expirationTime",
	"expires",
	"expiryDate",
	"explicitOriginalTarget",
	"expm1",
	"exponent",
	"exponentialRampToValueAtTime",
	"exportKey",
	"exports",
	"extend",
	"extensions",
	"extentNode",
	"extentOffset",
	"external",
	"externalResourcesRequired",
	"extractContents",
	"extractable",
	"eye",
	"f",
	"face",
	"factoryReset",
	"failureReason",
	"fallback",
	"family",
	"familyName",
	"farthestViewportElement",
	"fastSeek",
	"fatal",
	"featurePolicy",
	"featureSettings",
	"features",
	"fenceSync",
	"fetch",
	"fetchStart",
	"fftSize",
	"fgColor",
	"fieldOfView",
	"file",
	"fileCreatedDate",
	"fileHandle",
	"fileModifiedDate",
	"fileName",
	"fileSize",
	"fileUpdatedDate",
	"filename",
	"files",
	"filesystem",
	"fill",
	"fill-opacity",
	"fill-rule",
	"fillLightMode",
	"fillOpacity",
	"fillRect",
	"fillRule",
	"fillStyle",
	"fillText",
	"filter",
	"filterResX",
	"filterResY",
	"filterUnits",
	"filters",
	"finally",
	"find",
	"findIndex",
	"findRule",
	"findText",
	"finish",
	"finishDocumentLoadTime",
	"finishLoadTime",
	"finished",
	"fireEvent",
	"firesTouchEvents",
	"first",
	"firstChild",
	"firstElementChild",
	"firstPage",
	"firstPaintAfterLoadTime",
	"firstPaintTime",
	"fixed",
	"flags",
	"flat",
	"flatMap",
	"flex",
	"flex-basis",
	"flex-direction",
	"flex-flow",
	"flex-grow",
	"flex-shrink",
	"flex-wrap",
	"flexBasis",
	"flexDirection",
	"flexFlow",
	"flexGrow",
	"flexShrink",
	"flexWrap",
	"flipX",
	"flipY",
	"float",
	"flood-color",
	"flood-opacity",
	"floodColor",
	"floodOpacity",
	"floor",
	"flush",
	"focus",
	"focusNode",
	"focusOffset",
	"font",
	"font-family",
	"font-feature-settings",
	"font-kerning",
	"font-language-override",
	"font-size",
	"font-size-adjust",
	"font-stretch",
	"font-style",
	"font-synthesis",
	"font-variant",
	"font-variant-alternates",
	"font-variant-caps",
	"font-variant-east-asian",
	"font-variant-ligatures",
	"font-variant-numeric",
	"font-variant-position",
	"font-weight",
	"fontBoundingBoxAscent",
	"fontBoundingBoxDescent",
	"fontDisplay",
	"fontFamily",
	"fontFeatureSettings",
	"fontKerning",
	"fontLanguageOverride",
	"fontOpticalSizing",
	"fontSize",
	"fontSizeAdjust",
	"fontSmoothingEnabled",
	"fontStretch",
	"fontStyle",
	"fontSynthesis",
	"fontVariant",
	"fontVariantAlternates",
	"fontVariantCaps",
	"fontVariantEastAsian",
	"fontVariantLigatures",
	"fontVariantNumeric",
	"fontVariantPosition",
	"fontVariationSettings",
	"fontWeight",
	"fontcolor",
	"fontfaces",
	"fonts",
	"fontsize",
	"for",
	"forEach",
	"force",
	"forceRedraw",
	"form",
	"formAction",
	"formData",
	"formEnctype",
	"formMethod",
	"formNoValidate",
	"formTarget",
	"format",
	"formatRange",
	"formatRangeToParts",
	"formatToParts",
	"forms",
	"forward",
	"forwardX",
	"forwardY",
	"forwardZ",
	"foundation",
	"fr",
	"fragmentDirective",
	"frame",
	"frameBorder",
	"frameElement",
	"frameSpacing",
	"framebuffer",
	"framebufferHeight",
	"framebufferRenderbuffer",
	"framebufferTexture2D",
	"framebufferTextureLayer",
	"framebufferWidth",
	"frames",
	"freeSpace",
	"freeze",
	"frequency",
	"frequencyBinCount",
	"from",
	"fromCharCode",
	"fromCodePoint",
	"fromElement",
	"fromEntries",
	"fromFloat32Array",
	"fromFloat64Array",
	"fromMatrix",
	"fromPoint",
	"fromQuad",
	"fromRect",
	"frontFace",
	"fround",
	"fullPath",
	"fullScreen",
	"fullscreen",
	"fullscreenElement",
	"fullscreenEnabled",
	"fx",
	"fy",
	"gain",
	"gamepad",
	"gamma",
	"gap",
	"gatheringState",
	"gatt",
	"genderIdentity",
	"generateCertificate",
	"generateKey",
	"generateMipmap",
	"generateRequest",
	"geolocation",
	"gestureObject",
	"get",
	"getActiveAttrib",
	"getActiveUniform",
	"getActiveUniformBlockName",
	"getActiveUniformBlockParameter",
	"getActiveUniforms",
	"getAdditionalLanguages",
	"getAdjacentText",
	"getAll",
	"getAllKeys",
	"getAllResponseHeaders",
	"getAllowlistForFeature",
	"getAnimations",
	"getAsFile",
	"getAsString",
	"getAttachedShaders",
	"getAttribLocation",
	"getAttribute",
	"getAttributeNS",
	"getAttributeNames",
	"getAttributeNode",
	"getAttributeNodeNS",
	"getAttributeType",
	"getAudioTracks",
	"getAvailability",
	"getBBox",
	"getBattery",
	"getBigInt64",
	"getBigUint64",
	"getBlob",
	"getBookmark",
	"getBoundingClientRect",
	"getBounds",
	"getBufferParameter",
	"getBufferSubData",
	"getByteFrequencyData",
	"getByteTimeDomainData",
	"getCSSCanvasContext",
	"getCTM",
	"getCandidateWindowClientRect",
	"getCanonicalLocales",
	"getCapabilities",
	"getChannelData",
	"getCharNumAtPosition",
	"getCharacteristic",
	"getCharacteristics",
	"getClientExtensionResults",
	"getClientRect",
	"getClientRects",
	"getCoalescedEvents",
	"getCompositionAlternatives",
	"getComputedStyle",
	"getComputedTextLength",
	"getComputedTiming",
	"getConfiguration",
	"getConstraints",
	"getContext",
	"getContextAttributes",
	"getContributingSources",
	"getCount",
	"getCounterValue",
	"getCueAsHTML",
	"getCueById",
	"getCurrentPosition",
	"getCurrentTime",
	"getData",
	"getDatabaseNames",
	"getDate",
	"getDay",
	"getDefaultComputedStyle",
	"getDescriptor",
	"getDescriptors",
	"getDestinationInsertionPoints",
	"getDetails",
	"getDevices",
	"getDirectory",
	"getDisplayMedia",
	"getDistributedNodes",
	"getEditable",
	"getElementById",
	"getElementsByClassName",
	"getElementsByName",
	"getElementsByTagName",
	"getElementsByTagNameNS",
	"getEnclosureList",
	"getEndPositionOfChar",
	"getEntries",
	"getEntriesByName",
	"getEntriesByType",
	"getError",
	"getExtension",
	"getExtentOfChar",
	"getEyeParameters",
	"getFeature",
	"getFile",
	"getFiles",
	"getFilesAndDirectories",
	"getFingerprints",
	"getFloat32",
	"getFloat64",
	"getFloatFrequencyData",
	"getFloatTimeDomainData",
	"getFloatValue",
	"getFragDataLocation",
	"getFrameData",
	"getFramebufferAttachmentParameter",
	"getFrequencyResponse",
	"getFullYear",
	"getGamepads",
	"getHitTestResults",
	"getHitTestResultsForTransientInput",
	"getHours",
	"getIdentityAssertion",
	"getIds",
	"getImageData",
	"getIndexedParameter",
	"getInstalled",
	"getInstalledRelatedApps",
	"getInt16",
	"getInt32",
	"getInt8",
	"getInternalformatParameter",
	"getIntersectionList",
	"getIsInstalled",
	"getItem",
	"getItems",
	"getKey",
	"getKeyframes",
	"getLayers",
	"getLayoutMap",
	"getLineDash",
	"getLocalCandidates",
	"getLocalParameters",
	"getLocalStreams",
	"getLocalizationResource",
	"getMarks",
	"getMatchedCSSRules",
	"getMeasures",
	"getMetadata",
	"getMilliseconds",
	"getMinutes",
	"getModifierState",
	"getMonth",
	"getNamedItem",
	"getNamedItemNS",
	"getNativeFramebufferScaleFactor",
	"getNotifications",
	"getNotifier",
	"getNumberOfChars",
	"getOffsetReferenceSpace",
	"getOutputTimestamp",
	"getOverrideHistoryNavigationMode",
	"getOverrideStyle",
	"getOwnPropertyDescriptor",
	"getOwnPropertyDescriptors",
	"getOwnPropertyNames",
	"getOwnPropertySymbols",
	"getParameter",
	"getParameters",
	"getParent",
	"getPathSegAtLength",
	"getPhotoCapabilities",
	"getPhotoSettings",
	"getPointAtLength",
	"getPose",
	"getPredictedEvents",
	"getPreference",
	"getPreferenceDefault",
	"getPresentationAttribute",
	"getPreventDefault",
	"getPrimaryService",
	"getPrimaryServices",
	"getProgramInfoLog",
	"getProgramParameter",
	"getPropertyCSSValue",
	"getPropertyPriority",
	"getPropertyShorthand",
	"getPropertyType",
	"getPropertyValue",
	"getPrototypeOf",
	"getQuery",
	"getQueryParameter",
	"getRGBColorValue",
	"getRandomValues",
	"getRangeAt",
	"getReader",
	"getReceivers",
	"getRectValue",
	"getRegistration",
	"getRegistrations",
	"getRemoteCandidates",
	"getRemoteCertificates",
	"getRemoteParameters",
	"getRemoteStreams",
	"getRenderbufferParameter",
	"getResponseHeader",
	"getRevision",
	"getRoot",
	"getRootNode",
	"getRotationOfChar",
	"getRules",
	"getSVGDocument",
	"getSamplerParameter",
	"getScreenCTM",
	"getSeconds",
	"getSelectedCandidatePair",
	"getSelection",
	"getSelf",
	"getSenders",
	"getService",
	"getSettings",
	"getShaderInfoLog",
	"getShaderParameter",
	"getShaderPrecisionFormat",
	"getShaderSource",
	"getSimpleDuration",
	"getSiteIcons",
	"getSources",
	"getSpeculativeParserUrls",
	"getStartDate",
	"getStartPositionOfChar",
	"getStartTime",
	"getState",
	"getStats",
	"getStatusForPolicy",
	"getStorageUpdates",
	"getStreamById",
	"getStringValue",
	"getSubStringLength",
	"getSubscription",
	"getSupportedConstraints",
	"getSupportedExtensions",
	"getSupportedFormats",
	"getSyncParameter",
	"getSynchronizationSources",
	"getTags",
	"getTargetRanges",
	"getTexParameter",
	"getTime",
	"getTimezoneOffset",
	"getTiming",
	"getTotalLength",
	"getTrackById",
	"getTracks",
	"getTransceivers",
	"getTransform",
	"getTransformFeedbackVarying",
	"getTransformToElement",
	"getTransports",
	"getType",
	"getTypeMapping",
	"getUTCDate",
	"getUTCDay",
	"getUTCFullYear",
	"getUTCHours",
	"getUTCMilliseconds",
	"getUTCMinutes",
	"getUTCMonth",
	"getUTCSeconds",
	"getUint16",
	"getUint32",
	"getUint8",
	"getUniform",
	"getUniformBlockIndex",
	"getUniformIndices",
	"getUniformLocation",
	"getUserMedia",
	"getVRDisplays",
	"getValues",
	"getVarDate",
	"getVariableValue",
	"getVertexAttrib",
	"getVertexAttribOffset",
	"getVideoPlaybackQuality",
	"getVideoTracks",
	"getViewerPose",
	"getViewport",
	"getVoices",
	"getWakeLockState",
	"getWriter",
	"getYear",
	"givenName",
	"global",
	"globalAlpha",
	"globalCompositeOperation",
	"globalThis",
	"glyphOrientationHorizontal",
	"glyphOrientationVertical",
	"glyphRef",
	"go",
	"grabFrame",
	"grad",
	"gradientTransform",
	"gradientUnits",
	"grammars",
	"green",
	"grid",
	"grid-area",
	"grid-auto-columns",
	"grid-auto-flow",
	"grid-auto-rows",
	"grid-column",
	"grid-column-end",
	"grid-column-gap",
	"grid-column-start",
	"grid-gap",
	"grid-row",
	"grid-row-end",
	"grid-row-gap",
	"grid-row-start",
	"grid-template",
	"grid-template-areas",
	"grid-template-columns",
	"grid-template-rows",
	"gridArea",
	"gridAutoColumns",
	"gridAutoFlow",
	"gridAutoRows",
	"gridColumn",
	"gridColumnEnd",
	"gridColumnGap",
	"gridColumnStart",
	"gridGap",
	"gridRow",
	"gridRowEnd",
	"gridRowGap",
	"gridRowStart",
	"gridTemplate",
	"gridTemplateAreas",
	"gridTemplateColumns",
	"gridTemplateRows",
	"gripSpace",
	"group",
	"groupCollapsed",
	"groupEnd",
	"groupId",
	"grow",
	"hadRecentInput",
	"hand",
	"handedness",
	"hangingBaseline",
	"hangingPunctuation",
	"hapticActuators",
	"hardwareConcurrency",
	"has",
	"hasAttribute",
	"hasAttributeNS",
	"hasAttributes",
	"hasBeenActive",
	"hasChildNodes",
	"hasComposition",
	"hasEnrolledInstrument",
	"hasExtension",
	"hasExternalDisplay",
	"hasFeature",
	"hasFocus",
	"hasInstance",
	"hasLayout",
	"hasListener",
	"hasListeners",
	"hasOrientation",
	"hasOwnProperty",
	"hasPointerCapture",
	"hasPosition",
	"hasReading",
	"hasStorageAccess",
	"hash",
	"head",
	"headers",
	"heading",
	"height",
	"hidden",
	"hide",
	"hideFocus",
	"high",
	"highWaterMark",
	"hint",
	"history",
	"honorificPrefix",
	"honorificSuffix",
	"horizontalOverflow",
	"host",
	"hostCandidate",
	"hostname",
	"hour",
	"hour12",
	"hourCycle",
	"href",
	"hrefTranslate",
	"hreflang",
	"hspace",
	"html5TagCheckInerface",
	"htmlFor",
	"htmlText",
	"httpEquiv",
	"httpRequestStatusCode",
	"hwTimestamp",
	"hyphens",
	"hypot",
	"iccId",
	"iceConnectionState",
	"iceGatheringState",
	"iceTransport",
	"icon",
	"iconURL",
	"id",
	"identifier",
	"identity",
	"ideographicBaseline",
	"idpLoginUrl",
	"ignoreBOM",
	"ignoreCase",
	"ignoreDepthValues",
	"ignoreMutedMedia",
	"ignorePunctuation",
	"image-orientation",
	"image-rendering",
	"imageHeight",
	"imageOrientation",
	"imageRendering",
	"imageSizes",
	"imageSmoothingEnabled",
	"imageSmoothingQuality",
	"imageSrcset",
	"imageWidth",
	"images",
	"ime-mode",
	"imeMode",
	"implementation",
	"import",
	"importKey",
	"importNode",
	"importStylesheet",
	"imports",
	"impp",
	"imul",
	"in",
	"in1",
	"in2",
	"inBandMetadataTrackDispatchType",
	"inRange",
	"includes",
	"incremental",
	"indeterminate",
	"index",
	"indexNames",
	"indexOf",
	"indexedDB",
	"indicate",
	"inertiaDestinationX",
	"inertiaDestinationY",
	"info",
	"init",
	"initAnimationEvent",
	"initBeforeLoadEvent",
	"initClipboardEvent",
	"initCloseEvent",
	"initCommandEvent",
	"initCompositionEvent",
	"initCustomEvent",
	"initData",
	"initDataType",
	"initDeviceMotionEvent",
	"initDeviceOrientationEvent",
	"initDragEvent",
	"initErrorEvent",
	"initEvent",
	"initFocusEvent",
	"initGestureEvent",
	"initHashChangeEvent",
	"initKeyEvent",
	"initKeyboardEvent",
	"initMSManipulationEvent",
	"initMessageEvent",
	"initMouseEvent",
	"initMouseScrollEvent",
	"initMouseWheelEvent",
	"initMutationEvent",
	"initNSMouseEvent",
	"initOverflowEvent",
	"initPageEvent",
	"initPageTransitionEvent",
	"initPointerEvent",
	"initPopStateEvent",
	"initProgressEvent",
	"initScrollAreaEvent",
	"initSimpleGestureEvent",
	"initStorageEvent",
	"initTextEvent",
	"initTimeEvent",
	"initTouchEvent",
	"initTransitionEvent",
	"initUIEvent",
	"initWebKitAnimationEvent",
	"initWebKitTransitionEvent",
	"initWebKitWheelEvent",
	"initWheelEvent",
	"initialTime",
	"initialize",
	"initiatorType",
	"inline-size",
	"inlineSize",
	"inlineVerticalFieldOfView",
	"inner",
	"innerHTML",
	"innerHeight",
	"innerText",
	"innerWidth",
	"input",
	"inputBuffer",
	"inputEncoding",
	"inputMethod",
	"inputMode",
	"inputSource",
	"inputSources",
	"inputType",
	"inputs",
	"insertAdjacentElement",
	"insertAdjacentHTML",
	"insertAdjacentText",
	"insertBefore",
	"insertCell",
	"insertDTMF",
	"insertData",
	"insertId",
	"insertItemBefore",
	"insertNode",
	"insertRow",
	"insertRule",
	"inset",
	"inset-block",
	"inset-block-end",
	"inset-block-start",
	"inset-inline",
	"inset-inline-end",
	"inset-inline-start",
	"insetBlock",
	"insetBlockEnd",
	"insetBlockStart",
	"insetInline",
	"insetInlineEnd",
	"insetInlineStart",
	"install",
	"installChrome",
	"installPackage",
	"installState",
	"installing",
	"instanceRoot",
	"instantiate",
	"instantiateStreaming",
	"instruments",
	"integrity",
	"interactionMode",
	"intercept",
	"interfaceClass",
	"interfaceName",
	"interfaceNumber",
	"interfaceProtocol",
	"interfaceSubclass",
	"interfaces",
	"interimResults",
	"internalSubset",
	"interpretation",
	"intersectionRatio",
	"intersectionRect",
	"intersectsNode",
	"interval",
	"invalidIteratorState",
	"invalidateFramebuffer",
	"invalidateSubFramebuffer",
	"inverse",
	"invertSelf",
	"is",
	"is2D",
	"isActive",
	"isAlternate",
	"isArray",
	"isBingCurrentSearchDefault",
	"isBuffer",
	"isCandidateWindowVisible",
	"isChar",
	"isCollapsed",
	"isComposing",
	"isConcatSpreadable",
	"isConnected",
	"isContentEditable",
	"isContentHandlerRegistered",
	"isContextLost",
	"isDefaultNamespace",
	"isDirectory",
	"isDisabled",
	"isEnabled",
	"isEqual",
	"isEqualNode",
	"isExtensible",
	"isExternalCTAP2SecurityKeySupported",
	"isFile",
	"isFinite",
	"isFramebuffer",
	"isFrozen",
	"isGenerator",
	"isHTML",
	"isHistoryNavigation",
	"isId",
	"isIdentity",
	"isInjected",
	"isInstalled",
	"isInteger",
	"isIntersecting",
	"isLockFree",
	"isMap",
	"isMultiLine",
	"isNaN",
	"isOpen",
	"isPointInFill",
	"isPointInPath",
	"isPointInRange",
	"isPointInStroke",
	"isPrefAlternate",
	"isPresenting",
	"isPrimary",
	"isProgram",
	"isPropertyImplicit",
	"isProtocolHandlerRegistered",
	"isPrototypeOf",
	"isQuery",
	"isRenderbuffer",
	"isSafeInteger",
	"isSameNode",
	"isSampler",
	"isScript",
	"isScriptURL",
	"isSealed",
	"isSecureContext",
	"isSessionSupported",
	"isShader",
	"isSupported",
	"isSync",
	"isTextEdit",
	"isTexture",
	"isTransformFeedback",
	"isTrusted",
	"isTypeSupported",
	"isTypeSupportedWithFeatures",
	"isUserVerifyingPlatformAuthenticatorAvailable",
	"isVertexArray",
	"isView",
	"isVisible",
	"isochronousTransferIn",
	"isochronousTransferOut",
	"isolation",
	"italics",
	"item",
	"itemId",
	"itemProp",
	"itemRef",
	"itemScope",
	"itemType",
	"itemValue",
	"items",
	"iterateNext",
	"iterator",
	"javaEnabled",
	"jobTitle",
	"join",
	"jsHeapSizeLimit",
	"json",
	"justify-content",
	"justify-items",
	"justify-self",
	"justifyContent",
	"justifyItems",
	"justifySelf",
	"k1",
	"k2",
	"k3",
	"k4",
	"kHz",
	"keepalive",
	"kernelMatrix",
	"kernelUnitLengthX",
	"kernelUnitLengthY",
	"kerning",
	"key",
	"keyCode",
	"keyFor",
	"keyIdentifier",
	"keyLightEnabled",
	"keyLocation",
	"keyPath",
	"keyStatuses",
	"keySystem",
	"keyText",
	"keyUsage",
	"keyboard",
	"keys",
	"keytype",
	"kind",
	"knee",
	"label",
	"labels",
	"lang",
	"language",
	"languages",
	"largeArcFlag",
	"lastActivePanel",
	"lastChild",
	"lastElementChild",
	"lastEventId",
	"lastIndex",
	"lastIndexOf",
	"lastInputTime",
	"lastMatch",
	"lastMessageSubject",
	"lastMessageType",
	"lastModified",
	"lastModifiedDate",
	"lastPage",
	"lastParen",
	"lastState",
	"lastStyleSheetSet",
	"latitude",
	"layerX",
	"layerY",
	"layoutFlow",
	"layoutGrid",
	"layoutGridChar",
	"layoutGridLine",
	"layoutGridMode",
	"layoutGridType",
	"lbound",
	"left",
	"leftContext",
	"leftDegrees",
	"leftMargin",
	"leftProjectionMatrix",
	"leftViewMatrix",
	"length",
	"lengthAdjust",
	"lengthComputable",
	"letter-spacing",
	"letterSpacing",
	"level",
	"lighting-color",
	"lightingColor",
	"limitingConeAngle",
	"line",
	"line-break",
	"line-height",
	"lineAlign",
	"lineBreak",
	"lineCap",
	"lineDashOffset",
	"lineHeight",
	"lineJoin",
	"lineNumber",
	"lineTo",
	"lineWidth",
	"linearAcceleration",
	"linearRampToValueAtTime",
	"linearVelocity",
	"lineno",
	"lines",
	"link",
	"linkColor",
	"linkProgram",
	"links",
	"list",
	"list-style",
	"list-style-image",
	"list-style-position",
	"list-style-type",
	"listStyle",
	"listStyleImage",
	"listStylePosition",
	"listStyleType",
	"listener",
	"load",
	"loadEventEnd",
	"loadEventStart",
	"loadTime",
	"loadTimes",
	"loaded",
	"loading",
	"localDescription",
	"localName",
	"localService",
	"localStorage",
	"locale",
	"localeCompare",
	"location",
	"locationbar",
	"lock",
	"locked",
	"lockedFile",
	"locks",
	"log",
	"log10",
	"log1p",
	"log2",
	"logicalXDPI",
	"logicalYDPI",
	"longDesc",
	"longitude",
	"lookupNamespaceURI",
	"lookupPrefix",
	"loop",
	"loopEnd",
	"loopStart",
	"looping",
	"low",
	"lower",
	"lowerBound",
	"lowerOpen",
	"lowsrc",
	"m11",
	"m12",
	"m13",
	"m14",
	"m21",
	"m22",
	"m23",
	"m24",
	"m31",
	"m32",
	"m33",
	"m34",
	"m41",
	"m42",
	"m43",
	"m44",
	"makeXRCompatible",
	"manifest",
	"manufacturer",
	"manufacturerName",
	"map",
	"mapping",
	"margin",
	"margin-block",
	"margin-block-end",
	"margin-block-start",
	"margin-bottom",
	"margin-inline",
	"margin-inline-end",
	"margin-inline-start",
	"margin-left",
	"margin-right",
	"margin-top",
	"marginBlock",
	"marginBlockEnd",
	"marginBlockStart",
	"marginBottom",
	"marginHeight",
	"marginInline",
	"marginInlineEnd",
	"marginInlineStart",
	"marginLeft",
	"marginRight",
	"marginTop",
	"marginWidth",
	"mark",
	"markTimeline",
	"marker",
	"marker-end",
	"marker-mid",
	"marker-offset",
	"marker-start",
	"markerEnd",
	"markerHeight",
	"markerMid",
	"markerOffset",
	"markerStart",
	"markerUnits",
	"markerWidth",
	"marks",
	"mask",
	"mask-clip",
	"mask-composite",
	"mask-image",
	"mask-mode",
	"mask-origin",
	"mask-position",
	"mask-position-x",
	"mask-position-y",
	"mask-repeat",
	"mask-size",
	"mask-type",
	"maskClip",
	"maskComposite",
	"maskContentUnits",
	"maskImage",
	"maskMode",
	"maskOrigin",
	"maskPosition",
	"maskPositionX",
	"maskPositionY",
	"maskRepeat",
	"maskSize",
	"maskType",
	"maskUnits",
	"match",
	"matchAll",
	"matchMedia",
	"matchMedium",
	"matches",
	"matrix",
	"matrixTransform",
	"max",
	"max-block-size",
	"max-height",
	"max-inline-size",
	"max-width",
	"maxActions",
	"maxAlternatives",
	"maxBlockSize",
	"maxChannelCount",
	"maxChannels",
	"maxConnectionsPerServer",
	"maxDecibels",
	"maxDistance",
	"maxHeight",
	"maxInlineSize",
	"maxLayers",
	"maxLength",
	"maxMessageSize",
	"maxPacketLifeTime",
	"maxRetransmits",
	"maxTouchPoints",
	"maxValue",
	"maxWidth",
	"maxZoom",
	"maximize",
	"maximumFractionDigits",
	"measure",
	"measureText",
	"media",
	"mediaCapabilities",
	"mediaDevices",
	"mediaElement",
	"mediaGroup",
	"mediaKeys",
	"mediaSession",
	"mediaStream",
	"mediaText",
	"meetOrSlice",
	"memory",
	"menubar",
	"mergeAttributes",
	"message",
	"messageClass",
	"messageHandlers",
	"messageType",
	"metaKey",
	"metadata",
	"method",
	"methodDetails",
	"methodName",
	"mid",
	"mimeType",
	"mimeTypes",
	"min",
	"min-block-size",
	"min-height",
	"min-inline-size",
	"min-width",
	"minBlockSize",
	"minDecibels",
	"minHeight",
	"minInlineSize",
	"minLength",
	"minValue",
	"minWidth",
	"minZoom",
	"minimize",
	"minimumFractionDigits",
	"minimumIntegerDigits",
	"minute",
	"miterLimit",
	"mix-blend-mode",
	"mixBlendMode",
	"mm",
	"mode",
	"modify",
	"month",
	"motion",
	"motionOffset",
	"motionPath",
	"motionRotation",
	"mount",
	"move",
	"moveBy",
	"moveEnd",
	"moveFirst",
	"moveFocusDown",
	"moveFocusLeft",
	"moveFocusRight",
	"moveFocusUp",
	"moveNext",
	"moveRow",
	"moveStart",
	"moveTo",
	"moveToBookmark",
	"moveToElementText",
	"moveToPoint",
	"movementX",
	"movementY",
	"mozAdd",
	"mozAnimationStartTime",
	"mozAnon",
	"mozApps",
	"mozAudioCaptured",
	"mozAudioChannelType",
	"mozAutoplayEnabled",
	"mozCancelAnimationFrame",
	"mozCancelFullScreen",
	"mozCancelRequestAnimationFrame",
	"mozCaptureStream",
	"mozCaptureStreamUntilEnded",
	"mozClearDataAt",
	"mozContact",
	"mozContacts",
	"mozCreateFileHandle",
	"mozCurrentTransform",
	"mozCurrentTransformInverse",
	"mozCursor",
	"mozDash",
	"mozDashOffset",
	"mozDecodedFrames",
	"mozExitPointerLock",
	"mozFillRule",
	"mozFragmentEnd",
	"mozFrameDelay",
	"mozFullScreen",
	"mozFullScreenElement",
	"mozFullScreenEnabled",
	"mozGetAll",
	"mozGetAllKeys",
	"mozGetAsFile",
	"mozGetDataAt",
	"mozGetMetadata",
	"mozGetUserMedia",
	"mozHasAudio",
	"mozHasItem",
	"mozHidden",
	"mozImageSmoothingEnabled",
	"mozIndexedDB",
	"mozInnerScreenX",
	"mozInnerScreenY",
	"mozInputSource",
	"mozIsTextField",
	"mozItem",
	"mozItemCount",
	"mozItems",
	"mozLength",
	"mozLockOrientation",
	"mozMatchesSelector",
	"mozMovementX",
	"mozMovementY",
	"mozOpaque",
	"mozOrientation",
	"mozPaintCount",
	"mozPaintedFrames",
	"mozParsedFrames",
	"mozPay",
	"mozPointerLockElement",
	"mozPresentedFrames",
	"mozPreservesPitch",
	"mozPressure",
	"mozPrintCallback",
	"mozRTCIceCandidate",
	"mozRTCPeerConnection",
	"mozRTCSessionDescription",
	"mozRemove",
	"mozRequestAnimationFrame",
	"mozRequestFullScreen",
	"mozRequestPointerLock",
	"mozSetDataAt",
	"mozSetImageElement",
	"mozSourceNode",
	"mozSrcObject",
	"mozSystem",
	"mozTCPSocket",
	"mozTextStyle",
	"mozTypesAt",
	"mozUnlockOrientation",
	"mozUserCancelled",
	"mozVisibilityState",
	"ms",
	"msAnimation",
	"msAnimationDelay",
	"msAnimationDirection",
	"msAnimationDuration",
	"msAnimationFillMode",
	"msAnimationIterationCount",
	"msAnimationName",
	"msAnimationPlayState",
	"msAnimationStartTime",
	"msAnimationTimingFunction",
	"msBackfaceVisibility",
	"msBlockProgression",
	"msCSSOMElementFloatMetrics",
	"msCaching",
	"msCachingEnabled",
	"msCancelRequestAnimationFrame",
	"msCapsLockWarningOff",
	"msClearImmediate",
	"msClose",
	"msContentZoomChaining",
	"msContentZoomFactor",
	"msContentZoomLimit",
	"msContentZoomLimitMax",
	"msContentZoomLimitMin",
	"msContentZoomSnap",
	"msContentZoomSnapPoints",
	"msContentZoomSnapType",
	"msContentZooming",
	"msConvertURL",
	"msCrypto",
	"msDoNotTrack",
	"msElementsFromPoint",
	"msElementsFromRect",
	"msExitFullscreen",
	"msExtendedCode",
	"msFillRule",
	"msFirstPaint",
	"msFlex",
	"msFlexAlign",
	"msFlexDirection",
	"msFlexFlow",
	"msFlexItemAlign",
	"msFlexLinePack",
	"msFlexNegative",
	"msFlexOrder",
	"msFlexPack",
	"msFlexPositive",
	"msFlexPreferredSize",
	"msFlexWrap",
	"msFlowFrom",
	"msFlowInto",
	"msFontFeatureSettings",
	"msFullscreenElement",
	"msFullscreenEnabled",
	"msGetInputContext",
	"msGetRegionContent",
	"msGetUntransformedBounds",
	"msGraphicsTrustStatus",
	"msGridColumn",
	"msGridColumnAlign",
	"msGridColumnSpan",
	"msGridColumns",
	"msGridRow",
	"msGridRowAlign",
	"msGridRowSpan",
	"msGridRows",
	"msHidden",
	"msHighContrastAdjust",
	"msHyphenateLimitChars",
	"msHyphenateLimitLines",
	"msHyphenateLimitZone",
	"msHyphens",
	"msImageSmoothingEnabled",
	"msImeAlign",
	"msIndexedDB",
	"msInterpolationMode",
	"msIsStaticHTML",
	"msKeySystem",
	"msKeys",
	"msLaunchUri",
	"msLockOrientation",
	"msManipulationViewsEnabled",
	"msMatchMedia",
	"msMatchesSelector",
	"msMaxTouchPoints",
	"msOrientation",
	"msOverflowStyle",
	"msPerspective",
	"msPerspectiveOrigin",
	"msPlayToDisabled",
	"msPlayToPreferredSourceUri",
	"msPlayToPrimary",
	"msPointerEnabled",
	"msRegionOverflow",
	"msReleasePointerCapture",
	"msRequestAnimationFrame",
	"msRequestFullscreen",
	"msSaveBlob",
	"msSaveOrOpenBlob",
	"msScrollChaining",
	"msScrollLimit",
	"msScrollLimitXMax",
	"msScrollLimitXMin",
	"msScrollLimitYMax",
	"msScrollLimitYMin",
	"msScrollRails",
	"msScrollSnapPointsX",
	"msScrollSnapPointsY",
	"msScrollSnapType",
	"msScrollSnapX",
	"msScrollSnapY",
	"msScrollTranslation",
	"msSetImmediate",
	"msSetMediaKeys",
	"msSetPointerCapture",
	"msTextCombineHorizontal",
	"msTextSizeAdjust",
	"msToBlob",
	"msTouchAction",
	"msTouchSelect",
	"msTraceAsyncCallbackCompleted",
	"msTraceAsyncCallbackStarting",
	"msTraceAsyncOperationCompleted",
	"msTraceAsyncOperationStarting",
	"msTransform",
	"msTransformOrigin",
	"msTransformStyle",
	"msTransition",
	"msTransitionDelay",
	"msTransitionDuration",
	"msTransitionProperty",
	"msTransitionTimingFunction",
	"msUnlockOrientation",
	"msUpdateAsyncCallbackRelation",
	"msUserSelect",
	"msVisibilityState",
	"msWrapFlow",
	"msWrapMargin",
	"msWrapThrough",
	"msWriteProfilerMark",
	"msZoom",
	"msZoomTo",
	"mt",
	"mul",
	"multiEntry",
	"multiSelectionObj",
	"multiline",
	"multiple",
	"multiply",
	"multiplySelf",
	"mutableFile",
	"muted",
	"n",
	"name",
	"nameProp",
	"namedItem",
	"namedRecordset",
	"names",
	"namespaceURI",
	"namespaces",
	"naturalHeight",
	"naturalWidth",
	"navigate",
	"navigation",
	"navigationMode",
	"navigationPreload",
	"navigationStart",
	"navigationType",
	"navigator",
	"near",
	"nearestViewportElement",
	"negative",
	"negotiated",
	"netscape",
	"networkState",
	"newScale",
	"newTranslate",
	"newURL",
	"newValue",
	"newValueSpecifiedUnits",
	"newVersion",
	"newhome",
	"next",
	"nextElementSibling",
	"nextHopProtocol",
	"nextNode",
	"nextPage",
	"nextSibling",
	"nickname",
	"noHref",
	"noModule",
	"noResize",
	"noShade",
	"noValidate",
	"noWrap",
	"node",
	"nodeName",
	"nodeType",
	"nodeValue",
	"nonce",
	"normalize",
	"normalizedPathSegList",
	"notationName",
	"notations",
	"note",
	"noteGrainOn",
	"noteOff",
	"noteOn",
	"notify",
	"now",
	"npnNegotiatedProtocol",
	"numOctaves",
	"number",
	"numberOfChannels",
	"numberOfInputs",
	"numberOfItems",
	"numberOfOutputs",
	"numberValue",
	"numberingSystem",
	"numeric",
	"oMatchesSelector",
	"object",
	"object-fit",
	"object-position",
	"objectFit",
	"objectPosition",
	"objectStore",
	"objectStoreNames",
	"observe",
	"observedAttributes",
	"of",
	"offscreenBuffering",
	"offset",
	"offset-anchor",
	"offset-block-end",
	"offset-block-start",
	"offset-distance",
	"offset-inline-end",
	"offset-inline-start",
	"offset-path",
	"offset-rotate",
	"offsetAnchor",
	"offsetBlockEnd",
	"offsetBlockStart",
	"offsetDistance",
	"offsetHeight",
	"offsetInlineEnd",
	"offsetInlineStart",
	"offsetLeft",
	"offsetNode",
	"offsetParent",
	"offsetPath",
	"offsetRotate",
	"offsetTop",
	"offsetWidth",
	"offsetX",
	"offsetY",
	"ok",
	"oldURL",
	"oldValue",
	"oldVersion",
	"olderShadowRoot",
	"onDownloadProgress",
	"onInstallStageChanged",
	"onLine",
	"onabort",
	"onabsolutedeviceorientation",
	"onactivate",
	"onactive",
	"onaddsourcebuffer",
	"onaddstream",
	"onaddtrack",
	"onafterprint",
	"onafterscriptexecute",
	"onafterupdate",
	"onanimationcancel",
	"onanimationend",
	"onanimationiteration",
	"onanimationstart",
	"onappinstalled",
	"onaudioend",
	"onaudioprocess",
	"onaudiostart",
	"onautocomplete",
	"onautocompleteerror",
	"onauxclick",
	"onbeforeactivate",
	"onbeforecopy",
	"onbeforecut",
	"onbeforedeactivate",
	"onbeforeeditfocus",
	"onbeforeinput",
	"onbeforeinstallprompt",
	"onbeforeload",
	"onbeforepaste",
	"onbeforeprint",
	"onbeforescriptexecute",
	"onbeforeunload",
	"onbeforeupdate",
	"onbeforexrselect",
	"onbegin",
	"onblocked",
	"onblur",
	"onbounce",
	"onboundary",
	"onbufferedamountlow",
	"oncached",
	"oncancel",
	"oncandidatewindowhide",
	"oncandidatewindowshow",
	"oncandidatewindowupdate",
	"oncanplay",
	"oncanplaythrough",
	"once",
	"oncellchange",
	"onchange",
	"oncharacteristicvaluechanged",
	"onchargingchange",
	"onchargingtimechange",
	"onchecking",
	"onclick",
	"onclose",
	"onclosing",
	"oncompassneedscalibration",
	"oncomplete",
	"onconnect",
	"onconnecting",
	"onconnectionavailable",
	"onconnectionstatechange",
	"oncontactchange",
	"oncontextmenu",
	"oncontrollerchange",
	"oncontrolselect",
	"oncopy",
	"oncuechange",
	"oncut",
	"ondataavailable",
	"ondatachannel",
	"ondatasetchanged",
	"ondatasetcomplete",
	"ondblclick",
	"ondeactivate",
	"ondevicechange",
	"ondevicelight",
	"ondevicemotion",
	"ondeviceorientation",
	"ondeviceorientationabsolute",
	"ondeviceproximity",
	"ondischargingtimechange",
	"ondisconnect",
	"ondisplay",
	"ondownloading",
	"ondrag",
	"ondragend",
	"ondragenter",
	"ondragexit",
	"ondragleave",
	"ondragover",
	"ondragstart",
	"ondrop",
	"ondurationchange",
	"onemptied",
	"onencrypted",
	"onend",
	"onended",
	"onenter",
	"onenterpictureinpicture",
	"onerror",
	"onerrorupdate",
	"onexit",
	"onfilterchange",
	"onfinish",
	"onfocus",
	"onfocusin",
	"onfocusout",
	"onformdata",
	"onfreeze",
	"onfullscreenchange",
	"onfullscreenerror",
	"ongatheringstatechange",
	"ongattserverdisconnected",
	"ongesturechange",
	"ongestureend",
	"ongesturestart",
	"ongotpointercapture",
	"onhashchange",
	"onhelp",
	"onicecandidate",
	"onicecandidateerror",
	"oniceconnectionstatechange",
	"onicegatheringstatechange",
	"oninactive",
	"oninput",
	"oninputsourceschange",
	"oninvalid",
	"onkeydown",
	"onkeypress",
	"onkeystatuseschange",
	"onkeyup",
	"onlanguagechange",
	"onlayoutcomplete",
	"onleavepictureinpicture",
	"onlevelchange",
	"onload",
	"onloadT",
	"onloadeddata",
	"onloadedmetadata",
	"onloadend",
	"onloading",
	"onloadingdone",
	"onloadingerror",
	"onloadstart",
	"onlosecapture",
	"onlostpointercapture",
	"only",
	"onmark",
	"onmessage",
	"onmessageerror",
	"onmidimessage",
	"onmousedown",
	"onmouseenter",
	"onmouseleave",
	"onmousemove",
	"onmouseout",
	"onmouseover",
	"onmouseup",
	"onmousewheel",
	"onmove",
	"onmoveend",
	"onmovestart",
	"onmozfullscreenchange",
	"onmozfullscreenerror",
	"onmozorientationchange",
	"onmozpointerlockchange",
	"onmozpointerlockerror",
	"onmscontentzoom",
	"onmsfullscreenchange",
	"onmsfullscreenerror",
	"onmsgesturechange",
	"onmsgesturedoubletap",
	"onmsgestureend",
	"onmsgesturehold",
	"onmsgesturestart",
	"onmsgesturetap",
	"onmsgotpointercapture",
	"onmsinertiastart",
	"onmslostpointercapture",
	"onmsmanipulationstatechanged",
	"onmsneedkey",
	"onmsorientationchange",
	"onmspointercancel",
	"onmspointerdown",
	"onmspointerenter",
	"onmspointerhover",
	"onmspointerleave",
	"onmspointermove",
	"onmspointerout",
	"onmspointerover",
	"onmspointerup",
	"onmssitemodejumplistitemremoved",
	"onmsthumbnailclick",
	"onmute",
	"onnegotiationneeded",
	"onnomatch",
	"onnoupdate",
	"onobsolete",
	"onoffline",
	"ononline",
	"onopen",
	"onorientationchange",
	"onoverconstrained",
	"onpage",
	"onpagechange",
	"onpagehide",
	"onpageshow",
	"onpaste",
	"onpause",
	"onpayerdetailchange",
	"onpaymentmethodchange",
	"onplay",
	"onplaying",
	"onpluginstreamstart",
	"onpointercancel",
	"onpointerdown",
	"onpointerenter",
	"onpointerleave",
	"onpointerlockchange",
	"onpointerlockerror",
	"onpointermove",
	"onpointerout",
	"onpointerover",
	"onpointerrawupdate",
	"onpointerup",
	"onpopstate",
	"onprocessorerror",
	"onprogress",
	"onpropertychange",
	"onratechange",
	"onreading",
	"onreadystatechange",
	"onrejectionhandled",
	"onrelease",
	"onremove",
	"onremovesourcebuffer",
	"onremovestream",
	"onremovetrack",
	"onrepeat",
	"onreset",
	"onresize",
	"onresizeend",
	"onresizestart",
	"onresourcetimingbufferfull",
	"onresult",
	"onresume",
	"onrowenter",
	"onrowexit",
	"onrowsdelete",
	"onrowsinserted",
	"onscroll",
	"onsearch",
	"onsecuritypolicyviolation",
	"onseeked",
	"onseeking",
	"onselect",
	"onselectedcandidatepairchange",
	"onselectend",
	"onselectionchange",
	"onselectstart",
	"onshippingaddresschange",
	"onshippingoptionchange",
	"onshow",
	"onsignalingstatechange",
	"onsoundend",
	"onsoundstart",
	"onsourceclose",
	"onsourceclosed",
	"onsourceended",
	"onsourceopen",
	"onspeechend",
	"onspeechstart",
	"onsqueeze",
	"onsqueezeend",
	"onsqueezestart",
	"onstalled",
	"onstart",
	"onstatechange",
	"onstop",
	"onstorage",
	"onstoragecommit",
	"onsubmit",
	"onsuccess",
	"onsuspend",
	"onterminate",
	"ontextinput",
	"ontimeout",
	"ontimeupdate",
	"ontoggle",
	"ontonechange",
	"ontouchcancel",
	"ontouchend",
	"ontouchmove",
	"ontouchstart",
	"ontrack",
	"ontransitioncancel",
	"ontransitionend",
	"ontransitionrun",
	"ontransitionstart",
	"onunhandledrejection",
	"onunload",
	"onunmute",
	"onupdate",
	"onupdateend",
	"onupdatefound",
	"onupdateready",
	"onupdatestart",
	"onupgradeneeded",
	"onuserproximity",
	"onversionchange",
	"onvisibilitychange",
	"onvoiceschanged",
	"onvolumechange",
	"onvrdisplayactivate",
	"onvrdisplayconnect",
	"onvrdisplaydeactivate",
	"onvrdisplaydisconnect",
	"onvrdisplaypresentchange",
	"onwaiting",
	"onwaitingforkey",
	"onwarning",
	"onwebkitanimationend",
	"onwebkitanimationiteration",
	"onwebkitanimationstart",
	"onwebkitcurrentplaybacktargetiswirelesschanged",
	"onwebkitfullscreenchange",
	"onwebkitfullscreenerror",
	"onwebkitkeyadded",
	"onwebkitkeyerror",
	"onwebkitkeymessage",
	"onwebkitmouseforcechanged",
	"onwebkitmouseforcedown",
	"onwebkitmouseforceup",
	"onwebkitmouseforcewillbegin",
	"onwebkitneedkey",
	"onwebkitorientationchange",
	"onwebkitplaybacktargetavailabilitychanged",
	"onwebkitpointerlockchange",
	"onwebkitpointerlockerror",
	"onwebkitresourcetimingbufferfull",
	"onwebkittransitionend",
	"onwheel",
	"onzoom",
	"opacity",
	"open",
	"openCursor",
	"openDatabase",
	"openKeyCursor",
	"opened",
	"opener",
	"opera",
	"operationType",
	"operator",
	"opr",
	"opsProfile",
	"optimum",
	"options",
	"or",
	"order",
	"orderX",
	"orderY",
	"ordered",
	"org",
	"organization",
	"orient",
	"orientAngle",
	"orientType",
	"orientation",
	"orientationX",
	"orientationY",
	"orientationZ",
	"origin",
	"originalPolicy",
	"originalTarget",
	"orphans",
	"oscpu",
	"outcome",
	"outerHTML",
	"outerHeight",
	"outerText",
	"outerWidth",
	"outline",
	"outline-color",
	"outline-offset",
	"outline-style",
	"outline-width",
	"outlineColor",
	"outlineOffset",
	"outlineStyle",
	"outlineWidth",
	"outputBuffer",
	"outputLatency",
	"outputs",
	"overflow",
	"overflow-anchor",
	"overflow-block",
	"overflow-inline",
	"overflow-wrap",
	"overflow-x",
	"overflow-y",
	"overflowAnchor",
	"overflowBlock",
	"overflowInline",
	"overflowWrap",
	"overflowX",
	"overflowY",
	"overrideMimeType",
	"oversample",
	"overscroll-behavior",
	"overscroll-behavior-block",
	"overscroll-behavior-inline",
	"overscroll-behavior-x",
	"overscroll-behavior-y",
	"overscrollBehavior",
	"overscrollBehaviorBlock",
	"overscrollBehaviorInline",
	"overscrollBehaviorX",
	"overscrollBehaviorY",
	"ownKeys",
	"ownerDocument",
	"ownerElement",
	"ownerNode",
	"ownerRule",
	"ownerSVGElement",
	"owningElement",
	"p1",
	"p2",
	"p3",
	"p4",
	"packetSize",
	"packets",
	"pad",
	"padEnd",
	"padStart",
	"padding",
	"padding-block",
	"padding-block-end",
	"padding-block-start",
	"padding-bottom",
	"padding-inline",
	"padding-inline-end",
	"padding-inline-start",
	"padding-left",
	"padding-right",
	"padding-top",
	"paddingBlock",
	"paddingBlockEnd",
	"paddingBlockStart",
	"paddingBottom",
	"paddingInline",
	"paddingInlineEnd",
	"paddingInlineStart",
	"paddingLeft",
	"paddingRight",
	"paddingTop",
	"page",
	"page-break-after",
	"page-break-before",
	"page-break-inside",
	"pageBreakAfter",
	"pageBreakBefore",
	"pageBreakInside",
	"pageCount",
	"pageLeft",
	"pageT",
	"pageTop",
	"pageX",
	"pageXOffset",
	"pageY",
	"pageYOffset",
	"pages",
	"paint-order",
	"paintOrder",
	"paintRequests",
	"paintType",
	"paintWorklet",
	"palette",
	"pan",
	"panningModel",
	"parameters",
	"parent",
	"parentElement",
	"parentNode",
	"parentRule",
	"parentStyleSheet",
	"parentTextEdit",
	"parentWindow",
	"parse",
	"parseAll",
	"parseFloat",
	"parseFromString",
	"parseInt",
	"part",
	"participants",
	"passive",
	"password",
	"pasteHTML",
	"path",
	"pathLength",
	"pathSegList",
	"pathSegType",
	"pathSegTypeAsLetter",
	"pathname",
	"pattern",
	"patternContentUnits",
	"patternMismatch",
	"patternTransform",
	"patternUnits",
	"pause",
	"pauseAnimations",
	"pauseOnExit",
	"pauseTransformFeedback",
	"paused",
	"payerEmail",
	"payerName",
	"payerPhone",
	"paymentManager",
	"pc",
	"peerIdentity",
	"pending",
	"pendingLocalDescription",
	"pendingRemoteDescription",
	"percent",
	"performance",
	"periodicSync",
	"permission",
	"permissionState",
	"permissions",
	"persist",
	"persisted",
	"personalbar",
	"perspective",
	"perspective-origin",
	"perspectiveOrigin",
	"perspectiveOriginX",
	"perspectiveOriginY",
	"phone",
	"phoneticFamilyName",
	"phoneticGivenName",
	"photo",
	"pictureInPictureElement",
	"pictureInPictureEnabled",
	"pictureInPictureWindow",
	"ping",
	"pipeThrough",
	"pipeTo",
	"pitch",
	"pixelBottom",
	"pixelDepth",
	"pixelHeight",
	"pixelLeft",
	"pixelRight",
	"pixelStorei",
	"pixelTop",
	"pixelUnitToMillimeterX",
	"pixelUnitToMillimeterY",
	"pixelWidth",
	"place-content",
	"place-items",
	"place-self",
	"placeContent",
	"placeItems",
	"placeSelf",
	"placeholder",
	"platform",
	"platforms",
	"play",
	"playEffect",
	"playState",
	"playbackRate",
	"playbackState",
	"playbackTime",
	"played",
	"playoutDelayHint",
	"playsInline",
	"plugins",
	"pluginspage",
	"pname",
	"pointer-events",
	"pointerBeforeReferenceNode",
	"pointerEnabled",
	"pointerEvents",
	"pointerId",
	"pointerLockElement",
	"pointerType",
	"points",
	"pointsAtX",
	"pointsAtY",
	"pointsAtZ",
	"polygonOffset",
	"pop",
	"populateMatrix",
	"popupWindowFeatures",
	"popupWindowName",
	"popupWindowURI",
	"port",
	"port1",
	"port2",
	"ports",
	"posBottom",
	"posHeight",
	"posLeft",
	"posRight",
	"posTop",
	"posWidth",
	"pose",
	"position",
	"positionAlign",
	"positionX",
	"positionY",
	"positionZ",
	"postError",
	"postMessage",
	"postalCode",
	"poster",
	"pow",
	"powerEfficient",
	"powerOff",
	"preMultiplySelf",
	"precision",
	"preferredStyleSheetSet",
	"preferredStylesheetSet",
	"prefix",
	"preload",
	"prepend",
	"presentation",
	"preserveAlpha",
	"preserveAspectRatio",
	"preserveAspectRatioString",
	"pressed",
	"pressure",
	"prevValue",
	"preventDefault",
	"preventExtensions",
	"preventSilentAccess",
	"previousElementSibling",
	"previousNode",
	"previousPage",
	"previousRect",
	"previousScale",
	"previousSibling",
	"previousTranslate",
	"primaryKey",
	"primitiveType",
	"primitiveUnits",
	"principals",
	"print",
	"priority",
	"privateKey",
	"probablySupportsContext",
	"process",
	"processIceMessage",
	"processingEnd",
	"processingStart",
	"product",
	"productId",
	"productName",
	"productSub",
	"profile",
	"profileEnd",
	"profiles",
	"projectionMatrix",
	"promise",
	"prompt",
	"properties",
	"propertyIsEnumerable",
	"propertyName",
	"protocol",
	"protocolLong",
	"prototype",
	"provider",
	"pseudoClass",
	"pseudoElement",
	"pt",
	"publicId",
	"publicKey",
	"published",
	"pulse",
	"push",
	"pushManager",
	"pushNotification",
	"pushState",
	"put",
	"putImageData",
	"px",
	"quadraticCurveTo",
	"qualifier",
	"quaternion",
	"query",
	"queryCommandEnabled",
	"queryCommandIndeterm",
	"queryCommandState",
	"queryCommandSupported",
	"queryCommandText",
	"queryCommandValue",
	"querySelector",
	"querySelectorAll",
	"queryUsageAndQuota",
	"queueMicrotask",
	"quote",
	"quotes",
	"r",
	"r1",
	"r2",
	"race",
	"rad",
	"radiogroup",
	"radiusX",
	"radiusY",
	"random",
	"range",
	"rangeCount",
	"rangeMax",
	"rangeMin",
	"rangeOffset",
	"rangeOverflow",
	"rangeParent",
	"rangeUnderflow",
	"rate",
	"ratio",
	"raw",
	"rawId",
	"read",
	"readAsArrayBuffer",
	"readAsBinaryString",
	"readAsBlob",
	"readAsDataURL",
	"readAsText",
	"readBuffer",
	"readEntries",
	"readOnly",
	"readPixels",
	"readReportRequested",
	"readText",
	"readTransaction",
	"readValue",
	"readable",
	"ready",
	"readyState",
	"reason",
	"reboot",
	"receivedAlert",
	"receivedTime",
	"receiver",
	"receivers",
	"recipient",
	"reconnect",
	"record",
	"recordEnd",
	"recordNumber",
	"recordsAvailable",
	"recordset",
	"rect",
	"red",
	"redEyeReduction",
	"redirect",
	"redirectCount",
	"redirectEnd",
	"redirectStart",
	"redirected",
	"reduce",
	"reduceRight",
	"reduction",
	"refDistance",
	"refX",
	"refY",
	"referenceNode",
	"referenceSpace",
	"referrer",
	"referrerPolicy",
	"refresh",
	"region",
	"regionAnchorX",
	"regionAnchorY",
	"regionId",
	"regions",
	"register",
	"registerContentHandler",
	"registerElement",
	"registerProperty",
	"registerProtocolHandler",
	"reject",
	"rel",
	"relList",
	"relatedAddress",
	"relatedNode",
	"relatedPort",
	"relatedTarget",
	"release",
	"releaseCapture",
	"releaseEvents",
	"releaseInterface",
	"releaseLock",
	"releasePointerCapture",
	"releaseShaderCompiler",
	"reliable",
	"reliableWrite",
	"reload",
	"rem",
	"remainingSpace",
	"remote",
	"remoteDescription",
	"remove",
	"removeAllRanges",
	"removeAttribute",
	"removeAttributeNS",
	"removeAttributeNode",
	"removeBehavior",
	"removeChild",
	"removeCue",
	"removeEventListener",
	"removeFilter",
	"removeImport",
	"removeItem",
	"removeListener",
	"removeNamedItem",
	"removeNamedItemNS",
	"removeNode",
	"removeParameter",
	"removeProperty",
	"removeRange",
	"removeRegion",
	"removeRule",
	"removeRules",
	"removeSiteSpecificTrackingException",
	"removeSourceBuffer",
	"removeStream",
	"removeTrack",
	"removeVariable",
	"removeWakeLockListener",
	"removeWebWideTrackingException",
	"removed",
	"removedNodes",
	"renderHeight",
	"renderState",
	"renderTime",
	"renderWidth",
	"renderbufferStorage",
	"renderbufferStorageMultisample",
	"renderedBuffer",
	"renderingMode",
	"renotify",
	"repeat",
	"replace",
	"replaceAdjacentText",
	"replaceAll",
	"replaceChild",
	"replaceChildren",
	"replaceData",
	"replaceId",
	"replaceItem",
	"replaceNode",
	"replaceState",
	"replaceSync",
	"replaceTrack",
	"replaceWholeText",
	"replaceWith",
	"reportValidity",
	"request",
	"requestAnimationFrame",
	"requestAutocomplete",
	"requestData",
	"requestDevice",
	"requestFrame",
	"requestFullscreen",
	"requestHitTestSource",
	"requestHitTestSourceForTransientInput",
	"requestId",
	"requestIdleCallback",
	"requestMIDIAccess",
	"requestMediaKeySystemAccess",
	"requestPermission",
	"requestPictureInPicture",
	"requestPointerLock",
	"requestPresent",
	"requestQuota",
	"requestReferenceSpace",
	"requestSession",
	"requestStart",
	"requestStorageAccess",
	"requestSubmit",
	"requestTime",
	"requestVideoFrameCallback",
	"requestedLocale",
	"requestingWindow",
	"requireInteraction",
	"required",
	"requiredExtensions",
	"requiredFeatures",
	"reset",
	"resetPose",
	"resetTransform",
	"resize",
	"resizeBy",
	"resizeTo",
	"resolve",
	"resolved",
	"resolvedOptions",
	"resource-history",
	"resourcesFramesExpanded",
	"response",
	"responseBody",
	"responseEnd",
	"responseReady",
	"responseStart",
	"responseText",
	"responseType",
	"responseURL",
	"responseXML",
	"restartIce",
	"restore",
	"result",
	"resultIndex",
	"resultType",
	"results",
	"resume",
	"resumeTransformFeedback",
	"retry",
	"returnValue",
	"rev",
	"reverse",
	"reversed",
	"revocable",
	"revokeObjectURL",
	"rgbColor",
	"right",
	"rightContext",
	"rightDegrees",
	"rightMargin",
	"rightProjectionMatrix",
	"rightViewMatrix",
	"role",
	"rolloffFactor",
	"root",
	"rootBounds",
	"rootElement",
	"rootMargin",
	"rotate",
	"rotateAxisAngle",
	"rotateAxisAngleSelf",
	"rotateFromVector",
	"rotateFromVectorSelf",
	"rotateSelf",
	"rotation",
	"rotationAngle",
	"rotationRate",
	"round",
	"row-gap",
	"rowGap",
	"rowIndex",
	"rowSpan",
	"rows",
	"rowsAffected",
	"rtcpTransport",
	"rtt",
	"ruby-align",
	"ruby-position",
	"rubyAlign",
	"rubyOverhang",
	"rubyPosition",
	"rules",
	"runningState",
	"runtime",
	"runtimeStyle",
	"rx",
	"ry",
	"s",
	"safari",
	"sample",
	"sampleCoverage",
	"sampleRate",
	"samplerParameterf",
	"samplerParameteri",
	"sandbox",
	"save",
	"saveData",
	"scale",
	"scale3d",
	"scale3dSelf",
	"scaleNonUniform",
	"scaleNonUniformSelf",
	"scaleSelf",
	"scheme",
	"scissor",
	"scope",
	"scopeName",
	"scoped",
	"screen",
	"screenBrightness",
	"screenEnabled",
	"screenLeft",
	"screenPixelToMillimeterX",
	"screenPixelToMillimeterY",
	"screenTop",
	"screenX",
	"screenY",
	"script",
	"scriptURL",
	"scripts",
	"scroll",
	"scroll-behavior",
	"scroll-margin",
	"scroll-margin-block",
	"scroll-margin-block-end",
	"scroll-margin-block-start",
	"scroll-margin-bottom",
	"scroll-margin-inline",
	"scroll-margin-inline-end",
	"scroll-margin-inline-start",
	"scroll-margin-left",
	"scroll-margin-right",
	"scroll-margin-top",
	"scroll-padding",
	"scroll-padding-block",
	"scroll-padding-block-end",
	"scroll-padding-block-start",
	"scroll-padding-bottom",
	"scroll-padding-inline",
	"scroll-padding-inline-end",
	"scroll-padding-inline-start",
	"scroll-padding-left",
	"scroll-padding-right",
	"scroll-padding-top",
	"scroll-snap-align",
	"scroll-snap-coordinate",
	"scroll-snap-destination",
	"scroll-snap-points-x",
	"scroll-snap-points-y",
	"scroll-snap-type",
	"scroll-snap-type-x",
	"scroll-snap-type-y",
	"scrollAmount",
	"scrollBehavior",
	"scrollBy",
	"scrollByLines",
	"scrollByPages",
	"scrollDelay",
	"scrollHeight",
	"scrollIntoView",
	"scrollIntoViewIfNeeded",
	"scrollLeft",
	"scrollLeftMax",
	"scrollMargin",
	"scrollMarginBlock",
	"scrollMarginBlockEnd",
	"scrollMarginBlockStart",
	"scrollMarginBottom",
	"scrollMarginInline",
	"scrollMarginInlineEnd",
	"scrollMarginInlineStart",
	"scrollMarginLeft",
	"scrollMarginRight",
	"scrollMarginTop",
	"scrollMaxX",
	"scrollMaxY",
	"scrollPadding",
	"scrollPaddingBlock",
	"scrollPaddingBlockEnd",
	"scrollPaddingBlockStart",
	"scrollPaddingBottom",
	"scrollPaddingInline",
	"scrollPaddingInlineEnd",
	"scrollPaddingInlineStart",
	"scrollPaddingLeft",
	"scrollPaddingRight",
	"scrollPaddingTop",
	"scrollRestoration",
	"scrollSnapAlign",
	"scrollSnapCoordinate",
	"scrollSnapDestination",
	"scrollSnapMargin",
	"scrollSnapMarginBottom",
	"scrollSnapMarginLeft",
	"scrollSnapMarginRight",
	"scrollSnapMarginTop",
	"scrollSnapPointsX",
	"scrollSnapPointsY",
	"scrollSnapStop",
	"scrollSnapType",
	"scrollSnapTypeX",
	"scrollSnapTypeY",
	"scrollTo",
	"scrollTop",
	"scrollTopMax",
	"scrollWidth",
	"scrollX",
	"scrollY",
	"scrollbar-color",
	"scrollbar-width",
	"scrollbar3dLightColor",
	"scrollbarArrowColor",
	"scrollbarBaseColor",
	"scrollbarColor",
	"scrollbarDarkShadowColor",
	"scrollbarFaceColor",
	"scrollbarHighlightColor",
	"scrollbarShadowColor",
	"scrollbarTrackColor",
	"scrollbarWidth",
	"scrollbars",
	"scrolling",
	"scrollingElement",
	"sctp",
	"sctpCauseCode",
	"sdp",
	"sdpLineNumber",
	"sdpMLineIndex",
	"sdpMid",
	"seal",
	"search",
	"searchBox",
	"searchBoxJavaBridge_",
	"searchParams",
	"second",
	"sectionRowIndex",
	"secureConnectionStart",
	"security",
	"seed",
	"seekToNextFrame",
	"seekable",
	"seeking",
	"select",
	"selectAllChildren",
	"selectAlternateInterface",
	"selectConfiguration",
	"selectNode",
	"selectNodeContents",
	"selectNodes",
	"selectSingleNode",
	"selectSubString",
	"selected",
	"selectedIndex",
	"selectedOption",
	"selectedOptions",
	"selectedStyleSheetSet",
	"selectedStylesheetSet",
	"selection",
	"selectionDirection",
	"selectionEnd",
	"selectionStart",
	"selector",
	"selectorText",
	"self",
	"send",
	"sendAsBinary",
	"sendBeacon",
	"sendMessage",
	"sender",
	"sensitivity",
	"sentAlert",
	"sentTimestamp",
	"separator",
	"serialNumber",
	"serializeToString",
	"serverTiming",
	"service",
	"serviceWorker",
	"session",
	"sessionId",
	"sessionStorage",
	"set",
	"setActionHandler",
	"setActive",
	"setAlpha",
	"setAppBadge",
	"setAttribute",
	"setAttributeNS",
	"setAttributeNode",
	"setAttributeNodeNS",
	"setBaseAndExtent",
	"setBigInt64",
	"setBigUint64",
	"setBingCurrentSearchDefault",
	"setCapture",
	"setCodecPreferences",
	"setColor",
	"setCompositeOperation",
	"setConfiguration",
	"setCurrentTime",
	"setCustomValidity",
	"setData",
	"setDate",
	"setDirection",
	"setDragImage",
	"setEnd",
	"setEndAfter",
	"setEndBefore",
	"setEndPoint",
	"setFillColor",
	"setFilterRes",
	"setFloat32",
	"setFloat64",
	"setFloatValue",
	"setFormValue",
	"setFullYear",
	"setHeaderValue",
	"setHours",
	"setIdentityProvider",
	"setImmediate",
	"setInt16",
	"setInt32",
	"setInt8",
	"setInterval",
	"setItem",
	"setKeyframes",
	"setLineCap",
	"setLineDash",
	"setLineJoin",
	"setLineWidth",
	"setLiveSeekableRange",
	"setLocalDescription",
	"setMatrix",
	"setMatrixValue",
	"setMediaKeys",
	"setMilliseconds",
	"setMinutes",
	"setMiterLimit",
	"setMonth",
	"setNamedItem",
	"setNamedItemNS",
	"setNonUserCodeExceptions",
	"setOrientToAngle",
	"setOrientToAuto",
	"setOrientation",
	"setOverrideHistoryNavigationMode",
	"setPaint",
	"setParameter",
	"setParameters",
	"setPeriodicWave",
	"setPointerCapture",
	"setPosition",
	"setPositionState",
	"setPreference",
	"setProperty",
	"setPrototypeOf",
	"setRGBColor",
	"setRGBColorICCColor",
	"setRadius",
	"setRangeText",
	"setRemoteDescription",
	"setRequestHeader",
	"setResizable",
	"setResourceTimingBufferSize",
	"setRotate",
	"setScale",
	"setSeconds",
	"setSelectionRange",
	"setServerCertificate",
	"setShadow",
	"setSinkId",
	"setSkewX",
	"setSkewY",
	"setStart",
	"setStartAfter",
	"setStartBefore",
	"setStdDeviation",
	"setStreams",
	"setStringValue",
	"setStrokeColor",
	"setSuggestResult",
	"setTargetAtTime",
	"setTargetValueAtTime",
	"setTime",
	"setTimeout",
	"setTransform",
	"setTranslate",
	"setUTCDate",
	"setUTCFullYear",
	"setUTCHours",
	"setUTCMilliseconds",
	"setUTCMinutes",
	"setUTCMonth",
	"setUTCSeconds",
	"setUint16",
	"setUint32",
	"setUint8",
	"setUri",
	"setValidity",
	"setValueAtTime",
	"setValueCurveAtTime",
	"setVariable",
	"setVelocity",
	"setVersion",
	"setYear",
	"settingName",
	"settingValue",
	"sex",
	"shaderSource",
	"shadowBlur",
	"shadowColor",
	"shadowOffsetX",
	"shadowOffsetY",
	"shadowRoot",
	"shape",
	"shape-image-threshold",
	"shape-margin",
	"shape-outside",
	"shape-rendering",
	"shapeImageThreshold",
	"shapeMargin",
	"shapeOutside",
	"shapeRendering",
	"sheet",
	"shift",
	"shiftKey",
	"shiftLeft",
	"shippingAddress",
	"shippingOption",
	"shippingType",
	"show",
	"showHelp",
	"showModal",
	"showModalDialog",
	"showModelessDialog",
	"showNotification",
	"sidebar",
	"sign",
	"signal",
	"signalingState",
	"signature",
	"silent",
	"sin",
	"singleNodeValue",
	"sinh",
	"sinkId",
	"sittingToStandingTransform",
	"size",
	"sizeToContent",
	"sizeX",
	"sizeZ",
	"sizes",
	"skewX",
	"skewXSelf",
	"skewY",
	"skewYSelf",
	"slice",
	"slope",
	"slot",
	"small",
	"smil",
	"smooth",
	"smoothingTimeConstant",
	"snapToLines",
	"snapshotItem",
	"snapshotLength",
	"some",
	"sort",
	"sortingCode",
	"source",
	"sourceBuffer",
	"sourceBuffers",
	"sourceCapabilities",
	"sourceFile",
	"sourceIndex",
	"sourceURL",
	"sources",
	"spacing",
	"span",
	"speak",
	"speakAs",
	"speaking",
	"species",
	"specified",
	"specularConstant",
	"specularExponent",
	"speechSynthesis",
	"speed",
	"speedOfSound",
	"spellcheck",
	"splice",
	"split",
	"splitText",
	"spreadMethod",
	"sqrt",
	"src",
	"srcElement",
	"srcFilter",
	"srcObject",
	"srcUrn",
	"srcdoc",
	"srclang",
	"srcset",
	"stack",
	"stackTraceLimit",
	"stacktrace",
	"stageParameters",
	"standalone",
	"standby",
	"start",
	"startContainer",
	"startE",
	"startIce",
	"startLoadTime",
	"startMessages",
	"startNotifications",
	"startOffset",
	"startRendering",
	"startSoftwareUpdate",
	"startTime",
	"startsWith",
	"state",
	"status",
	"statusCode",
	"statusMessage",
	"statusText",
	"statusbar",
	"stdDeviationX",
	"stdDeviationY",
	"stencilFunc",
	"stencilFuncSeparate",
	"stencilMask",
	"stencilMaskSeparate",
	"stencilOp",
	"stencilOpSeparate",
	"step",
	"stepDown",
	"stepMismatch",
	"stepUp",
	"sticky",
	"stitchTiles",
	"stop",
	"stop-color",
	"stop-opacity",
	"stopColor",
	"stopImmediatePropagation",
	"stopNotifications",
	"stopOpacity",
	"stopPropagation",
	"stopped",
	"storage",
	"storageArea",
	"storageName",
	"storageStatus",
	"store",
	"storeSiteSpecificTrackingException",
	"storeWebWideTrackingException",
	"stpVersion",
	"stream",
	"streams",
	"strength",
	"stretch",
	"strike",
	"stringValue",
	"stringify",
	"stroke",
	"stroke-dasharray",
	"stroke-dashoffset",
	"stroke-linecap",
	"stroke-linejoin",
	"stroke-miterlimit",
	"stroke-opacity",
	"stroke-width",
	"strokeColor",
	"strokeDasharray",
	"strokeDashoffset",
	"strokeLinecap",
	"strokeLinejoin",
	"strokeMiterlimit",
	"strokeOpacity",
	"strokeRect",
	"strokeStyle",
	"strokeText",
	"strokeWidth",
	"style",
	"styleFloat",
	"styleMap",
	"styleMedia",
	"styleSheet",
	"styleSheetSets",
	"styleSheets",
	"sub",
	"subarray",
	"subject",
	"submit",
	"submitFrame",
	"submitter",
	"subscribe",
	"substr",
	"substring",
	"substringData",
	"subtle",
	"subtree",
	"suffix",
	"suffixes",
	"summary",
	"sup",
	"supported",
	"supportedContentEncodings",
	"supportedEntryTypes",
	"supportedLocalesOf",
	"supports",
	"supportsSession",
	"surfaceScale",
	"surroundContents",
	"suspend",
	"suspendRedraw",
	"swapCache",
	"swapNode",
	"sweepFlag",
	"symbols",
	"sync",
	"sysexEnabled",
	"system",
	"systemCode",
	"systemId",
	"systemLanguage",
	"systemXDPI",
	"systemYDPI",
	"tBodies",
	"tFoot",
	"tHead",
	"tabIndex",
	"tabSize",
	"table",
	"table-layout",
	"tableLayout",
	"tableValues",
	"tag",
	"tagName",
	"tagUrn",
	"tags",
	"taintEnabled",
	"takeHeapSnapshot",
	"takePhoto",
	"takeRecords",
	"tan",
	"tangentialPressure",
	"tanh",
	"target",
	"targetElement",
	"targetRayMode",
	"targetRaySpace",
	"targetTouches",
	"targetX",
	"targetY",
	"tcpType",
	"tee",
	"tel",
	"terminate",
	"test",
	"texImage2D",
	"texImage3D",
	"texParameterf",
	"texParameteri",
	"texStorage2D",
	"texStorage3D",
	"texSubImage2D",
	"texSubImage3D",
	"text",
	"text-align",
	"text-align-last",
	"text-anchor",
	"text-combine-upright",
	"text-decoration",
	"text-decoration-color",
	"text-decoration-line",
	"text-decoration-skip-ink",
	"text-decoration-style",
	"text-decoration-thickness",
	"text-emphasis",
	"text-emphasis-color",
	"text-emphasis-position",
	"text-emphasis-style",
	"text-indent",
	"text-justify",
	"text-orientation",
	"text-overflow",
	"text-rendering",
	"text-shadow",
	"text-transform",
	"text-underline-offset",
	"text-underline-position",
	"text/pdf",
	"textAlign",
	"textAlignLast",
	"textAnchor",
	"textAutospace",
	"textBaseline",
	"textCombineUpright",
	"textContent",
	"textDecoration",
	"textDecorationBlink",
	"textDecorationColor",
	"textDecorationLine",
	"textDecorationLineThrough",
	"textDecorationNone",
	"textDecorationOverline",
	"textDecorationSkipInk",
	"textDecorationStyle",
	"textDecorationThickness",
	"textDecorationUnderline",
	"textEmphasis",
	"textEmphasisColor",
	"textEmphasisPosition",
	"textEmphasisStyle",
	"textIndent",
	"textJustify",
	"textJustifyTrim",
	"textKashida",
	"textKashidaSpace",
	"textLength",
	"textOrientation",
	"textOverflow",
	"textRendering",
	"textShadow",
	"textSizeAdjust",
	"textTracks",
	"textTransform",
	"textUnderlineOffset",
	"textUnderlinePosition",
	"then",
	"threadId",
	"threshold",
	"thresholds",
	"tiltX",
	"tiltY",
	"time",
	"timeEnd",
	"timeLog",
	"timeOrigin",
	"timeRemaining",
	"timeStamp",
	"timeZone",
	"timeZoneName",
	"timecode",
	"timeline",
	"timelineEnd",
	"timelineTime",
	"timeout",
	"timestamp",
	"timestampOffset",
	"timing",
	"title",
	"to",
	"toArray",
	"toBlob",
	"toDataURL",
	"toDateString",
	"toElement",
	"toExponential",
	"toFixed",
	"toFloat32Array",
	"toFloat64Array",
	"toGMTString",
	"toISOString",
	"toJSON",
	"toLocaleDateString",
	"toLocaleFormat",
	"toLocaleLowerCase",
	"toLocaleString",
	"toLocaleTimeString",
	"toLocaleUpperCase",
	"toLowerCase",
	"toMatrix",
	"toMethod",
	"toPrecision",
	"toPrimitive",
	"toSdp",
	"toSource",
	"toStaticHTML",
	"toString",
	"toStringTag",
	"toSum",
	"toTimeString",
	"toUTCString",
	"toUpperCase",
	"toggle",
	"toggleAttribute",
	"toggleLongPressEnabled",
	"tone",
	"toneBuffer",
	"tooLong",
	"tooShort",
	"toolbar",
	"top",
	"topMargin",
	"total",
	"totalFrameDelay",
	"totalJSHeapSize",
	"totalSize",
	"totalVideoFrames",
	"touch-action",
	"touchAction",
	"touched",
	"touches",
	"trace",
	"track",
	"trackVisibility",
	"tran",
	"transaction",
	"transactions",
	"transceiver",
	"transferControlToOffscreen",
	"transferFromImageBitmap",
	"transferImageBitmap",
	"transferIn",
	"transferOut",
	"transferSize",
	"transferToImageBitmap",
	"transform",
	"transform-box",
	"transform-origin",
	"transform-style",
	"transformBox",
	"transformFeedbackVaryings",
	"transformOrigin",
	"transformOriginX",
	"transformOriginY",
	"transformOriginZ",
	"transformPoint",
	"transformString",
	"transformStyle",
	"transformToDocument",
	"transformToFragment",
	"transition",
	"transition-delay",
	"transition-duration",
	"transition-property",
	"transition-timing-function",
	"transitionDelay",
	"transitionDuration",
	"transitionProperty",
	"transitionTimingFunction",
	"translate",
	"translateSelf",
	"translationX",
	"translationY",
	"transport",
	"trim",
	"trimEnd",
	"trimLeft",
	"trimRight",
	"trimStart",
	"trueSpeed",
	"trunc",
	"truncate",
	"trustedTypes",
	"turn",
	"twist",
	"type",
	"typeDetail",
	"typeMismatch",
	"typeMustMatch",
	"types",
	"tz",
	"u2f",
	"ubound",
	"undefined",
	"unescape",
	"uneval",
	"unicode",
	"unicode-bidi",
	"unicodeBidi",
	"unicodeRange",
	"uniform1f",
	"uniform1fv",
	"uniform1i",
	"uniform1iv",
	"uniform1ui",
	"uniform1uiv",
	"uniform2f",
	"uniform2fv",
	"uniform2i",
	"uniform2iv",
	"uniform2ui",
	"uniform2uiv",
	"uniform3f",
	"uniform3fv",
	"uniform3i",
	"uniform3iv",
	"uniform3ui",
	"uniform3uiv",
	"uniform4f",
	"uniform4fv",
	"uniform4i",
	"uniform4iv",
	"uniform4ui",
	"uniform4uiv",
	"uniformBlockBinding",
	"uniformMatrix2fv",
	"uniformMatrix2x3fv",
	"uniformMatrix2x4fv",
	"uniformMatrix3fv",
	"uniformMatrix3x2fv",
	"uniformMatrix3x4fv",
	"uniformMatrix4fv",
	"uniformMatrix4x2fv",
	"uniformMatrix4x3fv",
	"unique",
	"uniqueID",
	"uniqueNumber",
	"unit",
	"unitType",
	"units",
	"unloadEventEnd",
	"unloadEventStart",
	"unlock",
	"unmount",
	"unobserve",
	"unpause",
	"unpauseAnimations",
	"unreadCount",
	"unregister",
	"unregisterContentHandler",
	"unregisterProtocolHandler",
	"unscopables",
	"unselectable",
	"unshift",
	"unsubscribe",
	"unsuspendRedraw",
	"unsuspendRedrawAll",
	"unwatch",
	"unwrapKey",
	"upDegrees",
	"upX",
	"upY",
	"upZ",
	"update",
	"updateCommands",
	"updateEnabled",
	"updateIce",
	"updateInterval",
	"updatePlaybackRate",
	"updateRenderState",
	"updateSettings",
	"updateTiming",
	"updateViaCache",
	"updateWith",
	"updated",
	"updating",
	"upgrade",
	"upload",
	"uploadTotal",
	"uploaded",
	"upper",
	"upperBound",
	"upperOpen",
	"uri",
	"url",
	"urn",
	"urns",
	"usage",
	"usages",
	"usb",
	"usbVersionMajor",
	"usbVersionMinor",
	"usbVersionSubminor",
	"useCurrentView",
	"useGrouping",
	"useMap",
	"useProgram",
	"usedJSHeapSize",
	"usedSpace",
	"user-select",
	"userActivation",
	"userAgent",
	"userChoice",
	"userHandle",
	"userHint",
	"userLanguage",
	"userProfile",
	"userSelect",
	"userVisibleOnly",
	"userZoom",
	"username",
	"usernameFragment",
	"utterance",
	"uuid",
	"v8BreakIterator",
	"v8Parse",
	"vAlign",
	"vLink",
	"valid",
	"validate",
	"validateProgram",
	"validationMessage",
	"validity",
	"value",
	"valueAsDate",
	"valueAsNumber",
	"valueAsString",
	"valueInSpecifiedUnits",
	"valueMissing",
	"valueOf",
	"valueText",
	"valueType",
	"values",
	"variable",
	"variant",
	"vector-effect",
	"vectorEffect",
	"velocityAngular",
	"velocityExpansion",
	"velocityX",
	"velocityY",
	"vendor",
	"vendorId",
	"vendorSub",
	"verify",
	"version",
	"vertexAttrib1f",
	"vertexAttrib1fv",
	"vertexAttrib2f",
	"vertexAttrib2fv",
	"vertexAttrib3f",
	"vertexAttrib3fv",
	"vertexAttrib4f",
	"vertexAttrib4fv",
	"vertexAttribDivisor",
	"vertexAttribDivisorANGLE",
	"vertexAttribI4i",
	"vertexAttribI4iv",
	"vertexAttribI4ui",
	"vertexAttribI4uiv",
	"vertexAttribIPointer",
	"vertexAttribPointer",
	"vertical",
	"vertical-align",
	"verticalAlign",
	"verticalOverflow",
	"vh",
	"vibrate",
	"vibrationActuator",
	"video/x-ms-asf",
	"video/x-ms-asf-plugin",
	"video/x-ms-wm",
	"video/x-ms-wmv",
	"video/x-ms-wvx",
	"videoBitsPerSecond",
	"videoHeight",
	"videoTracks",
	"videoWidth",
	"view",
	"viewBox",
	"viewBoxString",
	"viewTarget",
	"viewTargetString",
	"viewport",
	"viewportAnchorX",
	"viewportAnchorY",
	"viewportElement",
	"views",
	"violatedDirective",
	"visibility",
	"visibilityState",
	"visible",
	"visualViewport",
	"vlinkColor",
	"vmax",
	"vmin",
	"voice",
	"voiceURI",
	"volume",
	"vrml",
	"vspace",
	"vw",
	"w",
	"wait",
	"waitSync",
	"waiting",
	"wake",
	"wakeLock",
	"wand",
	"warn",
	"wasAlternateProtocolAvailable",
	"wasClean",
	"wasDiscarded",
	"wasFetchedViaSpdy",
	"wasNpnNegotiated",
	"watch",
	"watchAvailability",
	"watchPosition",
	"webdriver",
	"webkitAddKey",
	"webkitAlignContent",
	"webkitAlignItems",
	"webkitAlignSelf",
	"webkitAnimation",
	"webkitAnimationDelay",
	"webkitAnimationDirection",
	"webkitAnimationDuration",
	"webkitAnimationFillMode",
	"webkitAnimationIterationCount",
	"webkitAnimationName",
	"webkitAnimationPlayState",
	"webkitAnimationTimingFunction",
	"webkitAppRegion",
	"webkitAppearance",
	"webkitAspectRatio",
	"webkitAudioContext",
	"webkitAudioDecodedByteCount",
	"webkitAudioPannerNode",
	"webkitBackdropFilter",
	"webkitBackfaceVisibility",
	"webkitBackground",
	"webkitBackgroundAttachment",
	"webkitBackgroundClip",
	"webkitBackgroundColor",
	"webkitBackgroundComposite",
	"webkitBackgroundImage",
	"webkitBackgroundOrigin",
	"webkitBackgroundPosition",
	"webkitBackgroundPositionX",
	"webkitBackgroundPositionY",
	"webkitBackgroundRepeat",
	"webkitBackgroundSize",
	"webkitBackingStorePixelRatio",
	"webkitBorderAfter",
	"webkitBorderAfterColor",
	"webkitBorderAfterStyle",
	"webkitBorderAfterWidth",
	"webkitBorderBefore",
	"webkitBorderBeforeColor",
	"webkitBorderBeforeStyle",
	"webkitBorderBeforeWidth",
	"webkitBorderBottomLeftRadius",
	"webkitBorderBottomRightRadius",
	"webkitBorderEnd",
	"webkitBorderEndColor",
	"webkitBorderEndStyle",
	"webkitBorderEndWidth",
	"webkitBorderFit",
	"webkitBorderHorizontalSpacing",
	"webkitBorderImage",
	"webkitBorderImageOutset",
	"webkitBorderImageRepeat",
	"webkitBorderImageSlice",
	"webkitBorderImageSource",
	"webkitBorderImageWidth",
	"webkitBorderRadius",
	"webkitBorderStart",
	"webkitBorderStartColor",
	"webkitBorderStartStyle",
	"webkitBorderStartWidth",
	"webkitBorderTopLeftRadius",
	"webkitBorderTopRightRadius",
	"webkitBorderVerticalSpacing",
	"webkitBoxAlign",
	"webkitBoxDecorationBreak",
	"webkitBoxDirection",
	"webkitBoxFlex",
	"webkitBoxFlexGroup",
	"webkitBoxLines",
	"webkitBoxOrdinalGroup",
	"webkitBoxOrient",
	"webkitBoxPack",
	"webkitBoxReflect",
	"webkitBoxShadow",
	"webkitBoxSizing",
	"webkitCancelAnimationFrame",
	"webkitCancelFullScreen",
	"webkitCancelKeyRequest",
	"webkitCancelRequestAnimationFrame",
	"webkitClearResourceTimings",
	"webkitClipPath",
	"webkitClosedCaptionsVisible",
	"webkitColumnAxis",
	"webkitColumnBreakAfter",
	"webkitColumnBreakBefore",
	"webkitColumnBreakInside",
	"webkitColumnCount",
	"webkitColumnGap",
	"webkitColumnProgression",
	"webkitColumnRule",
	"webkitColumnRuleColor",
	"webkitColumnRuleStyle",
	"webkitColumnRuleWidth",
	"webkitColumnSpan",
	"webkitColumnWidth",
	"webkitColumns",
	"webkitConvertPointFromNodeToPage",
	"webkitConvertPointFromPageToNode",
	"webkitCreateShadowRoot",
	"webkitCurrentFullScreenElement",
	"webkitCurrentPlaybackTargetIsWireless",
	"webkitCursorVisibility",
	"webkitDashboardRegion",
	"webkitDecodedFrameCount",
	"webkitDirectionInvertedFromDevice",
	"webkitDisplayingFullscreen",
	"webkitDroppedFrameCount",
	"webkitEnterFullScreen",
	"webkitEnterFullscreen",
	"webkitEntries",
	"webkitExitFullScreen",
	"webkitExitFullscreen",
	"webkitExitPointerLock",
	"webkitFilter",
	"webkitFlex",
	"webkitFlexBasis",
	"webkitFlexDirection",
	"webkitFlexFlow",
	"webkitFlexGrow",
	"webkitFlexShrink",
	"webkitFlexWrap",
	"webkitFontFeatureSettings",
	"webkitFontKerning",
	"webkitFontSizeDelta",
	"webkitFontSmoothing",
	"webkitForce",
	"webkitFullScreenKeyboardInputAllowed",
	"webkitFullscreenElement",
	"webkitFullscreenEnabled",
	"webkitGenerateKeyRequest",
	"webkitGetAsEntry",
	"webkitGetDatabaseNames",
	"webkitGetEntries",
	"webkitGetEntriesByName",
	"webkitGetEntriesByType",
	"webkitGetFlowByName",
	"webkitGetGamepads",
	"webkitGetImageDataHD",
	"webkitGetNamedFlows",
	"webkitGetRegionFlowRanges",
	"webkitGetUserMedia",
	"webkitHasClosedCaptions",
	"webkitHidden",
	"webkitHighlight",
	"webkitHyphenateCharacter",
	"webkitHyphenateLimitAfter",
	"webkitHyphenateLimitBefore",
	"webkitHyphenateLimitLines",
	"webkitHyphens",
	"webkitIDBCursor",
	"webkitIDBDatabase",
	"webkitIDBDatabaseError",
	"webkitIDBDatabaseException",
	"webkitIDBFactory",
	"webkitIDBIndex",
	"webkitIDBKeyRange",
	"webkitIDBObjectStore",
	"webkitIDBRequest",
	"webkitIDBTransaction",
	"webkitImageSmoothingEnabled",
	"webkitIndexedDB",
	"webkitInitMessageEvent",
	"webkitInitialLetter",
	"webkitIsFullScreen",
	"webkitJustifyContent",
	"webkitKeys",
	"webkitLineAlign",
	"webkitLineBoxContain",
	"webkitLineBreak",
	"webkitLineClamp",
	"webkitLineDash",
	"webkitLineDashOffset",
	"webkitLineGrid",
	"webkitLineSnap",
	"webkitLocale",
	"webkitLockOrientation",
	"webkitLogicalHeight",
	"webkitLogicalWidth",
	"webkitMarginAfter",
	"webkitMarginAfterCollapse",
	"webkitMarginBefore",
	"webkitMarginBeforeCollapse",
	"webkitMarginBottomCollapse",
	"webkitMarginCollapse",
	"webkitMarginEnd",
	"webkitMarginStart",
	"webkitMarginTopCollapse",
	"webkitMarquee",
	"webkitMarqueeDirection",
	"webkitMarqueeIncrement",
	"webkitMarqueeRepetition",
	"webkitMarqueeSpeed",
	"webkitMarqueeStyle",
	"webkitMask",
	"webkitMaskBoxImage",
	"webkitMaskBoxImageOutset",
	"webkitMaskBoxImageRepeat",
	"webkitMaskBoxImageSlice",
	"webkitMaskBoxImageSource",
	"webkitMaskBoxImageWidth",
	"webkitMaskClip",
	"webkitMaskComposite",
	"webkitMaskImage",
	"webkitMaskOrigin",
	"webkitMaskPosition",
	"webkitMaskPositionX",
	"webkitMaskPositionY",
	"webkitMaskRepeat",
	"webkitMaskRepeatX",
	"webkitMaskRepeatY",
	"webkitMaskSize",
	"webkitMaskSourceType",
	"webkitMatchesSelector",
	"webkitMaxLogicalHeight",
	"webkitMaxLogicalWidth",
	"webkitMediaStream",
	"webkitMinLogicalHeight",
	"webkitMinLogicalWidth",
	"webkitNbspMode",
	"webkitNotifications",
	"webkitOfflineAudioContext",
	"webkitOpacity",
	"webkitOrder",
	"webkitOrientation",
	"webkitPaddingAfter",
	"webkitPaddingBefore",
	"webkitPaddingEnd",
	"webkitPaddingStart",
	"webkitPeerConnection00",
	"webkitPersistentStorage",
	"webkitPerspective",
	"webkitPerspectiveOrigin",
	"webkitPerspectiveOriginX",
	"webkitPerspectiveOriginY",
	"webkitPointerLockElement",
	"webkitPostMessage",
	"webkitPreservesPitch",
	"webkitPrintColorAdjust",
	"webkitPutImageDataHD",
	"webkitRTCPeerConnection",
	"webkitRegionOverset",
	"webkitRelativePath",
	"webkitRequestAnimationFrame",
	"webkitRequestFileSystem",
	"webkitRequestFullScreen",
	"webkitRequestFullscreen",
	"webkitRequestPointerLock",
	"webkitResolveLocalFileSystemURL",
	"webkitRtlOrdering",
	"webkitRubyPosition",
	"webkitSetMediaKeys",
	"webkitSetResourceTimingBufferSize",
	"webkitShadowRoot",
	"webkitShapeImageThreshold",
	"webkitShapeMargin",
	"webkitShapeOutside",
	"webkitShowPlaybackTargetPicker",
	"webkitSlice",
	"webkitSpeechGrammar",
	"webkitSpeechGrammarList",
	"webkitSpeechRecognition",
	"webkitSpeechRecognitionError",
	"webkitSpeechRecognitionEvent",
	"webkitStorageInfo",
	"webkitSupportsFullscreen",
	"webkitSvgShadow",
	"webkitTapHighlightColor",
	"webkitTemporaryStorage",
	"webkitTextCombine",
	"webkitTextDecoration",
	"webkitTextDecorationColor",
	"webkitTextDecorationLine",
	"webkitTextDecorationSkip",
	"webkitTextDecorationStyle",
	"webkitTextDecorationsInEffect",
	"webkitTextEmphasis",
	"webkitTextEmphasisColor",
	"webkitTextEmphasisPosition",
	"webkitTextEmphasisStyle",
	"webkitTextFillColor",
	"webkitTextOrientation",
	"webkitTextSecurity",
	"webkitTextSizeAdjust",
	"webkitTextStroke",
	"webkitTextStrokeColor",
	"webkitTextStrokeWidth",
	"webkitTextUnderlinePosition",
	"webkitTextZoom",
	"webkitTransform",
	"webkitTransformOrigin",
	"webkitTransformOriginX",
	"webkitTransformOriginY",
	"webkitTransformOriginZ",
	"webkitTransformStyle",
	"webkitTransition",
	"webkitTransitionDelay",
	"webkitTransitionDuration",
	"webkitTransitionProperty",
	"webkitTransitionTimingFunction",
	"webkitURL",
	"webkitUnlockOrientation",
	"webkitUserDrag",
	"webkitUserModify",
	"webkitUserSelect",
	"webkitVideoDecodedByteCount",
	"webkitVisibilityState",
	"webkitWirelessVideoPlaybackDisabled",
	"webkitWritingMode",
	"webkitdirectory",
	"webkitdropzone",
	"webstore",
	"weekday",
	"weight",
	"whatToShow",
	"wheelDelta",
	"wheelDeltaX",
	"wheelDeltaY",
	"whenDefined",
	"which",
	"white-space",
	"whiteSpace",
	"wholeText",
	"widows",
	"width",
	"will-change",
	"willChange",
	"willValidate",
	"window",
	"withCredentials",
	"word-break",
	"word-spacing",
	"word-wrap",
	"wordBreak",
	"wordSpacing",
	"wordWrap",
	"workerStart",
	"wrap",
	"wrapKey",
	"writable",
	"writableAuxiliaries",
	"write",
	"writeText",
	"writeValue",
	"writeWithoutResponse",
	"writeln",
	"writing-mode",
	"writingMode",
	"x",
	"x1",
	"x2",
	"xChannelSelector",
	"xmlEncoding",
	"xmlStandalone",
	"xmlVersion",
	"xmlbase",
	"xmllang",
	"xmlspace",
	"xor",
	"xr",
	"y",
	"y1",
	"y2",
	"yChannelSelector",
	"yandex",
	"year",
	"z",
	"z-index",
	"zIndex",
	"zoom",
	"zoomAndPan",
	"zoomRectScreen"
];

(function (exports) {
	var fs = empty_1;

	exports.FILES = [
	    require.resolve("../lib/utils.js"),
	    require.resolve("../lib/ast.js"),
	    require.resolve("../lib/transform.js"),
	    require.resolve("../lib/parse.js"),
	    require.resolve("../lib/scope.js"),
	    require.resolve("../lib/compress.js"),
	    require.resolve("../lib/output.js"),
	    require.resolve("../lib/sourcemap.js"),
	    require.resolve("../lib/mozilla-ast.js"),
	    require.resolve("../lib/propmangle.js"),
	    require.resolve("../lib/minify.js"),
	    require.resolve("./exports.js"),
	];

	new Function("domprops", "exports", function() {
	    var code = exports.FILES.map(function(file) {
	        return fs.readFileSync(file, "utf8");
	    });
	    code.push("exports.describe_ast = " + describe_ast.toString());
	    return code.join("\n\n");
	}())(require$$1, exports);

	function to_comment(value) {
	    if (typeof value != "string") value = JSON.stringify(value, function(key, value) {
	        return typeof value == "function" ? "<[ " + value + " ]>" : value;
	    }, 2);
	    return "// " + value.replace(/\n/g, "\n// ");
	}

	if (+{}["UGLIFY_BUG_REPORT"]) exports.minify = function(files, options) {
	    if (typeof options == "undefined") options = "<<undefined>>";
	    var code = [
	        "// UGLIFY_BUG_REPORT",
	        to_comment(options),
	    ];
	    if (typeof files == "string") {
	        code.push("");
	        code.push("//-------------------------------------------------------------");
	        code.push("// INPUT CODE", files);
	    } else for (var name in files) {
	        code.push("");
	        code.push("//-------------------------------------------------------------");
	        code.push(to_comment(name), files[name]);
	    }
	    if (options.sourceMap && options.sourceMap.url) {
	        code.push("");
	        code.push("//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiJ9");
	    }
	    var result = { code: code.join("\n") };
	    if (options.sourceMap) result.map = '{"version":3,"sources":[],"names":[],"mappings":""}';
	    return result;
	};

	function describe_ast() {
	    var out = OutputStream({ beautify: true });
	    doitem(AST_Node);
	    return out.get() + "\n";

	    function doitem(ctor) {
	        out.print("AST_" + ctor.TYPE);
	        var props = ctor.SELF_PROPS.filter(function(prop) {
	            return !/^\$/.test(prop);
	        });
	        if (props.length > 0) {
	            out.space();
	            out.with_parens(function() {
	                props.forEach(function(prop, i) {
	                    if (i) out.space();
	                    out.print(prop);
	                });
	            });
	        }
	        if (ctor.documentation) {
	            out.space();
	            out.print_string(ctor.documentation);
	        }
	        if (ctor.SUBCLASSES.length > 0) {
	            out.space();
	            out.with_block(function() {
	                ctor.SUBCLASSES.sort(function(a, b) {
	                    return a.TYPE < b.TYPE ? -1 : 1;
	                }).forEach(function(ctor, i) {
	                    out.indent();
	                    doitem(ctor);
	                    out.newline();
	                });
	            });
	        }
	    }
	}

	function infer_options(options) {
	    var result = exports.minify("", options);
	    return result.error && result.error.defs;
	}

	exports.default_options = function() {
	    var defs = infer_options({ 0: 0 });
	    Object.keys(defs).forEach(function(component) {
	        var options = {};
	        options[component] = { 0: 0 };
	        if (options = infer_options(options)) {
	            defs[component] = options;
	        }
	    });
	    return defs;
	}; 
} (node));

const Uglify = /*@__PURE__*/getDefaultExportFromCjs(node);

/**
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('hast').Root} Root
 */


const prefix$4 = 'function a(){';
const suffix$4 = '}a();';

/**
 * Minify event handler attributes.
 *
 * @returns
 *   Transform.
 */
function rehypeMinifyEventHandler() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      /** @type {string} */
      let name;

      for (name in node.properties) {
        if (Object.hasOwn(node.properties, name) && isEventHandler(name)) {
          node.properties[name] = minify$2(node.properties[name]);
        }
      }
    });
  }
}

/**
 * @param {PropertyValue} value
 * @returns {PropertyValue}
 */
function minify$2(value) {
  let result = value;

  if (typeof result !== 'string') {
    return result
  }

  try {
    const output = Uglify.minify(prefix$4 + result + suffix$4);
    result = output.code.slice(prefix$4.length, -suffix$4.length);
  } catch {}

  return result.trim()
}

/**
 * @typedef {import('hast').Nodes} Nodes
 * @typedef {import('hast').Properties} Properties
 */


const mime = new Set([
  'application/ecmascript',
  'application/javascript',
  'application/x-ecmascript',
  'application/x-javascript',
  'text/ecmascript',
  'text/javascript',
  'text/javascript1.0',
  'text/javascript1.1',
  'text/javascript1.2',
  'text/javascript1.3',
  'text/javascript1.4',
  'text/javascript1.5',
  'text/jscript',
  'text/livescript',
  'text/x-ecmascript',
  'text/x-javascript'
]);

/**
 * Check if a node is a `<script>` that contains or references JavaScript.
 *
 * Returns `true` if `node` is a `<script>` element that has a valid JavaScript
 * `type`, has no `type` and a valid JavaScript `language`, or has neither.
 *
 * @param {Nodes} node
 *   Node to check.
 * @returns {boolean}
 *   Whether a node is a `<script>` that contains or references JavaScript.
 */
function isJavaScript(node) {
  if (node.type !== 'element' || node.tagName !== 'script') {
    return false
  }

  if (node.properties.type) {
    return check(node.properties.type)
  }

  return !node.properties.language || check(node.properties.language, 'text/')
}

/**
 * Check one value.
 *
 * @param {PropertyValue} d
 *   Property value.
 * @param {string | undefined} [prefix='']
 *   Optional prefix (default: `''`).
 * @returns {boolean}
 *   Whether it matches.
 */
function check(d, prefix) {
  if (typeof d !== 'string') {
    return false
  }

  const value = collapseWhiteSpace(d.split(';', 1)[0], {
    style: 'html',
    trim: true
  }).toLowerCase();

  return value === '' || mime.has((prefix || '') + value)
}

/**
 * @typedef {import('hast').Root} Root
 */


/**
 * Minify JavaScript `<script>`s.
 *
 * @returns
 *   Transform.
 */
function rehypeMinifyJavaScriptScript() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      if (isJavaScript(node) && !node.properties.src) {
        try {
          let value = Uglify.minify(toString(node)).code;

          if (value.charAt(value.length - 1) === ';') {
            value = value.slice(0, -1);
          }

          fromString(node, value);
          /* c8 ignore next -- in a try/catch for potential future third party errors */
        } catch {}
      }
    });
  }
}

/**
 * HTML URL properties.
 *
 * Each key is a property name and each value is a list of tag names it applies
 * to or `null` if it applies to all elements.
 *
 * @type {Record<string, Array<string> | null>}
 */
const urlAttributes = {
  action: ['form'],
  cite: ['blockquote', 'del', 'ins', 'q'],
  data: ['object'],
  formAction: ['button', 'input'],
  href: ['a', 'area', 'base', 'link'],
  icon: ['menuitem'],
  itemId: null,
  manifest: ['html'],
  ping: ['a', 'area'],
  poster: ['video'],
  src: [
    'audio',
    'embed',
    'iframe',
    'img',
    'input',
    'script',
    'source',
    'track',
    'video'
  ]
};

/**
 * @typedef {import('hast').Root} Root
 */


/* eslint-disable no-script-url */
const protocol = 'javascript:';
/* eslint-enable no-script-url */

const prefix$3 = 'function a(){';
const suffix$3 = '}a();';

/**
 * Minify `javascript:` URLs.
 *
 * @returns
 *   Transform.
 */
function rehypeMinifyJavaScriptUrl() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      /** @type {string} */
      let prop;

      for (prop in node.properties) {
        if (
          node.properties[prop] &&
          Object.hasOwn(urlAttributes, prop) &&
          isElement(node, urlAttributes[prop])
        ) {
          const value = node.properties[prop];
          let result = value;

          if (
            typeof result === 'string' &&
            result.slice(0, protocol.length).toLowerCase() === protocol
          ) {
            result = result.slice(protocol.length);

            try {
              const output = Uglify.minify(prefix$3 + result + suffix$3);
              result = output.code.slice(prefix$3.length, -suffix$3.length);
            } catch {}

            result = protocol + result.trim();
          }

          node.properties[prop] = result;
        }
      }
    });
  }
}

/**
 * @typedef {import('hast').Root} Root
 */


/**
 * Minify JSON `<script>`s.
 *
 * @returns
 *   Transform.
 */
function rehypeMinifyJsonScript() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      if (
        node.tagName === 'script' &&
        node.properties.type === 'application/ld+json'
      ) {
        try {
          fromString(node, JSON.stringify(JSON.parse(toString(node))));
        } catch {}
      }
    });
  }
}

/**
 * Check if the given character code, or the character code at the first
 * character, is alphabetical.
 *
 * @param {string|number} character
 * @returns {boolean} Whether `character` is alphabetical.
 */
function isAlphabetical(character) {
  const code =
    typeof character === 'string' ? character.charCodeAt(0) : character;

  return (
    (code >= 97 && code <= 122) /* a-z */ ||
    (code >= 65 && code <= 90) /* A-Z */
  )
}

/**
 * Check if the given character code, or the character code at the first
 * character, is decimal.
 *
 * @param {string|number} character
 * @returns {boolean} Whether `character` is a decimal
 */
function isDecimal(character) {
  const code =
    typeof character === 'string' ? character.charCodeAt(0) : character;

  return code >= 48 && code <= 57 /* 0-9 */
}

/**
 * Check if the given character code, or the character code at the first
 * character, is alphanumerical.
 *
 * @param {string|number} character
 * @returns {boolean} Whether `character` is alphanumerical.
 */
function isAlphanumerical(character) {
  return isAlphabetical(character) || isDecimal(character)
}

/** @type {Array<string>} */
const regular = [
  'art-lojban',
  'cel-gaulish',
  'no-bok',
  'no-nyn',
  'zh-guoyu',
  'zh-hakka',
  'zh-min',
  'zh-min-nan',
  'zh-xiang'
];

/** @type {Record<string, string|null>} */
const normal = {
  'en-gb-oed': 'en-GB-oxendict',
  'i-ami': 'ami',
  'i-bnn': 'bnn',
  'i-default': null,
  'i-enochian': null,
  'i-hak': 'hak',
  'i-klingon': 'tlh',
  'i-lux': 'lb',
  'i-mingo': null,
  'i-navajo': 'nv',
  'i-pwn': 'pwn',
  'i-tao': 'tao',
  'i-tay': 'tay',
  'i-tsu': 'tsu',
  'sgn-be-fr': 'sfb',
  'sgn-be-nl': 'vgt',
  'sgn-ch-de': 'sgg',
  'art-lojban': 'jbo',
  'cel-gaulish': null,
  'no-bok': 'nb',
  'no-nyn': 'nn',
  'zh-guoyu': 'cmn',
  'zh-hakka': 'hak',
  'zh-min': null,
  'zh-min-nan': 'nan',
  'zh-xiang': 'hsn'
};

/**
 * @callback Warning
 * @param {string} reason
 * @param {number} code
 * @param {number} offset
 * @returns {void}
 *
 * @typedef Options
 * @property {boolean} [normalize=true]
 * @property {boolean} [forgiving=false]
 * @property {Warning} [warning]
 *
 * @typedef Extension
 * @property {string} singleton
 * @property {Array<string>} extensions
 *
 * @typedef Schema
 * @property {string|null|undefined} language
 * @property {Array<string>} extendedLanguageSubtags
 * @property {string|null|undefined} script
 * @property {string|null|undefined} region
 * @property {Array<string>} variants
 * @property {Array<Extension>} extensions
 * @property {Array<string>} privateuse
 * @property {string|null|undefined} irregular
 * @property {string|null|undefined} regular
 */


const own$1 = {}.hasOwnProperty;

/**
 * Parse a BCP 47 language tag.
 *
 * @param {string} tag
 * @param {Options} [options]
 * @returns {Schema}
 */
function parse(tag, options = {}) {
  const result = empty();
  const source = String(tag);
  const value = source.toLowerCase();
  let index = 0;

  // Check input.
  if (tag === null || tag === undefined) {
    throw new Error('Expected string, got `' + tag + '`')
  }

  // Let’s start.
  // First: the edge cases.
  if (own$1.call(normal, value)) {
    const replacement = normal[value];

    if (
      (options.normalize === undefined ||
        options.normalize === null ||
        options.normalize) &&
      typeof replacement === 'string'
    ) {
      return parse(replacement)
    }

    result[regular.includes(value) ? 'regular' : 'irregular'] = source;

    return result
  }

  // Now, to actually parse, eat what could be a language.
  while (isAlphabetical(value.charCodeAt(index)) && index < 9) index++;

  // A language.
  if (index > 1 /* Min 639. */ && index < 9 /* Max subtag. */) {
    // 5 and up is a subtag.
    // 4 is the size of reserved languages.
    // 3 an ISO 639-2 or ISO 639-3.
    // 2 is an ISO 639-1.
    // <https://github.com/wooorm/iso-639-2>
    // <https://github.com/wooorm/iso-639-3>
    result.language = source.slice(0, index);

    if (index < 4 /* Max 639. */) {
      let groups = 0;

      while (
        value.charCodeAt(index) === 45 /* `-` */ &&
        isAlphabetical(value.charCodeAt(index + 1)) &&
        isAlphabetical(value.charCodeAt(index + 2)) &&
        isAlphabetical(value.charCodeAt(index + 3)) &&
        !isAlphabetical(value.charCodeAt(index + 4))
      ) {
        if (groups > 2 /* Max extended language subtag count. */) {
          return fail(
            index,
            3,
            'Too many extended language subtags, expected at most 3 subtags'
          )
        }

        // Extended language subtag.
        result.extendedLanguageSubtags.push(source.slice(index + 1, index + 4));
        index += 4;
        groups++;
      }
    }

    // ISO 15924 script.
    // <https://github.com/wooorm/iso-15924>
    if (
      value.charCodeAt(index) === 45 /* `-` */ &&
      isAlphabetical(value.charCodeAt(index + 1)) &&
      isAlphabetical(value.charCodeAt(index + 2)) &&
      isAlphabetical(value.charCodeAt(index + 3)) &&
      isAlphabetical(value.charCodeAt(index + 4)) &&
      !isAlphabetical(value.charCodeAt(index + 5))
    ) {
      result.script = source.slice(index + 1, index + 5);
      index += 5;
    }

    if (value.charCodeAt(index) === 45 /* `-` */) {
      // ISO 3166-1 region.
      // <https://github.com/wooorm/iso-3166>
      if (
        isAlphabetical(value.charCodeAt(index + 1)) &&
        isAlphabetical(value.charCodeAt(index + 2)) &&
        !isAlphabetical(value.charCodeAt(index + 3))
      ) {
        result.region = source.slice(index + 1, index + 3);
        index += 3;
      }
      // UN M49 region.
      // <https://github.com/wooorm/un-m49>
      else if (
        isDecimal(value.charCodeAt(index + 1)) &&
        isDecimal(value.charCodeAt(index + 2)) &&
        isDecimal(value.charCodeAt(index + 3)) &&
        !isDecimal(value.charCodeAt(index + 4))
      ) {
        result.region = source.slice(index + 1, index + 4);
        index += 4;
      }
    }

    while (value.charCodeAt(index) === 45 /* `-` */) {
      const start = index + 1;
      let offset = start;

      while (isAlphanumerical(value.charCodeAt(offset))) {
        if (offset - start > 7 /* Max variant. */) {
          return fail(
            offset,
            1,
            'Too long variant, expected at most 8 characters'
          )
        }

        offset++;
      }

      if (
        // Long variant.
        offset - start > 4 /* Min alpha numeric variant. */ ||
        // Short variant.
        (offset - start > 3 /* Min variant. */ &&
          isDecimal(value.charCodeAt(start)))
      ) {
        result.variants.push(source.slice(start, offset));
        index = offset;
      }
      // Something else.
      else {
        break
      }
    }

    // Extensions.
    while (value.charCodeAt(index) === 45 /* `-` */) {
      // Exit if this isn’t an extension.
      if (
        value.charCodeAt(index + 1) === 120 /* `x` */ ||
        !isAlphanumerical(value.charCodeAt(index + 1)) ||
        value.charCodeAt(index + 2) !== 45 /* `-` */ ||
        !isAlphanumerical(value.charCodeAt(index + 3))
      ) {
        break
      }

      let offset = index + 2;
      let groups = 0;

      while (
        value.charCodeAt(offset) === 45 /* `-` */ &&
        isAlphanumerical(value.charCodeAt(offset + 1)) &&
        isAlphanumerical(value.charCodeAt(offset + 2))
      ) {
        const start = offset + 1;
        offset = start + 2;
        groups++;

        while (isAlphanumerical(value.charCodeAt(offset))) {
          if (offset - start > 7 /* Max extension. */) {
            return fail(
              offset,
              2,
              'Too long extension, expected at most 8 characters'
            )
          }

          offset++;
        }
      }

      if (!groups) {
        return fail(
          offset,
          4,
          'Empty extension, extensions must have at least 2 characters of content'
        )
      }

      result.extensions.push({
        singleton: source.charAt(index + 1),
        extensions: source.slice(index + 3, offset).split('-')
      });

      index = offset;
    }
  }
  // Not a language.
  else {
    index = 0;
  }

  // Private use.
  if (
    (index === 0 && value.charCodeAt(index) === 120) /* `x` */ ||
    (value.charCodeAt(index) === 45 /* `-` */ &&
      value.charCodeAt(index + 1) === 120) /* `x` */
  ) {
    index = index ? index + 2 : 1;
    let offset = index;

    while (
      value.charCodeAt(offset) === 45 /* `-` */ &&
      isAlphanumerical(value.charCodeAt(offset + 1))
    ) {
      const start = index + 1;
      offset = start;

      while (isAlphanumerical(value.charCodeAt(offset))) {
        if (offset - start > 7 /* Max private use. */) {
          return fail(
            offset,
            5,
            'Too long private-use area, expected at most 8 characters'
          )
        }

        offset++;
      }

      result.privateuse.push(source.slice(index + 1, offset));
      index = offset;
    }
  }

  if (index !== source.length) {
    return fail(index, 6, 'Found superfluous content after tag')
  }

  return result

  /**
   * Create an empty results object.
   *
   * @param {number} offset
   * @param {number} code
   * @param {string} reason
   * @returns {Schema}
   */
  function fail(offset, code, reason) {
    if (options.warning) options.warning(reason, code, offset);
    return options.forgiving ? result : empty()
  }
}

/**
 * Create an empty results object.
 *
 * @returns {Schema}
 */
function empty() {
  return {
    language: null,
    extendedLanguageSubtags: [],
    script: null,
    region: null,
    variants: [],
    extensions: [],
    privateuse: [],
    irregular: null,
    regular: null
  }
}

/**
 * @typedef {Partial<import('./parse.js').Schema>} Schema
 * @typedef {Partial<import('./parse.js').Extension>} Extension
 */

/**
 * Compile a language schema to a BCP 47 language tag.
 *
 * @param {Schema} schema
 * @returns {string}
 */
function stringify(schema = {}) {
  /** @type {Array<string>} */
  let result = [];

  if (schema.irregular) {
    return schema.irregular
  }

  if (schema.regular) {
    return schema.regular
  }

  if (schema.language) {
    result = result.concat(
      schema.language,
      schema.extendedLanguageSubtags || [],
      schema.script || [],
      schema.region || [],
      schema.variants || []
    );

    const values = schema.extensions || [];
    let index = -1;

    while (++index < values.length) {
      const value = values[index];

      if (value.singleton && value.extensions && value.extensions.length > 0) {
        result.push(value.singleton, ...value.extensions);
      }
    }
  }

  if (schema.privateuse && schema.privateuse.length > 0) {
    result.push('x', ...schema.privateuse);
  }

  return result.join('-')
}

/**
 * @typedef Change
 * @property {string} from
 * @property {string} to
 */

/**
 * @type {Array<Change>}
 */
const matches = [
  {
    from: 'in',
    to: 'id'
  },
  {
    from: 'iw',
    to: 'he'
  },
  {
    from: 'ji',
    to: 'yi'
  },
  {
    from: 'jw',
    to: 'jv'
  },
  {
    from: 'mo',
    to: 'ro'
  },
  {
    from: 'scc',
    to: 'sr'
  },
  {
    from: 'scr',
    to: 'hr'
  },
  {
    from: 'aam',
    to: 'aas'
  },
  {
    from: 'adp',
    to: 'dz'
  },
  {
    from: 'aue',
    to: 'ktz'
  },
  {
    from: 'ayx',
    to: 'nun'
  },
  {
    from: 'bgm',
    to: 'bcg'
  },
  {
    from: 'bjd',
    to: 'drl'
  },
  {
    from: 'ccq',
    to: 'rki'
  },
  {
    from: 'cjr',
    to: 'mom'
  },
  {
    from: 'cka',
    to: 'cmr'
  },
  {
    from: 'cmk',
    to: 'xch'
  },
  {
    from: 'coy',
    to: 'pij'
  },
  {
    from: 'cqu',
    to: 'quh'
  },
  {
    from: 'drh',
    to: 'mn'
  },
  {
    from: 'drw',
    to: 'fa-af'
  },
  {
    from: 'gav',
    to: 'dev'
  },
  {
    from: 'gfx',
    to: 'vaj'
  },
  {
    from: 'ggn',
    to: 'gvr'
  },
  {
    from: 'gti',
    to: 'nyc'
  },
  {
    from: 'guv',
    to: 'duz'
  },
  {
    from: 'hrr',
    to: 'jal'
  },
  {
    from: 'ibi',
    to: 'opa'
  },
  {
    from: 'ilw',
    to: 'gal'
  },
  {
    from: 'jeg',
    to: 'oyb'
  },
  {
    from: 'kgc',
    to: 'tdf'
  },
  {
    from: 'kgh',
    to: 'kml'
  },
  {
    from: 'koj',
    to: 'kwv'
  },
  {
    from: 'krm',
    to: 'bmf'
  },
  {
    from: 'ktr',
    to: 'dtp'
  },
  {
    from: 'kvs',
    to: 'gdj'
  },
  {
    from: 'kwq',
    to: 'yam'
  },
  {
    from: 'kxe',
    to: 'tvd'
  },
  {
    from: 'kzj',
    to: 'dtp'
  },
  {
    from: 'kzt',
    to: 'dtp'
  },
  {
    from: 'lii',
    to: 'raq'
  },
  {
    from: 'lmm',
    to: 'rmx'
  },
  {
    from: 'meg',
    to: 'cir'
  },
  {
    from: 'mst',
    to: 'mry'
  },
  {
    from: 'mwj',
    to: 'vaj'
  },
  {
    from: 'myt',
    to: 'mry'
  },
  {
    from: 'nad',
    to: 'xny'
  },
  {
    from: 'ncp',
    to: 'kdz'
  },
  {
    from: 'nnx',
    to: 'ngv'
  },
  {
    from: 'nts',
    to: 'pij'
  },
  {
    from: 'oun',
    to: 'vaj'
  },
  {
    from: 'pcr',
    to: 'adx'
  },
  {
    from: 'pmc',
    to: 'huw'
  },
  {
    from: 'pmu',
    to: 'phr'
  },
  {
    from: 'ppa',
    to: 'bfy'
  },
  {
    from: 'ppr',
    to: 'lcq'
  },
  {
    from: 'pry',
    to: 'prt'
  },
  {
    from: 'puz',
    to: 'pub'
  },
  {
    from: 'sca',
    to: 'hle'
  },
  {
    from: 'skk',
    to: 'oyb'
  },
  {
    from: 'tdu',
    to: 'dtp'
  },
  {
    from: 'thc',
    to: 'tpo'
  },
  {
    from: 'thx',
    to: 'oyb'
  },
  {
    from: 'tie',
    to: 'ras'
  },
  {
    from: 'tkk',
    to: 'twm'
  },
  {
    from: 'tlw',
    to: 'weo'
  },
  {
    from: 'tmp',
    to: 'tyj'
  },
  {
    from: 'tne',
    to: 'kak'
  },
  {
    from: 'tnf',
    to: 'fa-af'
  },
  {
    from: 'tsf',
    to: 'taj'
  },
  {
    from: 'uok',
    to: 'ema'
  },
  {
    from: 'xba',
    to: 'cax'
  },
  {
    from: 'xia',
    to: 'acn'
  },
  {
    from: 'xkh',
    to: 'waw'
  },
  {
    from: 'xsj',
    to: 'suj'
  },
  {
    from: 'ybd',
    to: 'rki'
  },
  {
    from: 'yma',
    to: 'lrr'
  },
  {
    from: 'ymt',
    to: 'mtm'
  },
  {
    from: 'yos',
    to: 'zom'
  },
  {
    from: 'yuu',
    to: 'yug'
  },
  {
    from: 'asd',
    to: 'snz'
  },
  {
    from: 'dit',
    to: 'dif'
  },
  {
    from: 'llo',
    to: 'ngt'
  },
  {
    from: 'myd',
    to: 'aog'
  },
  {
    from: 'nns',
    to: 'nbr'
  },
  {
    from: 'agp',
    to: 'apf'
  },
  {
    from: 'ais',
    to: 'ami'
  },
  {
    from: 'ajt',
    to: 'aeb'
  },
  {
    from: 'baz',
    to: 'nvo'
  },
  {
    from: 'bhk',
    to: 'fbl'
  },
  {
    from: 'bic',
    to: 'bir'
  },
  {
    from: 'bjq',
    to: 'bzc'
  },
  {
    from: 'bkb',
    to: 'ebk'
  },
  {
    from: 'blg',
    to: 'iba'
  },
  {
    from: 'btb',
    to: 'beb'
  },
  {
    from: 'daf',
    to: 'dnj'
  },
  {
    from: 'dap',
    to: 'njz'
  },
  {
    from: 'djl',
    to: 'dze'
  },
  {
    from: 'dkl',
    to: 'aqd'
  },
  {
    from: 'drr',
    to: 'kzk'
  },
  {
    from: 'dud',
    to: 'uth'
  },
  {
    from: 'duj',
    to: 'dwu'
  },
  {
    from: 'dwl',
    to: 'dbt'
  },
  {
    from: 'elp',
    to: 'amq'
  },
  {
    from: 'gbc',
    to: 'wny'
  },
  {
    from: 'ggo',
    to: 'esg'
  },
  {
    from: 'ggr',
    to: 'gtu'
  },
  {
    from: 'gio',
    to: 'aou'
  },
  {
    from: 'gli',
    to: 'kzk'
  },
  {
    from: 'ill',
    to: 'ilm'
  },
  {
    from: 'izi',
    to: 'eza'
  },
  {
    from: 'jar',
    to: 'jgk'
  },
  {
    from: 'kdv',
    to: 'zkd'
  },
  {
    from: 'kgd',
    to: 'ncq'
  },
  {
    from: 'kpp',
    to: 'jkm'
  },
  {
    from: 'kxl',
    to: 'kru'
  },
  {
    from: 'kzh',
    to: 'dgl'
  },
  {
    from: 'lak',
    to: 'ksp'
  },
  {
    from: 'leg',
    to: 'enl'
  },
  {
    from: 'mgx',
    to: 'jbk'
  },
  {
    from: 'mnt',
    to: 'wnn'
  },
  {
    from: 'mof',
    to: 'xnt'
  },
  {
    from: 'mwd',
    to: 'dmw'
  },
  {
    from: 'nbf',
    to: 'nru'
  },
  {
    from: 'nbx',
    to: 'ekc'
  },
  {
    from: 'nln',
    to: 'azd'
  },
  {
    from: 'nlr',
    to: 'nrk'
  },
  {
    from: 'noo',
    to: 'dtd'
  },
  {
    from: 'nxu',
    to: 'bpp'
  },
  {
    from: 'pat',
    to: 'kxr'
  },
  {
    from: 'rmr',
    to: 'emx'
  },
  {
    from: 'sap',
    to: 'aqt'
  },
  {
    from: 'sgl',
    to: 'isk'
  },
  {
    from: 'smd',
    to: 'kmb'
  },
  {
    from: 'snb',
    to: 'iba'
  },
  {
    from: 'sul',
    to: 'sgd'
  },
  {
    from: 'sum',
    to: 'ulw'
  },
  {
    from: 'tgg',
    to: 'bjp'
  },
  {
    from: 'thw',
    to: 'ola'
  },
  {
    from: 'tid',
    to: 'itd'
  },
  {
    from: 'unp',
    to: 'wro'
  },
  {
    from: 'wgw',
    to: 'wgb'
  },
  {
    from: 'wit',
    to: 'nol'
  },
  {
    from: 'wiw',
    to: 'nwo'
  },
  {
    from: 'xrq',
    to: 'dmw'
  },
  {
    from: 'yen',
    to: 'ynq'
  },
  {
    from: 'yiy',
    to: 'yrm'
  },
  {
    from: 'zir',
    to: 'scv'
  },
  {
    from: 'sgn-br',
    to: 'bzs'
  },
  {
    from: 'sgn-co',
    to: 'csn'
  },
  {
    from: 'sgn-de',
    to: 'gsg'
  },
  {
    from: 'sgn-dk',
    to: 'dsl'
  },
  {
    from: 'sgn-fr',
    to: 'fsl'
  },
  {
    from: 'sgn-gb',
    to: 'bfi'
  },
  {
    from: 'sgn-gr',
    to: 'gss'
  },
  {
    from: 'sgn-ie',
    to: 'isg'
  },
  {
    from: 'sgn-it',
    to: 'ise'
  },
  {
    from: 'sgn-jp',
    to: 'jsl'
  },
  {
    from: 'sgn-mx',
    to: 'mfs'
  },
  {
    from: 'sgn-ni',
    to: 'ncs'
  },
  {
    from: 'sgn-nl',
    to: 'dse'
  },
  {
    from: 'sgn-no',
    to: 'nsi'
  },
  {
    from: 'sgn-pt',
    to: 'psr'
  },
  {
    from: 'sgn-se',
    to: 'swl'
  },
  {
    from: 'sgn-us',
    to: 'ase'
  },
  {
    from: 'sgn-za',
    to: 'sfs'
  },
  {
    from: 'sgn-es',
    to: 'ssp'
  },
  {
    from: 'zh-cmn',
    to: 'zh'
  },
  {
    from: 'zh-cmn-hans',
    to: 'zh-hans'
  },
  {
    from: 'zh-cmn-hant',
    to: 'zh-hant'
  },
  {
    from: 'zh-gan',
    to: 'gan'
  },
  {
    from: 'zh-wuu',
    to: 'wuu'
  },
  {
    from: 'zh-yue',
    to: 'yue'
  },
  {
    from: 'no-bokmal',
    to: 'nb'
  },
  {
    from: 'no-nynorsk',
    to: 'nn'
  },
  {
    from: 'aa-saaho',
    to: 'ssy'
  },
  {
    from: 'sh',
    to: 'sr-latn'
  },
  {
    from: 'cnr',
    to: 'sr-me'
  },
  {
    from: 'tl',
    to: 'fil'
  },
  {
    from: 'aju',
    to: 'jrb'
  },
  {
    from: 'als',
    to: 'sq'
  },
  {
    from: 'arb',
    to: 'ar'
  },
  {
    from: 'ayr',
    to: 'ay'
  },
  {
    from: 'azj',
    to: 'az'
  },
  {
    from: 'bcc',
    to: 'bal'
  },
  {
    from: 'bcl',
    to: 'bik'
  },
  {
    from: 'bxk',
    to: 'luy'
  },
  {
    from: 'bxr',
    to: 'bua'
  },
  {
    from: 'cld',
    to: 'syr'
  },
  {
    from: 'cmn',
    to: 'zh'
  },
  {
    from: 'cwd',
    to: 'cr'
  },
  {
    from: 'dgo',
    to: 'doi'
  },
  {
    from: 'dhd',
    to: 'mwr'
  },
  {
    from: 'dik',
    to: 'din'
  },
  {
    from: 'diq',
    to: 'zza'
  },
  {
    from: 'lbk',
    to: 'bnc'
  },
  {
    from: 'ekk',
    to: 'et'
  },
  {
    from: 'emk',
    to: 'man'
  },
  {
    from: 'esk',
    to: 'ik'
  },
  {
    from: 'fat',
    to: 'ak'
  },
  {
    from: 'fuc',
    to: 'ff'
  },
  {
    from: 'gaz',
    to: 'om'
  },
  {
    from: 'gbo',
    to: 'grb'
  },
  {
    from: 'gno',
    to: 'gon'
  },
  {
    from: 'gug',
    to: 'gn'
  },
  {
    from: 'gya',
    to: 'gba'
  },
  {
    from: 'hdn',
    to: 'hai'
  },
  {
    from: 'hea',
    to: 'hmn'
  },
  {
    from: 'ike',
    to: 'iu'
  },
  {
    from: 'kmr',
    to: 'ku'
  },
  {
    from: 'knc',
    to: 'kr'
  },
  {
    from: 'kng',
    to: 'kg'
  },
  {
    from: 'knn',
    to: 'kok'
  },
  {
    from: 'kpv',
    to: 'kv'
  },
  {
    from: 'lvs',
    to: 'lv'
  },
  {
    from: 'mhr',
    to: 'chm'
  },
  {
    from: 'mup',
    to: 'raj'
  },
  {
    from: 'khk',
    to: 'mn'
  },
  {
    from: 'npi',
    to: 'ne'
  },
  {
    from: 'ojg',
    to: 'oj'
  },
  {
    from: 'ory',
    to: 'or'
  },
  {
    from: 'pbu',
    to: 'ps'
  },
  {
    from: 'pes',
    to: 'fa'
  },
  {
    from: 'plt',
    to: 'mg'
  },
  {
    from: 'pnb',
    to: 'lah'
  },
  {
    from: 'quz',
    to: 'qu'
  },
  {
    from: 'rmy',
    to: 'rom'
  },
  {
    from: 'spy',
    to: 'kln'
  },
  {
    from: 'src',
    to: 'sc'
  },
  {
    from: 'swh',
    to: 'sw'
  },
  {
    from: 'ttq',
    to: 'tmh'
  },
  {
    from: 'tw',
    to: 'ak'
  },
  {
    from: 'umu',
    to: 'del'
  },
  {
    from: 'uzn',
    to: 'uz'
  },
  {
    from: 'xpe',
    to: 'kpe'
  },
  {
    from: 'xsl',
    to: 'den'
  },
  {
    from: 'ydd',
    to: 'yi'
  },
  {
    from: 'zai',
    to: 'zap'
  },
  {
    from: 'zsm',
    to: 'ms'
  },
  {
    from: 'zyb',
    to: 'za'
  },
  {
    from: 'him',
    to: 'srx'
  },
  {
    from: 'mnk',
    to: 'man'
  },
  {
    from: 'bh',
    to: 'bho'
  },
  {
    from: 'prs',
    to: 'fa-af'
  },
  {
    from: 'swc',
    to: 'sw-cd'
  },
  {
    from: 'aar',
    to: 'aa'
  },
  {
    from: 'abk',
    to: 'ab'
  },
  {
    from: 'ave',
    to: 'ae'
  },
  {
    from: 'afr',
    to: 'af'
  },
  {
    from: 'aka',
    to: 'ak'
  },
  {
    from: 'amh',
    to: 'am'
  },
  {
    from: 'arg',
    to: 'an'
  },
  {
    from: 'ara',
    to: 'ar'
  },
  {
    from: 'asm',
    to: 'as'
  },
  {
    from: 'ava',
    to: 'av'
  },
  {
    from: 'aym',
    to: 'ay'
  },
  {
    from: 'aze',
    to: 'az'
  },
  {
    from: 'bak',
    to: 'ba'
  },
  {
    from: 'bel',
    to: 'be'
  },
  {
    from: 'bul',
    to: 'bg'
  },
  {
    from: 'bih',
    to: 'bho'
  },
  {
    from: 'bis',
    to: 'bi'
  },
  {
    from: 'bam',
    to: 'bm'
  },
  {
    from: 'ben',
    to: 'bn'
  },
  {
    from: 'bod',
    to: 'bo'
  },
  {
    from: 'bre',
    to: 'br'
  },
  {
    from: 'bos',
    to: 'bs'
  },
  {
    from: 'cat',
    to: 'ca'
  },
  {
    from: 'che',
    to: 'ce'
  },
  {
    from: 'cha',
    to: 'ch'
  },
  {
    from: 'cos',
    to: 'co'
  },
  {
    from: 'cre',
    to: 'cr'
  },
  {
    from: 'ces',
    to: 'cs'
  },
  {
    from: 'chu',
    to: 'cu'
  },
  {
    from: 'chv',
    to: 'cv'
  },
  {
    from: 'cym',
    to: 'cy'
  },
  {
    from: 'dan',
    to: 'da'
  },
  {
    from: 'deu',
    to: 'de'
  },
  {
    from: 'div',
    to: 'dv'
  },
  {
    from: 'dzo',
    to: 'dz'
  },
  {
    from: 'ewe',
    to: 'ee'
  },
  {
    from: 'ell',
    to: 'el'
  },
  {
    from: 'eng',
    to: 'en'
  },
  {
    from: 'epo',
    to: 'eo'
  },
  {
    from: 'spa',
    to: 'es'
  },
  {
    from: 'est',
    to: 'et'
  },
  {
    from: 'eus',
    to: 'eu'
  },
  {
    from: 'fas',
    to: 'fa'
  },
  {
    from: 'ful',
    to: 'ff'
  },
  {
    from: 'fin',
    to: 'fi'
  },
  {
    from: 'fij',
    to: 'fj'
  },
  {
    from: 'fao',
    to: 'fo'
  },
  {
    from: 'fra',
    to: 'fr'
  },
  {
    from: 'fry',
    to: 'fy'
  },
  {
    from: 'gle',
    to: 'ga'
  },
  {
    from: 'gla',
    to: 'gd'
  },
  {
    from: 'glg',
    to: 'gl'
  },
  {
    from: 'grn',
    to: 'gn'
  },
  {
    from: 'guj',
    to: 'gu'
  },
  {
    from: 'glv',
    to: 'gv'
  },
  {
    from: 'hau',
    to: 'ha'
  },
  {
    from: 'heb',
    to: 'he'
  },
  {
    from: 'hin',
    to: 'hi'
  },
  {
    from: 'hmo',
    to: 'ho'
  },
  {
    from: 'hrv',
    to: 'hr'
  },
  {
    from: 'hat',
    to: 'ht'
  },
  {
    from: 'hun',
    to: 'hu'
  },
  {
    from: 'hye',
    to: 'hy'
  },
  {
    from: 'her',
    to: 'hz'
  },
  {
    from: 'ina',
    to: 'ia'
  },
  {
    from: 'ind',
    to: 'id'
  },
  {
    from: 'ile',
    to: 'ie'
  },
  {
    from: 'ibo',
    to: 'ig'
  },
  {
    from: 'iii',
    to: 'ii'
  },
  {
    from: 'ipk',
    to: 'ik'
  },
  {
    from: 'ido',
    to: 'io'
  },
  {
    from: 'isl',
    to: 'is'
  },
  {
    from: 'ita',
    to: 'it'
  },
  {
    from: 'iku',
    to: 'iu'
  },
  {
    from: 'jpn',
    to: 'ja'
  },
  {
    from: 'jav',
    to: 'jv'
  },
  {
    from: 'kat',
    to: 'ka'
  },
  {
    from: 'kon',
    to: 'kg'
  },
  {
    from: 'kik',
    to: 'ki'
  },
  {
    from: 'kua',
    to: 'kj'
  },
  {
    from: 'kaz',
    to: 'kk'
  },
  {
    from: 'kal',
    to: 'kl'
  },
  {
    from: 'khm',
    to: 'km'
  },
  {
    from: 'kan',
    to: 'kn'
  },
  {
    from: 'kor',
    to: 'ko'
  },
  {
    from: 'kau',
    to: 'kr'
  },
  {
    from: 'kas',
    to: 'ks'
  },
  {
    from: 'kur',
    to: 'ku'
  },
  {
    from: 'kom',
    to: 'kv'
  },
  {
    from: 'cor',
    to: 'kw'
  },
  {
    from: 'kir',
    to: 'ky'
  },
  {
    from: 'lat',
    to: 'la'
  },
  {
    from: 'ltz',
    to: 'lb'
  },
  {
    from: 'lug',
    to: 'lg'
  },
  {
    from: 'lim',
    to: 'li'
  },
  {
    from: 'lin',
    to: 'ln'
  },
  {
    from: 'lao',
    to: 'lo'
  },
  {
    from: 'lit',
    to: 'lt'
  },
  {
    from: 'lub',
    to: 'lu'
  },
  {
    from: 'lav',
    to: 'lv'
  },
  {
    from: 'mlg',
    to: 'mg'
  },
  {
    from: 'mah',
    to: 'mh'
  },
  {
    from: 'mri',
    to: 'mi'
  },
  {
    from: 'mkd',
    to: 'mk'
  },
  {
    from: 'mal',
    to: 'ml'
  },
  {
    from: 'mon',
    to: 'mn'
  },
  {
    from: 'mol',
    to: 'ro'
  },
  {
    from: 'mar',
    to: 'mr'
  },
  {
    from: 'msa',
    to: 'ms'
  },
  {
    from: 'mlt',
    to: 'mt'
  },
  {
    from: 'mya',
    to: 'my'
  },
  {
    from: 'nau',
    to: 'na'
  },
  {
    from: 'nob',
    to: 'nb'
  },
  {
    from: 'nde',
    to: 'nd'
  },
  {
    from: 'nep',
    to: 'ne'
  },
  {
    from: 'ndo',
    to: 'ng'
  },
  {
    from: 'nld',
    to: 'nl'
  },
  {
    from: 'nno',
    to: 'nn'
  },
  {
    from: 'nor',
    to: 'no'
  },
  {
    from: 'nbl',
    to: 'nr'
  },
  {
    from: 'nav',
    to: 'nv'
  },
  {
    from: 'nya',
    to: 'ny'
  },
  {
    from: 'oci',
    to: 'oc'
  },
  {
    from: 'oji',
    to: 'oj'
  },
  {
    from: 'orm',
    to: 'om'
  },
  {
    from: 'ori',
    to: 'or'
  },
  {
    from: 'oss',
    to: 'os'
  },
  {
    from: 'pan',
    to: 'pa'
  },
  {
    from: 'pli',
    to: 'pi'
  },
  {
    from: 'pol',
    to: 'pl'
  },
  {
    from: 'pus',
    to: 'ps'
  },
  {
    from: 'por',
    to: 'pt'
  },
  {
    from: 'que',
    to: 'qu'
  },
  {
    from: 'roh',
    to: 'rm'
  },
  {
    from: 'run',
    to: 'rn'
  },
  {
    from: 'ron',
    to: 'ro'
  },
  {
    from: 'rus',
    to: 'ru'
  },
  {
    from: 'kin',
    to: 'rw'
  },
  {
    from: 'san',
    to: 'sa'
  },
  {
    from: 'srd',
    to: 'sc'
  },
  {
    from: 'snd',
    to: 'sd'
  },
  {
    from: 'sme',
    to: 'se'
  },
  {
    from: 'sag',
    to: 'sg'
  },
  {
    from: 'hbs',
    to: 'sr-latn'
  },
  {
    from: 'sin',
    to: 'si'
  },
  {
    from: 'slk',
    to: 'sk'
  },
  {
    from: 'slv',
    to: 'sl'
  },
  {
    from: 'smo',
    to: 'sm'
  },
  {
    from: 'sna',
    to: 'sn'
  },
  {
    from: 'som',
    to: 'so'
  },
  {
    from: 'sqi',
    to: 'sq'
  },
  {
    from: 'srp',
    to: 'sr'
  },
  {
    from: 'ssw',
    to: 'ss'
  },
  {
    from: 'sot',
    to: 'st'
  },
  {
    from: 'sun',
    to: 'su'
  },
  {
    from: 'swe',
    to: 'sv'
  },
  {
    from: 'swa',
    to: 'sw'
  },
  {
    from: 'tam',
    to: 'ta'
  },
  {
    from: 'tel',
    to: 'te'
  },
  {
    from: 'tgk',
    to: 'tg'
  },
  {
    from: 'tha',
    to: 'th'
  },
  {
    from: 'tir',
    to: 'ti'
  },
  {
    from: 'tuk',
    to: 'tk'
  },
  {
    from: 'tgl',
    to: 'fil'
  },
  {
    from: 'tsn',
    to: 'tn'
  },
  {
    from: 'ton',
    to: 'to'
  },
  {
    from: 'tur',
    to: 'tr'
  },
  {
    from: 'tso',
    to: 'ts'
  },
  {
    from: 'tat',
    to: 'tt'
  },
  {
    from: 'twi',
    to: 'ak'
  },
  {
    from: 'tah',
    to: 'ty'
  },
  {
    from: 'uig',
    to: 'ug'
  },
  {
    from: 'ukr',
    to: 'uk'
  },
  {
    from: 'urd',
    to: 'ur'
  },
  {
    from: 'uzb',
    to: 'uz'
  },
  {
    from: 'ven',
    to: 've'
  },
  {
    from: 'vie',
    to: 'vi'
  },
  {
    from: 'vol',
    to: 'vo'
  },
  {
    from: 'wln',
    to: 'wa'
  },
  {
    from: 'wol',
    to: 'wo'
  },
  {
    from: 'xho',
    to: 'xh'
  },
  {
    from: 'yid',
    to: 'yi'
  },
  {
    from: 'yor',
    to: 'yo'
  },
  {
    from: 'zha',
    to: 'za'
  },
  {
    from: 'zho',
    to: 'zh'
  },
  {
    from: 'zul',
    to: 'zu'
  },
  {
    from: 'alb',
    to: 'sq'
  },
  {
    from: 'arm',
    to: 'hy'
  },
  {
    from: 'baq',
    to: 'eu'
  },
  {
    from: 'bur',
    to: 'my'
  },
  {
    from: 'chi',
    to: 'zh'
  },
  {
    from: 'cze',
    to: 'cs'
  },
  {
    from: 'dut',
    to: 'nl'
  },
  {
    from: 'fre',
    to: 'fr'
  },
  {
    from: 'geo',
    to: 'ka'
  },
  {
    from: 'ger',
    to: 'de'
  },
  {
    from: 'gre',
    to: 'el'
  },
  {
    from: 'ice',
    to: 'is'
  },
  {
    from: 'mac',
    to: 'mk'
  },
  {
    from: 'mao',
    to: 'mi'
  },
  {
    from: 'may',
    to: 'ms'
  },
  {
    from: 'per',
    to: 'fa'
  },
  {
    from: 'rum',
    to: 'ro'
  },
  {
    from: 'slo',
    to: 'sk'
  },
  {
    from: 'tib',
    to: 'bo'
  },
  {
    from: 'wel',
    to: 'cy'
  },
  {
    from: 'und-aaland',
    to: 'und-ax'
  },
  {
    from: 'hy-arevmda',
    to: 'hyw'
  },
  {
    from: 'und-arevmda',
    to: 'und'
  },
  {
    from: 'und-arevela',
    to: 'und'
  },
  {
    from: 'und-lojban',
    to: 'und'
  },
  {
    from: 'und-saaho',
    to: 'und'
  },
  {
    from: 'und-bokmal',
    to: 'und'
  },
  {
    from: 'und-nynorsk',
    to: 'und'
  },
  {
    from: 'und-hakka',
    to: 'und'
  },
  {
    from: 'und-xiang',
    to: 'und'
  },
  {
    from: 'und-hepburn-heploc',
    to: 'und-alalc97'
  }
];

/**
 * @typedef {'script'|'region'|'variants'} Field
 *
 * @typedef AddOrRemove
 * @property {Field} field
 * @property {string} value
 *
 * @typedef Change
 * @property {AddOrRemove} from
 * @property {AddOrRemove} to
 */

/**
 * @type {Array<Change>}
 */
const fields$1 = [
  {
    from: {
      field: 'script',
      value: 'qaai'
    },
    to: {
      field: 'script',
      value: 'zinh'
    }
  },
  {
    from: {
      field: 'region',
      value: 'bu'
    },
    to: {
      field: 'region',
      value: 'mm'
    }
  },
  {
    from: {
      field: 'region',
      value: 'ct'
    },
    to: {
      field: 'region',
      value: 'ki'
    }
  },
  {
    from: {
      field: 'region',
      value: 'dd'
    },
    to: {
      field: 'region',
      value: 'de'
    }
  },
  {
    from: {
      field: 'region',
      value: 'dy'
    },
    to: {
      field: 'region',
      value: 'bj'
    }
  },
  {
    from: {
      field: 'region',
      value: 'fx'
    },
    to: {
      field: 'region',
      value: 'fr'
    }
  },
  {
    from: {
      field: 'region',
      value: 'hv'
    },
    to: {
      field: 'region',
      value: 'bf'
    }
  },
  {
    from: {
      field: 'region',
      value: 'jt'
    },
    to: {
      field: 'region',
      value: 'um'
    }
  },
  {
    from: {
      field: 'region',
      value: 'mi'
    },
    to: {
      field: 'region',
      value: 'um'
    }
  },
  {
    from: {
      field: 'region',
      value: 'nh'
    },
    to: {
      field: 'region',
      value: 'vu'
    }
  },
  {
    from: {
      field: 'region',
      value: 'nq'
    },
    to: {
      field: 'region',
      value: 'aq'
    }
  },
  {
    from: {
      field: 'region',
      value: 'pu'
    },
    to: {
      field: 'region',
      value: 'um'
    }
  },
  {
    from: {
      field: 'region',
      value: 'pz'
    },
    to: {
      field: 'region',
      value: 'pa'
    }
  },
  {
    from: {
      field: 'region',
      value: 'qu'
    },
    to: {
      field: 'region',
      value: 'eu'
    }
  },
  {
    from: {
      field: 'region',
      value: 'rh'
    },
    to: {
      field: 'region',
      value: 'zw'
    }
  },
  {
    from: {
      field: 'region',
      value: 'tp'
    },
    to: {
      field: 'region',
      value: 'tl'
    }
  },
  {
    from: {
      field: 'region',
      value: 'uk'
    },
    to: {
      field: 'region',
      value: 'gb'
    }
  },
  {
    from: {
      field: 'region',
      value: 'vd'
    },
    to: {
      field: 'region',
      value: 'vn'
    }
  },
  {
    from: {
      field: 'region',
      value: 'wk'
    },
    to: {
      field: 'region',
      value: 'um'
    }
  },
  {
    from: {
      field: 'region',
      value: 'yd'
    },
    to: {
      field: 'region',
      value: 'ye'
    }
  },
  {
    from: {
      field: 'region',
      value: 'zr'
    },
    to: {
      field: 'region',
      value: 'cd'
    }
  },
  {
    from: {
      field: 'region',
      value: '230'
    },
    to: {
      field: 'region',
      value: 'et'
    }
  },
  {
    from: {
      field: 'region',
      value: '280'
    },
    to: {
      field: 'region',
      value: 'de'
    }
  },
  {
    from: {
      field: 'region',
      value: '736'
    },
    to: {
      field: 'region',
      value: 'sd'
    }
  },
  {
    from: {
      field: 'region',
      value: '886'
    },
    to: {
      field: 'region',
      value: 'ye'
    }
  },
  {
    from: {
      field: 'region',
      value: '958'
    },
    to: {
      field: 'region',
      value: 'aa'
    }
  },
  {
    from: {
      field: 'region',
      value: '020'
    },
    to: {
      field: 'region',
      value: 'ad'
    }
  },
  {
    from: {
      field: 'region',
      value: '784'
    },
    to: {
      field: 'region',
      value: 'ae'
    }
  },
  {
    from: {
      field: 'region',
      value: '004'
    },
    to: {
      field: 'region',
      value: 'af'
    }
  },
  {
    from: {
      field: 'region',
      value: '028'
    },
    to: {
      field: 'region',
      value: 'ag'
    }
  },
  {
    from: {
      field: 'region',
      value: '660'
    },
    to: {
      field: 'region',
      value: 'ai'
    }
  },
  {
    from: {
      field: 'region',
      value: '008'
    },
    to: {
      field: 'region',
      value: 'al'
    }
  },
  {
    from: {
      field: 'region',
      value: '051'
    },
    to: {
      field: 'region',
      value: 'am'
    }
  },
  {
    from: {
      field: 'region',
      value: '024'
    },
    to: {
      field: 'region',
      value: 'ao'
    }
  },
  {
    from: {
      field: 'region',
      value: '010'
    },
    to: {
      field: 'region',
      value: 'aq'
    }
  },
  {
    from: {
      field: 'region',
      value: '032'
    },
    to: {
      field: 'region',
      value: 'ar'
    }
  },
  {
    from: {
      field: 'region',
      value: '016'
    },
    to: {
      field: 'region',
      value: 'as'
    }
  },
  {
    from: {
      field: 'region',
      value: '040'
    },
    to: {
      field: 'region',
      value: 'at'
    }
  },
  {
    from: {
      field: 'region',
      value: '036'
    },
    to: {
      field: 'region',
      value: 'au'
    }
  },
  {
    from: {
      field: 'region',
      value: '533'
    },
    to: {
      field: 'region',
      value: 'aw'
    }
  },
  {
    from: {
      field: 'region',
      value: '248'
    },
    to: {
      field: 'region',
      value: 'ax'
    }
  },
  {
    from: {
      field: 'region',
      value: '031'
    },
    to: {
      field: 'region',
      value: 'az'
    }
  },
  {
    from: {
      field: 'region',
      value: '070'
    },
    to: {
      field: 'region',
      value: 'ba'
    }
  },
  {
    from: {
      field: 'region',
      value: '052'
    },
    to: {
      field: 'region',
      value: 'bb'
    }
  },
  {
    from: {
      field: 'region',
      value: '050'
    },
    to: {
      field: 'region',
      value: 'bd'
    }
  },
  {
    from: {
      field: 'region',
      value: '056'
    },
    to: {
      field: 'region',
      value: 'be'
    }
  },
  {
    from: {
      field: 'region',
      value: '854'
    },
    to: {
      field: 'region',
      value: 'bf'
    }
  },
  {
    from: {
      field: 'region',
      value: '100'
    },
    to: {
      field: 'region',
      value: 'bg'
    }
  },
  {
    from: {
      field: 'region',
      value: '048'
    },
    to: {
      field: 'region',
      value: 'bh'
    }
  },
  {
    from: {
      field: 'region',
      value: '108'
    },
    to: {
      field: 'region',
      value: 'bi'
    }
  },
  {
    from: {
      field: 'region',
      value: '204'
    },
    to: {
      field: 'region',
      value: 'bj'
    }
  },
  {
    from: {
      field: 'region',
      value: '652'
    },
    to: {
      field: 'region',
      value: 'bl'
    }
  },
  {
    from: {
      field: 'region',
      value: '060'
    },
    to: {
      field: 'region',
      value: 'bm'
    }
  },
  {
    from: {
      field: 'region',
      value: '096'
    },
    to: {
      field: 'region',
      value: 'bn'
    }
  },
  {
    from: {
      field: 'region',
      value: '068'
    },
    to: {
      field: 'region',
      value: 'bo'
    }
  },
  {
    from: {
      field: 'region',
      value: '535'
    },
    to: {
      field: 'region',
      value: 'bq'
    }
  },
  {
    from: {
      field: 'region',
      value: '076'
    },
    to: {
      field: 'region',
      value: 'br'
    }
  },
  {
    from: {
      field: 'region',
      value: '044'
    },
    to: {
      field: 'region',
      value: 'bs'
    }
  },
  {
    from: {
      field: 'region',
      value: '064'
    },
    to: {
      field: 'region',
      value: 'bt'
    }
  },
  {
    from: {
      field: 'region',
      value: '104'
    },
    to: {
      field: 'region',
      value: 'mm'
    }
  },
  {
    from: {
      field: 'region',
      value: '074'
    },
    to: {
      field: 'region',
      value: 'bv'
    }
  },
  {
    from: {
      field: 'region',
      value: '072'
    },
    to: {
      field: 'region',
      value: 'bw'
    }
  },
  {
    from: {
      field: 'region',
      value: '112'
    },
    to: {
      field: 'region',
      value: 'by'
    }
  },
  {
    from: {
      field: 'region',
      value: '084'
    },
    to: {
      field: 'region',
      value: 'bz'
    }
  },
  {
    from: {
      field: 'region',
      value: '124'
    },
    to: {
      field: 'region',
      value: 'ca'
    }
  },
  {
    from: {
      field: 'region',
      value: '166'
    },
    to: {
      field: 'region',
      value: 'cc'
    }
  },
  {
    from: {
      field: 'region',
      value: '180'
    },
    to: {
      field: 'region',
      value: 'cd'
    }
  },
  {
    from: {
      field: 'region',
      value: '140'
    },
    to: {
      field: 'region',
      value: 'cf'
    }
  },
  {
    from: {
      field: 'region',
      value: '178'
    },
    to: {
      field: 'region',
      value: 'cg'
    }
  },
  {
    from: {
      field: 'region',
      value: '756'
    },
    to: {
      field: 'region',
      value: 'ch'
    }
  },
  {
    from: {
      field: 'region',
      value: '384'
    },
    to: {
      field: 'region',
      value: 'ci'
    }
  },
  {
    from: {
      field: 'region',
      value: '184'
    },
    to: {
      field: 'region',
      value: 'ck'
    }
  },
  {
    from: {
      field: 'region',
      value: '152'
    },
    to: {
      field: 'region',
      value: 'cl'
    }
  },
  {
    from: {
      field: 'region',
      value: '120'
    },
    to: {
      field: 'region',
      value: 'cm'
    }
  },
  {
    from: {
      field: 'region',
      value: '156'
    },
    to: {
      field: 'region',
      value: 'cn'
    }
  },
  {
    from: {
      field: 'region',
      value: '170'
    },
    to: {
      field: 'region',
      value: 'co'
    }
  },
  {
    from: {
      field: 'region',
      value: '188'
    },
    to: {
      field: 'region',
      value: 'cr'
    }
  },
  {
    from: {
      field: 'region',
      value: '192'
    },
    to: {
      field: 'region',
      value: 'cu'
    }
  },
  {
    from: {
      field: 'region',
      value: '132'
    },
    to: {
      field: 'region',
      value: 'cv'
    }
  },
  {
    from: {
      field: 'region',
      value: '531'
    },
    to: {
      field: 'region',
      value: 'cw'
    }
  },
  {
    from: {
      field: 'region',
      value: '162'
    },
    to: {
      field: 'region',
      value: 'cx'
    }
  },
  {
    from: {
      field: 'region',
      value: '196'
    },
    to: {
      field: 'region',
      value: 'cy'
    }
  },
  {
    from: {
      field: 'region',
      value: '203'
    },
    to: {
      field: 'region',
      value: 'cz'
    }
  },
  {
    from: {
      field: 'region',
      value: '278'
    },
    to: {
      field: 'region',
      value: 'de'
    }
  },
  {
    from: {
      field: 'region',
      value: '276'
    },
    to: {
      field: 'region',
      value: 'de'
    }
  },
  {
    from: {
      field: 'region',
      value: '262'
    },
    to: {
      field: 'region',
      value: 'dj'
    }
  },
  {
    from: {
      field: 'region',
      value: '208'
    },
    to: {
      field: 'region',
      value: 'dk'
    }
  },
  {
    from: {
      field: 'region',
      value: '212'
    },
    to: {
      field: 'region',
      value: 'dm'
    }
  },
  {
    from: {
      field: 'region',
      value: '214'
    },
    to: {
      field: 'region',
      value: 'do'
    }
  },
  {
    from: {
      field: 'region',
      value: '012'
    },
    to: {
      field: 'region',
      value: 'dz'
    }
  },
  {
    from: {
      field: 'region',
      value: '218'
    },
    to: {
      field: 'region',
      value: 'ec'
    }
  },
  {
    from: {
      field: 'region',
      value: '233'
    },
    to: {
      field: 'region',
      value: 'ee'
    }
  },
  {
    from: {
      field: 'region',
      value: '818'
    },
    to: {
      field: 'region',
      value: 'eg'
    }
  },
  {
    from: {
      field: 'region',
      value: '732'
    },
    to: {
      field: 'region',
      value: 'eh'
    }
  },
  {
    from: {
      field: 'region',
      value: '232'
    },
    to: {
      field: 'region',
      value: 'er'
    }
  },
  {
    from: {
      field: 'region',
      value: '724'
    },
    to: {
      field: 'region',
      value: 'es'
    }
  },
  {
    from: {
      field: 'region',
      value: '231'
    },
    to: {
      field: 'region',
      value: 'et'
    }
  },
  {
    from: {
      field: 'region',
      value: '246'
    },
    to: {
      field: 'region',
      value: 'fi'
    }
  },
  {
    from: {
      field: 'region',
      value: '242'
    },
    to: {
      field: 'region',
      value: 'fj'
    }
  },
  {
    from: {
      field: 'region',
      value: '238'
    },
    to: {
      field: 'region',
      value: 'fk'
    }
  },
  {
    from: {
      field: 'region',
      value: '583'
    },
    to: {
      field: 'region',
      value: 'fm'
    }
  },
  {
    from: {
      field: 'region',
      value: '234'
    },
    to: {
      field: 'region',
      value: 'fo'
    }
  },
  {
    from: {
      field: 'region',
      value: '250'
    },
    to: {
      field: 'region',
      value: 'fr'
    }
  },
  {
    from: {
      field: 'region',
      value: '249'
    },
    to: {
      field: 'region',
      value: 'fr'
    }
  },
  {
    from: {
      field: 'region',
      value: '266'
    },
    to: {
      field: 'region',
      value: 'ga'
    }
  },
  {
    from: {
      field: 'region',
      value: '826'
    },
    to: {
      field: 'region',
      value: 'gb'
    }
  },
  {
    from: {
      field: 'region',
      value: '308'
    },
    to: {
      field: 'region',
      value: 'gd'
    }
  },
  {
    from: {
      field: 'region',
      value: '268'
    },
    to: {
      field: 'region',
      value: 'ge'
    }
  },
  {
    from: {
      field: 'region',
      value: '254'
    },
    to: {
      field: 'region',
      value: 'gf'
    }
  },
  {
    from: {
      field: 'region',
      value: '831'
    },
    to: {
      field: 'region',
      value: 'gg'
    }
  },
  {
    from: {
      field: 'region',
      value: '288'
    },
    to: {
      field: 'region',
      value: 'gh'
    }
  },
  {
    from: {
      field: 'region',
      value: '292'
    },
    to: {
      field: 'region',
      value: 'gi'
    }
  },
  {
    from: {
      field: 'region',
      value: '304'
    },
    to: {
      field: 'region',
      value: 'gl'
    }
  },
  {
    from: {
      field: 'region',
      value: '270'
    },
    to: {
      field: 'region',
      value: 'gm'
    }
  },
  {
    from: {
      field: 'region',
      value: '324'
    },
    to: {
      field: 'region',
      value: 'gn'
    }
  },
  {
    from: {
      field: 'region',
      value: '312'
    },
    to: {
      field: 'region',
      value: 'gp'
    }
  },
  {
    from: {
      field: 'region',
      value: '226'
    },
    to: {
      field: 'region',
      value: 'gq'
    }
  },
  {
    from: {
      field: 'region',
      value: '300'
    },
    to: {
      field: 'region',
      value: 'gr'
    }
  },
  {
    from: {
      field: 'region',
      value: '239'
    },
    to: {
      field: 'region',
      value: 'gs'
    }
  },
  {
    from: {
      field: 'region',
      value: '320'
    },
    to: {
      field: 'region',
      value: 'gt'
    }
  },
  {
    from: {
      field: 'region',
      value: '316'
    },
    to: {
      field: 'region',
      value: 'gu'
    }
  },
  {
    from: {
      field: 'region',
      value: '624'
    },
    to: {
      field: 'region',
      value: 'gw'
    }
  },
  {
    from: {
      field: 'region',
      value: '328'
    },
    to: {
      field: 'region',
      value: 'gy'
    }
  },
  {
    from: {
      field: 'region',
      value: '344'
    },
    to: {
      field: 'region',
      value: 'hk'
    }
  },
  {
    from: {
      field: 'region',
      value: '334'
    },
    to: {
      field: 'region',
      value: 'hm'
    }
  },
  {
    from: {
      field: 'region',
      value: '340'
    },
    to: {
      field: 'region',
      value: 'hn'
    }
  },
  {
    from: {
      field: 'region',
      value: '191'
    },
    to: {
      field: 'region',
      value: 'hr'
    }
  },
  {
    from: {
      field: 'region',
      value: '332'
    },
    to: {
      field: 'region',
      value: 'ht'
    }
  },
  {
    from: {
      field: 'region',
      value: '348'
    },
    to: {
      field: 'region',
      value: 'hu'
    }
  },
  {
    from: {
      field: 'region',
      value: '360'
    },
    to: {
      field: 'region',
      value: 'id'
    }
  },
  {
    from: {
      field: 'region',
      value: '372'
    },
    to: {
      field: 'region',
      value: 'ie'
    }
  },
  {
    from: {
      field: 'region',
      value: '376'
    },
    to: {
      field: 'region',
      value: 'il'
    }
  },
  {
    from: {
      field: 'region',
      value: '833'
    },
    to: {
      field: 'region',
      value: 'im'
    }
  },
  {
    from: {
      field: 'region',
      value: '356'
    },
    to: {
      field: 'region',
      value: 'in'
    }
  },
  {
    from: {
      field: 'region',
      value: '086'
    },
    to: {
      field: 'region',
      value: 'io'
    }
  },
  {
    from: {
      field: 'region',
      value: '368'
    },
    to: {
      field: 'region',
      value: 'iq'
    }
  },
  {
    from: {
      field: 'region',
      value: '364'
    },
    to: {
      field: 'region',
      value: 'ir'
    }
  },
  {
    from: {
      field: 'region',
      value: '352'
    },
    to: {
      field: 'region',
      value: 'is'
    }
  },
  {
    from: {
      field: 'region',
      value: '380'
    },
    to: {
      field: 'region',
      value: 'it'
    }
  },
  {
    from: {
      field: 'region',
      value: '832'
    },
    to: {
      field: 'region',
      value: 'je'
    }
  },
  {
    from: {
      field: 'region',
      value: '388'
    },
    to: {
      field: 'region',
      value: 'jm'
    }
  },
  {
    from: {
      field: 'region',
      value: '400'
    },
    to: {
      field: 'region',
      value: 'jo'
    }
  },
  {
    from: {
      field: 'region',
      value: '392'
    },
    to: {
      field: 'region',
      value: 'jp'
    }
  },
  {
    from: {
      field: 'region',
      value: '404'
    },
    to: {
      field: 'region',
      value: 'ke'
    }
  },
  {
    from: {
      field: 'region',
      value: '417'
    },
    to: {
      field: 'region',
      value: 'kg'
    }
  },
  {
    from: {
      field: 'region',
      value: '116'
    },
    to: {
      field: 'region',
      value: 'kh'
    }
  },
  {
    from: {
      field: 'region',
      value: '296'
    },
    to: {
      field: 'region',
      value: 'ki'
    }
  },
  {
    from: {
      field: 'region',
      value: '174'
    },
    to: {
      field: 'region',
      value: 'km'
    }
  },
  {
    from: {
      field: 'region',
      value: '659'
    },
    to: {
      field: 'region',
      value: 'kn'
    }
  },
  {
    from: {
      field: 'region',
      value: '408'
    },
    to: {
      field: 'region',
      value: 'kp'
    }
  },
  {
    from: {
      field: 'region',
      value: '410'
    },
    to: {
      field: 'region',
      value: 'kr'
    }
  },
  {
    from: {
      field: 'region',
      value: '414'
    },
    to: {
      field: 'region',
      value: 'kw'
    }
  },
  {
    from: {
      field: 'region',
      value: '136'
    },
    to: {
      field: 'region',
      value: 'ky'
    }
  },
  {
    from: {
      field: 'region',
      value: '398'
    },
    to: {
      field: 'region',
      value: 'kz'
    }
  },
  {
    from: {
      field: 'region',
      value: '418'
    },
    to: {
      field: 'region',
      value: 'la'
    }
  },
  {
    from: {
      field: 'region',
      value: '422'
    },
    to: {
      field: 'region',
      value: 'lb'
    }
  },
  {
    from: {
      field: 'region',
      value: '662'
    },
    to: {
      field: 'region',
      value: 'lc'
    }
  },
  {
    from: {
      field: 'region',
      value: '438'
    },
    to: {
      field: 'region',
      value: 'li'
    }
  },
  {
    from: {
      field: 'region',
      value: '144'
    },
    to: {
      field: 'region',
      value: 'lk'
    }
  },
  {
    from: {
      field: 'region',
      value: '430'
    },
    to: {
      field: 'region',
      value: 'lr'
    }
  },
  {
    from: {
      field: 'region',
      value: '426'
    },
    to: {
      field: 'region',
      value: 'ls'
    }
  },
  {
    from: {
      field: 'region',
      value: '440'
    },
    to: {
      field: 'region',
      value: 'lt'
    }
  },
  {
    from: {
      field: 'region',
      value: '442'
    },
    to: {
      field: 'region',
      value: 'lu'
    }
  },
  {
    from: {
      field: 'region',
      value: '428'
    },
    to: {
      field: 'region',
      value: 'lv'
    }
  },
  {
    from: {
      field: 'region',
      value: '434'
    },
    to: {
      field: 'region',
      value: 'ly'
    }
  },
  {
    from: {
      field: 'region',
      value: '504'
    },
    to: {
      field: 'region',
      value: 'ma'
    }
  },
  {
    from: {
      field: 'region',
      value: '492'
    },
    to: {
      field: 'region',
      value: 'mc'
    }
  },
  {
    from: {
      field: 'region',
      value: '498'
    },
    to: {
      field: 'region',
      value: 'md'
    }
  },
  {
    from: {
      field: 'region',
      value: '499'
    },
    to: {
      field: 'region',
      value: 'me'
    }
  },
  {
    from: {
      field: 'region',
      value: '663'
    },
    to: {
      field: 'region',
      value: 'mf'
    }
  },
  {
    from: {
      field: 'region',
      value: '450'
    },
    to: {
      field: 'region',
      value: 'mg'
    }
  },
  {
    from: {
      field: 'region',
      value: '584'
    },
    to: {
      field: 'region',
      value: 'mh'
    }
  },
  {
    from: {
      field: 'region',
      value: '807'
    },
    to: {
      field: 'region',
      value: 'mk'
    }
  },
  {
    from: {
      field: 'region',
      value: '466'
    },
    to: {
      field: 'region',
      value: 'ml'
    }
  },
  {
    from: {
      field: 'region',
      value: '496'
    },
    to: {
      field: 'region',
      value: 'mn'
    }
  },
  {
    from: {
      field: 'region',
      value: '446'
    },
    to: {
      field: 'region',
      value: 'mo'
    }
  },
  {
    from: {
      field: 'region',
      value: '580'
    },
    to: {
      field: 'region',
      value: 'mp'
    }
  },
  {
    from: {
      field: 'region',
      value: '474'
    },
    to: {
      field: 'region',
      value: 'mq'
    }
  },
  {
    from: {
      field: 'region',
      value: '478'
    },
    to: {
      field: 'region',
      value: 'mr'
    }
  },
  {
    from: {
      field: 'region',
      value: '500'
    },
    to: {
      field: 'region',
      value: 'ms'
    }
  },
  {
    from: {
      field: 'region',
      value: '470'
    },
    to: {
      field: 'region',
      value: 'mt'
    }
  },
  {
    from: {
      field: 'region',
      value: '480'
    },
    to: {
      field: 'region',
      value: 'mu'
    }
  },
  {
    from: {
      field: 'region',
      value: '462'
    },
    to: {
      field: 'region',
      value: 'mv'
    }
  },
  {
    from: {
      field: 'region',
      value: '454'
    },
    to: {
      field: 'region',
      value: 'mw'
    }
  },
  {
    from: {
      field: 'region',
      value: '484'
    },
    to: {
      field: 'region',
      value: 'mx'
    }
  },
  {
    from: {
      field: 'region',
      value: '458'
    },
    to: {
      field: 'region',
      value: 'my'
    }
  },
  {
    from: {
      field: 'region',
      value: '508'
    },
    to: {
      field: 'region',
      value: 'mz'
    }
  },
  {
    from: {
      field: 'region',
      value: '516'
    },
    to: {
      field: 'region',
      value: 'na'
    }
  },
  {
    from: {
      field: 'region',
      value: '540'
    },
    to: {
      field: 'region',
      value: 'nc'
    }
  },
  {
    from: {
      field: 'region',
      value: '562'
    },
    to: {
      field: 'region',
      value: 'ne'
    }
  },
  {
    from: {
      field: 'region',
      value: '574'
    },
    to: {
      field: 'region',
      value: 'nf'
    }
  },
  {
    from: {
      field: 'region',
      value: '566'
    },
    to: {
      field: 'region',
      value: 'ng'
    }
  },
  {
    from: {
      field: 'region',
      value: '558'
    },
    to: {
      field: 'region',
      value: 'ni'
    }
  },
  {
    from: {
      field: 'region',
      value: '528'
    },
    to: {
      field: 'region',
      value: 'nl'
    }
  },
  {
    from: {
      field: 'region',
      value: '578'
    },
    to: {
      field: 'region',
      value: 'no'
    }
  },
  {
    from: {
      field: 'region',
      value: '524'
    },
    to: {
      field: 'region',
      value: 'np'
    }
  },
  {
    from: {
      field: 'region',
      value: '520'
    },
    to: {
      field: 'region',
      value: 'nr'
    }
  },
  {
    from: {
      field: 'region',
      value: '570'
    },
    to: {
      field: 'region',
      value: 'nu'
    }
  },
  {
    from: {
      field: 'region',
      value: '554'
    },
    to: {
      field: 'region',
      value: 'nz'
    }
  },
  {
    from: {
      field: 'region',
      value: '512'
    },
    to: {
      field: 'region',
      value: 'om'
    }
  },
  {
    from: {
      field: 'region',
      value: '591'
    },
    to: {
      field: 'region',
      value: 'pa'
    }
  },
  {
    from: {
      field: 'region',
      value: '604'
    },
    to: {
      field: 'region',
      value: 'pe'
    }
  },
  {
    from: {
      field: 'region',
      value: '258'
    },
    to: {
      field: 'region',
      value: 'pf'
    }
  },
  {
    from: {
      field: 'region',
      value: '598'
    },
    to: {
      field: 'region',
      value: 'pg'
    }
  },
  {
    from: {
      field: 'region',
      value: '608'
    },
    to: {
      field: 'region',
      value: 'ph'
    }
  },
  {
    from: {
      field: 'region',
      value: '586'
    },
    to: {
      field: 'region',
      value: 'pk'
    }
  },
  {
    from: {
      field: 'region',
      value: '616'
    },
    to: {
      field: 'region',
      value: 'pl'
    }
  },
  {
    from: {
      field: 'region',
      value: '666'
    },
    to: {
      field: 'region',
      value: 'pm'
    }
  },
  {
    from: {
      field: 'region',
      value: '612'
    },
    to: {
      field: 'region',
      value: 'pn'
    }
  },
  {
    from: {
      field: 'region',
      value: '630'
    },
    to: {
      field: 'region',
      value: 'pr'
    }
  },
  {
    from: {
      field: 'region',
      value: '275'
    },
    to: {
      field: 'region',
      value: 'ps'
    }
  },
  {
    from: {
      field: 'region',
      value: '620'
    },
    to: {
      field: 'region',
      value: 'pt'
    }
  },
  {
    from: {
      field: 'region',
      value: '585'
    },
    to: {
      field: 'region',
      value: 'pw'
    }
  },
  {
    from: {
      field: 'region',
      value: '600'
    },
    to: {
      field: 'region',
      value: 'py'
    }
  },
  {
    from: {
      field: 'region',
      value: '634'
    },
    to: {
      field: 'region',
      value: 'qa'
    }
  },
  {
    from: {
      field: 'region',
      value: '959'
    },
    to: {
      field: 'region',
      value: 'qm'
    }
  },
  {
    from: {
      field: 'region',
      value: '960'
    },
    to: {
      field: 'region',
      value: 'qn'
    }
  },
  {
    from: {
      field: 'region',
      value: '962'
    },
    to: {
      field: 'region',
      value: 'qp'
    }
  },
  {
    from: {
      field: 'region',
      value: '963'
    },
    to: {
      field: 'region',
      value: 'qq'
    }
  },
  {
    from: {
      field: 'region',
      value: '964'
    },
    to: {
      field: 'region',
      value: 'qr'
    }
  },
  {
    from: {
      field: 'region',
      value: '965'
    },
    to: {
      field: 'region',
      value: 'qs'
    }
  },
  {
    from: {
      field: 'region',
      value: '966'
    },
    to: {
      field: 'region',
      value: 'qt'
    }
  },
  {
    from: {
      field: 'region',
      value: '967'
    },
    to: {
      field: 'region',
      value: 'eu'
    }
  },
  {
    from: {
      field: 'region',
      value: '968'
    },
    to: {
      field: 'region',
      value: 'qv'
    }
  },
  {
    from: {
      field: 'region',
      value: '969'
    },
    to: {
      field: 'region',
      value: 'qw'
    }
  },
  {
    from: {
      field: 'region',
      value: '970'
    },
    to: {
      field: 'region',
      value: 'qx'
    }
  },
  {
    from: {
      field: 'region',
      value: '971'
    },
    to: {
      field: 'region',
      value: 'qy'
    }
  },
  {
    from: {
      field: 'region',
      value: '972'
    },
    to: {
      field: 'region',
      value: 'qz'
    }
  },
  {
    from: {
      field: 'region',
      value: '638'
    },
    to: {
      field: 'region',
      value: 're'
    }
  },
  {
    from: {
      field: 'region',
      value: '642'
    },
    to: {
      field: 'region',
      value: 'ro'
    }
  },
  {
    from: {
      field: 'region',
      value: '688'
    },
    to: {
      field: 'region',
      value: 'rs'
    }
  },
  {
    from: {
      field: 'region',
      value: '643'
    },
    to: {
      field: 'region',
      value: 'ru'
    }
  },
  {
    from: {
      field: 'region',
      value: '646'
    },
    to: {
      field: 'region',
      value: 'rw'
    }
  },
  {
    from: {
      field: 'region',
      value: '682'
    },
    to: {
      field: 'region',
      value: 'sa'
    }
  },
  {
    from: {
      field: 'region',
      value: '090'
    },
    to: {
      field: 'region',
      value: 'sb'
    }
  },
  {
    from: {
      field: 'region',
      value: '690'
    },
    to: {
      field: 'region',
      value: 'sc'
    }
  },
  {
    from: {
      field: 'region',
      value: '729'
    },
    to: {
      field: 'region',
      value: 'sd'
    }
  },
  {
    from: {
      field: 'region',
      value: '752'
    },
    to: {
      field: 'region',
      value: 'se'
    }
  },
  {
    from: {
      field: 'region',
      value: '702'
    },
    to: {
      field: 'region',
      value: 'sg'
    }
  },
  {
    from: {
      field: 'region',
      value: '654'
    },
    to: {
      field: 'region',
      value: 'sh'
    }
  },
  {
    from: {
      field: 'region',
      value: '705'
    },
    to: {
      field: 'region',
      value: 'si'
    }
  },
  {
    from: {
      field: 'region',
      value: '744'
    },
    to: {
      field: 'region',
      value: 'sj'
    }
  },
  {
    from: {
      field: 'region',
      value: '703'
    },
    to: {
      field: 'region',
      value: 'sk'
    }
  },
  {
    from: {
      field: 'region',
      value: '694'
    },
    to: {
      field: 'region',
      value: 'sl'
    }
  },
  {
    from: {
      field: 'region',
      value: '674'
    },
    to: {
      field: 'region',
      value: 'sm'
    }
  },
  {
    from: {
      field: 'region',
      value: '686'
    },
    to: {
      field: 'region',
      value: 'sn'
    }
  },
  {
    from: {
      field: 'region',
      value: '706'
    },
    to: {
      field: 'region',
      value: 'so'
    }
  },
  {
    from: {
      field: 'region',
      value: '740'
    },
    to: {
      field: 'region',
      value: 'sr'
    }
  },
  {
    from: {
      field: 'region',
      value: '728'
    },
    to: {
      field: 'region',
      value: 'ss'
    }
  },
  {
    from: {
      field: 'region',
      value: '678'
    },
    to: {
      field: 'region',
      value: 'st'
    }
  },
  {
    from: {
      field: 'region',
      value: '222'
    },
    to: {
      field: 'region',
      value: 'sv'
    }
  },
  {
    from: {
      field: 'region',
      value: '534'
    },
    to: {
      field: 'region',
      value: 'sx'
    }
  },
  {
    from: {
      field: 'region',
      value: '760'
    },
    to: {
      field: 'region',
      value: 'sy'
    }
  },
  {
    from: {
      field: 'region',
      value: '748'
    },
    to: {
      field: 'region',
      value: 'sz'
    }
  },
  {
    from: {
      field: 'region',
      value: '796'
    },
    to: {
      field: 'region',
      value: 'tc'
    }
  },
  {
    from: {
      field: 'region',
      value: '148'
    },
    to: {
      field: 'region',
      value: 'td'
    }
  },
  {
    from: {
      field: 'region',
      value: '260'
    },
    to: {
      field: 'region',
      value: 'tf'
    }
  },
  {
    from: {
      field: 'region',
      value: '768'
    },
    to: {
      field: 'region',
      value: 'tg'
    }
  },
  {
    from: {
      field: 'region',
      value: '764'
    },
    to: {
      field: 'region',
      value: 'th'
    }
  },
  {
    from: {
      field: 'region',
      value: '762'
    },
    to: {
      field: 'region',
      value: 'tj'
    }
  },
  {
    from: {
      field: 'region',
      value: '772'
    },
    to: {
      field: 'region',
      value: 'tk'
    }
  },
  {
    from: {
      field: 'region',
      value: '626'
    },
    to: {
      field: 'region',
      value: 'tl'
    }
  },
  {
    from: {
      field: 'region',
      value: '795'
    },
    to: {
      field: 'region',
      value: 'tm'
    }
  },
  {
    from: {
      field: 'region',
      value: '788'
    },
    to: {
      field: 'region',
      value: 'tn'
    }
  },
  {
    from: {
      field: 'region',
      value: '776'
    },
    to: {
      field: 'region',
      value: 'to'
    }
  },
  {
    from: {
      field: 'region',
      value: '792'
    },
    to: {
      field: 'region',
      value: 'tr'
    }
  },
  {
    from: {
      field: 'region',
      value: '780'
    },
    to: {
      field: 'region',
      value: 'tt'
    }
  },
  {
    from: {
      field: 'region',
      value: '798'
    },
    to: {
      field: 'region',
      value: 'tv'
    }
  },
  {
    from: {
      field: 'region',
      value: '158'
    },
    to: {
      field: 'region',
      value: 'tw'
    }
  },
  {
    from: {
      field: 'region',
      value: '834'
    },
    to: {
      field: 'region',
      value: 'tz'
    }
  },
  {
    from: {
      field: 'region',
      value: '804'
    },
    to: {
      field: 'region',
      value: 'ua'
    }
  },
  {
    from: {
      field: 'region',
      value: '800'
    },
    to: {
      field: 'region',
      value: 'ug'
    }
  },
  {
    from: {
      field: 'region',
      value: '581'
    },
    to: {
      field: 'region',
      value: 'um'
    }
  },
  {
    from: {
      field: 'region',
      value: '840'
    },
    to: {
      field: 'region',
      value: 'us'
    }
  },
  {
    from: {
      field: 'region',
      value: '858'
    },
    to: {
      field: 'region',
      value: 'uy'
    }
  },
  {
    from: {
      field: 'region',
      value: '860'
    },
    to: {
      field: 'region',
      value: 'uz'
    }
  },
  {
    from: {
      field: 'region',
      value: '336'
    },
    to: {
      field: 'region',
      value: 'va'
    }
  },
  {
    from: {
      field: 'region',
      value: '670'
    },
    to: {
      field: 'region',
      value: 'vc'
    }
  },
  {
    from: {
      field: 'region',
      value: '862'
    },
    to: {
      field: 'region',
      value: 've'
    }
  },
  {
    from: {
      field: 'region',
      value: '092'
    },
    to: {
      field: 'region',
      value: 'vg'
    }
  },
  {
    from: {
      field: 'region',
      value: '850'
    },
    to: {
      field: 'region',
      value: 'vi'
    }
  },
  {
    from: {
      field: 'region',
      value: '704'
    },
    to: {
      field: 'region',
      value: 'vn'
    }
  },
  {
    from: {
      field: 'region',
      value: '548'
    },
    to: {
      field: 'region',
      value: 'vu'
    }
  },
  {
    from: {
      field: 'region',
      value: '876'
    },
    to: {
      field: 'region',
      value: 'wf'
    }
  },
  {
    from: {
      field: 'region',
      value: '882'
    },
    to: {
      field: 'region',
      value: 'ws'
    }
  },
  {
    from: {
      field: 'region',
      value: '973'
    },
    to: {
      field: 'region',
      value: 'xa'
    }
  },
  {
    from: {
      field: 'region',
      value: '974'
    },
    to: {
      field: 'region',
      value: 'xb'
    }
  },
  {
    from: {
      field: 'region',
      value: '975'
    },
    to: {
      field: 'region',
      value: 'xc'
    }
  },
  {
    from: {
      field: 'region',
      value: '976'
    },
    to: {
      field: 'region',
      value: 'xd'
    }
  },
  {
    from: {
      field: 'region',
      value: '977'
    },
    to: {
      field: 'region',
      value: 'xe'
    }
  },
  {
    from: {
      field: 'region',
      value: '978'
    },
    to: {
      field: 'region',
      value: 'xf'
    }
  },
  {
    from: {
      field: 'region',
      value: '979'
    },
    to: {
      field: 'region',
      value: 'xg'
    }
  },
  {
    from: {
      field: 'region',
      value: '980'
    },
    to: {
      field: 'region',
      value: 'xh'
    }
  },
  {
    from: {
      field: 'region',
      value: '981'
    },
    to: {
      field: 'region',
      value: 'xi'
    }
  },
  {
    from: {
      field: 'region',
      value: '982'
    },
    to: {
      field: 'region',
      value: 'xj'
    }
  },
  {
    from: {
      field: 'region',
      value: '983'
    },
    to: {
      field: 'region',
      value: 'xk'
    }
  },
  {
    from: {
      field: 'region',
      value: '984'
    },
    to: {
      field: 'region',
      value: 'xl'
    }
  },
  {
    from: {
      field: 'region',
      value: '985'
    },
    to: {
      field: 'region',
      value: 'xm'
    }
  },
  {
    from: {
      field: 'region',
      value: '986'
    },
    to: {
      field: 'region',
      value: 'xn'
    }
  },
  {
    from: {
      field: 'region',
      value: '987'
    },
    to: {
      field: 'region',
      value: 'xo'
    }
  },
  {
    from: {
      field: 'region',
      value: '988'
    },
    to: {
      field: 'region',
      value: 'xp'
    }
  },
  {
    from: {
      field: 'region',
      value: '989'
    },
    to: {
      field: 'region',
      value: 'xq'
    }
  },
  {
    from: {
      field: 'region',
      value: '990'
    },
    to: {
      field: 'region',
      value: 'xr'
    }
  },
  {
    from: {
      field: 'region',
      value: '991'
    },
    to: {
      field: 'region',
      value: 'xs'
    }
  },
  {
    from: {
      field: 'region',
      value: '992'
    },
    to: {
      field: 'region',
      value: 'xt'
    }
  },
  {
    from: {
      field: 'region',
      value: '993'
    },
    to: {
      field: 'region',
      value: 'xu'
    }
  },
  {
    from: {
      field: 'region',
      value: '994'
    },
    to: {
      field: 'region',
      value: 'xv'
    }
  },
  {
    from: {
      field: 'region',
      value: '995'
    },
    to: {
      field: 'region',
      value: 'xw'
    }
  },
  {
    from: {
      field: 'region',
      value: '996'
    },
    to: {
      field: 'region',
      value: 'xx'
    }
  },
  {
    from: {
      field: 'region',
      value: '997'
    },
    to: {
      field: 'region',
      value: 'xy'
    }
  },
  {
    from: {
      field: 'region',
      value: '998'
    },
    to: {
      field: 'region',
      value: 'xz'
    }
  },
  {
    from: {
      field: 'region',
      value: '720'
    },
    to: {
      field: 'region',
      value: 'ye'
    }
  },
  {
    from: {
      field: 'region',
      value: '887'
    },
    to: {
      field: 'region',
      value: 'ye'
    }
  },
  {
    from: {
      field: 'region',
      value: '175'
    },
    to: {
      field: 'region',
      value: 'yt'
    }
  },
  {
    from: {
      field: 'region',
      value: '710'
    },
    to: {
      field: 'region',
      value: 'za'
    }
  },
  {
    from: {
      field: 'region',
      value: '894'
    },
    to: {
      field: 'region',
      value: 'zm'
    }
  },
  {
    from: {
      field: 'region',
      value: '716'
    },
    to: {
      field: 'region',
      value: 'zw'
    }
  },
  {
    from: {
      field: 'region',
      value: '999'
    },
    to: {
      field: 'region',
      value: 'zz'
    }
  },
  {
    from: {
      field: 'variants',
      value: 'polytoni'
    },
    to: {
      field: 'variants',
      value: 'polyton'
    }
  },
  {
    from: {
      field: 'variants',
      value: 'heploc'
    },
    to: {
      field: 'variants',
      value: 'alalc97'
    }
  }
];

/**
 * @typedef {'script'|'region'|'variants'} Field
 */

/**
 * @type {{region: Record<string, Array<string>>}}
 */
const many = {
  region: {
    172: [
      'ru',
      'am',
      'az',
      'by',
      'ge',
      'kg',
      'kz',
      'md',
      'tj',
      'tm',
      'ua',
      'uz'
    ],
    200: ['cz', 'sk'],
    530: ['cw', 'sx', 'bq'],
    532: ['cw', 'sx', 'bq'],
    536: ['sa', 'iq'],
    582: ['fm', 'mh', 'mp', 'pw'],
    810: [
      'ru',
      'am',
      'az',
      'by',
      'ee',
      'ge',
      'kz',
      'kg',
      'lv',
      'lt',
      'md',
      'tj',
      'tm',
      'ua',
      'uz'
    ],
    830: ['je', 'gg'],
    890: ['rs', 'me', 'si', 'hr', 'mk', 'ba'],
    891: ['rs', 'me'],
    an: ['cw', 'sx', 'bq'],
    cs: ['rs', 'me'],
    fq: ['aq', 'tf'],
    nt: ['sa', 'iq'],
    pc: ['fm', 'mh', 'mp', 'pw'],
    su: [
      'ru',
      'am',
      'az',
      'by',
      'ee',
      'ge',
      'kz',
      'kg',
      'lv',
      'lt',
      'md',
      'tj',
      'tm',
      'ua',
      'uz'
    ],
    yu: ['rs', 'me'],
    '062': ['034', '143'],
    ant: ['cw', 'sx', 'bq'],
    scg: ['rs', 'me'],
    ntz: ['sa', 'iq'],
    sun: [
      'ru',
      'am',
      'az',
      'by',
      'ee',
      'ge',
      'kz',
      'kg',
      'lv',
      'lt',
      'md',
      'tj',
      'tm',
      'ua',
      'uz'
    ],
    yug: ['rs', 'me']
  }
};

/**
 * @type {Record<string, string>}
 */
const likely = {
  aa: 'aa-latn-et',
  aaa: 'aaa-latn-ng',
  aab: 'aab-latn-ng',
  aac: 'aac-latn-pg',
  aad: 'aad-latn-pg',
  aae: 'aae-latn-it',
  'aae-grek': 'aae-grek-it',
  aaf: 'aaf-mlym-in',
  'aaf-arab': 'aaf-arab-in',
  aag: 'aag-latn-pg',
  aah: 'aah-latn-pg',
  aai: 'aai-latn-zz',
  aak: 'aak-latn-zz',
  aal: 'aal-latn-cm',
  aan: 'aan-latn-br',
  aao: 'aao-arab-dz',
  aap: 'aap-latn-br',
  aaq: 'aaq-latn-us',
  aas: 'aas-latn-tz',
  aat: 'aat-grek-gr',
  aau: 'aau-latn-zz',
  aaw: 'aaw-latn-pg',
  aax: 'aax-latn-id',
  aaz: 'aaz-latn-id',
  ab: 'ab-cyrl-ge',
  aba: 'aba-latn-ci',
  abb: 'abb-latn-cm',
  abc: 'abc-latn-ph',
  abd: 'abd-latn-ph',
  abe: 'abe-latn-ca',
  abf: 'abf-latn-my',
  abg: 'abg-latn-pg',
  abh: 'abh-arab-tj',
  abi: 'abi-latn-zz',
  abl: 'abl-rjng-id',
  'abl-latn': 'abl-latn-id',
  abm: 'abm-latn-ng',
  abn: 'abn-latn-ng',
  abo: 'abo-latn-ng',
  abp: 'abp-latn-ph',
  abq: 'abq-cyrl-zz',
  abr: 'abr-latn-gh',
  abs: 'abs-latn-id',
  abt: 'abt-latn-zz',
  abu: 'abu-latn-ci',
  abv: 'abv-arab-bh',
  abw: 'abw-latn-pg',
  abx: 'abx-latn-ph',
  aby: 'aby-latn-zz',
  abz: 'abz-latn-id',
  aca: 'aca-latn-co',
  acb: 'acb-latn-ng',
  acd: 'acd-latn-zz',
  ace: 'ace-latn-id',
  acf: 'acf-latn-lc',
  ach: 'ach-latn-ug',
  acm: 'acm-arab-iq',
  acn: 'acn-latn-cn',
  acp: 'acp-latn-ng',
  acq: 'acq-arab-ye',
  acr: 'acr-latn-gt',
  acs: 'acs-latn-br',
  act: 'act-latn-nl',
  acu: 'acu-latn-ec',
  acv: 'acv-latn-us',
  acw: 'acw-arab-sa',
  acx: 'acx-arab-om',
  acy: 'acy-latn-cy',
  'acy-arab': 'acy-arab-cy',
  'acy-grek': 'acy-grek-cy',
  acz: 'acz-latn-sd',
  ada: 'ada-latn-gh',
  adb: 'adb-latn-tl',
  add: 'add-latn-cm',
  ade: 'ade-latn-zz',
  adf: 'adf-arab-om',
  adg: 'adg-latn-au',
  adh: 'adh-latn-ug',
  adi: 'adi-latn-in',
  'adi-tibt': 'adi-tibt-cn',
  adj: 'adj-latn-zz',
  adl: 'adl-latn-in',
  adn: 'adn-latn-id',
  ado: 'ado-latn-pg',
  adp: 'adp-tibt-bt',
  adq: 'adq-latn-gh',
  adr: 'adr-latn-id',
  adt: 'adt-latn-au',
  adu: 'adu-latn-ng',
  adw: 'adw-latn-br',
  adx: 'adx-tibt-cn',
  ady: 'ady-cyrl-ru',
  adz: 'adz-latn-zz',
  ae: 'ae-avst-ir',
  aea: 'aea-latn-au',
  aeb: 'aeb-arab-tn',
  aec: 'aec-arab-eg',
  aee: 'aee-arab-af',
  aek: 'aek-latn-nc',
  ael: 'ael-latn-cm',
  aem: 'aem-latn-vn',
  aeq: 'aeq-arab-pk',
  aer: 'aer-latn-au',
  aeu: 'aeu-latn-cn',
  aew: 'aew-latn-pg',
  aey: 'aey-latn-zz',
  aez: 'aez-latn-pg',
  af: 'af-latn-za',
  afb: 'afb-arab-kw',
  afd: 'afd-latn-pg',
  afe: 'afe-latn-ng',
  afh: 'afh-latn-gh',
  afi: 'afi-latn-pg',
  afk: 'afk-latn-pg',
  afn: 'afn-latn-ng',
  afo: 'afo-latn-ng',
  afp: 'afp-latn-pg',
  afs: 'afs-latn-mx',
  afu: 'afu-latn-gh',
  afz: 'afz-latn-id',
  aga: 'aga-latn-pe',
  agb: 'agb-latn-ng',
  agc: 'agc-latn-zz',
  agd: 'agd-latn-zz',
  age: 'age-latn-pg',
  agf: 'agf-latn-id',
  agg: 'agg-latn-zz',
  agh: 'agh-latn-cd',
  agi: 'agi-deva-in',
  agj: 'agj-ethi-et',
  'agj-arab': 'agj-arab-et',
  agk: 'agk-latn-ph',
  agl: 'agl-latn-pg',
  agm: 'agm-latn-zz',
  agn: 'agn-latn-ph',
  ago: 'ago-latn-zz',
  agq: 'agq-latn-cm',
  agr: 'agr-latn-pe',
  ags: 'ags-latn-cm',
  agt: 'agt-latn-ph',
  agu: 'agu-latn-gt',
  agv: 'agv-latn-ph',
  agw: 'agw-latn-sb',
  agx: 'agx-cyrl-ru',
  agy: 'agy-latn-ph',
  agz: 'agz-latn-ph',
  aha: 'aha-latn-zz',
  ahb: 'ahb-latn-vu',
  ahg: 'ahg-ethi-et',
  ahh: 'ahh-latn-id',
  ahi: 'ahi-latn-ci',
  ahk: 'ahk-latn-mm',
  'ahk-mymr': 'ahk-mymr-mm',
  'ahk-th': 'ahk-latn-th',
  'ahk-thai': 'ahk-thai-th',
  ahl: 'ahl-latn-zz',
  ahm: 'ahm-latn-ci',
  ahn: 'ahn-latn-ng',
  aho: 'aho-ahom-in',
  ahp: 'ahp-latn-ci',
  ahr: 'ahr-deva-in',
  ahs: 'ahs-latn-ng',
  aht: 'aht-latn-us',
  aia: 'aia-latn-sb',
  aib: 'aib-arab-cn',
  aic: 'aic-latn-pg',
  aid: 'aid-latn-au',
  aie: 'aie-latn-pg',
  aif: 'aif-latn-pg',
  aig: 'aig-latn-ag',
  aij: 'aij-hebr-il',
  aik: 'aik-latn-ng',
  ail: 'ail-latn-pg',
  aim: 'aim-latn-in',
  ain: 'ain-kana-jp',
  'ain-latn': 'ain-latn-jp',
  aio: 'aio-mymr-in',
  aip: 'aip-latn-id',
  aiq: 'aiq-arab-af',
  air: 'air-latn-id',
  ait: 'ait-latn-br',
  aiw: 'aiw-latn-et',
  'aiw-arab': 'aiw-arab-et',
  'aiw-ethi': 'aiw-ethi-et',
  aix: 'aix-latn-pg',
  aiy: 'aiy-latn-cf',
  aja: 'aja-latn-ss',
  ajg: 'ajg-latn-zz',
  aji: 'aji-latn-nc',
  ajn: 'ajn-latn-au',
  ajp: 'ajp-arab-jo',
  ajt: 'ajt-arab-tn',
  ajw: 'ajw-latn-ng',
  ajz: 'ajz-latn-in',
  ak: 'ak-latn-gh',
  akb: 'akb-latn-id',
  'akb-batk': 'akb-batk-id',
  akc: 'akc-latn-id',
  akd: 'akd-latn-ng',
  ake: 'ake-latn-gy',
  akf: 'akf-latn-ng',
  akg: 'akg-latn-id',
  akh: 'akh-latn-pg',
  aki: 'aki-latn-pg',
  akk: 'akk-xsux-iq',
  akl: 'akl-latn-ph',
  ako: 'ako-latn-sr',
  akp: 'akp-latn-gh',
  akq: 'akq-latn-pg',
  akr: 'akr-latn-vu',
  aks: 'aks-latn-tg',
  akt: 'akt-latn-pg',
  aku: 'aku-latn-cm',
  akv: 'akv-cyrl-ru',
  akw: 'akw-latn-cg',
  akz: 'akz-latn-us',
  ala: 'ala-latn-zz',
  alc: 'alc-latn-cl',
  ald: 'ald-latn-ci',
  ale: 'ale-latn-us',
  alf: 'alf-latn-ng',
  alh: 'alh-latn-au',
  ali: 'ali-latn-zz',
  alj: 'alj-latn-ph',
  alk: 'alk-laoo-la',
  all: 'all-mlym-in',
  alm: 'alm-latn-vu',
  aln: 'aln-latn-xk',
  alo: 'alo-latn-id',
  alp: 'alp-latn-id',
  alq: 'alq-latn-ca',
  alr: 'alr-cyrl-ru',
  alt: 'alt-cyrl-ru',
  alu: 'alu-latn-sb',
  alw: 'alw-ethi-et',
  alx: 'alx-latn-pg',
  aly: 'aly-latn-au',
  alz: 'alz-latn-cd',
  am: 'am-ethi-et',
  ama: 'ama-latn-br',
  amb: 'amb-latn-ng',
  amc: 'amc-latn-pe',
  ame: 'ame-latn-pe',
  amf: 'amf-latn-et',
  'amf-ethi': 'amf-ethi-et',
  amg: 'amg-latn-au',
  ami: 'ami-latn-tw',
  amj: 'amj-latn-td',
  amk: 'amk-latn-id',
  amm: 'amm-latn-zz',
  amn: 'amn-latn-zz',
  amo: 'amo-latn-ng',
  amp: 'amp-latn-zz',
  amq: 'amq-latn-id',
  amr: 'amr-latn-pe',
  ams: 'ams-jpan-jp',
  amt: 'amt-latn-pg',
  amu: 'amu-latn-mx',
  amv: 'amv-latn-id',
  amw: 'amw-syrc-sy',
  'amw-arab': 'amw-arab-sy',
  'amw-armi': 'amw-armi-sy',
  'amw-latn': 'amw-latn-sy',
  amx: 'amx-latn-au',
  amy: 'amy-latn-au',
  amz: 'amz-latn-au',
  an: 'an-latn-es',
  ana: 'ana-latn-co',
  anb: 'anb-latn-pe',
  anc: 'anc-latn-zz',
  and: 'and-latn-id',
  ane: 'ane-latn-nc',
  anf: 'anf-latn-gh',
  ang: 'ang-latn-gb',
  anh: 'anh-latn-pg',
  ani: 'ani-cyrl-ru',
  anj: 'anj-latn-pg',
  ank: 'ank-latn-zz',
  anl: 'anl-latn-mm',
  anm: 'anm-latn-in',
  ann: 'ann-latn-ng',
  ano: 'ano-latn-co',
  anp: 'anp-deva-in',
  anr: 'anr-deva-in',
  ans: 'ans-latn-co',
  ant: 'ant-latn-au',
  anu: 'anu-ethi-et',
  'anu-arab': 'anu-arab-ss',
  'anu-latn': 'anu-latn-ss',
  anv: 'anv-latn-cm',
  anw: 'anw-latn-ng',
  anx: 'anx-latn-pg',
  any: 'any-latn-zz',
  anz: 'anz-latn-pg',
  aoa: 'aoa-latn-st',
  aob: 'aob-latn-pg',
  aoc: 'aoc-latn-ve',
  aod: 'aod-latn-pg',
  aoe: 'aoe-latn-pg',
  aof: 'aof-latn-pg',
  aog: 'aog-latn-pg',
  aoi: 'aoi-latn-au',
  aoj: 'aoj-latn-zz',
  aok: 'aok-latn-nc',
  aol: 'aol-latn-id',
  aom: 'aom-latn-zz',
  aon: 'aon-latn-pg',
  aor: 'aor-latn-vu',
  aos: 'aos-latn-id',
  aot: 'aot-beng-bd',
  'aot-latn': 'aot-latn-in',
  aox: 'aox-latn-gy',
  aoz: 'aoz-latn-id',
  apb: 'apb-latn-sb',
  apc: 'apc-arab-sy',
  apd: 'apd-arab-tg',
  ape: 'ape-latn-zz',
  apf: 'apf-latn-ph',
  apg: 'apg-latn-id',
  aph: 'aph-deva-np',
  api: 'api-latn-br',
  apj: 'apj-latn-us',
  apk: 'apk-latn-us',
  apl: 'apl-latn-us',
  apm: 'apm-latn-us',
  apn: 'apn-latn-br',
  apo: 'apo-latn-pg',
  app: 'app-latn-vu',
  apr: 'apr-latn-zz',
  aps: 'aps-latn-zz',
  apt: 'apt-latn-in',
  apu: 'apu-latn-br',
  apv: 'apv-latn-br',
  apw: 'apw-latn-us',
  apx: 'apx-latn-id',
  apy: 'apy-latn-br',
  apz: 'apz-latn-zz',
  aqc: 'aqc-cyrl-ru',
  aqd: 'aqd-latn-ml',
  aqg: 'aqg-latn-ng',
  aqk: 'aqk-latn-ng',
  aqm: 'aqm-latn-id',
  aqn: 'aqn-latn-ph',
  aqr: 'aqr-latn-nc',
  aqt: 'aqt-latn-py',
  aqz: 'aqz-latn-br',
  ar: 'ar-arab-eg',
  arc: 'arc-armi-ir',
  'arc-nbat': 'arc-nbat-jo',
  'arc-palm': 'arc-palm-sy',
  ard: 'ard-latn-au',
  are: 'are-latn-au',
  arh: 'arh-latn-zz',
  ari: 'ari-latn-us',
  arj: 'arj-latn-br',
  ark: 'ark-latn-br',
  arl: 'arl-latn-pe',
  arn: 'arn-latn-cl',
  aro: 'aro-latn-bo',
  arp: 'arp-latn-us',
  arq: 'arq-arab-dz',
  arr: 'arr-latn-br',
  ars: 'ars-arab-sa',
  aru: 'aru-latn-br',
  arw: 'arw-latn-sr',
  arx: 'arx-latn-br',
  ary: 'ary-arab-ma',
  arz: 'arz-arab-eg',
  as: 'as-beng-in',
  asa: 'asa-latn-tz',
  asb: 'asb-latn-ca',
  asc: 'asc-latn-id',
  ase: 'ase-sgnw-us',
  asg: 'asg-latn-zz',
  ash: 'ash-latn-pe',
  asi: 'asi-latn-id',
  asj: 'asj-latn-cm',
  ask: 'ask-arab-af',
  asl: 'asl-latn-id',
  asn: 'asn-latn-br',
  aso: 'aso-latn-zz',
  ass: 'ass-latn-cm',
  ast: 'ast-latn-es',
  asu: 'asu-latn-br',
  asv: 'asv-latn-cd',
  asx: 'asx-latn-pg',
  asy: 'asy-latn-id',
  asz: 'asz-latn-id',
  ata: 'ata-latn-zz',
  atb: 'atb-latn-cn',
  'atb-lisu': 'atb-lisu-cn',
  atc: 'atc-latn-pe',
  atd: 'atd-latn-ph',
  ate: 'ate-latn-pg',
  atg: 'atg-latn-zz',
  ati: 'ati-latn-ci',
  atj: 'atj-latn-ca',
  atk: 'atk-latn-ph',
  atl: 'atl-latn-ph',
  atm: 'atm-latn-ph',
  atn: 'atn-arab-ir',
  ato: 'ato-latn-cm',
  atp: 'atp-latn-ph',
  atq: 'atq-latn-id',
  atr: 'atr-latn-br',
  ats: 'ats-latn-us',
  att: 'att-latn-ph',
  atu: 'atu-latn-ss',
  atv: 'atv-cyrl-ru',
  atw: 'atw-latn-us',
  atx: 'atx-latn-br',
  aty: 'aty-latn-vu',
  atz: 'atz-latn-ph',
  aua: 'aua-latn-sb',
  auc: 'auc-latn-ec',
  aud: 'aud-latn-sb',
  aug: 'aug-latn-bj',
  auh: 'auh-latn-zm',
  aui: 'aui-latn-pg',
  auj: 'auj-arab-ly',
  'auj-latn': 'auj-latn-ly',
  'auj-tfng': 'auj-tfng-ly',
  auk: 'auk-latn-pg',
  aul: 'aul-latn-vu',
  aum: 'aum-latn-ng',
  aun: 'aun-latn-pg',
  auo: 'auo-latn-ng',
  aup: 'aup-latn-pg',
  auq: 'auq-latn-id',
  aur: 'aur-latn-pg',
  aut: 'aut-latn-pf',
  auu: 'auu-latn-id',
  auw: 'auw-latn-id',
  auy: 'auy-latn-zz',
  auz: 'auz-arab-uz',
  av: 'av-cyrl-ru',
  avb: 'avb-latn-pg',
  avd: 'avd-arab-ir',
  avi: 'avi-latn-ci',
  avk: 'avk-latn-001',
  avl: 'avl-arab-zz',
  avm: 'avm-latn-au',
  avn: 'avn-latn-zz',
  avo: 'avo-latn-br',
  avs: 'avs-latn-pe',
  avt: 'avt-latn-zz',
  avu: 'avu-latn-zz',
  avv: 'avv-latn-br',
  awa: 'awa-deva-in',
  awb: 'awb-latn-zz',
  awc: 'awc-latn-ng',
  awe: 'awe-latn-br',
  awg: 'awg-latn-au',
  awh: 'awh-latn-id',
  awi: 'awi-latn-pg',
  awk: 'awk-latn-au',
  awm: 'awm-latn-pg',
  awn: 'awn-ethi-et',
  awo: 'awo-latn-zz',
  awr: 'awr-latn-id',
  aws: 'aws-latn-id',
  awt: 'awt-latn-br',
  awu: 'awu-latn-id',
  awv: 'awv-latn-id',
  aww: 'aww-latn-pg',
  awx: 'awx-latn-zz',
  awy: 'awy-latn-id',
  axb: 'axb-latn-ar',
  axe: 'axe-latn-au',
  axg: 'axg-latn-br',
  axk: 'axk-latn-cf',
  axl: 'axl-latn-au',
  axm: 'axm-armn-am',
  axx: 'axx-latn-nc',
  ay: 'ay-latn-bo',
  aya: 'aya-latn-pg',
  ayb: 'ayb-latn-zz',
  ayc: 'ayc-latn-pe',
  ayd: 'ayd-latn-au',
  aye: 'aye-latn-ng',
  ayg: 'ayg-latn-tg',
  ayh: 'ayh-arab-ye',
  ayi: 'ayi-latn-ng',
  ayk: 'ayk-latn-ng',
  ayl: 'ayl-arab-ly',
  ayn: 'ayn-arab-ye',
  ayo: 'ayo-latn-py',
  ayp: 'ayp-arab-iq',
  ayq: 'ayq-latn-pg',
  ays: 'ays-latn-ph',
  ayt: 'ayt-latn-ph',
  ayu: 'ayu-latn-ng',
  ayz: 'ayz-latn-id',
  az: 'az-latn-az',
  'az-arab': 'az-arab-ir',
  'az-iq': 'az-arab-iq',
  'az-ir': 'az-arab-ir',
  'az-ru': 'az-cyrl-ru',
  azb: 'azb-arab-ir',
  'azb-cyrl': 'azb-cyrl-az',
  'azb-latn': 'azb-latn-az',
  azd: 'azd-latn-mx',
  azg: 'azg-latn-mx',
  azm: 'azm-latn-mx',
  azn: 'azn-latn-mx',
  azo: 'azo-latn-cm',
  azt: 'azt-latn-ph',
  azz: 'azz-latn-mx',
  ba: 'ba-cyrl-ru',
  baa: 'baa-latn-sb',
  bab: 'bab-latn-gw',
  bac: 'bac-latn-id',
  bae: 'bae-latn-ve',
  baf: 'baf-latn-cm',
  bag: 'bag-latn-cm',
  bah: 'bah-latn-bs',
  baj: 'baj-latn-id',
  bal: 'bal-arab-pk',
  ban: 'ban-latn-id',
  bao: 'bao-latn-co',
  bap: 'bap-deva-np',
  bar: 'bar-latn-at',
  bas: 'bas-latn-cm',
  bau: 'bau-latn-ng',
  bav: 'bav-latn-zz',
  baw: 'baw-latn-cm',
  bax: 'bax-bamu-cm',
  bay: 'bay-latn-id',
  bba: 'bba-latn-zz',
  bbb: 'bbb-latn-zz',
  bbc: 'bbc-latn-id',
  bbd: 'bbd-latn-zz',
  bbe: 'bbe-latn-cd',
  bbf: 'bbf-latn-pg',
  bbg: 'bbg-latn-ga',
  bbi: 'bbi-latn-cm',
  bbj: 'bbj-latn-cm',
  bbk: 'bbk-latn-cm',
  bbl: 'bbl-geor-ge',
  bbm: 'bbm-latn-cd',
  bbn: 'bbn-latn-pg',
  bbo: 'bbo-latn-bf',
  bbp: 'bbp-latn-zz',
  bbq: 'bbq-latn-cm',
  bbr: 'bbr-latn-zz',
  bbs: 'bbs-latn-ng',
  bbt: 'bbt-latn-ng',
  bbu: 'bbu-latn-ng',
  bbv: 'bbv-latn-pg',
  bbw: 'bbw-latn-cm',
  bbx: 'bbx-latn-cm',
  bby: 'bby-latn-cm',
  bca: 'bca-latn-cn',
  'bca-hani': 'bca-hani-cn',
  bcb: 'bcb-latn-sn',
  bcd: 'bcd-latn-id',
  bce: 'bce-latn-cm',
  bcf: 'bcf-latn-zz',
  bcg: 'bcg-latn-gn',
  bch: 'bch-latn-zz',
  bci: 'bci-latn-ci',
  bcj: 'bcj-latn-au',
  bck: 'bck-latn-au',
  bcm: 'bcm-latn-zz',
  bcn: 'bcn-latn-zz',
  bco: 'bco-latn-zz',
  bcp: 'bcp-latn-cd',
  bcq: 'bcq-ethi-zz',
  bcr: 'bcr-latn-ca',
  bcs: 'bcs-latn-ng',
  bct: 'bct-latn-cd',
  bcu: 'bcu-latn-zz',
  bcv: 'bcv-latn-ng',
  bcw: 'bcw-latn-cm',
  bcy: 'bcy-latn-ng',
  bcz: 'bcz-latn-sn',
  bda: 'bda-latn-sn',
  bdb: 'bdb-latn-id',
  bdc: 'bdc-latn-co',
  bdd: 'bdd-latn-zz',
  bde: 'bde-latn-ng',
  bdf: 'bdf-latn-pg',
  bdg: 'bdg-latn-my',
  bdh: 'bdh-latn-ss',
  bdi: 'bdi-latn-sd',
  bdj: 'bdj-latn-ss',
  bdk: 'bdk-latn-az',
  bdl: 'bdl-latn-id',
  bdm: 'bdm-latn-td',
  bdn: 'bdn-latn-cm',
  bdo: 'bdo-latn-td',
  bdp: 'bdp-latn-tz',
  bdq: 'bdq-latn-vn',
  bdr: 'bdr-latn-my',
  bds: 'bds-latn-tz',
  bdt: 'bdt-latn-cf',
  bdu: 'bdu-latn-cm',
  bdv: 'bdv-orya-in',
  bdw: 'bdw-latn-id',
  bdx: 'bdx-latn-id',
  bdy: 'bdy-latn-au',
  bdz: 'bdz-arab-pk',
  be: 'be-cyrl-by',
  bea: 'bea-latn-ca',
  'bea-cans': 'bea-cans-ca',
  beb: 'beb-latn-cm',
  bec: 'bec-latn-cm',
  bed: 'bed-latn-id',
  bee: 'bee-deva-in',
  bef: 'bef-latn-zz',
  beh: 'beh-latn-zz',
  bei: 'bei-latn-id',
  bej: 'bej-arab-sd',
  bek: 'bek-latn-pg',
  bem: 'bem-latn-zm',
  beo: 'beo-latn-pg',
  bep: 'bep-latn-id',
  beq: 'beq-latn-cg',
  bes: 'bes-latn-td',
  bet: 'bet-latn-zz',
  beu: 'beu-latn-id',
  bev: 'bev-latn-ci',
  bew: 'bew-latn-id',
  bex: 'bex-latn-zz',
  bey: 'bey-latn-pg',
  bez: 'bez-latn-tz',
  bfa: 'bfa-latn-ss',
  'bfa-arab': 'bfa-arab-ss',
  bfb: 'bfb-deva-in',
  bfc: 'bfc-latn-cn',
  bfd: 'bfd-latn-cm',
  bfe: 'bfe-latn-id',
  bff: 'bff-latn-cf',
  bfg: 'bfg-latn-id',
  bfh: 'bfh-latn-pg',
  bfj: 'bfj-latn-cm',
  bfl: 'bfl-latn-cf',
  bfm: 'bfm-latn-cm',
  bfn: 'bfn-latn-tl',
  bfo: 'bfo-latn-bf',
  bfp: 'bfp-latn-cm',
  bfq: 'bfq-taml-in',
  bfs: 'bfs-latn-cn',
  'bfs-hani': 'bfs-hani-cn',
  bft: 'bft-arab-pk',
  bfu: 'bfu-tibt-in',
  'bfu-takr': 'bfu-takr-in',
  bfw: 'bfw-orya-in',
  bfx: 'bfx-latn-ph',
  bfy: 'bfy-deva-in',
  bfz: 'bfz-deva-in',
  bg: 'bg-cyrl-bg',
  bga: 'bga-latn-ng',
  bgb: 'bgb-latn-id',
  bgc: 'bgc-deva-in',
  bgd: 'bgd-deva-in',
  bgf: 'bgf-latn-cm',
  bgg: 'bgg-latn-in',
  bgi: 'bgi-latn-ph',
  bgj: 'bgj-latn-cm',
  bgn: 'bgn-arab-pk',
  bgo: 'bgo-latn-gn',
  bgp: 'bgp-arab-pk',
  bgq: 'bgq-deva-in',
  bgr: 'bgr-latn-in',
  bgs: 'bgs-latn-ph',
  bgt: 'bgt-latn-sb',
  bgu: 'bgu-latn-ng',
  bgv: 'bgv-latn-id',
  bgw: 'bgw-deva-in',
  bgx: 'bgx-grek-tr',
  bgy: 'bgy-latn-id',
  bgz: 'bgz-latn-id',
  bha: 'bha-deva-in',
  bhb: 'bhb-deva-in',
  bhc: 'bhc-latn-id',
  bhd: 'bhd-deva-in',
  'bhd-arab': 'bhd-arab-in',
  'bhd-takr': 'bhd-takr-in',
  bhe: 'bhe-arab-pk',
  bhf: 'bhf-latn-pg',
  bhg: 'bhg-latn-zz',
  bhh: 'bhh-cyrl-il',
  'bhh-hebr': 'bhh-hebr-il',
  'bhh-latn': 'bhh-latn-il',
  bhi: 'bhi-deva-in',
  bhj: 'bhj-deva-np',
  bhl: 'bhl-latn-zz',
  bhm: 'bhm-arab-om',
  bhn: 'bhn-syrc-ge',
  bho: 'bho-deva-in',
  bhp: 'bhp-latn-id',
  bhq: 'bhq-latn-id',
  bhr: 'bhr-latn-mg',
  bhs: 'bhs-latn-cm',
  bht: 'bht-takr-in',
  'bht-deva': 'bht-deva-in',
  'bht-latn': 'bht-latn-in',
  bhu: 'bhu-deva-in',
  bhv: 'bhv-latn-id',
  bhw: 'bhw-latn-id',
  bhy: 'bhy-latn-zz',
  bhz: 'bhz-latn-id',
  bi: 'bi-latn-vu',
  bia: 'bia-latn-au',
  bib: 'bib-latn-zz',
  bid: 'bid-latn-td',
  bie: 'bie-latn-pg',
  bif: 'bif-latn-gw',
  big: 'big-latn-zz',
  bik: 'bik-latn-ph',
  bil: 'bil-latn-ng',
  bim: 'bim-latn-zz',
  bin: 'bin-latn-ng',
  bio: 'bio-latn-zz',
  bip: 'bip-latn-cd',
  biq: 'biq-latn-zz',
  bir: 'bir-latn-pg',
  bit: 'bit-latn-pg',
  biu: 'biu-latn-in',
  biv: 'biv-latn-gh',
  biw: 'biw-latn-cm',
  biy: 'biy-deva-in',
  biz: 'biz-latn-cd',
  bja: 'bja-latn-cd',
  bjb: 'bjb-latn-au',
  bjc: 'bjc-latn-pg',
  bjf: 'bjf-syrc-il',
  bjg: 'bjg-latn-gw',
  bjh: 'bjh-latn-zz',
  bji: 'bji-ethi-zz',
  bjj: 'bjj-deva-in',
  bjk: 'bjk-latn-pg',
  bjl: 'bjl-latn-pg',
  bjm: 'bjm-arab-iq',
  bjn: 'bjn-latn-id',
  bjo: 'bjo-latn-zz',
  bjp: 'bjp-latn-pg',
  bjr: 'bjr-latn-zz',
  bjs: 'bjs-latn-bb',
  bjt: 'bjt-latn-sn',
  bju: 'bju-latn-cm',
  bjv: 'bjv-latn-td',
  bjw: 'bjw-latn-ci',
  bjx: 'bjx-latn-ph',
  bjy: 'bjy-latn-au',
  bjz: 'bjz-latn-zz',
  bka: 'bka-latn-ng',
  bkc: 'bkc-latn-zz',
  bkd: 'bkd-latn-ph',
  bkf: 'bkf-latn-cd',
  bkg: 'bkg-latn-cf',
  bkh: 'bkh-latn-cm',
  bki: 'bki-latn-vu',
  bkj: 'bkj-latn-cf',
  bkl: 'bkl-latn-id',
  bkm: 'bkm-latn-cm',
  bkn: 'bkn-latn-id',
  bko: 'bko-latn-cm',
  bkp: 'bkp-latn-cd',
  bkq: 'bkq-latn-zz',
  bkr: 'bkr-latn-id',
  bks: 'bks-latn-ph',
  bkt: 'bkt-latn-cd',
  bku: 'bku-latn-ph',
  bkv: 'bkv-latn-zz',
  bkw: 'bkw-latn-cg',
  bkx: 'bkx-latn-tl',
  bky: 'bky-latn-ng',
  bkz: 'bkz-latn-id',
  bla: 'bla-latn-ca',
  blb: 'blb-latn-sb',
  blc: 'blc-latn-ca',
  bld: 'bld-latn-id',
  ble: 'ble-latn-gw',
  blf: 'blf-latn-id',
  blg: 'blg-latn-my',
  blh: 'blh-latn-lr',
  bli: 'bli-latn-cd',
  blj: 'blj-latn-id',
  blk: 'blk-mymr-mm',
  blm: 'blm-latn-ss',
  bln: 'bln-latn-ph',
  blo: 'blo-latn-bj',
  blp: 'blp-latn-sb',
  blq: 'blq-latn-pg',
  blr: 'blr-latn-cn',
  'blr-tale': 'blr-tale-cn',
  'blr-thai': 'blr-thai-th',
  bls: 'bls-latn-id',
  blt: 'blt-tavt-vn',
  blv: 'blv-latn-ao',
  blw: 'blw-latn-ph',
  blx: 'blx-latn-ph',
  bly: 'bly-latn-bj',
  blz: 'blz-latn-id',
  bm: 'bm-latn-ml',
  bma: 'bma-latn-ng',
  bmb: 'bmb-latn-cd',
  bmc: 'bmc-latn-pg',
  bmd: 'bmd-latn-gn',
  bme: 'bme-latn-cf',
  bmf: 'bmf-latn-sl',
  bmg: 'bmg-latn-cd',
  bmh: 'bmh-latn-zz',
  bmi: 'bmi-latn-td',
  bmj: 'bmj-deva-np',
  bmk: 'bmk-latn-zz',
  bml: 'bml-latn-cd',
  bmm: 'bmm-latn-mg',
  bmn: 'bmn-latn-pg',
  bmo: 'bmo-latn-cm',
  bmp: 'bmp-latn-pg',
  bmq: 'bmq-latn-ml',
  bmr: 'bmr-latn-co',
  bms: 'bms-latn-ne',
  bmu: 'bmu-latn-zz',
  bmv: 'bmv-latn-cm',
  bmw: 'bmw-latn-cg',
  bmx: 'bmx-latn-pg',
  bmz: 'bmz-latn-pg',
  bn: 'bn-beng-bd',
  bna: 'bna-latn-id',
  bnb: 'bnb-latn-my',
  bnc: 'bnc-latn-ph',
  bnd: 'bnd-latn-id',
  bne: 'bne-latn-id',
  bnf: 'bnf-latn-id',
  bng: 'bng-latn-zz',
  bni: 'bni-latn-cd',
  bnj: 'bnj-latn-ph',
  bnk: 'bnk-latn-vu',
  bnm: 'bnm-latn-zz',
  bnn: 'bnn-latn-tw',
  bno: 'bno-latn-ph',
  bnp: 'bnp-latn-zz',
  bnq: 'bnq-latn-id',
  bnr: 'bnr-latn-vu',
  bns: 'bns-deva-in',
  bnu: 'bnu-latn-id',
  bnv: 'bnv-latn-id',
  bnw: 'bnw-latn-pg',
  bnx: 'bnx-latn-cd',
  bny: 'bny-latn-my',
  bnz: 'bnz-latn-cm',
  bo: 'bo-tibt-cn',
  boa: 'boa-latn-pe',
  bob: 'bob-latn-ke',
  boe: 'boe-latn-cm',
  bof: 'bof-latn-bf',
  boh: 'boh-latn-cd',
  boj: 'boj-latn-zz',
  bok: 'bok-latn-cg',
  bol: 'bol-latn-ng',
  bom: 'bom-latn-zz',
  bon: 'bon-latn-zz',
  boo: 'boo-latn-ml',
  bop: 'bop-latn-pg',
  boq: 'boq-latn-pg',
  bor: 'bor-latn-br',
  bot: 'bot-latn-ss',
  bou: 'bou-latn-tz',
  bov: 'bov-latn-gh',
  bow: 'bow-latn-pg',
  box: 'box-latn-bf',
  boy: 'boy-latn-cf',
  boz: 'boz-latn-ml',
  'boz-arab': 'boz-arab-ml',
  bpa: 'bpa-latn-vu',
  bpc: 'bpc-latn-cm',
  bpd: 'bpd-latn-cf',
  bpe: 'bpe-latn-pg',
  bpg: 'bpg-latn-id',
  bph: 'bph-cyrl-ru',
  bpi: 'bpi-latn-pg',
  bpj: 'bpj-latn-cd',
  bpk: 'bpk-latn-nc',
  bpl: 'bpl-latn-au',
  bpm: 'bpm-latn-pg',
  bpo: 'bpo-latn-id',
  bpp: 'bpp-latn-id',
  bpq: 'bpq-latn-id',
  bpr: 'bpr-latn-ph',
  bps: 'bps-latn-ph',
  bpt: 'bpt-latn-au',
  bpu: 'bpu-latn-pg',
  bpv: 'bpv-latn-id',
  bpw: 'bpw-latn-pg',
  bpx: 'bpx-deva-in',
  bpy: 'bpy-beng-in',
  bpz: 'bpz-latn-id',
  bqa: 'bqa-latn-bj',
  bqb: 'bqb-latn-id',
  bqc: 'bqc-latn-zz',
  bqd: 'bqd-latn-cm',
  bqf: 'bqf-latn-gn',
  'bqf-arab': 'bqf-arab-gn',
  bqg: 'bqg-latn-tg',
  bqi: 'bqi-arab-ir',
  bqj: 'bqj-latn-sn',
  bqk: 'bqk-latn-cf',
  bql: 'bql-latn-pg',
  bqm: 'bqm-latn-cm',
  bqo: 'bqo-latn-cm',
  bqp: 'bqp-latn-zz',
  bqq: 'bqq-latn-id',
  bqr: 'bqr-latn-id',
  bqs: 'bqs-latn-pg',
  bqt: 'bqt-latn-cm',
  bqu: 'bqu-latn-cd',
  bqv: 'bqv-latn-ci',
  bqw: 'bqw-latn-ng',
  bqx: 'bqx-latn-ng',
  bqz: 'bqz-latn-cm',
  br: 'br-latn-fr',
  bra: 'bra-deva-in',
  brb: 'brb-khmr-kh',
  'brb-laoo': 'brb-laoo-la',
  'brb-latn': 'brb-latn-vn',
  brc: 'brc-latn-gy',
  brd: 'brd-deva-np',
  brf: 'brf-latn-cd',
  brg: 'brg-latn-bo',
  brh: 'brh-arab-pk',
  bri: 'bri-latn-cm',
  brj: 'brj-latn-vu',
  brk: 'brk-arab-sd',
  brl: 'brl-latn-bw',
  brm: 'brm-latn-cd',
  brn: 'brn-latn-cr',
  brp: 'brp-latn-id',
  brq: 'brq-latn-pg',
  brr: 'brr-latn-sb',
  brs: 'brs-latn-id',
  brt: 'brt-latn-ng',
  bru: 'bru-latn-vn',
  'bru-laoo': 'bru-laoo-la',
  'bru-thai': 'bru-thai-la',
  brv: 'brv-laoo-la',
  brx: 'brx-deva-in',
  bry: 'bry-latn-pg',
  brz: 'brz-latn-zz',
  bs: 'bs-latn-ba',
  bsa: 'bsa-latn-id',
  bsb: 'bsb-latn-bn',
  bsc: 'bsc-latn-sn',
  bse: 'bse-latn-cm',
  bsf: 'bsf-latn-ng',
  bsh: 'bsh-arab-af',
  bsi: 'bsi-latn-cm',
  bsj: 'bsj-latn-zz',
  bsk: 'bsk-arab-pk',
  'bsk-latn': 'bsk-latn-pk',
  bsl: 'bsl-latn-ng',
  bsm: 'bsm-latn-id',
  bsn: 'bsn-latn-co',
  bso: 'bso-latn-td',
  bsp: 'bsp-latn-gn',
  bsq: 'bsq-bass-lr',
  bsr: 'bsr-latn-ng',
  bss: 'bss-latn-cm',
  bst: 'bst-ethi-zz',
  bsu: 'bsu-latn-id',
  bsv: 'bsv-latn-gn',
  'bsv-arab': 'bsv-arab-gn',
  bsw: 'bsw-latn-et',
  'bsw-ethi': 'bsw-ethi-et',
  bsx: 'bsx-latn-ng',
  bsy: 'bsy-latn-my',
  bta: 'bta-latn-ng',
  btc: 'btc-latn-cm',
  btd: 'btd-batk-id',
  bte: 'bte-latn-ng',
  btf: 'btf-latn-td',
  btg: 'btg-latn-ci',
  bth: 'bth-latn-my',
  bti: 'bti-latn-id',
  btj: 'btj-latn-id',
  btm: 'btm-batk-id',
  btn: 'btn-latn-ph',
  bto: 'bto-latn-ph',
  btp: 'btp-latn-pg',
  btq: 'btq-latn-my',
  btr: 'btr-latn-vu',
  bts: 'bts-latn-id',
  'bts-batk': 'bts-batk-id',
  btt: 'btt-latn-zz',
  btu: 'btu-latn-ng',
  btv: 'btv-deva-pk',
  btw: 'btw-latn-ph',
  btx: 'btx-latn-id',
  'btx-batk': 'btx-batk-id',
  bty: 'bty-latn-id',
  btz: 'btz-latn-id',
  bua: 'bua-cyrl-ru',
  bub: 'bub-latn-td',
  buc: 'buc-latn-yt',
  bud: 'bud-latn-zz',
  bue: 'bue-latn-ca',
  buf: 'buf-latn-cd',
  bug: 'bug-latn-id',
  buh: 'buh-latn-cn',
  bui: 'bui-latn-cg',
  buj: 'buj-latn-ng',
  buk: 'buk-latn-zz',
  bum: 'bum-latn-cm',
  bun: 'bun-latn-sl',
  buo: 'buo-latn-zz',
  bup: 'bup-latn-id',
  buq: 'buq-latn-pg',
  bus: 'bus-latn-zz',
  but: 'but-latn-pg',
  buu: 'buu-latn-zz',
  buv: 'buv-latn-pg',
  buw: 'buw-latn-ga',
  bux: 'bux-latn-ng',
  buy: 'buy-latn-sl',
  buz: 'buz-latn-ng',
  bva: 'bva-latn-td',
  bvb: 'bvb-latn-gq',
  bvc: 'bvc-latn-sb',
  bvd: 'bvd-latn-sb',
  bve: 'bve-latn-id',
  bvf: 'bvf-latn-td',
  bvg: 'bvg-latn-cm',
  bvh: 'bvh-latn-ng',
  bvi: 'bvi-latn-ss',
  bvj: 'bvj-latn-ng',
  bvk: 'bvk-latn-id',
  bvm: 'bvm-latn-cm',
  bvn: 'bvn-latn-pg',
  bvo: 'bvo-latn-td',
  bvq: 'bvq-latn-cf',
  bvr: 'bvr-latn-au',
  bvt: 'bvt-latn-id',
  bvu: 'bvu-latn-id',
  bvv: 'bvv-latn-ve',
  bvw: 'bvw-latn-ng',
  bvx: 'bvx-latn-cg',
  bvy: 'bvy-latn-ph',
  bvz: 'bvz-latn-id',
  bwa: 'bwa-latn-nc',
  bwb: 'bwb-latn-fj',
  bwc: 'bwc-latn-zm',
  bwd: 'bwd-latn-zz',
  bwe: 'bwe-mymr-mm',
  'bwe-latn': 'bwe-latn-mm',
  bwf: 'bwf-latn-pg',
  bwg: 'bwg-latn-mz',
  bwh: 'bwh-latn-cm',
  bwi: 'bwi-latn-ve',
  bwj: 'bwj-latn-bf',
  bwk: 'bwk-latn-pg',
  bwl: 'bwl-latn-cd',
  bwm: 'bwm-latn-pg',
  bwo: 'bwo-latn-et',
  'bwo-ethi': 'bwo-ethi-et',
  bwp: 'bwp-latn-id',
  bwq: 'bwq-latn-bf',
  bwr: 'bwr-latn-zz',
  bws: 'bws-latn-cd',
  bwt: 'bwt-latn-cm',
  bwu: 'bwu-latn-gh',
  bww: 'bww-latn-cd',
  bwx: 'bwx-latn-cn',
  bwy: 'bwy-latn-bf',
  bwz: 'bwz-latn-cg',
  bxa: 'bxa-latn-sb',
  bxb: 'bxb-latn-ss',
  bxc: 'bxc-latn-gq',
  bxf: 'bxf-latn-pg',
  bxg: 'bxg-latn-cd',
  bxh: 'bxh-latn-zz',
  bxi: 'bxi-latn-au',
  bxj: 'bxj-latn-au',
  bxl: 'bxl-latn-bf',
  bxm: 'bxm-cyrl-mn',
  'bxm-latn': 'bxm-latn-mn',
  'bxm-mong': 'bxm-mong-mn',
  bxn: 'bxn-latn-au',
  bxo: 'bxo-latn-ng',
  bxp: 'bxp-latn-cm',
  bxq: 'bxq-latn-ng',
  bxs: 'bxs-latn-cm',
  bxu: 'bxu-mong-cn',
  'bxu-cyrl': 'bxu-cyrl-cn',
  'bxu-latn': 'bxu-latn-cn',
  bxv: 'bxv-latn-td',
  bxw: 'bxw-latn-ml',
  bxz: 'bxz-latn-pg',
  bya: 'bya-latn-ph',
  byb: 'byb-latn-cm',
  byc: 'byc-latn-ng',
  byd: 'byd-latn-id',
  bye: 'bye-latn-zz',
  byf: 'byf-latn-ng',
  byh: 'byh-deva-np',
  byi: 'byi-latn-cd',
  byj: 'byj-latn-ng',
  byk: 'byk-latn-cn',
  byl: 'byl-latn-id',
  bym: 'bym-latn-au',
  byn: 'byn-ethi-er',
  byp: 'byp-latn-ng',
  byr: 'byr-latn-zz',
  bys: 'bys-latn-zz',
  byv: 'byv-latn-cm',
  byw: 'byw-deva-np',
  byx: 'byx-latn-zz',
  byz: 'byz-latn-pg',
  bza: 'bza-latn-zz',
  bzb: 'bzb-latn-id',
  bzc: 'bzc-latn-mg',
  bzd: 'bzd-latn-cr',
  bze: 'bze-latn-ml',
  bzf: 'bzf-latn-zz',
  bzh: 'bzh-latn-zz',
  bzi: 'bzi-thai-th',
  bzj: 'bzj-latn-bz',
  bzk: 'bzk-latn-ni',
  bzl: 'bzl-latn-id',
  bzm: 'bzm-latn-cd',
  bzn: 'bzn-latn-id',
  bzo: 'bzo-latn-cd',
  bzp: 'bzp-latn-id',
  bzq: 'bzq-latn-id',
  bzr: 'bzr-latn-au',
  bzt: 'bzt-latn-001',
  bzu: 'bzu-latn-id',
  bzv: 'bzv-latn-cm',
  bzw: 'bzw-latn-zz',
  bzx: 'bzx-latn-ml',
  bzy: 'bzy-latn-ng',
  bzz: 'bzz-latn-ng',
  ca: 'ca-latn-es',
  caa: 'caa-latn-gt',
  cab: 'cab-latn-hn',
  cac: 'cac-latn-gt',
  cad: 'cad-latn-us',
  cae: 'cae-latn-sn',
  caf: 'caf-latn-ca',
  'caf-cans': 'caf-cans-ca',
  cag: 'cag-latn-py',
  cah: 'cah-latn-pe',
  caj: 'caj-latn-ar',
  cak: 'cak-latn-gt',
  cal: 'cal-latn-mp',
  cam: 'cam-latn-nc',
  can: 'can-latn-zz',
  cao: 'cao-latn-bo',
  cap: 'cap-latn-bo',
  caq: 'caq-latn-in',
  car: 'car-latn-ve',
  cas: 'cas-latn-bo',
  cav: 'cav-latn-bo',
  caw: 'caw-latn-bo',
  cax: 'cax-latn-bo',
  cay: 'cay-latn-ca',
  caz: 'caz-latn-bo',
  cbb: 'cbb-latn-co',
  cbc: 'cbc-latn-co',
  cbd: 'cbd-latn-co',
  cbg: 'cbg-latn-co',
  cbi: 'cbi-latn-ec',
  cbj: 'cbj-latn-zz',
  cbk: 'cbk-latn-ph',
  'cbk-brai': 'cbk-brai-ph',
  cbl: 'cbl-latn-mm',
  cbn: 'cbn-thai-th',
  cbo: 'cbo-latn-ng',
  cbq: 'cbq-latn-ng',
  cbr: 'cbr-latn-pe',
  cbs: 'cbs-latn-pe',
  cbt: 'cbt-latn-pe',
  cbu: 'cbu-latn-pe',
  cbv: 'cbv-latn-co',
  cbw: 'cbw-latn-ph',
  cby: 'cby-latn-co',
  ccc: 'ccc-latn-pe',
  ccd: 'ccd-latn-br',
  cce: 'cce-latn-mz',
  ccg: 'ccg-latn-ng',
  cch: 'cch-latn-ng',
  ccj: 'ccj-latn-gw',
  ccl: 'ccl-latn-tz',
  ccm: 'ccm-latn-my',
  cco: 'cco-latn-mx',
  ccp: 'ccp-cakm-bd',
  ccr: 'ccr-latn-sv',
  cde: 'cde-telu-in',
  cdf: 'cdf-latn-in',
  'cdf-beng': 'cdf-beng-in',
  cdh: 'cdh-deva-in',
  'cdh-takr': 'cdh-takr-in',
  cdi: 'cdi-gujr-in',
  cdj: 'cdj-deva-in',
  cdm: 'cdm-deva-np',
  'cdm-latn': 'cdm-latn-np',
  cdo: 'cdo-hans-cn',
  'cdo-hant': 'cdo-hant-cn',
  'cdo-latn': 'cdo-latn-cn',
  cdr: 'cdr-latn-ng',
  cdz: 'cdz-beng-in',
  ce: 'ce-cyrl-ru',
  cea: 'cea-latn-us',
  ceb: 'ceb-latn-ph',
  ceg: 'ceg-latn-py',
  cek: 'cek-latn-mm',
  cen: 'cen-latn-ng',
  cet: 'cet-latn-ng',
  cey: 'cey-latn-mm',
  cfa: 'cfa-latn-zz',
  cfd: 'cfd-latn-ng',
  cfg: 'cfg-latn-ng',
  cfm: 'cfm-latn-mm',
  'cfm-beng': 'cfm-beng-in',
  cga: 'cga-latn-pg',
  cgc: 'cgc-latn-ph',
  cgg: 'cgg-latn-ug',
  cgk: 'cgk-tibt-bt',
  ch: 'ch-latn-gu',
  chb: 'chb-latn-co',
  chd: 'chd-latn-mx',
  chf: 'chf-latn-mx',
  chg: 'chg-arab-tm',
  chh: 'chh-latn-us',
  chj: 'chj-latn-mx',
  chk: 'chk-latn-fm',
  chl: 'chl-latn-us',
  chm: 'chm-cyrl-ru',
  chn: 'chn-latn-us',
  'chn-dupl': 'chn-dupl-us',
  cho: 'cho-latn-us',
  chp: 'chp-latn-ca',
  chq: 'chq-latn-mx',
  chr: 'chr-cher-us',
  cht: 'cht-latn-pe',
  chw: 'chw-latn-mz',
  chx: 'chx-deva-np',
  chy: 'chy-latn-us',
  chz: 'chz-latn-mx',
  cia: 'cia-latn-id',
  'cia-arab': 'cia-arab-id',
  'cia-hang': 'cia-hang-id',
  cib: 'cib-latn-bj',
  cic: 'cic-latn-us',
  cie: 'cie-latn-ng',
  cih: 'cih-deva-in',
  cim: 'cim-latn-it',
  cin: 'cin-latn-br',
  cip: 'cip-latn-mx',
  cir: 'cir-latn-nc',
  ciw: 'ciw-latn-us',
  'ciw-cans': 'ciw-cans-us',
  ciy: 'ciy-latn-ve',
  cja: 'cja-arab-kh',
  cje: 'cje-latn-vn',
  cjh: 'cjh-latn-us',
  cji: 'cji-cyrl-ru',
  cjk: 'cjk-latn-ao',
  cjm: 'cjm-cham-vn',
  cjn: 'cjn-latn-pg',
  cjo: 'cjo-latn-pe',
  cjp: 'cjp-latn-cr',
  cjs: 'cjs-latn-ru',
  'cjs-cyrl': 'cjs-cyrl-ru',
  cjv: 'cjv-latn-zz',
  cjy: 'cjy-hans-cn',
  'cjy-hant': 'cjy-hant-cn',
  ckb: 'ckb-arab-iq',
  ckl: 'ckl-latn-zz',
  ckm: 'ckm-latn-hr',
  'ckm-glag': 'ckm-glag-hr',
  ckn: 'ckn-latn-mm',
  cko: 'cko-latn-zz',
  ckq: 'ckq-latn-td',
  ckr: 'ckr-latn-pg',
  cks: 'cks-latn-nc',
  ckt: 'ckt-cyrl-ru',
  cku: 'cku-latn-us',
  ckv: 'ckv-latn-tw',
  ckx: 'ckx-latn-cm',
  cky: 'cky-latn-zz',
  ckz: 'ckz-latn-gt',
  cla: 'cla-latn-zz',
  clc: 'clc-latn-ca',
  cle: 'cle-latn-mx',
  clh: 'clh-arab-pk',
  cli: 'cli-latn-gh',
  clj: 'clj-latn-mm',
  clk: 'clk-latn-in',
  'clk-tibt': 'clk-tibt-cn',
  cll: 'cll-latn-gh',
  clm: 'clm-latn-us',
  clo: 'clo-latn-mx',
  clt: 'clt-latn-mm',
  clu: 'clu-latn-ph',
  clw: 'clw-cyrl-ru',
  cly: 'cly-latn-mx',
  cma: 'cma-latn-vn',
  cme: 'cme-latn-zz',
  cmg: 'cmg-soyo-mn',
  cmi: 'cmi-latn-co',
  cml: 'cml-latn-id',
  cmo: 'cmo-latn-vn',
  'cmo-kh': 'cmo-latn-kh',
  'cmo-khmr': 'cmo-khmr-kh',
  cmr: 'cmr-latn-mm',
  cms: 'cms-latn-it',
  cmt: 'cmt-latn-za',
  cna: 'cna-tibt-in',
  cnb: 'cnb-latn-mm',
  cnc: 'cnc-latn-vn',
  cng: 'cng-latn-cn',
  cnh: 'cnh-latn-mm',
  cni: 'cni-latn-pe',
  cnk: 'cnk-latn-mm',
  cnl: 'cnl-latn-mx',
  cnp: 'cnp-hans-cn',
  'cnp-hant': 'cnp-hant-cn',
  cnq: 'cnq-latn-cm',
  cns: 'cns-latn-id',
  cnt: 'cnt-latn-mx',
  cnw: 'cnw-latn-mm',
  cnx: 'cnx-latn-gb',
  co: 'co-latn-fr',
  coa: 'coa-latn-au',
  cob: 'cob-latn-mx',
  coc: 'coc-latn-mx',
  cod: 'cod-latn-pe',
  coe: 'coe-latn-co',
  cof: 'cof-latn-ec',
  cog: 'cog-thai-th',
  coh: 'coh-latn-ke',
  coj: 'coj-latn-mx',
  cok: 'cok-latn-mx',
  col: 'col-latn-us',
  com: 'com-latn-us',
  coo: 'coo-latn-ca',
  cop: 'cop-copt-eg',
  coq: 'coq-latn-us',
  cot: 'cot-latn-pe',
  cou: 'cou-latn-sn',
  cox: 'cox-latn-pe',
  coz: 'coz-latn-mx',
  cpa: 'cpa-latn-mx',
  cpb: 'cpb-latn-pe',
  cpc: 'cpc-latn-pe',
  cpg: 'cpg-grek-gr',
  cpi: 'cpi-latn-nr',
  cpn: 'cpn-latn-gh',
  cpo: 'cpo-latn-bf',
  cps: 'cps-latn-ph',
  cpu: 'cpu-latn-pe',
  cpx: 'cpx-latn-cn',
  cpy: 'cpy-latn-pe',
  cqd: 'cqd-latn-cn',
  cr: 'cr-cans-ca',
  crb: 'crb-latn-vc',
  crc: 'crc-latn-vu',
  crd: 'crd-latn-us',
  crf: 'crf-latn-co',
  crg: 'crg-latn-ca',
  crh: 'crh-cyrl-ua',
  cri: 'cri-latn-st',
  crj: 'crj-cans-ca',
  'crj-latn': 'crj-latn-ca',
  crk: 'crk-cans-ca',
  crl: 'crl-cans-ca',
  crm: 'crm-cans-ca',
  crn: 'crn-latn-mx',
  cro: 'cro-latn-us',
  crq: 'crq-latn-ar',
  crs: 'crs-latn-sc',
  crt: 'crt-latn-ar',
  crv: 'crv-latn-in',
  crw: 'crw-latn-vn',
  crx: 'crx-latn-ca',
  'crx-cans': 'crx-cans-ca',
  cry: 'cry-latn-ng',
  crz: 'crz-latn-us',
  cs: 'cs-latn-cz',
  csa: 'csa-latn-mx',
  csb: 'csb-latn-pl',
  csh: 'csh-mymr-mm',
  'csh-latn': 'csh-latn-mm',
  csj: 'csj-latn-mm',
  csk: 'csk-latn-sn',
  csm: 'csm-latn-us',
  cso: 'cso-latn-mx',
  csp: 'csp-hans-cn',
  'csp-hant': 'csp-hant-cn',
  css: 'css-latn-us',
  cst: 'cst-latn-us',
  csv: 'csv-latn-mm',
  csw: 'csw-cans-ca',
  csy: 'csy-latn-mm',
  csz: 'csz-latn-us',
  cta: 'cta-latn-mx',
  ctc: 'ctc-latn-us',
  ctd: 'ctd-pauc-mm',
  cte: 'cte-latn-mx',
  ctg: 'ctg-beng-bd',
  'ctg-arab': 'ctg-arab-bd',
  'ctg-latn': 'ctg-latn-bd',
  cth: 'cth-latn-mm',
  ctl: 'ctl-latn-mx',
  ctm: 'ctm-latn-us',
  ctn: 'ctn-deva-np',
  cto: 'cto-latn-co',
  ctp: 'ctp-latn-mx',
  cts: 'cts-latn-ph',
  ctt: 'ctt-taml-in',
  ctu: 'ctu-latn-mx',
  ctz: 'ctz-latn-mx',
  cu: 'cu-cyrl-ru',
  'cu-glag': 'cu-glag-bg',
  cua: 'cua-latn-vn',
  cub: 'cub-latn-co',
  cuc: 'cuc-latn-mx',
  cuh: 'cuh-latn-ke',
  cui: 'cui-latn-co',
  cuj: 'cuj-latn-pe',
  cuk: 'cuk-latn-pa',
  cul: 'cul-latn-br',
  cuo: 'cuo-latn-ve',
  cup: 'cup-latn-us',
  cut: 'cut-latn-mx',
  cuu: 'cuu-lana-cn',
  cuv: 'cuv-latn-cm',
  cux: 'cux-latn-mx',
  cv: 'cv-cyrl-ru',
  cvg: 'cvg-latn-in',
  'cvg-tibt': 'cvg-tibt-in',
  cvn: 'cvn-latn-mx',
  cwa: 'cwa-latn-tz',
  cwb: 'cwb-latn-mz',
  cwe: 'cwe-latn-tz',
  cwg: 'cwg-latn-my',
  cwt: 'cwt-latn-sn',
  cy: 'cy-latn-gb',
  cya: 'cya-latn-mx',
  cyb: 'cyb-latn-bo',
  cyo: 'cyo-latn-ph',
  czh: 'czh-hans-cn',
  'czh-hant': 'czh-hant-cn',
  czk: 'czk-hebr-cz',
  czn: 'czn-latn-mx',
  czt: 'czt-latn-mm',
  da: 'da-latn-dk',
  daa: 'daa-latn-td',
  dac: 'dac-latn-pg',
  dad: 'dad-latn-zz',
  dae: 'dae-latn-cm',
  daf: 'daf-latn-ci',
  dag: 'dag-latn-zz',
  dah: 'dah-latn-zz',
  dai: 'dai-latn-td',
  daj: 'daj-latn-sd',
  dak: 'dak-latn-us',
  dal: 'dal-latn-ke',
  dam: 'dam-latn-ng',
  dao: 'dao-latn-mm',
  daq: 'daq-deva-in',
  dar: 'dar-cyrl-ru',
  das: 'das-latn-ci',
  dau: 'dau-latn-td',
  dav: 'dav-latn-ke',
  daw: 'daw-latn-ph',
  dax: 'dax-latn-au',
  daz: 'daz-latn-id',
  dba: 'dba-latn-ml',
  dbb: 'dbb-latn-ng',
  dbd: 'dbd-latn-zz',
  dbe: 'dbe-latn-id',
  dbf: 'dbf-latn-id',
  dbg: 'dbg-latn-ml',
  dbi: 'dbi-latn-ng',
  dbj: 'dbj-latn-my',
  'dbj-arab': 'dbj-arab-my',
  dbl: 'dbl-latn-au',
  dbm: 'dbm-latn-ng',
  dbn: 'dbn-latn-id',
  dbo: 'dbo-latn-ng',
  dbp: 'dbp-latn-ng',
  dbq: 'dbq-latn-zz',
  dbt: 'dbt-latn-ml',
  dbu: 'dbu-latn-ml',
  dbv: 'dbv-latn-ng',
  dbw: 'dbw-latn-ml',
  dby: 'dby-latn-pg',
  dcc: 'dcc-arab-in',
  dcr: 'dcr-latn-vi',
  dda: 'dda-latn-au',
  ddd: 'ddd-latn-ss',
  dde: 'dde-latn-cg',
  ddg: 'ddg-latn-tl',
  ddi: 'ddi-latn-pg',
  ddj: 'ddj-latn-au',
  ddn: 'ddn-latn-zz',
  ddo: 'ddo-cyrl-ru',
  ddr: 'ddr-latn-au',
  dds: 'dds-latn-ml',
  ddw: 'ddw-latn-id',
  de: 'de-latn-de',
  dec: 'dec-latn-sd',
  ded: 'ded-latn-zz',
  dee: 'dee-latn-lr',
  def: 'def-arab-ir',
  deg: 'deg-latn-ng',
  deh: 'deh-arab-pk',
  dei: 'dei-latn-id',
  dek: 'dek-latn-cm',
  del: 'del-latn-us',
  dem: 'dem-latn-id',
  den: 'den-latn-ca',
  deq: 'deq-latn-cf',
  der: 'der-beng-in',
  'der-latn': 'der-latn-in',
  des: 'des-latn-br',
  dev: 'dev-latn-pg',
  dez: 'dez-latn-cd',
  dga: 'dga-latn-zz',
  dgb: 'dgb-latn-ml',
  dgc: 'dgc-latn-ph',
  dgd: 'dgd-latn-bf',
  dge: 'dge-latn-pg',
  dgg: 'dgg-latn-pg',
  dgh: 'dgh-latn-zz',
  dgi: 'dgi-latn-zz',
  dgk: 'dgk-latn-cf',
  dgl: 'dgl-arab-zz',
  dgn: 'dgn-latn-au',
  dgr: 'dgr-latn-ca',
  dgs: 'dgs-latn-bf',
  dgt: 'dgt-latn-au',
  dgw: 'dgw-latn-au',
  dgx: 'dgx-latn-pg',
  dgz: 'dgz-latn-zz',
  dhg: 'dhg-latn-au',
  dhi: 'dhi-deva-np',
  dhl: 'dhl-latn-au',
  dhm: 'dhm-latn-ao',
  dhn: 'dhn-gujr-in',
  dho: 'dho-deva-in',
  dhr: 'dhr-latn-au',
  dhs: 'dhs-latn-tz',
  dhu: 'dhu-latn-au',
  dhv: 'dhv-latn-nc',
  dhw: 'dhw-deva-np',
  dhx: 'dhx-latn-au',
  dia: 'dia-latn-zz',
  dib: 'dib-latn-ss',
  dic: 'dic-latn-ci',
  did: 'did-latn-ss',
  dif: 'dif-latn-au',
  dig: 'dig-latn-ke',
  dih: 'dih-latn-mx',
  dii: 'dii-latn-cm',
  dij: 'dij-latn-id',
  dil: 'dil-latn-sd',
  din: 'din-latn-ss',
  'din-arab': 'din-arab-ss',
  dio: 'dio-latn-ng',
  dip: 'dip-latn-ss',
  dir: 'dir-latn-ng',
  dis: 'dis-latn-in',
  'dis-beng': 'dis-beng-in',
  diu: 'diu-latn-na',
  diw: 'diw-latn-ss',
  dix: 'dix-latn-vu',
  diy: 'diy-latn-id',
  diz: 'diz-latn-cd',
  dja: 'dja-latn-au',
  djb: 'djb-latn-au',
  djc: 'djc-latn-td',
  djd: 'djd-latn-au',
  dje: 'dje-latn-ne',
  djf: 'djf-latn-au',
  dji: 'dji-latn-au',
  djj: 'djj-latn-au',
  djk: 'djk-latn-sr',
  djm: 'djm-latn-ml',
  djn: 'djn-latn-au',
  djo: 'djo-latn-id',
  djr: 'djr-latn-au',
  dju: 'dju-latn-pg',
  djw: 'djw-latn-au',
  dka: 'dka-tibt-bt',
  dkg: 'dkg-latn-ng',
  dkk: 'dkk-latn-id',
  dkr: 'dkr-latn-my',
  dks: 'dks-latn-ss',
  dkx: 'dkx-latn-cm',
  dlg: 'dlg-cyrl-ru',
  dlm: 'dlm-latn-hr',
  dln: 'dln-latn-in',
  dma: 'dma-latn-ga',
  dmb: 'dmb-latn-ml',
  dmc: 'dmc-latn-pg',
  dmd: 'dmd-latn-au',
  dme: 'dme-latn-cm',
  dmf: 'dmf-medf-ng',
  dmg: 'dmg-latn-my',
  dmk: 'dmk-arab-pk',
  dml: 'dml-arab-pk',
  dmm: 'dmm-latn-cm',
  dmo: 'dmo-latn-cm',
  dmr: 'dmr-latn-id',
  dms: 'dms-latn-id',
  dmu: 'dmu-latn-id',
  dmv: 'dmv-latn-my',
  dmw: 'dmw-latn-au',
  dmx: 'dmx-latn-mz',
  dmy: 'dmy-latn-id',
  dna: 'dna-latn-id',
  dnd: 'dnd-latn-pg',
  dne: 'dne-latn-tz',
  dng: 'dng-cyrl-kg',
  'dng-arab': 'dng-arab-kg',
  dni: 'dni-latn-id',
  dnj: 'dnj-latn-ci',
  dnk: 'dnk-latn-id',
  dnn: 'dnn-latn-bf',
  dno: 'dno-latn-cd',
  dnr: 'dnr-latn-pg',
  dnt: 'dnt-latn-id',
  dnu: 'dnu-mymr-mm',
  dnv: 'dnv-mymr-mm',
  dnw: 'dnw-latn-id',
  dny: 'dny-latn-br',
  doa: 'doa-latn-pg',
  dob: 'dob-latn-zz',
  doc: 'doc-latn-cn',
  doe: 'doe-latn-tz',
  dof: 'dof-latn-pg',
  doh: 'doh-latn-ng',
  doi: 'doi-deva-in',
  dok: 'dok-latn-id',
  dol: 'dol-latn-pg',
  don: 'don-latn-pg',
  doo: 'doo-latn-cd',
  dop: 'dop-latn-zz',
  dor: 'dor-latn-sb',
  dos: 'dos-latn-bf',
  dot: 'dot-latn-ng',
  dov: 'dov-latn-zw',
  dow: 'dow-latn-zz',
  dox: 'dox-ethi-et',
  doy: 'doy-latn-gh',
  dpp: 'dpp-latn-my',
  drc: 'drc-latn-pt',
  dre: 'dre-tibt-np',
  drg: 'drg-latn-my',
  drh: 'drh-mong-cn',
  dri: 'dri-latn-zz',
  drl: 'drl-latn-au',
  drn: 'drn-latn-id',
  dro: 'dro-latn-my',
  drq: 'drq-deva-np',
  drs: 'drs-ethi-zz',
  drt: 'drt-latn-nl',
  dru: 'dru-latn-tw',
  dry: 'dry-deva-np',
  dsb: 'dsb-latn-de',
  dsh: 'dsh-latn-ke',
  dsi: 'dsi-latn-td',
  dsn: 'dsn-latn-id',
  dso: 'dso-orya-in',
  dsq: 'dsq-latn-ml',
  'dsq-arab': 'dsq-arab-ml',
  dta: 'dta-latn-cn',
  'dta-cyrl': 'dta-cyrl-cn',
  'dta-hans': 'dta-hans-cn',
  dtb: 'dtb-latn-my',
  dtd: 'dtd-latn-ca',
  dth: 'dth-latn-au',
  dti: 'dti-latn-ml',
  dtk: 'dtk-latn-ml',
  dtm: 'dtm-latn-ml',
  dto: 'dto-latn-ml',
  dtp: 'dtp-latn-my',
  dtr: 'dtr-latn-my',
  dts: 'dts-latn-zz',
  dtt: 'dtt-latn-ml',
  dtu: 'dtu-latn-ml',
  dty: 'dty-deva-np',
  dua: 'dua-latn-cm',
  dub: 'dub-gujr-in',
  duc: 'duc-latn-zz',
  dud: 'dud-latn-zz',
  due: 'due-latn-ph',
  duf: 'duf-latn-nc',
  dug: 'dug-latn-zz',
  duh: 'duh-deva-in',
  'duh-gujr': 'duh-gujr-in',
  dui: 'dui-latn-pg',
  duk: 'duk-latn-pg',
  dul: 'dul-latn-ph',
  dum: 'dum-latn-nl',
  dun: 'dun-latn-id',
  duo: 'duo-latn-ph',
  dup: 'dup-latn-id',
  duq: 'duq-latn-id',
  dur: 'dur-latn-cm',
  dus: 'dus-deva-np',
  duu: 'duu-latn-cn',
  duv: 'duv-latn-id',
  duw: 'duw-latn-id',
  dux: 'dux-latn-ml',
  duy: 'duy-latn-ph',
  duz: 'duz-latn-cm',
  dv: 'dv-thaa-mv',
  dva: 'dva-latn-zz',
  dwa: 'dwa-latn-ng',
  dwk: 'dwk-orya-in',
  dwr: 'dwr-latn-et',
  'dwr-ethi': 'dwr-ethi-et',
  dws: 'dws-latn-001',
  dwu: 'dwu-latn-au',
  dww: 'dww-latn-zz',
  dwy: 'dwy-latn-au',
  dwz: 'dwz-deva-np',
  dya: 'dya-latn-bf',
  dyb: 'dyb-latn-au',
  dyd: 'dyd-latn-au',
  dyg: 'dyg-latn-ph',
  dyi: 'dyi-latn-ci',
  dym: 'dym-latn-ml',
  dyn: 'dyn-latn-au',
  dyo: 'dyo-latn-sn',
  dyu: 'dyu-latn-bf',
  dyy: 'dyy-latn-au',
  dz: 'dz-tibt-bt',
  dza: 'dza-latn-ng',
  dze: 'dze-latn-au',
  dzg: 'dzg-latn-zz',
  dzl: 'dzl-tibt-bt',
  dzn: 'dzn-latn-cd',
  eaa: 'eaa-latn-au',
  ebc: 'ebc-latn-id',
  ebg: 'ebg-latn-ng',
  ebk: 'ebk-latn-ph',
  ebo: 'ebo-latn-cg',
  ebr: 'ebr-latn-ci',
  ebu: 'ebu-latn-ke',
  ecr: 'ecr-grek-gr',
  ecy: 'ecy-cprt-cy',
  ee: 'ee-latn-gh',
  efa: 'efa-latn-ng',
  efe: 'efe-latn-cd',
  efi: 'efi-latn-ng',
  ega: 'ega-latn-ci',
  egl: 'egl-latn-it',
  egm: 'egm-latn-tz',
  ego: 'ego-latn-ng',
  egy: 'egy-egyp-eg',
  ehu: 'ehu-latn-ng',
  eip: 'eip-latn-id',
  eit: 'eit-latn-pg',
  eiv: 'eiv-latn-pg',
  eja: 'eja-latn-gw',
  eka: 'eka-latn-zz',
  eke: 'eke-latn-ng',
  ekg: 'ekg-latn-id',
  eki: 'eki-latn-ng',
  ekl: 'ekl-latn-bd',
  ekm: 'ekm-latn-cm',
  eko: 'eko-latn-mz',
  'eko-arab': 'eko-arab-mz',
  ekp: 'ekp-latn-ng',
  ekr: 'ekr-latn-ng',
  eky: 'eky-kali-mm',
  el: 'el-grek-gr',
  ele: 'ele-latn-pg',
  elk: 'elk-latn-pg',
  elm: 'elm-latn-ng',
  elo: 'elo-latn-ke',
  elu: 'elu-latn-pg',
  ema: 'ema-latn-zz',
  emb: 'emb-latn-id',
  eme: 'eme-latn-gf',
  emg: 'emg-deva-np',
  emi: 'emi-latn-zz',
  emm: 'emm-latn-mx',
  emn: 'emn-latn-cm',
  emp: 'emp-latn-pa',
  ems: 'ems-latn-us',
  'ems-cyrl': 'ems-cyrl-us',
  emu: 'emu-deva-in',
  emw: 'emw-latn-id',
  emx: 'emx-latn-fr',
  emz: 'emz-latn-cm',
  en: 'en-latn-us',
  'en-shaw': 'en-shaw-gb',
  ena: 'ena-latn-pg',
  enb: 'enb-latn-ke',
  enc: 'enc-latn-vn',
  end: 'end-latn-id',
  enf: 'enf-cyrl-ru',
  enh: 'enh-cyrl-ru',
  enl: 'enl-latn-py',
  enm: 'enm-latn-gb',
  enn: 'enn-latn-zz',
  eno: 'eno-latn-id',
  enq: 'enq-latn-zz',
  enr: 'enr-latn-id',
  env: 'env-latn-ng',
  enw: 'enw-latn-ng',
  enx: 'enx-latn-py',
  eo: 'eo-latn-001',
  eot: 'eot-latn-ci',
  epi: 'epi-latn-ng',
  era: 'era-taml-in',
  erg: 'erg-latn-vu',
  erh: 'erh-latn-ng',
  eri: 'eri-latn-zz',
  erk: 'erk-latn-vu',
  err: 'err-latn-au',
  ert: 'ert-latn-id',
  erw: 'erw-latn-id',
  es: 'es-latn-es',
  ese: 'ese-latn-bo',
  esg: 'esg-gonm-in',
  esh: 'esh-arab-ir',
  esi: 'esi-latn-us',
  esm: 'esm-latn-ci',
  ess: 'ess-latn-us',
  'ess-cyrl': 'ess-cyrl-us',
  esu: 'esu-latn-us',
  esy: 'esy-latn-ph',
  et: 'et-latn-ee',
  etb: 'etb-latn-ng',
  etn: 'etn-latn-vu',
  eto: 'eto-latn-cm',
  etr: 'etr-latn-zz',
  ets: 'ets-latn-ng',
  ett: 'ett-ital-it',
  etu: 'etu-latn-zz',
  etx: 'etx-latn-zz',
  etz: 'etz-latn-id',
  eu: 'eu-latn-es',
  eve: 'eve-cyrl-ru',
  evh: 'evh-latn-ng',
  evn: 'evn-cyrl-ru',
  'evn-latn': 'evn-latn-cn',
  'evn-mong': 'evn-mong-cn',
  ewo: 'ewo-latn-cm',
  ext: 'ext-latn-es',
  eya: 'eya-latn-us',
  eyo: 'eyo-latn-ke',
  eza: 'eza-latn-zz',
  eze: 'eze-latn-ng',
  fa: 'fa-arab-ir',
  faa: 'faa-latn-zz',
  fab: 'fab-latn-zz',
  fad: 'fad-latn-pg',
  faf: 'faf-latn-sb',
  fag: 'fag-latn-zz',
  fah: 'fah-latn-ng',
  fai: 'fai-latn-zz',
  faj: 'faj-latn-pg',
  fak: 'fak-latn-cm',
  fal: 'fal-latn-cm',
  fam: 'fam-latn-ng',
  fan: 'fan-latn-gq',
  fap: 'fap-latn-sn',
  far: 'far-latn-sb',
  fau: 'fau-latn-id',
  fax: 'fax-latn-es',
  fay: 'fay-arab-ir',
  faz: 'faz-arab-ir',
  fbl: 'fbl-latn-ph',
  fer: 'fer-latn-ss',
  ff: 'ff-latn-sn',
  'ff-adlm': 'ff-adlm-gn',
  ffi: 'ffi-latn-zz',
  ffm: 'ffm-latn-ml',
  fgr: 'fgr-latn-td',
  fi: 'fi-latn-fi',
  fia: 'fia-arab-sd',
  fie: 'fie-latn-ng',
  fif: 'fif-latn-sa',
  fil: 'fil-latn-ph',
  fip: 'fip-latn-tz',
  fir: 'fir-latn-ng',
  fit: 'fit-latn-se',
  fiw: 'fiw-latn-pg',
  fj: 'fj-latn-fj',
  fkk: 'fkk-latn-ng',
  fkv: 'fkv-latn-no',
  fla: 'fla-latn-us',
  flh: 'flh-latn-id',
  fli: 'fli-latn-ng',
  fll: 'fll-latn-cm',
  fln: 'fln-latn-au',
  flr: 'flr-latn-zz',
  fly: 'fly-latn-za',
  fmp: 'fmp-latn-zz',
  fmu: 'fmu-deva-in',
  fnb: 'fnb-latn-vu',
  fng: 'fng-latn-za',
  fni: 'fni-latn-td',
  fo: 'fo-latn-fo',
  fod: 'fod-latn-zz',
  foi: 'foi-latn-pg',
  fom: 'fom-latn-cd',
  fon: 'fon-latn-bj',
  for: 'for-latn-zz',
  fos: 'fos-latn-tw',
  fpe: 'fpe-latn-zz',
  fqs: 'fqs-latn-zz',
  fr: 'fr-latn-fr',
  frc: 'frc-latn-us',
  frd: 'frd-latn-id',
  frk: 'frk-latn-de',
  frm: 'frm-latn-fr',
  fro: 'fro-latn-fr',
  frp: 'frp-latn-fr',
  frq: 'frq-latn-pg',
  frr: 'frr-latn-de',
  frs: 'frs-latn-de',
  frt: 'frt-latn-vu',
  fub: 'fub-arab-cm',
  fud: 'fud-latn-wf',
  fue: 'fue-latn-zz',
  fuf: 'fuf-latn-gn',
  fuh: 'fuh-latn-zz',
  fui: 'fui-latn-td',
  fum: 'fum-latn-ng',
  fun: 'fun-latn-br',
  fuq: 'fuq-latn-ne',
  fur: 'fur-latn-it',
  fut: 'fut-latn-vu',
  fuu: 'fuu-latn-cd',
  fuv: 'fuv-latn-ng',
  fuy: 'fuy-latn-zz',
  fvr: 'fvr-latn-sd',
  fwa: 'fwa-latn-nc',
  fwe: 'fwe-latn-na',
  fy: 'fy-latn-nl',
  ga: 'ga-latn-ie',
  gaa: 'gaa-latn-gh',
  gab: 'gab-latn-td',
  gac: 'gac-latn-in',
  'gac-deva': 'gac-deva-in',
  gad: 'gad-latn-ph',
  gae: 'gae-latn-ve',
  gaf: 'gaf-latn-zz',
  gag: 'gag-latn-md',
  gah: 'gah-latn-zz',
  gai: 'gai-latn-pg',
  gaj: 'gaj-latn-zz',
  gak: 'gak-latn-id',
  gal: 'gal-latn-tl',
  gam: 'gam-latn-zz',
  gan: 'gan-hans-cn',
  gao: 'gao-latn-pg',
  gap: 'gap-latn-pg',
  gaq: 'gaq-orya-in',
  gar: 'gar-latn-pg',
  gas: 'gas-gujr-in',
  gat: 'gat-latn-pg',
  gau: 'gau-telu-in',
  gaw: 'gaw-latn-zz',
  gax: 'gax-latn-et',
  'gax-ethi': 'gax-ethi-et',
  gay: 'gay-latn-id',
  gba: 'gba-latn-zz',
  gbb: 'gbb-latn-au',
  gbd: 'gbd-latn-au',
  gbe: 'gbe-latn-pg',
  gbf: 'gbf-latn-zz',
  gbg: 'gbg-latn-cf',
  gbh: 'gbh-latn-bj',
  gbi: 'gbi-latn-id',
  gbj: 'gbj-orya-in',
  gbk: 'gbk-deva-in',
  'gbk-takr': 'gbk-takr-in',
  gbl: 'gbl-gujr-in',
  'gbl-deva': 'gbl-deva-in',
  gbm: 'gbm-deva-in',
  gbn: 'gbn-latn-ss',
  gbp: 'gbp-latn-cf',
  gbq: 'gbq-latn-cf',
  gbr: 'gbr-latn-ng',
  gbs: 'gbs-latn-bj',
  gbu: 'gbu-latn-au',
  gbv: 'gbv-latn-cf',
  gbw: 'gbw-latn-au',
  gbx: 'gbx-latn-bj',
  gby: 'gby-latn-zz',
  gbz: 'gbz-arab-ir',
  gcc: 'gcc-latn-pg',
  gcd: 'gcd-latn-au',
  gcf: 'gcf-latn-gp',
  gcl: 'gcl-latn-gd',
  gcn: 'gcn-latn-pg',
  gcr: 'gcr-latn-gf',
  gct: 'gct-latn-ve',
  gd: 'gd-latn-gb',
  gdb: 'gdb-orya-in',
  'gdb-telu': 'gdb-telu-in',
  gdc: 'gdc-latn-au',
  gdd: 'gdd-latn-pg',
  gde: 'gde-latn-zz',
  gdf: 'gdf-latn-ng',
  gdg: 'gdg-latn-ph',
  gdh: 'gdh-latn-au',
  gdi: 'gdi-latn-cf',
  gdj: 'gdj-latn-au',
  gdk: 'gdk-latn-td',
  gdl: 'gdl-latn-et',
  'gdl-ethi': 'gdl-ethi-et',
  gdm: 'gdm-latn-td',
  gdn: 'gdn-latn-zz',
  gdo: 'gdo-cyrl-ru',
  gdq: 'gdq-latn-ye',
  gdr: 'gdr-latn-zz',
  gdt: 'gdt-latn-au',
  gdu: 'gdu-latn-ng',
  gdx: 'gdx-deva-in',
  gea: 'gea-latn-ng',
  geb: 'geb-latn-zz',
  gec: 'gec-latn-lr',
  ged: 'ged-latn-ng',
  gef: 'gef-latn-id',
  geg: 'geg-latn-ng',
  geh: 'geh-latn-ca',
  gei: 'gei-latn-id',
  gej: 'gej-latn-zz',
  gek: 'gek-latn-ng',
  gel: 'gel-latn-zz',
  geq: 'geq-latn-cf',
  ges: 'ges-latn-id',
  gev: 'gev-latn-ga',
  gew: 'gew-latn-ng',
  gex: 'gex-latn-so',
  gey: 'gey-latn-cd',
  gez: 'gez-ethi-et',
  gfk: 'gfk-latn-zz',
  gga: 'gga-latn-sb',
  ggb: 'ggb-latn-lr',
  ggd: 'ggd-latn-au',
  gge: 'gge-latn-au',
  ggg: 'ggg-arab-pk',
  ggk: 'ggk-latn-au',
  ggl: 'ggl-latn-pg',
  ggn: 'ggn-deva-np',
  ggt: 'ggt-latn-pg',
  ggu: 'ggu-latn-ci',
  ggw: 'ggw-latn-pg',
  gha: 'gha-arab-ly',
  'gha-latn': 'gha-latn-ly',
  'gha-tfng': 'gha-tfng-ly',
  ghc: 'ghc-latn-gb',
  ghe: 'ghe-deva-np',
  ghk: 'ghk-latn-mm',
  ghn: 'ghn-latn-sb',
  ghr: 'ghr-arab-pk',
  ghs: 'ghs-latn-zz',
  ght: 'ght-tibt-np',
  gia: 'gia-latn-au',
  gib: 'gib-latn-ng',
  gic: 'gic-latn-za',
  gid: 'gid-latn-cm',
  gie: 'gie-latn-ci',
  gig: 'gig-arab-pk',
  gih: 'gih-latn-au',
  gil: 'gil-latn-ki',
  gim: 'gim-latn-zz',
  gin: 'gin-cyrl-ru',
  gip: 'gip-latn-pg',
  giq: 'giq-latn-vn',
  gir: 'gir-latn-vn',
  gis: 'gis-latn-cm',
  git: 'git-latn-ca',
  gix: 'gix-latn-cd',
  giy: 'giy-latn-au',
  giz: 'giz-latn-cm',
  gjk: 'gjk-arab-pk',
  gjm: 'gjm-latn-au',
  gjn: 'gjn-latn-zz',
  gjr: 'gjr-latn-au',
  gju: 'gju-arab-pk',
  gka: 'gka-latn-pg',
  gkd: 'gkd-latn-pg',
  gke: 'gke-latn-cm',
  gkn: 'gkn-latn-zz',
  gko: 'gko-latn-au',
  gkp: 'gkp-latn-zz',
  gku: 'gku-latn-za',
  gl: 'gl-latn-es',
  glb: 'glb-latn-ng',
  glc: 'glc-latn-td',
  gld: 'gld-cyrl-ru',
  glh: 'glh-arab-af',
  glj: 'glj-latn-td',
  glk: 'glk-arab-ir',
  gll: 'gll-latn-au',
  glo: 'glo-latn-ng',
  glr: 'glr-latn-lr',
  glu: 'glu-latn-td',
  glw: 'glw-latn-ng',
  gma: 'gma-latn-au',
  gmb: 'gmb-latn-sb',
  gmd: 'gmd-latn-ng',
  gmg: 'gmg-latn-pg',
  gmh: 'gmh-latn-de',
  gmm: 'gmm-latn-zz',
  gmn: 'gmn-latn-cm',
  gmr: 'gmr-latn-au',
  gmu: 'gmu-latn-pg',
  gmv: 'gmv-ethi-zz',
  gmx: 'gmx-latn-tz',
  gmy: 'gmy-linb-gr',
  gmz: 'gmz-latn-ng',
  gn: 'gn-latn-py',
  gna: 'gna-latn-bf',
  gnb: 'gnb-latn-in',
  gnc: 'gnc-latn-es',
  gnd: 'gnd-latn-zz',
  gne: 'gne-latn-ng',
  gng: 'gng-latn-zz',
  gnh: 'gnh-latn-ng',
  gni: 'gni-latn-au',
  gnj: 'gnj-latn-ci',
  gnk: 'gnk-latn-bw',
  gnl: 'gnl-latn-au',
  gnm: 'gnm-latn-pg',
  gnn: 'gnn-latn-au',
  gnq: 'gnq-latn-my',
  gnr: 'gnr-latn-au',
  gnt: 'gnt-latn-pg',
  gnu: 'gnu-latn-pg',
  gnw: 'gnw-latn-bo',
  gnz: 'gnz-latn-cf',
  goa: 'goa-latn-ci',
  gob: 'gob-latn-co',
  goc: 'goc-latn-pg',
  god: 'god-latn-zz',
  goe: 'goe-tibt-bt',
  gof: 'gof-ethi-zz',
  gog: 'gog-latn-tz',
  goh: 'goh-latn-de',
  goi: 'goi-latn-zz',
  gok: 'gok-deva-in',
  gol: 'gol-latn-lr',
  gom: 'gom-deva-in',
  gon: 'gon-telu-in',
  goo: 'goo-latn-fj',
  gop: 'gop-latn-id',
  goq: 'goq-latn-id',
  gor: 'gor-latn-id',
  gos: 'gos-latn-nl',
  got: 'got-goth-ua',
  gou: 'gou-latn-cm',
  gov: 'gov-latn-ci',
  gow: 'gow-latn-tz',
  gox: 'gox-latn-cd',
  goy: 'goy-latn-td',
  gpa: 'gpa-latn-ng',
  gpe: 'gpe-latn-gh',
  gpn: 'gpn-latn-pg',
  gqa: 'gqa-latn-ng',
  gqn: 'gqn-latn-br',
  gqr: 'gqr-latn-td',
  gra: 'gra-deva-in',
  'gra-gujr': 'gra-gujr-in',
  grb: 'grb-latn-zz',
  grc: 'grc-cprt-cy',
  'grc-linb': 'grc-linb-gr',
  grd: 'grd-latn-ng',
  grg: 'grg-latn-pg',
  grh: 'grh-latn-ng',
  gri: 'gri-latn-sb',
  grj: 'grj-latn-lr',
  grm: 'grm-latn-my',
  grq: 'grq-latn-pg',
  grs: 'grs-latn-id',
  grt: 'grt-beng-in',
  gru: 'gru-ethi-et',
  'gru-latn': 'gru-latn-et',
  grv: 'grv-latn-lr',
  grw: 'grw-latn-zz',
  grx: 'grx-latn-pg',
  gry: 'gry-latn-lr',
  grz: 'grz-latn-pg',
  gsl: 'gsl-latn-sn',
  gsn: 'gsn-latn-pg',
  gso: 'gso-latn-cf',
  gsp: 'gsp-latn-pg',
  gsw: 'gsw-latn-ch',
  gta: 'gta-latn-br',
  gtu: 'gtu-latn-au',
  gu: 'gu-gujr-in',
  gua: 'gua-latn-ng',
  gub: 'gub-latn-br',
  guc: 'guc-latn-co',
  gud: 'gud-latn-zz',
  gue: 'gue-latn-au',
  guf: 'guf-latn-au',
  guh: 'guh-latn-co',
  gui: 'gui-latn-bo',
  guk: 'guk-latn-et',
  'guk-ethi': 'guk-ethi-et',
  gul: 'gul-latn-us',
  gum: 'gum-latn-co',
  gun: 'gun-latn-br',
  guo: 'guo-latn-co',
  gup: 'gup-latn-au',
  guq: 'guq-latn-py',
  gur: 'gur-latn-gh',
  gut: 'gut-latn-cr',
  guu: 'guu-latn-ve',
  guw: 'guw-latn-zz',
  gux: 'gux-latn-zz',
  guz: 'guz-latn-ke',
  gv: 'gv-latn-im',
  gva: 'gva-latn-py',
  gvc: 'gvc-latn-br',
  gve: 'gve-latn-pg',
  gvf: 'gvf-latn-zz',
  gvj: 'gvj-latn-br',
  gvl: 'gvl-latn-td',
  gvm: 'gvm-latn-ng',
  gvn: 'gvn-latn-au',
  gvo: 'gvo-latn-br',
  gvp: 'gvp-latn-br',
  gvr: 'gvr-deva-np',
  gvs: 'gvs-latn-zz',
  gvy: 'gvy-latn-au',
  gwa: 'gwa-latn-ci',
  gwb: 'gwb-latn-ng',
  gwc: 'gwc-arab-zz',
  gwd: 'gwd-latn-et',
  gwe: 'gwe-latn-tz',
  gwf: 'gwf-arab-pk',
  gwg: 'gwg-latn-ng',
  gwi: 'gwi-latn-ca',
  gwj: 'gwj-latn-bw',
  gwm: 'gwm-latn-au',
  gwn: 'gwn-latn-ng',
  gwr: 'gwr-latn-ug',
  gwt: 'gwt-arab-zz',
  gwu: 'gwu-latn-au',
  gww: 'gww-latn-au',
  gwx: 'gwx-latn-gh',
  gxx: 'gxx-latn-ci',
  gyb: 'gyb-latn-pg',
  gyd: 'gyd-latn-au',
  gye: 'gye-latn-ng',
  gyf: 'gyf-latn-au',
  gyg: 'gyg-latn-cf',
  gyi: 'gyi-latn-zz',
  gyl: 'gyl-latn-et',
  'gyl-ethi': 'gyl-ethi-et',
  gym: 'gym-latn-pa',
  gyn: 'gyn-latn-gy',
  gyo: 'gyo-deva-np',
  gyr: 'gyr-latn-bo',
  gyy: 'gyy-latn-au',
  gyz: 'gyz-latn-ng',
  gza: 'gza-latn-sd',
  gzi: 'gzi-arab-ir',
  gzn: 'gzn-latn-id',
  ha: 'ha-latn-ng',
  'ha-cm': 'ha-arab-cm',
  'ha-sd': 'ha-arab-sd',
  haa: 'haa-latn-us',
  hac: 'hac-arab-ir',
  had: 'had-latn-id',
  hae: 'hae-latn-et',
  hag: 'hag-latn-zz',
  hah: 'hah-latn-pg',
  hai: 'hai-latn-ca',
  haj: 'haj-latn-in',
  'haj-beng': 'haj-beng-in',
  hak: 'hak-hans-cn',
  hal: 'hal-latn-vn',
  ham: 'ham-latn-zz',
  han: 'han-latn-tz',
  hao: 'hao-latn-pg',
  hap: 'hap-latn-id',
  haq: 'haq-latn-tz',
  har: 'har-ethi-et',
  'har-arab': 'har-arab-et',
  'har-latn': 'har-latn-et',
  has: 'has-latn-ca',
  hav: 'hav-latn-cd',
  haw: 'haw-latn-us',
  hax: 'hax-latn-ca',
  hay: 'hay-latn-tz',
  haz: 'haz-arab-af',
  hba: 'hba-latn-cd',
  hbb: 'hbb-latn-zz',
  hbn: 'hbn-latn-sd',
  hbo: 'hbo-hebr-il',
  hbu: 'hbu-latn-tl',
  hch: 'hch-latn-mx',
  hdy: 'hdy-ethi-zz',
  he: 'he-hebr-il',
  hed: 'hed-latn-td',
  heg: 'heg-latn-id',
  heh: 'heh-latn-tz',
  hei: 'hei-latn-ca',
  hem: 'hem-latn-cd',
  hgm: 'hgm-latn-na',
  hgw: 'hgw-latn-pg',
  hhi: 'hhi-latn-pg',
  hhr: 'hhr-latn-sn',
  hhy: 'hhy-latn-zz',
  hi: 'hi-deva-in',
  'hi-latn': 'hi-latn-in',
  hia: 'hia-latn-zz',
  hib: 'hib-latn-pe',
  hid: 'hid-latn-us',
  hif: 'hif-latn-fj',
  hig: 'hig-latn-zz',
  hih: 'hih-latn-zz',
  hii: 'hii-takr-in',
  'hii-deva': 'hii-deva-in',
  hij: 'hij-latn-cm',
  hik: 'hik-latn-id',
  hil: 'hil-latn-ph',
  hio: 'hio-latn-bw',
  hir: 'hir-latn-br',
  hit: 'hit-xsux-tr',
  hiw: 'hiw-latn-vu',
  hix: 'hix-latn-br',
  hji: 'hji-latn-id',
  hka: 'hka-latn-tz',
  hke: 'hke-latn-cd',
  hkh: 'hkh-arab-in',
  'hkh-deva': 'hkh-deva-in',
  'hkh-latn': 'hkh-latn-in',
  hkk: 'hkk-latn-pg',
  hla: 'hla-latn-zz',
  hlb: 'hlb-deva-in',
  hld: 'hld-latn-vn',
  hlt: 'hlt-latn-mm',
  hlu: 'hlu-hluw-tr',
  hma: 'hma-latn-cn',
  hmb: 'hmb-latn-ml',
  hmd: 'hmd-plrd-cn',
  hmf: 'hmf-latn-vn',
  hmj: 'hmj-bopo-cn',
  hmm: 'hmm-latn-cn',
  hmn: 'hmn-latn-cn',
  'hmn-bopo': 'hmn-bopo-cn',
  'hmn-hmng': 'hmn-hmng-cn',
  hmp: 'hmp-latn-cn',
  hmq: 'hmq-bopo-cn',
  hmr: 'hmr-latn-in',
  hms: 'hms-latn-cn',
  hmt: 'hmt-latn-zz',
  hmu: 'hmu-latn-id',
  hmv: 'hmv-latn-vn',
  hmw: 'hmw-latn-cn',
  hmy: 'hmy-latn-cn',
  hmz: 'hmz-latn-cn',
  'hmz-plrd': 'hmz-plrd-cn',
  hna: 'hna-latn-cm',
  hnd: 'hnd-arab-pk',
  hne: 'hne-deva-in',
  hng: 'hng-latn-ao',
  hnh: 'hnh-latn-bw',
  hni: 'hni-latn-cn',
  hnj: 'hnj-hmnp-us',
  'hnj-au': 'hnj-laoo-au',
  'hnj-cn': 'hnj-laoo-cn',
  'hnj-fr': 'hnj-laoo-fr',
  'hnj-gf': 'hnj-laoo-gf',
  'hnj-la': 'hnj-laoo-la',
  'hnj-laoo': 'hnj-laoo-la',
  'hnj-mm': 'hnj-laoo-mm',
  'hnj-sr': 'hnj-laoo-sr',
  'hnj-th': 'hnj-laoo-th',
  'hnj-us': 'hnj-hmnp-us',
  'hnj-vn': 'hnj-laoo-vn',
  hnn: 'hnn-latn-ph',
  hno: 'hno-arab-pk',
  hns: 'hns-latn-sr',
  ho: 'ho-latn-pg',
  hoa: 'hoa-latn-sb',
  hob: 'hob-latn-pg',
  hoc: 'hoc-deva-in',
  hod: 'hod-latn-ng',
  hoe: 'hoe-latn-ng',
  hoh: 'hoh-arab-om',
  hoi: 'hoi-latn-us',
  hoj: 'hoj-deva-in',
  hol: 'hol-latn-ao',
  hom: 'hom-latn-ss',
  hoo: 'hoo-latn-cd',
  hop: 'hop-latn-us',
  hor: 'hor-latn-td',
  hot: 'hot-latn-zz',
  hov: 'hov-latn-id',
  how: 'how-hani-cn',
  hoy: 'hoy-deva-in',
  hpo: 'hpo-mymr-mm',
  hr: 'hr-latn-hr',
  hra: 'hra-latn-in',
  hrc: 'hrc-latn-pg',
  hre: 'hre-latn-vn',
  hrk: 'hrk-latn-id',
  hrm: 'hrm-latn-cn',
  'hrm-hmng': 'hrm-hmng-cn',
  hro: 'hro-latn-vn',
  hrp: 'hrp-latn-au',
  hrt: 'hrt-syrc-tr',
  hru: 'hru-latn-in',
  hrw: 'hrw-latn-pg',
  hrx: 'hrx-latn-br',
  hrz: 'hrz-arab-ir',
  hsb: 'hsb-latn-de',
  hsn: 'hsn-hans-cn',
  hss: 'hss-arab-om',
  ht: 'ht-latn-ht',
  hti: 'hti-latn-id',
  hto: 'hto-latn-co',
  hts: 'hts-latn-tz',
  htu: 'htu-latn-id',
  htx: 'htx-xsux-tr',
  hu: 'hu-latn-hu',
  hub: 'hub-latn-pe',
  huc: 'huc-latn-bw',
  hud: 'hud-latn-id',
  hue: 'hue-latn-mx',
  huf: 'huf-latn-pg',
  hug: 'hug-latn-pe',
  huh: 'huh-latn-cl',
  hui: 'hui-latn-zz',
  huk: 'huk-latn-id',
  hul: 'hul-latn-pg',
  hum: 'hum-latn-cd',
  hup: 'hup-latn-us',
  hur: 'hur-latn-ca',
  hus: 'hus-latn-mx',
  hut: 'hut-deva-np',
  'hut-tibt': 'hut-tibt-np',
  huu: 'huu-latn-pe',
  huv: 'huv-latn-mx',
  huw: 'huw-latn-id',
  hux: 'hux-latn-pe',
  huy: 'huy-hebr-il',
  huz: 'huz-cyrl-ru',
  hvc: 'hvc-latn-ht',
  hve: 'hve-latn-mx',
  hvk: 'hvk-latn-nc',
  hvn: 'hvn-latn-id',
  hvv: 'hvv-latn-mx',
  hwa: 'hwa-latn-ci',
  hwc: 'hwc-latn-us',
  hwo: 'hwo-latn-ng',
  hy: 'hy-armn-am',
  hya: 'hya-latn-cm',
  hyw: 'hyw-armn-am',
  hz: 'hz-latn-na',
  ia: 'ia-latn-001',
  iai: 'iai-latn-nc',
  ian: 'ian-latn-zz',
  iar: 'iar-latn-zz',
  iba: 'iba-latn-my',
  ibb: 'ibb-latn-ng',
  ibd: 'ibd-latn-au',
  ibe: 'ibe-latn-ng',
  ibg: 'ibg-latn-ph',
  ibh: 'ibh-latn-vn',
  ibl: 'ibl-latn-ph',
  ibm: 'ibm-latn-ng',
  ibn: 'ibn-latn-ng',
  ibr: 'ibr-latn-ng',
  ibu: 'ibu-latn-id',
  iby: 'iby-latn-zz',
  ica: 'ica-latn-zz',
  ich: 'ich-latn-zz',
  icr: 'icr-latn-co',
  id: 'id-latn-id',
  ida: 'ida-latn-ke',
  idb: 'idb-latn-in',
  idc: 'idc-latn-ng',
  idd: 'idd-latn-zz',
  ide: 'ide-latn-ng',
  idi: 'idi-latn-zz',
  idr: 'idr-latn-ss',
  ids: 'ids-latn-ng',
  idt: 'idt-latn-tl',
  idu: 'idu-latn-zz',
  ie: 'ie-latn-001',
  ifa: 'ifa-latn-ph',
  ifb: 'ifb-latn-ph',
  ife: 'ife-latn-tg',
  iff: 'iff-latn-vu',
  ifk: 'ifk-latn-ph',
  ifm: 'ifm-latn-cg',
  ifu: 'ifu-latn-ph',
  ify: 'ify-latn-ph',
  ig: 'ig-latn-ng',
  igb: 'igb-latn-zz',
  ige: 'ige-latn-zz',
  igg: 'igg-latn-pg',
  igl: 'igl-latn-ng',
  igm: 'igm-latn-pg',
  ign: 'ign-latn-bo',
  igo: 'igo-latn-pg',
  igs: 'igs-latn-001',
  'igs-grek': 'igs-grek-001',
  igw: 'igw-latn-ng',
  ihb: 'ihb-latn-id',
  ihi: 'ihi-latn-ng',
  ihp: 'ihp-latn-id',
  ihw: 'ihw-latn-au',
  ii: 'ii-yiii-cn',
  iin: 'iin-latn-au',
  ijc: 'ijc-latn-ng',
  ije: 'ije-latn-ng',
  ijj: 'ijj-latn-zz',
  ijn: 'ijn-latn-ng',
  ijs: 'ijs-latn-ng',
  ik: 'ik-latn-us',
  iki: 'iki-latn-ng',
  ikk: 'ikk-latn-zz',
  ikl: 'ikl-latn-ng',
  iko: 'iko-latn-ng',
  ikp: 'ikp-latn-ng',
  ikr: 'ikr-latn-au',
  ikt: 'ikt-latn-ca',
  'ikt-cans': 'ikt-cans-ca',
  ikv: 'ikv-latn-ng',
  ikw: 'ikw-latn-zz',
  ikx: 'ikx-latn-zz',
  ikz: 'ikz-latn-tz',
  ila: 'ila-latn-id',
  ilb: 'ilb-latn-zm',
  ilg: 'ilg-latn-au',
  ili: 'ili-latn-cn',
  'ili-arab': 'ili-arab-cn',
  'ili-cyrl': 'ili-cyrl-kz',
  ilk: 'ilk-latn-ph',
  ilm: 'ilm-latn-my',
  ilo: 'ilo-latn-ph',
  ilp: 'ilp-latn-ph',
  ilu: 'ilu-latn-id',
  ilv: 'ilv-latn-ng',
  imi: 'imi-latn-pg',
  iml: 'iml-latn-us',
  imn: 'imn-latn-pg',
  imo: 'imo-latn-zz',
  imr: 'imr-latn-id',
  ims: 'ims-latn-it',
  imt: 'imt-latn-ss',
  imy: 'imy-lyci-tr',
  in: 'in-latn-id',
  inb: 'inb-latn-co',
  ing: 'ing-latn-us',
  inh: 'inh-cyrl-ru',
  inj: 'inj-latn-co',
  inn: 'inn-latn-ph',
  ino: 'ino-latn-pg',
  inp: 'inp-latn-pe',
  int: 'int-mymr-mm',
  io: 'io-latn-001',
  ior: 'ior-ethi-et',
  iou: 'iou-latn-zz',
  iow: 'iow-latn-us',
  ipi: 'ipi-latn-pg',
  ipo: 'ipo-latn-pg',
  iqu: 'iqu-latn-pe',
  iqw: 'iqw-latn-ng',
  ire: 'ire-latn-id',
  irh: 'irh-latn-id',
  iri: 'iri-latn-zz',
  irk: 'irk-latn-tz',
  irn: 'irn-latn-br',
  iru: 'iru-taml-in',
  'iru-mlym': 'iru-mlym-in',
  irx: 'irx-latn-id',
  iry: 'iry-latn-ph',
  is: 'is-latn-is',
  isa: 'isa-latn-pg',
  isc: 'isc-latn-pe',
  isd: 'isd-latn-ph',
  ish: 'ish-latn-ng',
  isi: 'isi-latn-ng',
  isk: 'isk-arab-af',
  'isk-cyrl': 'isk-cyrl-tj',
  ism: 'ism-latn-id',
  isn: 'isn-latn-tz',
  iso: 'iso-latn-ng',
  ist: 'ist-latn-hr',
  isu: 'isu-latn-cm',
  it: 'it-latn-it',
  itb: 'itb-latn-ph',
  itd: 'itd-latn-id',
  ite: 'ite-latn-bo',
  iti: 'iti-latn-ph',
  itk: 'itk-hebr-it',
  itl: 'itl-cyrl-ru',
  itm: 'itm-latn-ng',
  ito: 'ito-latn-bo',
  itr: 'itr-latn-pg',
  its: 'its-latn-ng',
  itt: 'itt-latn-ph',
  itv: 'itv-latn-ph',
  itw: 'itw-latn-ng',
  itx: 'itx-latn-id',
  ity: 'ity-latn-ph',
  itz: 'itz-latn-gt',
  iu: 'iu-cans-ca',
  ium: 'ium-latn-cn',
  'ium-hani': 'ium-hani-cn',
  'ium-laoo': 'ium-laoo-la',
  'ium-thai': 'ium-thai-th',
  ivb: 'ivb-latn-ph',
  ivv: 'ivv-latn-ph',
  iw: 'iw-hebr-il',
  iwk: 'iwk-latn-ph',
  iwm: 'iwm-latn-zz',
  iwo: 'iwo-latn-id',
  iws: 'iws-latn-zz',
  ixc: 'ixc-latn-mx',
  ixl: 'ixl-latn-gt',
  iya: 'iya-latn-ng',
  iyo: 'iyo-latn-cm',
  iyx: 'iyx-latn-cg',
  izh: 'izh-latn-ru',
  izi: 'izi-latn-zz',
  izr: 'izr-latn-ng',
  izz: 'izz-latn-ng',
  ja: 'ja-jpan-jp',
  jaa: 'jaa-latn-br',
  jab: 'jab-latn-zz',
  jac: 'jac-latn-gt',
  jad: 'jad-arab-gn',
  jae: 'jae-latn-pg',
  jaf: 'jaf-latn-ng',
  jah: 'jah-latn-my',
  jaj: 'jaj-latn-sb',
  jak: 'jak-latn-my',
  jal: 'jal-latn-id',
  jam: 'jam-latn-jm',
  jan: 'jan-latn-au',
  jao: 'jao-latn-au',
  jaq: 'jaq-latn-id',
  jar: 'jar-latn-zz',
  jas: 'jas-latn-nc',
  jat: 'jat-arab-af',
  jau: 'jau-latn-id',
  jax: 'jax-latn-id',
  jay: 'jay-latn-au',
  jaz: 'jaz-latn-nc',
  jbe: 'jbe-hebr-il',
  jbi: 'jbi-latn-au',
  jbj: 'jbj-latn-id',
  jbk: 'jbk-latn-pg',
  jbm: 'jbm-latn-ng',
  jbn: 'jbn-arab-ly',
  jbo: 'jbo-latn-001',
  jbr: 'jbr-latn-id',
  jbt: 'jbt-latn-br',
  jbu: 'jbu-latn-zz',
  jbw: 'jbw-latn-au',
  jct: 'jct-cyrl-ua',
  'jct-latn': 'jct-latn-ua',
  jda: 'jda-tibt-in',
  jdg: 'jdg-arab-pk',
  jdt: 'jdt-cyrl-ru',
  'jdt-hebr': 'jdt-hebr-ru',
  'jdt-latn': 'jdt-latn-az',
  jeb: 'jeb-latn-pe',
  jee: 'jee-deva-np',
  jeh: 'jeh-latn-vn',
  'jeh-laoo': 'jeh-laoo-la',
  jei: 'jei-latn-id',
  jek: 'jek-latn-ci',
  jel: 'jel-latn-id',
  jen: 'jen-latn-zz',
  jer: 'jer-latn-ng',
  jet: 'jet-latn-pg',
  jeu: 'jeu-latn-td',
  jgb: 'jgb-latn-cd',
  jge: 'jge-geor-ge',
  'jge-hebr': 'jge-hebr-il',
  jgk: 'jgk-latn-zz',
  jgo: 'jgo-latn-cm',
  jhi: 'jhi-latn-my',
  ji: 'ji-hebr-ua',
  jia: 'jia-latn-cm',
  jib: 'jib-latn-zz',
  jic: 'jic-latn-hn',
  jid: 'jid-latn-ng',
  jie: 'jie-latn-ng',
  jig: 'jig-latn-au',
  jil: 'jil-latn-pg',
  jim: 'jim-latn-cm',
  jit: 'jit-latn-tz',
  jiu: 'jiu-latn-cn',
  jiv: 'jiv-latn-ec',
  jiy: 'jiy-latn-cn',
  jje: 'jje-hang-kr',
  jjr: 'jjr-latn-ng',
  jka: 'jka-latn-id',
  jkm: 'jkm-mymr-mm',
  'jkm-brai': 'jkm-brai-mm',
  'jkm-latn': 'jkm-latn-mm',
  jko: 'jko-latn-pg',
  jku: 'jku-latn-ng',
  jle: 'jle-latn-sd',
  jma: 'jma-latn-pg',
  jmb: 'jmb-latn-ng',
  jmc: 'jmc-latn-tz',
  jmd: 'jmd-latn-id',
  jmi: 'jmi-latn-ng',
  jml: 'jml-deva-np',
  jmn: 'jmn-latn-mm',
  jmr: 'jmr-latn-gh',
  jms: 'jms-latn-ng',
  jmw: 'jmw-latn-pg',
  jmx: 'jmx-latn-mx',
  jna: 'jna-takr-in',
  jnd: 'jnd-arab-pk',
  jng: 'jng-latn-au',
  jni: 'jni-latn-ng',
  jnj: 'jnj-latn-et',
  'jnj-ethi': 'jnj-ethi-et',
  jnl: 'jnl-deva-in',
  jns: 'jns-deva-in',
  'jns-latn': 'jns-latn-in',
  'jns-takr': 'jns-takr-in',
  job: 'job-latn-cd',
  jod: 'jod-latn-ci',
  jog: 'jog-arab-pk',
  jor: 'jor-latn-bo',
  jow: 'jow-latn-ml',
  jpa: 'jpa-hebr-ps',
  jpr: 'jpr-hebr-il',
  jqr: 'jqr-latn-pe',
  jra: 'jra-latn-zz',
  jrr: 'jrr-latn-ng',
  jrt: 'jrt-latn-ng',
  jru: 'jru-latn-ve',
  jua: 'jua-latn-br',
  jub: 'jub-latn-ng',
  jud: 'jud-latn-ci',
  juh: 'juh-latn-ng',
  jui: 'jui-latn-au',
  juk: 'juk-latn-ng',
  jul: 'jul-deva-np',
  jum: 'jum-latn-sd',
  jun: 'jun-orya-in',
  juo: 'juo-latn-ng',
  jup: 'jup-latn-br',
  jur: 'jur-latn-br',
  jut: 'jut-latn-dk',
  juu: 'juu-latn-ng',
  juw: 'juw-latn-ng',
  juy: 'juy-orya-in',
  jv: 'jv-latn-id',
  jvd: 'jvd-latn-id',
  jvn: 'jvn-latn-sr',
  jw: 'jw-latn-id',
  jwi: 'jwi-latn-gh',
  jya: 'jya-tibt-cn',
  jye: 'jye-hebr-il',
  jyy: 'jyy-latn-td',
  ka: 'ka-geor-ge',
  kaa: 'kaa-cyrl-uz',
  kab: 'kab-latn-dz',
  kac: 'kac-latn-mm',
  kad: 'kad-latn-zz',
  kag: 'kag-latn-my',
  kah: 'kah-latn-cf',
  kai: 'kai-latn-zz',
  kaj: 'kaj-latn-ng',
  kak: 'kak-latn-ph',
  kam: 'kam-latn-ke',
  kao: 'kao-latn-ml',
  kap: 'kap-cyrl-ru',
  kaq: 'kaq-latn-pe',
  kav: 'kav-latn-br',
  kaw: 'kaw-kawi-id',
  kax: 'kax-latn-id',
  kay: 'kay-latn-br',
  kba: 'kba-latn-au',
  kbb: 'kbb-latn-br',
  kbc: 'kbc-latn-br',
  kbd: 'kbd-cyrl-ru',
  kbe: 'kbe-latn-au',
  kbh: 'kbh-latn-co',
  kbi: 'kbi-latn-id',
  kbj: 'kbj-latn-cd',
  kbk: 'kbk-latn-pg',
  kbl: 'kbl-latn-td',
  kbm: 'kbm-latn-zz',
  kbn: 'kbn-latn-cf',
  kbo: 'kbo-latn-ss',
  kbp: 'kbp-latn-zz',
  kbq: 'kbq-latn-zz',
  kbr: 'kbr-latn-et',
  'kbr-ethi': 'kbr-ethi-et',
  kbs: 'kbs-latn-ga',
  kbt: 'kbt-latn-pg',
  kbu: 'kbu-arab-pk',
  kbv: 'kbv-latn-id',
  kbw: 'kbw-latn-pg',
  kbx: 'kbx-latn-zz',
  kby: 'kby-arab-ne',
  kbz: 'kbz-latn-ng',
  kca: 'kca-cyrl-ru',
  kcb: 'kcb-latn-pg',
  kcc: 'kcc-latn-ng',
  kcd: 'kcd-latn-id',
  kce: 'kce-latn-ng',
  kcf: 'kcf-latn-ng',
  kcg: 'kcg-latn-ng',
  kch: 'kch-latn-ng',
  kci: 'kci-latn-ng',
  kcj: 'kcj-latn-gw',
  kck: 'kck-latn-zw',
  kcl: 'kcl-latn-zz',
  kcm: 'kcm-latn-cf',
  kcn: 'kcn-latn-ug',
  kco: 'kco-latn-pg',
  kcp: 'kcp-latn-sd',
  kcq: 'kcq-latn-ng',
  kcs: 'kcs-latn-ng',
  kct: 'kct-latn-zz',
  kcu: 'kcu-latn-tz',
  kcv: 'kcv-latn-cd',
  kcw: 'kcw-latn-cd',
  kcz: 'kcz-latn-tz',
  kda: 'kda-latn-au',
  kdc: 'kdc-latn-tz',
  kdd: 'kdd-latn-au',
  kde: 'kde-latn-tz',
  kdf: 'kdf-latn-pg',
  kdg: 'kdg-latn-cd',
  kdh: 'kdh-latn-tg',
  kdi: 'kdi-latn-ug',
  kdj: 'kdj-latn-ug',
  kdk: 'kdk-latn-nc',
  kdl: 'kdl-latn-zz',
  kdm: 'kdm-latn-ng',
  kdn: 'kdn-latn-zw',
  kdp: 'kdp-latn-ng',
  kdq: 'kdq-beng-in',
  kdr: 'kdr-latn-lt',
  'kdr-cyrl': 'kdr-cyrl-ua',
  kdt: 'kdt-thai-th',
  kdw: 'kdw-latn-id',
  kdx: 'kdx-latn-ng',
  kdy: 'kdy-latn-id',
  kdz: 'kdz-latn-cm',
  kea: 'kea-latn-cv',
  keb: 'keb-latn-ga',
  kec: 'kec-latn-sd',
  ked: 'ked-latn-tz',
  kee: 'kee-latn-us',
  kef: 'kef-latn-tg',
  keg: 'keg-latn-sd',
  keh: 'keh-latn-pg',
  kei: 'kei-latn-id',
  kek: 'kek-latn-gt',
  kel: 'kel-latn-cd',
  kem: 'kem-latn-tl',
  ken: 'ken-latn-cm',
  keo: 'keo-latn-ug',
  ker: 'ker-latn-td',
  kes: 'kes-latn-ng',
  ket: 'ket-cyrl-ru',
  keu: 'keu-latn-tg',
  kew: 'kew-latn-pg',
  kex: 'kex-deva-in',
  'kex-gujr': 'kex-gujr-in',
  key: 'key-telu-in',
  kez: 'kez-latn-zz',
  kfa: 'kfa-knda-in',
  kfb: 'kfb-deva-in',
  kfc: 'kfc-telu-in',
  kfd: 'kfd-knda-in',
  kfe: 'kfe-taml-in',
  kff: 'kff-latn-in',
  'kff-deva': 'kff-deva-in',
  'kff-orya': 'kff-orya-in',
  'kff-telu': 'kff-telu-in',
  kfh: 'kfh-mlym-in',
  kfi: 'kfi-taml-in',
  'kfi-knda': 'kfi-knda-in',
  kfk: 'kfk-deva-in',
  'kfk-takr': 'kfk-takr-in',
  kfl: 'kfl-latn-cm',
  kfm: 'kfm-arab-ir',
  kfn: 'kfn-latn-cm',
  kfo: 'kfo-latn-ci',
  kfp: 'kfp-deva-in',
  kfq: 'kfq-deva-in',
  kfr: 'kfr-deva-in',
  kfs: 'kfs-deva-in',
  kfv: 'kfv-latn-in',
  kfw: 'kfw-latn-in',
  kfx: 'kfx-deva-in',
  'kfx-takr': 'kfx-takr-in',
  kfy: 'kfy-deva-in',
  kfz: 'kfz-latn-bf',
  kg: 'kg-latn-cd',
  kga: 'kga-latn-ci',
  kgb: 'kgb-latn-id',
  kge: 'kge-latn-id',
  kgf: 'kgf-latn-zz',
  kgj: 'kgj-deva-np',
  kgk: 'kgk-latn-br',
  kgl: 'kgl-latn-au',
  kgm: 'kgm-latn-br',
  kgo: 'kgo-latn-sd',
  kgp: 'kgp-latn-br',
  kgq: 'kgq-latn-id',
  kgr: 'kgr-latn-id',
  kgs: 'kgs-latn-au',
  kgt: 'kgt-latn-ng',
  kgu: 'kgu-latn-pg',
  kgv: 'kgv-latn-id',
  kgw: 'kgw-latn-id',
  kgx: 'kgx-latn-id',
  kgy: 'kgy-deva-np',
  kha: 'kha-latn-in',
  khb: 'khb-talu-cn',
  khc: 'khc-latn-id',
  khd: 'khd-latn-id',
  khe: 'khe-latn-id',
  khf: 'khf-thai-la',
  khg: 'khg-tibt-cn',
  khh: 'khh-latn-id',
  khj: 'khj-latn-ng',
  khl: 'khl-latn-pg',
  khn: 'khn-deva-in',
  khp: 'khp-latn-id',
  khq: 'khq-latn-ml',
  khr: 'khr-latn-in',
  'khr-deva': 'khr-deva-in',
  khs: 'khs-latn-zz',
  kht: 'kht-mymr-in',
  khu: 'khu-latn-ao',
  khv: 'khv-cyrl-ru',
  khw: 'khw-arab-pk',
  khx: 'khx-latn-cd',
  khy: 'khy-latn-cd',
  khz: 'khz-latn-zz',
  ki: 'ki-latn-ke',
  kia: 'kia-latn-td',
  kib: 'kib-latn-sd',
  kic: 'kic-latn-us',
  kid: 'kid-latn-cm',
  kie: 'kie-latn-td',
  kif: 'kif-deva-np',
  kig: 'kig-latn-id',
  kih: 'kih-latn-pg',
  kij: 'kij-latn-zz',
  kil: 'kil-latn-ng',
  kim: 'kim-cyrl-ru',
  kio: 'kio-latn-us',
  kip: 'kip-deva-np',
  kiq: 'kiq-latn-id',
  kis: 'kis-latn-pg',
  kit: 'kit-latn-pg',
  kiu: 'kiu-latn-tr',
  kiv: 'kiv-latn-tz',
  kiw: 'kiw-latn-zz',
  kix: 'kix-latn-in',
  kiy: 'kiy-latn-id',
  kiz: 'kiz-latn-tz',
  kj: 'kj-latn-na',
  kja: 'kja-latn-id',
  kjb: 'kjb-latn-gt',
  kjc: 'kjc-latn-id',
  kjd: 'kjd-latn-zz',
  kje: 'kje-latn-id',
  kjg: 'kjg-laoo-la',
  kjh: 'kjh-cyrl-ru',
  kji: 'kji-latn-sb',
  kjj: 'kjj-latn-az',
  kjk: 'kjk-latn-id',
  kjl: 'kjl-deva-np',
  kjm: 'kjm-latn-vn',
  kjn: 'kjn-latn-au',
  kjo: 'kjo-deva-in',
  kjp: 'kjp-mymr-mm',
  'kjp-thai': 'kjp-thai-th',
  kjq: 'kjq-latn-us',
  kjr: 'kjr-latn-id',
  kjs: 'kjs-latn-zz',
  kjt: 'kjt-thai-th',
  kju: 'kju-latn-us',
  kjx: 'kjx-latn-pg',
  kjy: 'kjy-latn-zz',
  kk: 'kk-cyrl-kz',
  'kk-af': 'kk-arab-af',
  'kk-arab': 'kk-arab-cn',
  'kk-cn': 'kk-arab-cn',
  'kk-ir': 'kk-arab-ir',
  'kk-mn': 'kk-arab-mn',
  kka: 'kka-latn-ng',
  kkb: 'kkb-latn-id',
  kkc: 'kkc-latn-zz',
  kkd: 'kkd-latn-ng',
  kke: 'kke-latn-gn',
  'kke-arab': 'kke-arab-gn',
  kkf: 'kkf-tibt-in',
  kkg: 'kkg-latn-ph',
  kkh: 'kkh-lana-mm',
  kki: 'kki-latn-tz',
  kkj: 'kkj-latn-cm',
  kkk: 'kkk-latn-sb',
  kkl: 'kkl-latn-id',
  kkm: 'kkm-latn-ng',
  kko: 'kko-latn-sd',
  kkp: 'kkp-latn-au',
  kkq: 'kkq-latn-cd',
  kkr: 'kkr-latn-ng',
  kks: 'kks-latn-ng',
  kkt: 'kkt-deva-np',
  kku: 'kku-latn-ng',
  kkv: 'kkv-latn-id',
  kkw: 'kkw-latn-cg',
  kkx: 'kkx-latn-id',
  kky: 'kky-latn-au',
  kkz: 'kkz-latn-ca',
  kl: 'kl-latn-gl',
  kla: 'kla-latn-us',
  klb: 'klb-latn-mx',
  klc: 'klc-latn-cm',
  kld: 'kld-latn-au',
  kle: 'kle-deva-np',
  klf: 'klf-latn-td',
  klg: 'klg-latn-ph',
  klh: 'klh-latn-pg',
  kli: 'kli-latn-id',
  klj: 'klj-arab-ir',
  klk: 'klk-latn-ng',
  kll: 'kll-latn-ph',
  klm: 'klm-latn-pg',
  kln: 'kln-latn-ke',
  klo: 'klo-latn-ng',
  klp: 'klp-latn-pg',
  klq: 'klq-latn-zz',
  klr: 'klr-deva-np',
  kls: 'kls-latn-pk',
  'kls-arab': 'kls-arab-pk',
  klt: 'klt-latn-zz',
  klu: 'klu-latn-lr',
  klv: 'klv-latn-vu',
  klw: 'klw-latn-id',
  klx: 'klx-latn-zz',
  kly: 'kly-latn-id',
  klz: 'klz-latn-id',
  km: 'km-khmr-kh',
  kma: 'kma-latn-gh',
  kmb: 'kmb-latn-ao',
  kmc: 'kmc-latn-cn',
  'kmc-hani': 'kmc-hani-cn',
  kmd: 'kmd-latn-ph',
  kme: 'kme-latn-cm',
  kmf: 'kmf-latn-pg',
  kmg: 'kmg-latn-pg',
  kmh: 'kmh-latn-zz',
  kmi: 'kmi-latn-ng',
  kmj: 'kmj-deva-in',
  kmk: 'kmk-latn-ph',
  kml: 'kml-latn-ph',
  kmm: 'kmm-latn-in',
  kmn: 'kmn-latn-pg',
  kmo: 'kmo-latn-zz',
  kmp: 'kmp-latn-cm',
  kmq: 'kmq-latn-et',
  kms: 'kms-latn-zz',
  kmt: 'kmt-latn-id',
  kmu: 'kmu-latn-zz',
  kmv: 'kmv-latn-br',
  kmw: 'kmw-latn-zz',
  kmx: 'kmx-latn-pg',
  kmy: 'kmy-latn-ng',
  kmz: 'kmz-arab-ir',
  kn: 'kn-knda-in',
  kna: 'kna-latn-ng',
  knb: 'knb-latn-ph',
  knd: 'knd-latn-id',
  kne: 'kne-latn-ph',
  knf: 'knf-latn-gw',
  kni: 'kni-latn-ng',
  knj: 'knj-latn-gt',
  knk: 'knk-latn-sl',
  'knk-arab': 'knk-arab-sl',
  knl: 'knl-latn-id',
  knm: 'knm-latn-br',
  kno: 'kno-latn-sl',
  knp: 'knp-latn-zz',
  knq: 'knq-latn-my',
  knr: 'knr-latn-pg',
  kns: 'kns-latn-my',
  'kns-thai': 'kns-thai-th',
  knt: 'knt-latn-br',
  knu: 'knu-latn-gn',
  knv: 'knv-latn-pg',
  knw: 'knw-latn-na',
  knx: 'knx-latn-id',
  kny: 'kny-latn-cd',
  knz: 'knz-latn-bf',
  ko: 'ko-kore-kr',
  koa: 'koa-latn-pg',
  koc: 'koc-latn-ng',
  kod: 'kod-latn-id',
  koe: 'koe-latn-ss',
  kof: 'kof-latn-ng',
  kog: 'kog-latn-co',
  koh: 'koh-latn-cg',
  koi: 'koi-cyrl-ru',
  kok: 'kok-deva-in',
  kol: 'kol-latn-zz',
  koo: 'koo-latn-ug',
  kop: 'kop-latn-pg',
  koq: 'koq-latn-ga',
  kos: 'kos-latn-fm',
  kot: 'kot-latn-cm',
  kou: 'kou-latn-td',
  kov: 'kov-latn-ng',
  kow: 'kow-latn-ng',
  koy: 'koy-latn-us',
  koz: 'koz-latn-zz',
  kpa: 'kpa-latn-ng',
  kpc: 'kpc-latn-co',
  kpd: 'kpd-latn-id',
  kpe: 'kpe-latn-lr',
  kpf: 'kpf-latn-zz',
  kpg: 'kpg-latn-fm',
  kph: 'kph-latn-gh',
  kpi: 'kpi-latn-id',
  kpj: 'kpj-latn-br',
  kpk: 'kpk-latn-ng',
  kpl: 'kpl-latn-cd',
  kpm: 'kpm-latn-vn',
  kpn: 'kpn-latn-br',
  kpo: 'kpo-latn-zz',
  kpq: 'kpq-latn-id',
  kpr: 'kpr-latn-zz',
  kps: 'kps-latn-id',
  kpt: 'kpt-cyrl-ru',
  kpu: 'kpu-latn-id',
  kpw: 'kpw-latn-pg',
  kpx: 'kpx-latn-zz',
  kpy: 'kpy-cyrl-ru',
  kpz: 'kpz-latn-ug',
  kqa: 'kqa-latn-pg',
  kqb: 'kqb-latn-zz',
  kqc: 'kqc-latn-pg',
  kqd: 'kqd-syrc-iq',
  kqe: 'kqe-latn-ph',
  kqf: 'kqf-latn-zz',
  kqg: 'kqg-latn-bf',
  kqh: 'kqh-latn-tz',
  kqi: 'kqi-latn-pg',
  kqj: 'kqj-latn-pg',
  kqk: 'kqk-latn-bj',
  kql: 'kql-latn-pg',
  kqm: 'kqm-latn-ci',
  kqn: 'kqn-latn-zm',
  kqo: 'kqo-latn-lr',
  kqp: 'kqp-latn-td',
  kqq: 'kqq-latn-br',
  kqr: 'kqr-latn-my',
  kqs: 'kqs-latn-zz',
  kqt: 'kqt-latn-my',
  kqu: 'kqu-latn-za',
  kqv: 'kqv-latn-id',
  kqw: 'kqw-latn-pg',
  kqx: 'kqx-latn-cm',
  kqy: 'kqy-ethi-zz',
  kqz: 'kqz-latn-za',
  kr: 'kr-latn-zz',
  kra: 'kra-deva-np',
  krb: 'krb-latn-us',
  krc: 'krc-cyrl-ru',
  krd: 'krd-latn-tl',
  kre: 'kre-latn-br',
  krf: 'krf-latn-vu',
  krh: 'krh-latn-ng',
  kri: 'kri-latn-sl',
  krj: 'krj-latn-ph',
  krk: 'krk-cyrl-ru',
  krl: 'krl-latn-ru',
  krn: 'krn-latn-lr',
  krp: 'krp-latn-ng',
  krr: 'krr-khmr-kh',
  krs: 'krs-latn-zz',
  krt: 'krt-latn-ne',
  kru: 'kru-deva-in',
  krv: 'krv-khmr-kh',
  krw: 'krw-latn-lr',
  krx: 'krx-latn-sn',
  kry: 'kry-latn-az',
  krz: 'krz-latn-id',
  ks: 'ks-arab-in',
  ksa: 'ksa-latn-ng',
  ksb: 'ksb-latn-tz',
  ksc: 'ksc-latn-ph',
  ksd: 'ksd-latn-zz',
  kse: 'kse-latn-pg',
  ksf: 'ksf-latn-cm',
  ksg: 'ksg-latn-sb',
  ksh: 'ksh-latn-de',
  ksi: 'ksi-latn-pg',
  ksj: 'ksj-latn-zz',
  ksk: 'ksk-latn-us',
  ksl: 'ksl-latn-pg',
  ksm: 'ksm-latn-ng',
  ksn: 'ksn-latn-ph',
  kso: 'kso-latn-ng',
  ksp: 'ksp-latn-cf',
  ksq: 'ksq-latn-ng',
  ksr: 'ksr-latn-zz',
  kss: 'kss-latn-lr',
  kst: 'kst-latn-bf',
  ksu: 'ksu-mymr-in',
  ksv: 'ksv-latn-cd',
  ksw: 'ksw-mymr-mm',
  'ksw-latn': 'ksw-latn-mm',
  ksx: 'ksx-latn-id',
  ksz: 'ksz-deva-in',
  kta: 'kta-latn-vn',
  ktb: 'ktb-ethi-zz',
  ktc: 'ktc-latn-ng',
  ktd: 'ktd-latn-au',
  ktf: 'ktf-latn-cd',
  ktg: 'ktg-latn-au',
  kth: 'kth-latn-td',
  kti: 'kti-latn-id',
  ktj: 'ktj-latn-ci',
  ktk: 'ktk-latn-pg',
  ktl: 'ktl-arab-ir',
  ktm: 'ktm-latn-zz',
  ktn: 'ktn-latn-br',
  kto: 'kto-latn-zz',
  ktp: 'ktp-plrd-cn',
  ktq: 'ktq-latn-ph',
  ktr: 'ktr-latn-my',
  kts: 'kts-latn-id',
  ktt: 'ktt-latn-id',
  ktu: 'ktu-latn-cd',
  ktv: 'ktv-latn-vn',
  ktw: 'ktw-latn-us',
  ktx: 'ktx-latn-br',
  kty: 'kty-latn-cd',
  ktz: 'ktz-latn-na',
  ku: 'ku-latn-tr',
  'ku-arab': 'ku-arab-iq',
  'ku-lb': 'ku-arab-lb',
  'ku-yezi': 'ku-yezi-ge',
  kub: 'kub-latn-zz',
  kuc: 'kuc-latn-id',
  kud: 'kud-latn-zz',
  kue: 'kue-latn-zz',
  kuf: 'kuf-laoo-la',
  kug: 'kug-latn-ng',
  kuh: 'kuh-latn-ng',
  kui: 'kui-latn-br',
  kuj: 'kuj-latn-zz',
  kuk: 'kuk-latn-id',
  kul: 'kul-latn-ng',
  kum: 'kum-cyrl-ru',
  kun: 'kun-latn-zz',
  kuo: 'kuo-latn-pg',
  kup: 'kup-latn-zz',
  kuq: 'kuq-latn-br',
  kus: 'kus-latn-zz',
  kut: 'kut-latn-ca',
  kuu: 'kuu-latn-us',
  kuv: 'kuv-latn-id',
  kuw: 'kuw-latn-cf',
  kux: 'kux-latn-au',
  kuy: 'kuy-latn-au',
  kuz: 'kuz-latn-cl',
  kv: 'kv-cyrl-ru',
  kva: 'kva-cyrl-ru',
  kvb: 'kvb-latn-id',
  kvc: 'kvc-latn-pg',
  kvd: 'kvd-latn-id',
  kve: 'kve-latn-my',
  kvf: 'kvf-latn-td',
  kvg: 'kvg-latn-zz',
  kvh: 'kvh-latn-id',
  kvi: 'kvi-latn-td',
  kvj: 'kvj-latn-cm',
  kvl: 'kvl-latn-mm',
  kvm: 'kvm-latn-cm',
  kvn: 'kvn-latn-co',
  kvo: 'kvo-latn-id',
  kvp: 'kvp-latn-id',
  kvq: 'kvq-mymr-mm',
  'kvq-latn': 'kvq-latn-mm',
  kvr: 'kvr-latn-id',
  kvt: 'kvt-mymr-mm',
  kvv: 'kvv-latn-id',
  kvw: 'kvw-latn-id',
  kvx: 'kvx-arab-pk',
  kvy: 'kvy-kali-mm',
  kvz: 'kvz-latn-id',
  kw: 'kw-latn-gb',
  kwa: 'kwa-latn-br',
  kwb: 'kwb-latn-ng',
  kwc: 'kwc-latn-cg',
  kwd: 'kwd-latn-sb',
  kwe: 'kwe-latn-id',
  kwf: 'kwf-latn-sb',
  kwg: 'kwg-latn-td',
  kwh: 'kwh-latn-id',
  kwi: 'kwi-latn-co',
  kwj: 'kwj-latn-zz',
  kwk: 'kwk-latn-ca',
  kwl: 'kwl-latn-ng',
  kwm: 'kwm-latn-na',
  kwn: 'kwn-latn-na',
  kwo: 'kwo-latn-zz',
  kwp: 'kwp-latn-ci',
  kwq: 'kwq-latn-zz',
  kwr: 'kwr-latn-id',
  kws: 'kws-latn-cd',
  kwt: 'kwt-latn-id',
  kwu: 'kwu-latn-cm',
  kwv: 'kwv-latn-td',
  kww: 'kww-latn-sr',
  kwy: 'kwy-latn-cd',
  kwz: 'kwz-latn-ao',
  kxa: 'kxa-latn-zz',
  kxb: 'kxb-latn-ci',
  kxc: 'kxc-ethi-zz',
  kxd: 'kxd-latn-bn',
  'kxd-arab': 'kxd-arab-bn',
  kxe: 'kxe-latn-zz',
  kxf: 'kxf-mymr-mm',
  'kxf-latn': 'kxf-latn-mm',
  kxi: 'kxi-latn-my',
  kxj: 'kxj-latn-td',
  kxk: 'kxk-mymr-mm',
  kxl: 'kxl-deva-in',
  kxm: 'kxm-thai-th',
  kxn: 'kxn-latn-my',
  kxo: 'kxo-latn-br',
  kxp: 'kxp-arab-pk',
  kxq: 'kxq-latn-id',
  kxr: 'kxr-latn-pg',
  kxt: 'kxt-latn-pg',
  kxv: 'kxv-orya-in',
  'kxv-latn': 'kxv-latn-in',
  'kxv-telu': 'kxv-telu-in',
  kxw: 'kxw-latn-zz',
  kxx: 'kxx-latn-cg',
  kxy: 'kxy-latn-vn',
  kxz: 'kxz-latn-zz',
  ky: 'ky-cyrl-kg',
  'ky-arab': 'ky-arab-cn',
  'ky-cn': 'ky-arab-cn',
  'ky-latn': 'ky-latn-tr',
  'ky-tr': 'ky-latn-tr',
  kya: 'kya-latn-tz',
  kyb: 'kyb-latn-ph',
  kyc: 'kyc-latn-pg',
  kyd: 'kyd-latn-id',
  kye: 'kye-latn-zz',
  kyf: 'kyf-latn-ci',
  kyg: 'kyg-latn-pg',
  kyh: 'kyh-latn-us',
  kyi: 'kyi-latn-my',
  kyj: 'kyj-latn-ph',
  kyk: 'kyk-latn-ph',
  kyl: 'kyl-latn-us',
  kym: 'kym-latn-cf',
  kyn: 'kyn-latn-ph',
  kyo: 'kyo-latn-id',
  kyq: 'kyq-latn-td',
  kyr: 'kyr-latn-br',
  kys: 'kys-latn-my',
  kyt: 'kyt-latn-id',
  kyu: 'kyu-kali-mm',
  'kyu-latn': 'kyu-latn-mm',
  'kyu-mymr': 'kyu-mymr-mm',
  kyv: 'kyv-deva-np',
  kyw: 'kyw-deva-in',
  'kyw-beng': 'kyw-beng-in',
  'kyw-orya': 'kyw-orya-in',
  kyx: 'kyx-latn-zz',
  kyy: 'kyy-latn-pg',
  kyz: 'kyz-latn-br',
  kza: 'kza-latn-bf',
  kzb: 'kzb-latn-id',
  kzc: 'kzc-latn-ci',
  kzd: 'kzd-latn-id',
  kze: 'kze-latn-pg',
  kzf: 'kzf-latn-id',
  kzh: 'kzh-arab-zz',
  kzi: 'kzi-latn-my',
  kzj: 'kzj-latn-my',
  kzk: 'kzk-latn-sb',
  kzl: 'kzl-latn-id',
  kzm: 'kzm-latn-id',
  kzn: 'kzn-latn-mw',
  kzo: 'kzo-latn-ga',
  kzp: 'kzp-latn-id',
  kzr: 'kzr-latn-zz',
  kzs: 'kzs-latn-my',
  kzt: 'kzt-latn-my',
  kzu: 'kzu-latn-id',
  kzv: 'kzv-latn-id',
  kzw: 'kzw-latn-br',
  kzx: 'kzx-latn-id',
  kzy: 'kzy-latn-cd',
  kzz: 'kzz-latn-id',
  la: 'la-latn-va',
  laa: 'laa-latn-ph',
  lab: 'lab-lina-gr',
  lac: 'lac-latn-mx',
  lad: 'lad-hebr-il',
  lae: 'lae-deva-in',
  'lae-tibt': 'lae-tibt-in',
  lag: 'lag-latn-tz',
  lah: 'lah-arab-pk',
  lai: 'lai-latn-mw',
  laj: 'laj-latn-ug',
  lal: 'lal-latn-cd',
  lam: 'lam-latn-zm',
  lan: 'lan-latn-ng',
  lap: 'lap-latn-td',
  laq: 'laq-latn-vn',
  lar: 'lar-latn-gh',
  las: 'las-latn-zz',
  lau: 'lau-latn-id',
  law: 'law-latn-id',
  lax: 'lax-latn-in',
  'lax-beng': 'lax-beng-in',
  laz: 'laz-latn-pg',
  lb: 'lb-latn-lu',
  lbb: 'lbb-latn-pg',
  lbc: 'lbc-lisu-cn',
  lbe: 'lbe-cyrl-ru',
  lbf: 'lbf-deva-in',
  'lbf-tibt': 'lbf-tibt-cn',
  lbi: 'lbi-latn-cm',
  lbj: 'lbj-tibt-in',
  'lbj-arab': 'lbj-arab-in',
  lbl: 'lbl-latn-ph',
  lbm: 'lbm-deva-in',
  lbn: 'lbn-latn-la',
  'lbn-laoo': 'lbn-laoo-la',
  lbo: 'lbo-laoo-la',
  'lbo-latn': 'lbo-latn-us',
  lbq: 'lbq-latn-pg',
  lbr: 'lbr-deva-np',
  lbt: 'lbt-latn-vn',
  lbu: 'lbu-latn-zz',
  lbv: 'lbv-latn-pg',
  lbw: 'lbw-latn-id',
  lbx: 'lbx-latn-id',
  lby: 'lby-latn-au',
  lbz: 'lbz-latn-au',
  lcc: 'lcc-latn-id',
  lcd: 'lcd-latn-id',
  lce: 'lce-latn-id',
  lcf: 'lcf-latn-id',
  lch: 'lch-latn-ao',
  lcl: 'lcl-latn-id',
  lcm: 'lcm-latn-zz',
  lcp: 'lcp-thai-cn',
  lcq: 'lcq-latn-id',
  lcs: 'lcs-latn-id',
  lda: 'lda-latn-ci',
  ldb: 'ldb-latn-zz',
  ldd: 'ldd-latn-ng',
  ldg: 'ldg-latn-ng',
  ldh: 'ldh-latn-ng',
  ldi: 'ldi-latn-cg',
  ldj: 'ldj-latn-ng',
  ldk: 'ldk-latn-ng',
  ldl: 'ldl-latn-ng',
  ldm: 'ldm-latn-gn',
  ldn: 'ldn-latn-001',
  ldo: 'ldo-latn-ng',
  ldp: 'ldp-latn-ng',
  ldq: 'ldq-latn-ng',
  lea: 'lea-latn-cd',
  leb: 'leb-latn-zm',
  lec: 'lec-latn-bo',
  led: 'led-latn-zz',
  lee: 'lee-latn-zz',
  lef: 'lef-latn-gh',
  leh: 'leh-latn-zm',
  lei: 'lei-latn-pg',
  lej: 'lej-latn-cd',
  lek: 'lek-latn-pg',
  lel: 'lel-latn-cd',
  lem: 'lem-latn-zz',
  len: 'len-latn-hn',
  leo: 'leo-latn-cm',
  lep: 'lep-lepc-in',
  leq: 'leq-latn-zz',
  ler: 'ler-latn-pg',
  les: 'les-latn-cd',
  let: 'let-latn-pg',
  leu: 'leu-latn-zz',
  lev: 'lev-latn-id',
  lew: 'lew-latn-id',
  lex: 'lex-latn-id',
  ley: 'ley-latn-id',
  lez: 'lez-cyrl-ru',
  lfa: 'lfa-latn-cm',
  lfn: 'lfn-latn-001',
  'lfn-cyrl': 'lfn-cyrl-001',
  lg: 'lg-latn-ug',
  lga: 'lga-latn-sb',
  lgb: 'lgb-latn-sb',
  lgg: 'lgg-latn-zz',
  lgh: 'lgh-latn-vn',
  lgi: 'lgi-latn-id',
  lgk: 'lgk-latn-vu',
  lgl: 'lgl-latn-sb',
  lgm: 'lgm-latn-cd',
  lgn: 'lgn-latn-et',
  lgo: 'lgo-latn-ss',
  lgq: 'lgq-latn-gh',
  lgr: 'lgr-latn-sb',
  lgt: 'lgt-latn-pg',
  lgu: 'lgu-latn-sb',
  lgz: 'lgz-latn-cd',
  lha: 'lha-latn-vn',
  lhh: 'lhh-latn-id',
  lhi: 'lhi-latn-cn',
  lhm: 'lhm-deva-np',
  lhn: 'lhn-latn-my',
  lhs: 'lhs-syrc-sy',
  lht: 'lht-latn-vu',
  lhu: 'lhu-latn-cn',
  li: 'li-latn-nl',
  lia: 'lia-latn-zz',
  lib: 'lib-latn-pg',
  lic: 'lic-latn-cn',
  lid: 'lid-latn-zz',
  lie: 'lie-latn-cd',
  lif: 'lif-deva-np',
  'lif-limb': 'lif-limb-in',
  lig: 'lig-latn-zz',
  lih: 'lih-latn-zz',
  lij: 'lij-latn-it',
  lik: 'lik-latn-cd',
  lil: 'lil-latn-ca',
  lio: 'lio-latn-id',
  lip: 'lip-latn-gh',
  liq: 'liq-latn-et',
  lir: 'lir-latn-lr',
  lis: 'lis-lisu-cn',
  liu: 'liu-latn-sd',
  liv: 'liv-latn-lv',
  liw: 'liw-latn-id',
  lix: 'lix-latn-id',
  liy: 'liy-latn-cf',
  liz: 'liz-latn-cd',
  lja: 'lja-latn-au',
  lje: 'lje-latn-id',
  lji: 'lji-latn-id',
  ljl: 'ljl-latn-id',
  ljp: 'ljp-latn-id',
  ljw: 'ljw-latn-au',
  ljx: 'ljx-latn-au',
  lka: 'lka-latn-tl',
  lkb: 'lkb-latn-ke',
  lkc: 'lkc-latn-vn',
  lkd: 'lkd-latn-br',
  lke: 'lke-latn-ug',
  lkh: 'lkh-tibt-bt',
  lki: 'lki-arab-ir',
  lkj: 'lkj-latn-my',
  lkl: 'lkl-latn-pg',
  lkm: 'lkm-latn-au',
  lkn: 'lkn-latn-vu',
  lko: 'lko-latn-ke',
  lkr: 'lkr-latn-ss',
  lks: 'lks-latn-ke',
  lkt: 'lkt-latn-us',
  lku: 'lku-latn-au',
  lky: 'lky-latn-ss',
  lla: 'lla-latn-ng',
  llb: 'llb-latn-mz',
  llc: 'llc-latn-gn',
  lld: 'lld-latn-it',
  lle: 'lle-latn-zz',
  llf: 'llf-latn-pg',
  llg: 'llg-latn-id',
  lli: 'lli-latn-cg',
  llj: 'llj-latn-au',
  llk: 'llk-latn-my',
  lll: 'lll-latn-pg',
  llm: 'llm-latn-id',
  lln: 'lln-latn-zz',
  llp: 'llp-latn-vu',
  llq: 'llq-latn-id',
  llu: 'llu-latn-sb',
  llx: 'llx-latn-fj',
  lma: 'lma-latn-gn',
  lmb: 'lmb-latn-vu',
  lmc: 'lmc-latn-au',
  lmd: 'lmd-latn-sd',
  lme: 'lme-latn-td',
  lmf: 'lmf-latn-id',
  lmg: 'lmg-latn-pg',
  lmh: 'lmh-deva-np',
  lmi: 'lmi-latn-cd',
  lmj: 'lmj-latn-id',
  lmk: 'lmk-latn-in',
  'lmk-mymr': 'lmk-mymr-in',
  lml: 'lml-latn-vu',
  lmn: 'lmn-telu-in',
  lmo: 'lmo-latn-it',
  lmp: 'lmp-latn-zz',
  lmq: 'lmq-latn-id',
  lmr: 'lmr-latn-id',
  lmu: 'lmu-latn-vu',
  lmv: 'lmv-latn-fj',
  lmw: 'lmw-latn-us',
  lmx: 'lmx-latn-cm',
  lmy: 'lmy-latn-id',
  ln: 'ln-latn-cd',
  lna: 'lna-latn-cf',
  lnb: 'lnb-latn-na',
  lnd: 'lnd-latn-id',
  lnh: 'lnh-latn-my',
  lni: 'lni-latn-pg',
  lnj: 'lnj-latn-au',
  lnl: 'lnl-latn-cf',
  lnm: 'lnm-latn-pg',
  lnn: 'lnn-latn-vu',
  lns: 'lns-latn-zz',
  lnu: 'lnu-latn-zz',
  lnw: 'lnw-latn-au',
  lnz: 'lnz-latn-cd',
  lo: 'lo-laoo-la',
  loa: 'loa-latn-id',
  lob: 'lob-latn-bf',
  loc: 'loc-latn-ph',
  loe: 'loe-latn-id',
  log: 'log-latn-cd',
  loh: 'loh-latn-ss',
  loi: 'loi-latn-ci',
  loj: 'loj-latn-zz',
  lok: 'lok-latn-zz',
  lol: 'lol-latn-cd',
  lom: 'lom-latn-lr',
  lon: 'lon-latn-mw',
  loo: 'loo-latn-cd',
  lop: 'lop-latn-ng',
  loq: 'loq-latn-cd',
  lor: 'lor-latn-zz',
  los: 'los-latn-zz',
  lot: 'lot-latn-ss',
  'lot-arab': 'lot-arab-ss',
  lou: 'lou-latn-us',
  low: 'low-latn-my',
  lox: 'lox-latn-id',
  loy: 'loy-deva-np',
  'loy-tibt': 'loy-tibt-np',
  loz: 'loz-latn-zm',
  lpa: 'lpa-latn-vu',
  lpe: 'lpe-latn-id',
  lpn: 'lpn-latn-mm',
  lpo: 'lpo-plrd-cn',
  'lpo-lisu': 'lpo-lisu-cn',
  lpx: 'lpx-latn-ss',
  lqr: 'lqr-latn-ss',
  lra: 'lra-latn-my',
  lrc: 'lrc-arab-ir',
  lrg: 'lrg-latn-au',
  lri: 'lri-latn-ke',
  lrk: 'lrk-arab-pk',
  lrl: 'lrl-arab-ir',
  lrm: 'lrm-latn-ke',
  lrn: 'lrn-latn-id',
  lro: 'lro-latn-sd',
  lrt: 'lrt-latn-id',
  lrv: 'lrv-latn-vu',
  lrz: 'lrz-latn-vu',
  lsa: 'lsa-arab-ir',
  lsd: 'lsd-hebr-il',
  lse: 'lse-latn-cd',
  lsi: 'lsi-latn-mm',
  lsm: 'lsm-latn-ug',
  lsr: 'lsr-latn-pg',
  lss: 'lss-arab-pk',
  lt: 'lt-latn-lt',
  ltg: 'ltg-latn-lv',
  lth: 'lth-latn-ug',
  lti: 'lti-latn-id',
  ltn: 'ltn-latn-br',
  lto: 'lto-latn-ke',
  lts: 'lts-latn-ke',
  ltu: 'ltu-latn-id',
  lu: 'lu-latn-cd',
  lua: 'lua-latn-cd',
  luc: 'luc-latn-ug',
  lud: 'lud-latn-ru',
  lue: 'lue-latn-zm',
  luf: 'luf-latn-pg',
  lui: 'lui-latn-us',
  luj: 'luj-latn-cd',
  luk: 'luk-tibt-bt',
  lul: 'lul-latn-ss',
  lum: 'lum-latn-ao',
  lun: 'lun-latn-zm',
  luo: 'luo-latn-ke',
  lup: 'lup-latn-ga',
  luq: 'luq-latn-cu',
  lur: 'lur-latn-id',
  lus: 'lus-latn-in',
  'lus-beng': 'lus-beng-bd',
  'lus-brai': 'lus-brai-in',
  lut: 'lut-latn-us',
  luu: 'luu-deva-np',
  luv: 'luv-arab-om',
  luw: 'luw-latn-cm',
  luy: 'luy-latn-ke',
  luz: 'luz-arab-ir',
  lv: 'lv-latn-lv',
  lva: 'lva-latn-tl',
  lvi: 'lvi-latn-la',
  lvk: 'lvk-latn-sb',
  lvu: 'lvu-latn-id',
  lwa: 'lwa-latn-cd',
  lwe: 'lwe-latn-id',
  lwg: 'lwg-latn-ke',
  lwh: 'lwh-latn-vn',
  lwl: 'lwl-thai-th',
  lwm: 'lwm-thai-cn',
  lwo: 'lwo-latn-ss',
  'lwo-za': 'lwo-latn-za',
  lwt: 'lwt-latn-id',
  lww: 'lww-latn-vu',
  lxm: 'lxm-latn-pg',
  lya: 'lya-tibt-bt',
  lyn: 'lyn-latn-zm',
  lzh: 'lzh-hans-cn',
  lzl: 'lzl-latn-vu',
  lzn: 'lzn-latn-mm',
  lzz: 'lzz-latn-tr',
  maa: 'maa-latn-mx',
  mab: 'mab-latn-mx',
  mad: 'mad-latn-id',
  mae: 'mae-latn-ng',
  maf: 'maf-latn-cm',
  mag: 'mag-deva-in',
  mai: 'mai-deva-in',
  maj: 'maj-latn-mx',
  mak: 'mak-latn-id',
  mam: 'mam-latn-gt',
  man: 'man-latn-gm',
  'man-gn': 'man-nkoo-gn',
  'man-nkoo': 'man-nkoo-gn',
  maq: 'maq-latn-mx',
  mas: 'mas-latn-ke',
  mat: 'mat-latn-mx',
  mau: 'mau-latn-mx',
  mav: 'mav-latn-br',
  maw: 'maw-latn-zz',
  max: 'max-latn-id',
  maz: 'maz-latn-mx',
  mba: 'mba-latn-ph',
  mbb: 'mbb-latn-ph',
  mbc: 'mbc-latn-br',
  mbd: 'mbd-latn-ph',
  mbf: 'mbf-latn-sg',
  mbh: 'mbh-latn-zz',
  mbi: 'mbi-latn-ph',
  mbj: 'mbj-latn-br',
  mbk: 'mbk-latn-pg',
  mbl: 'mbl-latn-br',
  mbm: 'mbm-latn-cg',
  mbn: 'mbn-latn-co',
  mbo: 'mbo-latn-zz',
  mbp: 'mbp-latn-co',
  mbq: 'mbq-latn-zz',
  mbr: 'mbr-latn-co',
  mbs: 'mbs-latn-ph',
  mbt: 'mbt-latn-ph',
  mbu: 'mbu-latn-zz',
  mbv: 'mbv-latn-gn',
  mbw: 'mbw-latn-zz',
  mbx: 'mbx-latn-pg',
  mby: 'mby-arab-pk',
  mbz: 'mbz-latn-mx',
  mca: 'mca-latn-py',
  mcb: 'mcb-latn-pe',
  mcc: 'mcc-latn-pg',
  mcd: 'mcd-latn-pe',
  mce: 'mce-latn-mx',
  mcf: 'mcf-latn-pe',
  mcg: 'mcg-latn-ve',
  mch: 'mch-latn-ve',
  mci: 'mci-latn-zz',
  mcj: 'mcj-latn-ng',
  mck: 'mck-latn-ao',
  mcl: 'mcl-latn-co',
  mcm: 'mcm-latn-my',
  mcn: 'mcn-latn-td',
  mco: 'mco-latn-mx',
  mcp: 'mcp-latn-zz',
  mcq: 'mcq-latn-zz',
  mcr: 'mcr-latn-zz',
  mcs: 'mcs-latn-cm',
  mct: 'mct-latn-cm',
  mcu: 'mcu-latn-zz',
  mcv: 'mcv-latn-pg',
  mcw: 'mcw-latn-td',
  mcx: 'mcx-latn-cf',
  mcy: 'mcy-latn-pg',
  mcz: 'mcz-latn-pg',
  mda: 'mda-latn-zz',
  mdb: 'mdb-latn-pg',
  mdc: 'mdc-latn-pg',
  mdd: 'mdd-latn-cm',
  mde: 'mde-arab-zz',
  mdf: 'mdf-cyrl-ru',
  mdg: 'mdg-latn-td',
  mdh: 'mdh-latn-ph',
  mdi: 'mdi-latn-cd',
  mdj: 'mdj-latn-zz',
  mdk: 'mdk-latn-cd',
  mdm: 'mdm-latn-cd',
  mdn: 'mdn-latn-cf',
  mdp: 'mdp-latn-cd',
  mdq: 'mdq-latn-cd',
  mdr: 'mdr-latn-id',
  mds: 'mds-latn-pg',
  mdt: 'mdt-latn-cg',
  mdu: 'mdu-latn-cg',
  mdv: 'mdv-latn-mx',
  mdw: 'mdw-latn-cg',
  mdx: 'mdx-ethi-zz',
  mdy: 'mdy-ethi-et',
  'mdy-latn': 'mdy-latn-et',
  mdz: 'mdz-latn-br',
  mea: 'mea-latn-cm',
  meb: 'meb-latn-pg',
  mec: 'mec-latn-au',
  med: 'med-latn-zz',
  mee: 'mee-latn-zz',
  meh: 'meh-latn-mx',
  mej: 'mej-latn-id',
  mek: 'mek-latn-zz',
  mel: 'mel-latn-my',
  mem: 'mem-latn-au',
  men: 'men-latn-sl',
  meo: 'meo-latn-my',
  'meo-arab': 'meo-arab-my',
  mep: 'mep-latn-au',
  meq: 'meq-latn-cm',
  mer: 'mer-latn-ke',
  mes: 'mes-latn-td',
  met: 'met-latn-zz',
  meu: 'meu-latn-zz',
  mev: 'mev-latn-lr',
  mew: 'mew-latn-ng',
  mey: 'mey-latn-mr',
  'mey-arab': 'mey-arab-mr',
  mez: 'mez-latn-us',
  mfa: 'mfa-arab-th',
  mfb: 'mfb-latn-id',
  mfc: 'mfc-latn-cd',
  mfd: 'mfd-latn-cm',
  mfe: 'mfe-latn-mu',
  mff: 'mff-latn-cm',
  mfg: 'mfg-latn-gn',
  'mfg-arab': 'mfg-arab-gn',
  mfh: 'mfh-latn-cm',
  mfi: 'mfi-arab-cm',
  'mfi-latn': 'mfi-latn-cm',
  mfj: 'mfj-latn-cm',
  mfk: 'mfk-latn-cm',
  mfl: 'mfl-latn-ng',
  mfm: 'mfm-latn-ng',
  mfn: 'mfn-latn-zz',
  mfo: 'mfo-latn-zz',
  mfp: 'mfp-latn-id',
  mfq: 'mfq-latn-zz',
  mfr: 'mfr-latn-au',
  mft: 'mft-latn-pg',
  mfu: 'mfu-latn-ao',
  mfv: 'mfv-latn-gw',
  mfw: 'mfw-latn-pg',
  mfx: 'mfx-latn-et',
  'mfx-ethi': 'mfx-ethi-et',
  mfy: 'mfy-latn-mx',
  mfz: 'mfz-latn-ss',
  mg: 'mg-latn-mg',
  mgb: 'mgb-latn-td',
  mgc: 'mgc-latn-ss',
  mgd: 'mgd-latn-ss',
  'mgd-arab': 'mgd-arab-ss',
  mge: 'mge-latn-td',
  mgf: 'mgf-latn-id',
  mgg: 'mgg-latn-cm',
  mgh: 'mgh-latn-mz',
  mgi: 'mgi-latn-ng',
  mgj: 'mgj-latn-ng',
  mgk: 'mgk-latn-id',
  mgl: 'mgl-latn-zz',
  mgm: 'mgm-latn-tl',
  mgn: 'mgn-latn-cf',
  mgo: 'mgo-latn-cm',
  mgp: 'mgp-deva-np',
  mgq: 'mgq-latn-tz',
  mgr: 'mgr-latn-zm',
  mgs: 'mgs-latn-tz',
  mgt: 'mgt-latn-pg',
  mgu: 'mgu-latn-pg',
  mgv: 'mgv-latn-tz',
  mgw: 'mgw-latn-tz',
  mgy: 'mgy-latn-tz',
  mgz: 'mgz-latn-tz',
  mh: 'mh-latn-mh',
  mhb: 'mhb-latn-ga',
  mhc: 'mhc-latn-mx',
  mhd: 'mhd-latn-tz',
  mhe: 'mhe-latn-my',
  mhf: 'mhf-latn-pg',
  mhg: 'mhg-latn-au',
  mhi: 'mhi-latn-zz',
  mhj: 'mhj-arab-af',
  mhk: 'mhk-latn-cm',
  mhl: 'mhl-latn-zz',
  mhm: 'mhm-latn-mz',
  mhn: 'mhn-latn-it',
  mho: 'mho-latn-zm',
  mhp: 'mhp-latn-id',
  mhq: 'mhq-latn-us',
  mhs: 'mhs-latn-id',
  mht: 'mht-latn-ve',
  mhu: 'mhu-latn-in',
  mhw: 'mhw-latn-bw',
  mhx: 'mhx-latn-mm',
  mhy: 'mhy-latn-id',
  mhz: 'mhz-latn-id',
  mi: 'mi-latn-nz',
  mia: 'mia-latn-us',
  mib: 'mib-latn-mx',
  mic: 'mic-latn-ca',
  mid: 'mid-mand-iq',
  mie: 'mie-latn-mx',
  mif: 'mif-latn-zz',
  mig: 'mig-latn-mx',
  mih: 'mih-latn-mx',
  mii: 'mii-latn-mx',
  mij: 'mij-latn-cm',
  mik: 'mik-latn-us',
  mil: 'mil-latn-mx',
  mim: 'mim-latn-mx',
  min: 'min-latn-id',
  mio: 'mio-latn-mx',
  mip: 'mip-latn-mx',
  miq: 'miq-latn-ni',
  mir: 'mir-latn-mx',
  mit: 'mit-latn-mx',
  miu: 'miu-latn-mx',
  miw: 'miw-latn-zz',
  mix: 'mix-latn-mx',
  miy: 'miy-latn-mx',
  miz: 'miz-latn-mx',
  mjb: 'mjb-latn-tl',
  mjc: 'mjc-latn-mx',
  mjd: 'mjd-latn-us',
  mje: 'mje-latn-td',
  mjg: 'mjg-latn-cn',
  mjh: 'mjh-latn-tz',
  mji: 'mji-latn-cn',
  mjj: 'mjj-latn-pg',
  mjk: 'mjk-latn-pg',
  mjl: 'mjl-deva-in',
  'mjl-takr': 'mjl-takr-in',
  mjm: 'mjm-latn-pg',
  mjn: 'mjn-latn-pg',
  mjq: 'mjq-mlym-in',
  mjr: 'mjr-mlym-in',
  mjs: 'mjs-latn-ng',
  mjt: 'mjt-deva-in',
  'mjt-beng': 'mjt-beng-bd',
  mju: 'mju-telu-in',
  mjv: 'mjv-mlym-in',
  mjw: 'mjw-latn-in',
  mjx: 'mjx-latn-bd',
  'mjx-beng': 'mjx-beng-bd',
  mjy: 'mjy-latn-us',
  mjz: 'mjz-deva-np',
  mk: 'mk-cyrl-mk',
  mka: 'mka-latn-ci',
  mkb: 'mkb-deva-in',
  mkc: 'mkc-latn-pg',
  mke: 'mke-deva-in',
  mkf: 'mkf-latn-ng',
  mki: 'mki-arab-zz',
  mkj: 'mkj-latn-fm',
  mkk: 'mkk-latn-cm',
  mkl: 'mkl-latn-zz',
  mkm: 'mkm-thai-th',
  mkn: 'mkn-latn-id',
  mko: 'mko-latn-ng',
  mkp: 'mkp-latn-zz',
  mkr: 'mkr-latn-pg',
  mks: 'mks-latn-mx',
  mkt: 'mkt-latn-nc',
  mku: 'mku-latn-gn',
  mkv: 'mkv-latn-vu',
  mkw: 'mkw-latn-zz',
  mkx: 'mkx-latn-ph',
  mky: 'mky-latn-id',
  mkz: 'mkz-latn-tl',
  ml: 'ml-mlym-in',
  mla: 'mla-latn-vu',
  mlb: 'mlb-latn-cm',
  mlc: 'mlc-latn-vn',
  mle: 'mle-latn-zz',
  mlf: 'mlf-thai-la',
  'mlf-latn': 'mlf-latn-la',
  mlh: 'mlh-latn-pg',
  mli: 'mli-latn-id',
  mlj: 'mlj-latn-td',
  mlk: 'mlk-latn-ke',
  mll: 'mll-latn-vu',
  mln: 'mln-latn-sb',
  mlo: 'mlo-latn-sn',
  mlp: 'mlp-latn-zz',
  mlq: 'mlq-latn-sn',
  'mlq-arab': 'mlq-arab-sn',
  mlr: 'mlr-latn-cm',
  mls: 'mls-latn-sd',
  mlu: 'mlu-latn-sb',
  mlv: 'mlv-latn-vu',
  mlw: 'mlw-latn-cm',
  mlx: 'mlx-latn-vu',
  mlz: 'mlz-latn-ph',
  mma: 'mma-latn-ng',
  mmb: 'mmb-latn-id',
  mmc: 'mmc-latn-mx',
  mmd: 'mmd-latn-cn',
  'mmd-hans': 'mmd-hans-cn',
  'mmd-hant': 'mmd-hant-cn',
  mme: 'mme-latn-vu',
  mmf: 'mmf-latn-ng',
  mmg: 'mmg-latn-vu',
  mmh: 'mmh-latn-br',
  mmi: 'mmi-latn-pg',
  mmm: 'mmm-latn-vu',
  mmn: 'mmn-latn-ph',
  mmo: 'mmo-latn-zz',
  mmp: 'mmp-latn-pg',
  mmq: 'mmq-latn-pg',
  mmr: 'mmr-latn-cn',
  mmt: 'mmt-latn-pg',
  mmu: 'mmu-latn-zz',
  mmv: 'mmv-latn-br',
  mmw: 'mmw-latn-vu',
  mmx: 'mmx-latn-zz',
  mmy: 'mmy-latn-td',
  mmz: 'mmz-latn-cd',
  mn: 'mn-cyrl-mn',
  'mn-cn': 'mn-mong-cn',
  'mn-mong': 'mn-mong-cn',
  mna: 'mna-latn-zz',
  mnb: 'mnb-latn-id',
  mnd: 'mnd-latn-br',
  mne: 'mne-latn-td',
  mnf: 'mnf-latn-zz',
  mng: 'mng-latn-vn',
  mnh: 'mnh-latn-cd',
  mni: 'mni-beng-in',
  mnj: 'mnj-arab-af',
  mnl: 'mnl-latn-vu',
  mnm: 'mnm-latn-pg',
  mnn: 'mnn-latn-vn',
  mnp: 'mnp-latn-cn',
  mnq: 'mnq-latn-my',
  mnr: 'mnr-latn-us',
  mns: 'mns-cyrl-ru',
  mnu: 'mnu-latn-id',
  mnv: 'mnv-latn-sb',
  mnw: 'mnw-mymr-mm',
  mnx: 'mnx-latn-id',
  mny: 'mny-latn-mz',
  mnz: 'mnz-latn-id',
  mo: 'mo-latn-ro',
  moa: 'moa-latn-zz',
  moc: 'moc-latn-ar',
  mod: 'mod-latn-us',
  moe: 'moe-latn-ca',
  mog: 'mog-latn-id',
  moh: 'moh-latn-ca',
  moi: 'moi-latn-ng',
  moj: 'moj-latn-cg',
  mok: 'mok-latn-id',
  mom: 'mom-latn-ni',
  moo: 'moo-latn-vn',
  mop: 'mop-latn-bz',
  moq: 'moq-latn-id',
  mor: 'mor-latn-sd',
  mos: 'mos-latn-bf',
  mot: 'mot-latn-co',
  mou: 'mou-latn-td',
  mov: 'mov-latn-us',
  mow: 'mow-latn-cg',
  mox: 'mox-latn-zz',
  moy: 'moy-latn-et',
  'moy-ethi': 'moy-ethi-et',
  moz: 'moz-latn-td',
  mpa: 'mpa-latn-tz',
  mpb: 'mpb-latn-au',
  mpc: 'mpc-latn-au',
  mpd: 'mpd-latn-br',
  mpe: 'mpe-latn-et',
  'mpe-ethi': 'mpe-ethi-et',
  mpg: 'mpg-latn-td',
  mph: 'mph-latn-au',
  mpi: 'mpi-latn-cm',
  mpj: 'mpj-latn-au',
  mpk: 'mpk-latn-td',
  mpl: 'mpl-latn-pg',
  mpm: 'mpm-latn-mx',
  mpn: 'mpn-latn-pg',
  mpo: 'mpo-latn-pg',
  mpp: 'mpp-latn-zz',
  mpq: 'mpq-latn-br',
  mpr: 'mpr-latn-sb',
  mps: 'mps-latn-zz',
  mpt: 'mpt-latn-zz',
  mpu: 'mpu-latn-br',
  mpv: 'mpv-latn-pg',
  mpw: 'mpw-latn-br',
  mpx: 'mpx-latn-zz',
  mpy: 'mpy-latn-id',
  mpz: 'mpz-thai-th',
  mqa: 'mqa-latn-id',
  mqb: 'mqb-latn-cm',
  mqc: 'mqc-latn-id',
  mqe: 'mqe-latn-pg',
  mqf: 'mqf-latn-id',
  mqg: 'mqg-latn-id',
  mqh: 'mqh-latn-mx',
  mqi: 'mqi-latn-id',
  mqj: 'mqj-latn-id',
  mqk: 'mqk-latn-ph',
  mql: 'mql-latn-zz',
  mqm: 'mqm-latn-pf',
  mqn: 'mqn-latn-id',
  mqo: 'mqo-latn-id',
  mqp: 'mqp-latn-id',
  mqq: 'mqq-latn-my',
  mqr: 'mqr-latn-id',
  mqs: 'mqs-latn-id',
  mqu: 'mqu-latn-ss',
  mqv: 'mqv-latn-pg',
  mqw: 'mqw-latn-pg',
  mqx: 'mqx-latn-id',
  'mqx-bugi': 'mqx-bugi-id',
  mqy: 'mqy-latn-id',
  mqz: 'mqz-latn-pg',
  mr: 'mr-deva-in',
  mra: 'mra-thai-th',
  mrb: 'mrb-latn-vu',
  mrc: 'mrc-latn-us',
  mrd: 'mrd-deva-np',
  mrf: 'mrf-latn-id',
  mrg: 'mrg-latn-in',
  'mrg-beng': 'mrg-beng-in',
  'mrg-deva': 'mrg-deva-in',
  mrh: 'mrh-latn-in',
  mrj: 'mrj-cyrl-ru',
  mrk: 'mrk-latn-nc',
  mrl: 'mrl-latn-fm',
  mrm: 'mrm-latn-vu',
  mrn: 'mrn-latn-sb',
  mro: 'mro-mroo-bd',
  mrp: 'mrp-latn-vu',
  mrq: 'mrq-latn-pf',
  mrr: 'mrr-deva-in',
  mrs: 'mrs-latn-vu',
  mrt: 'mrt-latn-ng',
  mru: 'mru-latn-cm',
  mrv: 'mrv-latn-pf',
  mrw: 'mrw-latn-ph',
  'mrw-arab': 'mrw-arab-ph',
  mrx: 'mrx-latn-id',
  mry: 'mry-latn-ph',
  mrz: 'mrz-latn-id',
  ms: 'ms-latn-my',
  'ms-cc': 'ms-arab-cc',
  msb: 'msb-latn-ph',
  msc: 'msc-latn-gn',
  mse: 'mse-latn-td',
  msf: 'msf-latn-id',
  msg: 'msg-latn-id',
  msh: 'msh-latn-mg',
  msi: 'msi-latn-my',
  msj: 'msj-latn-cd',
  msk: 'msk-latn-ph',
  msl: 'msl-latn-id',
  msm: 'msm-latn-ph',
  msn: 'msn-latn-vu',
  mso: 'mso-latn-id',
  msp: 'msp-latn-br',
  msq: 'msq-latn-nc',
  mss: 'mss-latn-id',
  msu: 'msu-latn-pg',
  msv: 'msv-latn-cm',
  msw: 'msw-latn-gw',
  msx: 'msx-latn-pg',
  msy: 'msy-latn-pg',
  msz: 'msz-latn-pg',
  mt: 'mt-latn-mt',
  mta: 'mta-latn-ph',
  mtb: 'mtb-latn-ci',
  mtc: 'mtc-latn-zz',
  mtd: 'mtd-latn-id',
  mte: 'mte-latn-sb',
  mtf: 'mtf-latn-zz',
  mtg: 'mtg-latn-id',
  mth: 'mth-latn-id',
  mti: 'mti-latn-zz',
  mtj: 'mtj-latn-id',
  mtk: 'mtk-latn-cm',
  mtl: 'mtl-latn-ng',
  mtm: 'mtm-cyrl-ru',
  mtn: 'mtn-latn-ni',
  mto: 'mto-latn-mx',
  mtp: 'mtp-latn-bo',
  mtq: 'mtq-latn-vn',
  mtr: 'mtr-deva-in',
  mts: 'mts-latn-pe',
  mtt: 'mtt-latn-vu',
  mtu: 'mtu-latn-mx',
  mtv: 'mtv-latn-pg',
  mtw: 'mtw-latn-ph',
  mtx: 'mtx-latn-mx',
  mty: 'mty-latn-pg',
  mua: 'mua-latn-cm',
  mub: 'mub-latn-td',
  muc: 'muc-latn-cm',
  mud: 'mud-cyrl-ru',
  mue: 'mue-latn-ec',
  mug: 'mug-latn-cm',
  muh: 'muh-latn-ss',
  mui: 'mui-latn-id',
  muj: 'muj-latn-td',
  muk: 'muk-tibt-np',
  mum: 'mum-latn-pg',
  muo: 'muo-latn-cm',
  muq: 'muq-latn-cn',
  mur: 'mur-latn-zz',
  mus: 'mus-latn-us',
  mut: 'mut-deva-in',
  muu: 'muu-latn-ke',
  muv: 'muv-taml-in',
  mux: 'mux-latn-pg',
  muy: 'muy-latn-cm',
  muz: 'muz-ethi-et',
  'muz-latn': 'muz-latn-et',
  mva: 'mva-latn-zz',
  mvd: 'mvd-latn-id',
  mvf: 'mvf-mong-cn',
  'mvf-phag': 'mvf-phag-cn',
  mvg: 'mvg-latn-mx',
  mvh: 'mvh-latn-td',
  mvk: 'mvk-latn-pg',
  mvl: 'mvl-latn-au',
  mvn: 'mvn-latn-zz',
  mvo: 'mvo-latn-sb',
  mvp: 'mvp-latn-id',
  mvq: 'mvq-latn-pg',
  mvr: 'mvr-latn-id',
  mvs: 'mvs-latn-id',
  mvt: 'mvt-latn-vu',
  mvu: 'mvu-latn-td',
  mvv: 'mvv-latn-my',
  mvw: 'mvw-latn-tz',
  mvx: 'mvx-latn-id',
  mvy: 'mvy-arab-pk',
  mvz: 'mvz-ethi-et',
  'mvz-arab': 'mvz-arab-et',
  mwa: 'mwa-latn-pg',
  mwb: 'mwb-latn-pg',
  mwc: 'mwc-latn-pg',
  mwe: 'mwe-latn-tz',
  mwf: 'mwf-latn-au',
  mwg: 'mwg-latn-pg',
  mwh: 'mwh-latn-pg',
  mwi: 'mwi-latn-vu',
  mwk: 'mwk-latn-ml',
  mwl: 'mwl-latn-pt',
  mwm: 'mwm-latn-td',
  mwn: 'mwn-latn-zm',
  mwo: 'mwo-latn-vu',
  mwp: 'mwp-latn-au',
  mwq: 'mwq-latn-mm',
  mwr: 'mwr-deva-in',
  mws: 'mws-latn-ke',
  mwt: 'mwt-mymr-mm',
  'mwt-thai': 'mwt-thai-th',
  mwu: 'mwu-latn-ss',
  mwv: 'mwv-latn-id',
  mww: 'mww-hmnp-us',
  mwz: 'mwz-latn-cd',
  mxa: 'mxa-latn-mx',
  mxb: 'mxb-latn-mx',
  mxc: 'mxc-latn-zw',
  mxd: 'mxd-latn-id',
  mxe: 'mxe-latn-vu',
  mxf: 'mxf-latn-cm',
  mxg: 'mxg-latn-ao',
  mxh: 'mxh-latn-cd',
  mxi: 'mxi-latn-es',
  mxj: 'mxj-latn-in',
  mxk: 'mxk-latn-pg',
  mxl: 'mxl-latn-bj',
  mxm: 'mxm-latn-zz',
  mxn: 'mxn-latn-id',
  mxo: 'mxo-latn-zm',
  mxp: 'mxp-latn-mx',
  mxq: 'mxq-latn-mx',
  mxr: 'mxr-latn-my',
  mxs: 'mxs-latn-mx',
  mxt: 'mxt-latn-mx',
  mxu: 'mxu-latn-cm',
  mxv: 'mxv-latn-mx',
  mxw: 'mxw-latn-pg',
  mxx: 'mxx-latn-ci',
  mxy: 'mxy-latn-mx',
  mxz: 'mxz-latn-id',
  my: 'my-mymr-mm',
  myb: 'myb-latn-td',
  myc: 'myc-latn-cd',
  mye: 'mye-latn-ga',
  myf: 'myf-latn-et',
  myg: 'myg-latn-cm',
  myh: 'myh-latn-us',
  myj: 'myj-latn-ss',
  myk: 'myk-latn-zz',
  myl: 'myl-latn-id',
  mym: 'mym-ethi-zz',
  myp: 'myp-latn-br',
  myr: 'myr-latn-pe',
  myu: 'myu-latn-br',
  myv: 'myv-cyrl-ru',
  myw: 'myw-latn-zz',
  myx: 'myx-latn-ug',
  myy: 'myy-latn-co',
  myz: 'myz-mand-ir',
  mza: 'mza-latn-mx',
  mzd: 'mzd-latn-cm',
  mze: 'mze-latn-pg',
  mzh: 'mzh-latn-ar',
  mzi: 'mzi-latn-mx',
  mzj: 'mzj-latn-lr',
  mzk: 'mzk-latn-zz',
  mzl: 'mzl-latn-mx',
  mzm: 'mzm-latn-zz',
  mzn: 'mzn-arab-ir',
  mzo: 'mzo-latn-br',
  mzp: 'mzp-latn-zz',
  mzq: 'mzq-latn-id',
  mzr: 'mzr-latn-br',
  mzt: 'mzt-latn-my',
  mzu: 'mzu-latn-pg',
  mzv: 'mzv-latn-cf',
  mzw: 'mzw-latn-zz',
  mzx: 'mzx-latn-gy',
  mzz: 'mzz-latn-zz',
  na: 'na-latn-nr',
  naa: 'naa-latn-id',
  nab: 'nab-latn-br',
  nac: 'nac-latn-zz',
  nae: 'nae-latn-id',
  naf: 'naf-latn-zz',
  nag: 'nag-latn-in',
  naj: 'naj-latn-gn',
  nak: 'nak-latn-zz',
  nal: 'nal-latn-pg',
  nam: 'nam-latn-au',
  nan: 'nan-hans-cn',
  nao: 'nao-deva-np',
  nap: 'nap-latn-it',
  naq: 'naq-latn-na',
  nar: 'nar-latn-ng',
  nas: 'nas-latn-zz',
  nat: 'nat-latn-ng',
  naw: 'naw-latn-gh',
  nax: 'nax-latn-pg',
  nay: 'nay-latn-au',
  naz: 'naz-latn-mx',
  nb: 'nb-latn-no',
  nba: 'nba-latn-ao',
  nbb: 'nbb-latn-ng',
  nbc: 'nbc-latn-in',
  nbd: 'nbd-latn-cd',
  nbe: 'nbe-latn-in',
  nbh: 'nbh-latn-ng',
  nbi: 'nbi-latn-in',
  nbj: 'nbj-latn-au',
  nbk: 'nbk-latn-pg',
  nbm: 'nbm-latn-cf',
  nbn: 'nbn-latn-id',
  nbo: 'nbo-latn-ng',
  nbp: 'nbp-latn-ng',
  nbq: 'nbq-latn-id',
  nbr: 'nbr-latn-ng',
  nbt: 'nbt-latn-in',
  'nbt-deva': 'nbt-deva-in',
  nbu: 'nbu-latn-in',
  nbv: 'nbv-latn-cm',
  nbw: 'nbw-latn-cd',
  nby: 'nby-latn-pg',
  nca: 'nca-latn-zz',
  ncb: 'ncb-latn-in',
  'ncb-deva': 'ncb-deva-in',
  ncc: 'ncc-latn-pg',
  ncd: 'ncd-deva-np',
  nce: 'nce-latn-zz',
  ncf: 'ncf-latn-zz',
  ncg: 'ncg-latn-ca',
  nch: 'nch-latn-mx',
  nci: 'nci-latn-mx',
  ncj: 'ncj-latn-mx',
  nck: 'nck-latn-au',
  ncl: 'ncl-latn-mx',
  ncm: 'ncm-latn-pg',
  ncn: 'ncn-latn-pg',
  nco: 'nco-latn-zz',
  ncq: 'ncq-laoo-la',
  'ncq-thai': 'ncq-thai-la',
  ncr: 'ncr-latn-cm',
  nct: 'nct-latn-in',
  'nct-beng': 'nct-beng-in',
  ncu: 'ncu-latn-zz',
  ncx: 'ncx-latn-mx',
  ncz: 'ncz-latn-us',
  nd: 'nd-latn-zw',
  nda: 'nda-latn-cg',
  ndb: 'ndb-latn-cm',
  ndc: 'ndc-latn-mz',
  ndd: 'ndd-latn-ng',
  ndf: 'ndf-cyrl-ru',
  ndg: 'ndg-latn-tz',
  ndh: 'ndh-latn-tz',
  ndi: 'ndi-latn-ng',
  ndj: 'ndj-latn-tz',
  ndk: 'ndk-latn-cd',
  ndl: 'ndl-latn-cd',
  ndm: 'ndm-latn-td',
  ndn: 'ndn-latn-cg',
  ndp: 'ndp-latn-ug',
  ndq: 'ndq-latn-ao',
  ndr: 'ndr-latn-ng',
  nds: 'nds-latn-de',
  ndt: 'ndt-latn-cd',
  ndu: 'ndu-latn-cm',
  ndv: 'ndv-latn-sn',
  ndw: 'ndw-latn-cd',
  ndx: 'ndx-latn-id',
  ndy: 'ndy-latn-cf',
  'ndy-td': 'ndy-latn-td',
  ndz: 'ndz-latn-ss',
  ne: 'ne-deva-np',
  nea: 'nea-latn-id',
  neb: 'neb-latn-zz',
  nec: 'nec-latn-id',
  ned: 'ned-latn-ng',
  nee: 'nee-latn-nc',
  neg: 'neg-cyrl-ru',
  neh: 'neh-tibt-bt',
  nei: 'nei-xsux-tr',
  nej: 'nej-latn-pg',
  nek: 'nek-latn-nc',
  nem: 'nem-latn-nc',
  nen: 'nen-latn-nc',
  neo: 'neo-latn-vn',
  neq: 'neq-latn-mx',
  ner: 'ner-latn-id',
  net: 'net-latn-pg',
  neu: 'neu-latn-001',
  new: 'new-deva-np',
  nex: 'nex-latn-zz',
  ney: 'ney-latn-ci',
  nez: 'nez-latn-us',
  nfa: 'nfa-latn-id',
  nfd: 'nfd-latn-ng',
  nfl: 'nfl-latn-sb',
  nfr: 'nfr-latn-zz',
  nfu: 'nfu-latn-cm',
  ng: 'ng-latn-na',
  nga: 'nga-latn-zz',
  ngb: 'ngb-latn-zz',
  ngc: 'ngc-latn-cd',
  ngd: 'ngd-latn-cf',
  nge: 'nge-latn-cm',
  ngg: 'ngg-latn-cf',
  ngh: 'ngh-latn-za',
  ngi: 'ngi-latn-ng',
  ngj: 'ngj-latn-cm',
  ngk: 'ngk-latn-au',
  ngl: 'ngl-latn-mz',
  ngm: 'ngm-latn-fm',
  ngn: 'ngn-latn-cm',
  ngp: 'ngp-latn-tz',
  ngq: 'ngq-latn-tz',
  ngr: 'ngr-latn-sb',
  ngs: 'ngs-latn-ng',
  ngt: 'ngt-laoo-la',
  ngu: 'ngu-latn-mx',
  ngv: 'ngv-latn-cm',
  ngw: 'ngw-latn-ng',
  ngx: 'ngx-latn-ng',
  ngy: 'ngy-latn-cm',
  ngz: 'ngz-latn-cg',
  nha: 'nha-latn-au',
  nhb: 'nhb-latn-zz',
  nhc: 'nhc-latn-mx',
  nhd: 'nhd-latn-py',
  nhe: 'nhe-latn-mx',
  nhf: 'nhf-latn-au',
  nhg: 'nhg-latn-mx',
  nhi: 'nhi-latn-mx',
  nhk: 'nhk-latn-mx',
  nhm: 'nhm-latn-mx',
  nhn: 'nhn-latn-mx',
  nho: 'nho-latn-pg',
  nhp: 'nhp-latn-mx',
  nhq: 'nhq-latn-mx',
  nhr: 'nhr-latn-bw',
  nht: 'nht-latn-mx',
  nhu: 'nhu-latn-cm',
  nhv: 'nhv-latn-mx',
  nhw: 'nhw-latn-mx',
  nhx: 'nhx-latn-mx',
  nhy: 'nhy-latn-mx',
  nhz: 'nhz-latn-mx',
  nia: 'nia-latn-id',
  nib: 'nib-latn-pg',
  nid: 'nid-latn-au',
  nie: 'nie-latn-td',
  nif: 'nif-latn-zz',
  nig: 'nig-latn-au',
  nih: 'nih-latn-tz',
  nii: 'nii-latn-zz',
  nij: 'nij-latn-id',
  nil: 'nil-latn-id',
  nim: 'nim-latn-tz',
  nin: 'nin-latn-zz',
  nio: 'nio-cyrl-ru',
  niq: 'niq-latn-ke',
  nir: 'nir-latn-id',
  nis: 'nis-latn-pg',
  nit: 'nit-telu-in',
  niu: 'niu-latn-nu',
  niv: 'niv-cyrl-ru',
  'niv-latn': 'niv-latn-ru',
  niw: 'niw-latn-pg',
  nix: 'nix-latn-cd',
  niy: 'niy-latn-zz',
  niz: 'niz-latn-zz',
  nja: 'nja-latn-ng',
  njb: 'njb-latn-in',
  njd: 'njd-latn-tz',
  njh: 'njh-latn-in',
  nji: 'nji-latn-au',
  njj: 'njj-latn-cm',
  njl: 'njl-latn-ss',
  njm: 'njm-latn-in',
  njn: 'njn-latn-in',
  njo: 'njo-latn-in',
  njr: 'njr-latn-ng',
  njs: 'njs-latn-id',
  njt: 'njt-latn-sr',
  nju: 'nju-latn-au',
  njx: 'njx-latn-cg',
  njy: 'njy-latn-cm',
  njz: 'njz-latn-in',
  'njz-beng': 'njz-beng-in',
  nka: 'nka-latn-zm',
  nkb: 'nkb-latn-in',
  nkc: 'nkc-latn-cm',
  nkd: 'nkd-latn-in',
  nke: 'nke-latn-sb',
  nkf: 'nkf-latn-in',
  nkg: 'nkg-latn-zz',
  nkh: 'nkh-latn-in',
  nki: 'nki-latn-in',
  'nki-beng': 'nki-beng-in',
  nkj: 'nkj-latn-id',
  nkk: 'nkk-latn-vu',
  nkm: 'nkm-latn-pg',
  nkn: 'nkn-latn-ao',
  nko: 'nko-latn-zz',
  nkq: 'nkq-latn-gh',
  nkr: 'nkr-latn-fm',
  nks: 'nks-latn-id',
  nkt: 'nkt-latn-tz',
  nku: 'nku-latn-ci',
  nkv: 'nkv-latn-mw',
  nkw: 'nkw-latn-cd',
  nkx: 'nkx-latn-ng',
  nkz: 'nkz-latn-ng',
  nl: 'nl-latn-nl',
  nla: 'nla-latn-cm',
  nlc: 'nlc-latn-id',
  nle: 'nle-latn-ke',
  nlg: 'nlg-latn-sb',
  nli: 'nli-arab-af',
  nlj: 'nlj-latn-cd',
  nlk: 'nlk-latn-id',
  nlm: 'nlm-arab-pk',
  nlo: 'nlo-latn-cd',
  nlq: 'nlq-latn-mm',
  nlu: 'nlu-latn-gh',
  nlv: 'nlv-latn-mx',
  nlw: 'nlw-latn-au',
  nlx: 'nlx-deva-in',
  nly: 'nly-latn-au',
  nlz: 'nlz-latn-sb',
  nma: 'nma-latn-in',
  nmb: 'nmb-latn-vu',
  nmc: 'nmc-latn-td',
  nmd: 'nmd-latn-ga',
  nme: 'nme-latn-in',
  nmf: 'nmf-latn-in',
  nmg: 'nmg-latn-cm',
  nmh: 'nmh-latn-in',
  nmi: 'nmi-latn-ng',
  nmj: 'nmj-latn-cf',
  nmk: 'nmk-latn-vu',
  nml: 'nml-latn-cm',
  nmm: 'nmm-deva-np',
  'nmm-tibt': 'nmm-tibt-np',
  nmn: 'nmn-latn-bw',
  nmo: 'nmo-latn-in',
  'nmo-beng': 'nmo-beng-in',
  nmp: 'nmp-latn-au',
  nmq: 'nmq-latn-zw',
  nmr: 'nmr-latn-cm',
  nms: 'nms-latn-vu',
  nmt: 'nmt-latn-fm',
  nmu: 'nmu-latn-us',
  nmv: 'nmv-latn-au',
  nmw: 'nmw-latn-pg',
  nmx: 'nmx-latn-pg',
  nmz: 'nmz-latn-zz',
  nn: 'nn-latn-no',
  nna: 'nna-latn-au',
  nnb: 'nnb-latn-cd',
  nnc: 'nnc-latn-td',
  nnd: 'nnd-latn-vu',
  nne: 'nne-latn-ao',
  nnf: 'nnf-latn-zz',
  nng: 'nng-latn-in',
  'nng-beng': 'nng-beng-in',
  nnh: 'nnh-latn-cm',
  nni: 'nni-latn-id',
  nnj: 'nnj-latn-et',
  nnk: 'nnk-latn-zz',
  nnl: 'nnl-latn-in',
  nnm: 'nnm-latn-zz',
  nnn: 'nnn-latn-td',
  nnp: 'nnp-wcho-in',
  nnq: 'nnq-latn-tz',
  nnr: 'nnr-latn-au',
  nnt: 'nnt-latn-us',
  nnu: 'nnu-latn-gh',
  nnv: 'nnv-latn-au',
  nnw: 'nnw-latn-bf',
  nny: 'nny-latn-au',
  nnz: 'nnz-latn-cm',
  no: 'no-latn-no',
  noa: 'noa-latn-co',
  noc: 'noc-latn-pg',
  nod: 'nod-lana-th',
  noe: 'noe-deva-in',
  nof: 'nof-latn-pg',
  nog: 'nog-cyrl-ru',
  noh: 'noh-latn-pg',
  noi: 'noi-deva-in',
  noj: 'noj-latn-co',
  nok: 'nok-latn-us',
  nom: 'nom-latn-pe',
  non: 'non-runr-se',
  nop: 'nop-latn-zz',
  noq: 'noq-latn-cd',
  nos: 'nos-yiii-cn',
  not: 'not-latn-pe',
  nou: 'nou-latn-zz',
  nov: 'nov-latn-001',
  now: 'now-latn-tz',
  noy: 'noy-latn-td',
  npb: 'npb-tibt-bt',
  npg: 'npg-latn-mm',
  nph: 'nph-latn-in',
  npl: 'npl-latn-mx',
  npn: 'npn-latn-pg',
  npo: 'npo-latn-in',
  nps: 'nps-latn-id',
  npu: 'npu-latn-in',
  npx: 'npx-latn-sb',
  npy: 'npy-latn-id',
  nqg: 'nqg-latn-bj',
  nqk: 'nqk-latn-bj',
  nql: 'nql-latn-ao',
  nqm: 'nqm-latn-id',
  nqn: 'nqn-latn-pg',
  nqo: 'nqo-nkoo-gn',
  nqq: 'nqq-latn-mm',
  nqt: 'nqt-latn-ng',
  nqy: 'nqy-latn-mm',
  nr: 'nr-latn-za',
  nra: 'nra-latn-ga',
  nrb: 'nrb-latn-zz',
  nre: 'nre-latn-in',
  nrf: 'nrf-latn-je',
  nrg: 'nrg-latn-vu',
  nri: 'nri-latn-in',
  nrk: 'nrk-latn-au',
  nrl: 'nrl-latn-au',
  nrm: 'nrm-latn-my',
  nrp: 'nrp-latn-it',
  nru: 'nru-latn-cn',
  'nru-hans': 'nru-hans-cn',
  'nru-hant': 'nru-hant-cn',
  nrx: 'nrx-latn-au',
  nrz: 'nrz-latn-pg',
  nsa: 'nsa-latn-in',
  nsb: 'nsb-latn-za',
  nsc: 'nsc-latn-ng',
  nsd: 'nsd-yiii-cn',
  nse: 'nse-latn-zm',
  nsf: 'nsf-yiii-cn',
  nsg: 'nsg-latn-tz',
  nsh: 'nsh-latn-cm',
  nsk: 'nsk-cans-ca',
  nsm: 'nsm-latn-in',
  nsn: 'nsn-latn-zz',
  nso: 'nso-latn-za',
  nsq: 'nsq-latn-us',
  nss: 'nss-latn-zz',
  nst: 'nst-tnsa-in',
  nsu: 'nsu-latn-mx',
  nsv: 'nsv-yiii-cn',
  nsw: 'nsw-latn-vu',
  nsx: 'nsx-latn-ao',
  nsy: 'nsy-latn-id',
  nsz: 'nsz-latn-us',
  ntd: 'ntd-latn-my',
  nte: 'nte-latn-mz',
  ntg: 'ntg-latn-au',
  nti: 'nti-latn-bf',
  ntj: 'ntj-latn-au',
  ntk: 'ntk-latn-tz',
  ntm: 'ntm-latn-zz',
  nto: 'nto-latn-cd',
  ntp: 'ntp-latn-mx',
  ntr: 'ntr-latn-zz',
  ntu: 'ntu-latn-sb',
  ntx: 'ntx-latn-mm',
  nty: 'nty-yiii-vn',
  ntz: 'ntz-arab-ir',
  nua: 'nua-latn-nc',
  nuc: 'nuc-latn-br',
  nud: 'nud-latn-pg',
  nue: 'nue-latn-cd',
  nuf: 'nuf-latn-cn',
  nug: 'nug-latn-au',
  nuh: 'nuh-latn-ng',
  nui: 'nui-latn-zz',
  nuj: 'nuj-latn-ug',
  nuk: 'nuk-latn-ca',
  num: 'num-latn-to',
  nun: 'nun-latn-mm',
  nuo: 'nuo-latn-vn',
  nup: 'nup-latn-zz',
  nuq: 'nuq-latn-pg',
  nur: 'nur-latn-pg',
  nus: 'nus-latn-ss',
  nut: 'nut-latn-vn',
  nuu: 'nuu-latn-cd',
  nuv: 'nuv-latn-zz',
  nuw: 'nuw-latn-fm',
  nux: 'nux-latn-zz',
  nuy: 'nuy-latn-au',
  nuz: 'nuz-latn-mx',
  nv: 'nv-latn-us',
  nvh: 'nvh-latn-vu',
  nvm: 'nvm-latn-pg',
  nvo: 'nvo-latn-cm',
  nwb: 'nwb-latn-zz',
  nwc: 'nwc-newa-np',
  'nwc-brah': 'nwc-brah-np',
  'nwc-deva': 'nwc-deva-np',
  'nwc-sidd': 'nwc-sidd-np',
  nwe: 'nwe-latn-cm',
  nwg: 'nwg-latn-au',
  nwi: 'nwi-latn-vu',
  nwm: 'nwm-latn-ss',
  nwo: 'nwo-latn-au',
  nwr: 'nwr-latn-pg',
  nww: 'nww-latn-tz',
  nwx: 'nwx-deva-np',
  nxa: 'nxa-latn-tl',
  nxd: 'nxd-latn-cd',
  nxe: 'nxe-latn-id',
  nxg: 'nxg-latn-id',
  nxi: 'nxi-latn-tz',
  nxl: 'nxl-latn-id',
  nxn: 'nxn-latn-au',
  nxo: 'nxo-latn-ga',
  nxq: 'nxq-latn-cn',
  nxr: 'nxr-latn-zz',
  nxx: 'nxx-latn-id',
  ny: 'ny-latn-mw',
  nyb: 'nyb-latn-gh',
  nyc: 'nyc-latn-cd',
  nyd: 'nyd-latn-ke',
  nye: 'nye-latn-ao',
  nyf: 'nyf-latn-ke',
  nyg: 'nyg-latn-cd',
  nyh: 'nyh-latn-au',
  nyi: 'nyi-latn-sd',
  nyj: 'nyj-latn-cd',
  nyk: 'nyk-latn-ao',
  nyl: 'nyl-thai-th',
  nym: 'nym-latn-tz',
  nyn: 'nyn-latn-ug',
  nyo: 'nyo-latn-ug',
  nyp: 'nyp-latn-ug',
  nyq: 'nyq-arab-ir',
  nyr: 'nyr-latn-mw',
  nys: 'nys-latn-au',
  nyt: 'nyt-latn-au',
  nyu: 'nyu-latn-mz',
  nyv: 'nyv-latn-au',
  nyx: 'nyx-latn-au',
  nyy: 'nyy-latn-tz',
  nza: 'nza-latn-cm',
  nzb: 'nzb-latn-ga',
  nzd: 'nzd-latn-cd',
  nzi: 'nzi-latn-gh',
  nzk: 'nzk-latn-cf',
  nzm: 'nzm-latn-in',
  nzu: 'nzu-latn-cg',
  nzy: 'nzy-latn-td',
  nzz: 'nzz-latn-ml',
  oaa: 'oaa-cyrl-ru',
  oac: 'oac-cyrl-ru',
  oar: 'oar-syrc-sy',
  oav: 'oav-geor-ge',
  obi: 'obi-latn-us',
  obk: 'obk-latn-ph',
  obl: 'obl-latn-cm',
  obm: 'obm-phnx-jo',
  obo: 'obo-latn-ph',
  obr: 'obr-mymr-mm',
  obt: 'obt-latn-fr',
  obu: 'obu-latn-ng',
  oc: 'oc-latn-fr',
  oca: 'oca-latn-pe',
  oco: 'oco-latn-gb',
  ocu: 'ocu-latn-mx',
  oda: 'oda-latn-ng',
  odk: 'odk-arab-pk',
  odt: 'odt-latn-nl',
  odu: 'odu-latn-ng',
  ofu: 'ofu-latn-ng',
  ogb: 'ogb-latn-ng',
  ogc: 'ogc-latn-zz',
  ogg: 'ogg-latn-ng',
  ogo: 'ogo-latn-ng',
  ogu: 'ogu-latn-ng',
  oht: 'oht-xsux-tr',
  oia: 'oia-latn-id',
  oie: 'oie-latn-ss',
  oin: 'oin-latn-pg',
  oj: 'oj-cans-ca',
  ojb: 'ojb-latn-ca',
  'ojb-cans': 'ojb-cans-ca',
  ojc: 'ojc-latn-ca',
  ojs: 'ojs-cans-ca',
  ojv: 'ojv-latn-sb',
  ojw: 'ojw-latn-ca',
  'ojw-cans': 'ojw-cans-ca',
  oka: 'oka-latn-ca',
  okb: 'okb-latn-ng',
  okc: 'okc-latn-cd',
  okd: 'okd-latn-ng',
  oke: 'oke-latn-ng',
  okg: 'okg-latn-au',
  oki: 'oki-latn-ke',
  okk: 'okk-latn-pg',
  okm: 'okm-hang-kr',
  oko: 'oko-hani-kr',
  okr: 'okr-latn-zz',
  oks: 'oks-latn-ng',
  oku: 'oku-latn-cm',
  okv: 'okv-latn-zz',
  okx: 'okx-latn-ng',
  okz: 'okz-khmr-kh',
  ola: 'ola-deva-np',
  'ola-tibt': 'ola-tibt-cn',
  old: 'old-latn-tz',
  ole: 'ole-tibt-bt',
  olk: 'olk-latn-au',
  olm: 'olm-latn-ng',
  olo: 'olo-latn-ru',
  olr: 'olr-latn-vu',
  olt: 'olt-latn-lt',
  olu: 'olu-latn-ao',
  om: 'om-latn-et',
  oma: 'oma-latn-us',
  omb: 'omb-latn-vu',
  omc: 'omc-latn-pe',
  omg: 'omg-latn-pe',
  omi: 'omi-latn-cd',
  omk: 'omk-cyrl-ru',
  oml: 'oml-latn-cd',
  omo: 'omo-latn-pg',
  omp: 'omp-mtei-in',
  omr: 'omr-modi-in',
  omt: 'omt-latn-ke',
  omu: 'omu-latn-pe',
  omw: 'omw-latn-pg',
  ona: 'ona-latn-ar',
  one: 'one-latn-ca',
  ong: 'ong-latn-zz',
  oni: 'oni-latn-id',
  onj: 'onj-latn-pg',
  onk: 'onk-latn-pg',
  onn: 'onn-latn-zz',
  ono: 'ono-latn-ca',
  onp: 'onp-latn-in',
  'onp-deva': 'onp-deva-in',
  onr: 'onr-latn-pg',
  ons: 'ons-latn-zz',
  ont: 'ont-latn-pg',
  onu: 'onu-latn-vu',
  onx: 'onx-latn-id',
  ood: 'ood-latn-us',
  oon: 'oon-deva-in',
  oor: 'oor-latn-za',
  opa: 'opa-latn-ng',
  opk: 'opk-latn-id',
  opm: 'opm-latn-zz',
  opo: 'opo-latn-pg',
  opt: 'opt-latn-mx',
  opy: 'opy-latn-br',
  or: 'or-orya-in',
  ora: 'ora-latn-sb',
  orc: 'orc-latn-ke',
  ore: 'ore-latn-pe',
  org: 'org-latn-ng',
  orn: 'orn-latn-my',
  oro: 'oro-latn-zz',
  orr: 'orr-latn-ng',
  ors: 'ors-latn-my',
  ort: 'ort-telu-in',
  oru: 'oru-arab-zz',
  orv: 'orv-cyrl-ru',
  orw: 'orw-latn-br',
  orx: 'orx-latn-ng',
  orz: 'orz-latn-id',
  os: 'os-cyrl-ge',
  osa: 'osa-osge-us',
  osc: 'osc-ital-it',
  'osc-latn': 'osc-latn-it',
  osi: 'osi-java-id',
  oso: 'oso-latn-ng',
  osp: 'osp-latn-es',
  ost: 'ost-latn-cm',
  osu: 'osu-latn-pg',
  osx: 'osx-latn-de',
  ota: 'ota-arab-zz',
  otb: 'otb-tibt-cn',
  otd: 'otd-latn-id',
  ote: 'ote-latn-mx',
  oti: 'oti-latn-br',
  otk: 'otk-orkh-mn',
  otl: 'otl-latn-mx',
  otm: 'otm-latn-mx',
  otn: 'otn-latn-mx',
  otq: 'otq-latn-mx',
  otr: 'otr-latn-sd',
  ots: 'ots-latn-mx',
  ott: 'ott-latn-mx',
  otu: 'otu-latn-br',
  otw: 'otw-latn-ca',
  otx: 'otx-latn-mx',
  oty: 'oty-gran-in',
  otz: 'otz-latn-mx',
  oub: 'oub-latn-lr',
  oue: 'oue-latn-pg',
  oui: 'oui-ougr-143',
  oum: 'oum-latn-pg',
  ovd: 'ovd-latn-se',
  owi: 'owi-latn-pg',
  owl: 'owl-latn-gb',
  oyd: 'oyd-latn-et',
  oym: 'oym-latn-br',
  oyy: 'oyy-latn-pg',
  ozm: 'ozm-latn-zz',
  pa: 'pa-guru-in',
  'pa-arab': 'pa-arab-pk',
  'pa-pk': 'pa-arab-pk',
  pab: 'pab-latn-br',
  pac: 'pac-latn-vn',
  pad: 'pad-latn-br',
  pae: 'pae-latn-cd',
  paf: 'paf-latn-br',
  pag: 'pag-latn-ph',
  pah: 'pah-latn-br',
  pai: 'pai-latn-ng',
  pak: 'pak-latn-br',
  pal: 'pal-phli-ir',
  'pal-phlp': 'pal-phlp-cn',
  pam: 'pam-latn-ph',
  pao: 'pao-latn-us',
  pap: 'pap-latn-cw',
  paq: 'paq-cyrl-tj',
  par: 'par-latn-us',
  pas: 'pas-latn-id',
  pau: 'pau-latn-pw',
  pav: 'pav-latn-br',
  paw: 'paw-latn-us',
  pax: 'pax-latn-br',
  pay: 'pay-latn-hn',
  paz: 'paz-latn-br',
  pbb: 'pbb-latn-co',
  pbc: 'pbc-latn-gy',
  pbe: 'pbe-latn-mx',
  pbf: 'pbf-latn-mx',
  pbg: 'pbg-latn-ve',
  pbh: 'pbh-latn-ve',
  pbi: 'pbi-latn-zz',
  pbl: 'pbl-latn-ng',
  pbm: 'pbm-latn-mx',
  pbn: 'pbn-latn-ng',
  pbo: 'pbo-latn-gw',
  pbp: 'pbp-latn-gn',
  pbr: 'pbr-latn-tz',
  pbs: 'pbs-latn-mx',
  pbt: 'pbt-arab-af',
  pbv: 'pbv-latn-in',
  pby: 'pby-latn-pg',
  pca: 'pca-latn-mx',
  pcb: 'pcb-khmr-kh',
  pcc: 'pcc-latn-cn',
  'pcc-hani': 'pcc-hani-cn',
  pcd: 'pcd-latn-fr',
  pce: 'pce-mymr-mm',
  'pce-thai': 'pce-thai-th',
  pcf: 'pcf-mlym-in',
  pcg: 'pcg-mlym-in',
  'pcg-knda': 'pcg-knda-in',
  'pcg-taml': 'pcg-taml-in',
  pch: 'pch-deva-in',
  pci: 'pci-deva-in',
  'pci-orya': 'pci-orya-in',
  pcj: 'pcj-telu-in',
  pck: 'pck-latn-in',
  pcm: 'pcm-latn-ng',
  pcn: 'pcn-latn-ng',
  pcp: 'pcp-latn-bo',
  pcw: 'pcw-latn-ng',
  pda: 'pda-latn-pg',
  pdc: 'pdc-latn-us',
  pdn: 'pdn-latn-id',
  pdo: 'pdo-latn-id',
  pdt: 'pdt-latn-ca',
  pdu: 'pdu-latn-mm',
  'pdu-mymr': 'pdu-mymr-mm',
  pea: 'pea-latn-id',
  peb: 'peb-latn-us',
  ped: 'ped-latn-zz',
  pee: 'pee-latn-id',
  peg: 'peg-orya-in',
  pei: 'pei-latn-mx',
  pek: 'pek-latn-pg',
  pel: 'pel-latn-id',
  pem: 'pem-latn-cd',
  peo: 'peo-xpeo-ir',
  pep: 'pep-latn-pg',
  peq: 'peq-latn-us',
  pev: 'pev-latn-ve',
  pex: 'pex-latn-zz',
  pey: 'pey-latn-id',
  pez: 'pez-latn-my',
  pfa: 'pfa-latn-fm',
  pfe: 'pfe-latn-cm',
  pfl: 'pfl-latn-de',
  pga: 'pga-latn-ss',
  pgd: 'pgd-khar-pk',
  pgg: 'pgg-deva-in',
  pgi: 'pgi-latn-pg',
  pgk: 'pgk-latn-vu',
  pgl: 'pgl-ogam-ie',
  pgn: 'pgn-ital-it',
  pgs: 'pgs-latn-ng',
  pgu: 'pgu-latn-id',
  phd: 'phd-deva-in',
  phg: 'phg-latn-vn',
  phh: 'phh-latn-vn',
  phk: 'phk-mymr-in',
  phl: 'phl-arab-zz',
  phm: 'phm-latn-mz',
  phn: 'phn-phnx-lb',
  pho: 'pho-laoo-la',
  phr: 'phr-arab-pk',
  pht: 'pht-thai-th',
  phv: 'phv-arab-af',
  phw: 'phw-deva-np',
  pi: 'pi-sinh-in',
  'pi-brah': 'pi-brah-in',
  'pi-deva': 'pi-deva-in',
  'pi-khar': 'pi-khar-in',
  'pi-khmr': 'pi-khmr-in',
  'pi-mymr': 'pi-mymr-in',
  'pi-thai': 'pi-thai-in',
  pia: 'pia-latn-mx',
  pib: 'pib-latn-pe',
  pic: 'pic-latn-ga',
  pid: 'pid-latn-ve',
  pif: 'pif-latn-fm',
  pig: 'pig-latn-pe',
  pih: 'pih-latn-nf',
  pij: 'pij-latn-co',
  pil: 'pil-latn-zz',
  pim: 'pim-latn-us',
  pin: 'pin-latn-pg',
  pio: 'pio-latn-co',
  pip: 'pip-latn-zz',
  pir: 'pir-latn-br',
  pis: 'pis-latn-sb',
  pit: 'pit-latn-au',
  piu: 'piu-latn-au',
  piv: 'piv-latn-sb',
  piw: 'piw-latn-tz',
  pix: 'pix-latn-pg',
  piy: 'piy-latn-ng',
  piz: 'piz-latn-nc',
  pjt: 'pjt-latn-au',
  pka: 'pka-brah-in',
  pkb: 'pkb-latn-ke',
  pkg: 'pkg-latn-pg',
  pkh: 'pkh-latn-bd',
  'pkh-deva': 'pkh-deva-bd',
  pkn: 'pkn-latn-au',
  pko: 'pko-latn-ke',
  pkp: 'pkp-latn-ck',
  pkr: 'pkr-mlym-in',
  pku: 'pku-latn-id',
  pl: 'pl-latn-pl',
  pla: 'pla-latn-zz',
  plb: 'plb-latn-vu',
  plc: 'plc-latn-ph',
  pld: 'pld-latn-gb',
  ple: 'ple-latn-id',
  plg: 'plg-latn-ar',
  plh: 'plh-latn-id',
  plj: 'plj-latn-ng',
  plk: 'plk-arab-pk',
  pll: 'pll-mymr-mm',
  pln: 'pln-latn-co',
  plo: 'plo-latn-mx',
  plr: 'plr-latn-ci',
  pls: 'pls-latn-mx',
  plu: 'plu-latn-br',
  plv: 'plv-latn-ph',
  plw: 'plw-latn-ph',
  plz: 'plz-latn-my',
  pma: 'pma-latn-vu',
  pmb: 'pmb-latn-cd',
  pmd: 'pmd-latn-au',
  pme: 'pme-latn-nc',
  pmf: 'pmf-latn-id',
  pmh: 'pmh-brah-in',
  pmi: 'pmi-latn-cn',
  pmj: 'pmj-latn-cn',
  pml: 'pml-latn-tn',
  pmm: 'pmm-latn-cm',
  pmn: 'pmn-latn-cm',
  pmo: 'pmo-latn-id',
  pmq: 'pmq-latn-mx',
  pmr: 'pmr-latn-pg',
  pms: 'pms-latn-it',
  pmt: 'pmt-latn-pf',
  pmw: 'pmw-latn-us',
  pmx: 'pmx-latn-in',
  pmy: 'pmy-latn-id',
  pmz: 'pmz-latn-mx',
  pna: 'pna-latn-my',
  pnc: 'pnc-latn-id',
  pnd: 'pnd-latn-ao',
  pne: 'pne-latn-my',
  png: 'png-latn-zz',
  pnh: 'pnh-latn-ck',
  pni: 'pni-latn-id',
  pnj: 'pnj-latn-au',
  pnk: 'pnk-latn-bo',
  pnl: 'pnl-latn-bf',
  pnm: 'pnm-latn-my',
  pnn: 'pnn-latn-zz',
  pno: 'pno-latn-pe',
  pnp: 'pnp-latn-id',
  pnq: 'pnq-latn-bf',
  pnr: 'pnr-latn-pg',
  pns: 'pns-latn-id',
  pnt: 'pnt-grek-gr',
  pnv: 'pnv-latn-au',
  pnw: 'pnw-latn-au',
  pny: 'pny-latn-cm',
  pnz: 'pnz-latn-cf',
  poc: 'poc-latn-gt',
  poe: 'poe-latn-mx',
  pof: 'pof-latn-cd',
  pog: 'pog-latn-br',
  poh: 'poh-latn-gt',
  poi: 'poi-latn-mx',
  pok: 'pok-latn-br',
  pom: 'pom-latn-us',
  pon: 'pon-latn-fm',
  poo: 'poo-latn-us',
  pop: 'pop-latn-nc',
  poq: 'poq-latn-mx',
  pos: 'pos-latn-mx',
  pot: 'pot-latn-us',
  pov: 'pov-latn-gw',
  pow: 'pow-latn-mx',
  poy: 'poy-latn-tz',
  ppa: 'ppa-deva-in',
  ppe: 'ppe-latn-pg',
  ppi: 'ppi-latn-mx',
  ppk: 'ppk-latn-id',
  ppl: 'ppl-latn-sv',
  ppm: 'ppm-latn-id',
  ppn: 'ppn-latn-pg',
  ppo: 'ppo-latn-zz',
  ppp: 'ppp-latn-cd',
  ppq: 'ppq-latn-pg',
  pps: 'pps-latn-mx',
  ppt: 'ppt-latn-pg',
  pqa: 'pqa-latn-ng',
  pqm: 'pqm-latn-ca',
  pra: 'pra-khar-pk',
  prc: 'prc-arab-af',
  prd: 'prd-arab-ir',
  pre: 'pre-latn-st',
  prf: 'prf-latn-ph',
  prg: 'prg-latn-001',
  prh: 'prh-latn-ph',
  pri: 'pri-latn-nc',
  prk: 'prk-latn-mm',
  prm: 'prm-latn-pg',
  pro: 'pro-latn-fr',
  prp: 'prp-gujr-in',
  prq: 'prq-latn-pe',
  prr: 'prr-latn-br',
  prt: 'prt-thai-th',
  pru: 'pru-latn-id',
  prw: 'prw-latn-pg',
  prx: 'prx-arab-in',
  'prx-tibt': 'prx-tibt-in',
  ps: 'ps-arab-af',
  psa: 'psa-latn-id',
  pse: 'pse-latn-id',
  psh: 'psh-arab-af',
  psi: 'psi-arab-af',
  psm: 'psm-latn-bo',
  psn: 'psn-latn-id',
  psq: 'psq-latn-pg',
  pss: 'pss-latn-zz',
  pst: 'pst-arab-pk',
  psw: 'psw-latn-vu',
  pt: 'pt-latn-br',
  pta: 'pta-latn-py',
  pth: 'pth-latn-br',
  pti: 'pti-latn-au',
  ptn: 'ptn-latn-id',
  pto: 'pto-latn-br',
  ptp: 'ptp-latn-zz',
  ptr: 'ptr-latn-vu',
  ptt: 'ptt-latn-id',
  ptu: 'ptu-latn-id',
  ptv: 'ptv-latn-vu',
  pua: 'pua-latn-mx',
  pub: 'pub-latn-in',
  puc: 'puc-latn-id',
  pud: 'pud-latn-id',
  pue: 'pue-latn-ar',
  puf: 'puf-latn-id',
  pug: 'pug-latn-bf',
  pui: 'pui-latn-co',
  puj: 'puj-latn-id',
  pum: 'pum-deva-np',
  puo: 'puo-latn-vn',
  pup: 'pup-latn-pg',
  puq: 'puq-latn-pe',
  pur: 'pur-latn-br',
  put: 'put-latn-id',
  puu: 'puu-latn-ga',
  puw: 'puw-latn-fm',
  pux: 'pux-latn-pg',
  puy: 'puy-latn-us',
  pwa: 'pwa-latn-zz',
  pwb: 'pwb-latn-ng',
  pwg: 'pwg-latn-pg',
  pwm: 'pwm-latn-ph',
  pwn: 'pwn-latn-tw',
  pwo: 'pwo-mymr-mm',
  pwr: 'pwr-deva-in',
  pww: 'pww-thai-th',
  pxm: 'pxm-latn-mx',
  pye: 'pye-latn-ci',
  pym: 'pym-latn-ng',
  pyn: 'pyn-latn-br',
  pyu: 'pyu-latn-tw',
  'pyu-hani': 'pyu-hani-tw',
  pyx: 'pyx-mymr-mm',
  pyy: 'pyy-latn-mm',
  pzh: 'pzh-latn-tw',
  pzn: 'pzn-latn-mm',
  qu: 'qu-latn-pe',
  qua: 'qua-latn-us',
  qub: 'qub-latn-pe',
  quc: 'quc-latn-gt',
  qud: 'qud-latn-ec',
  quf: 'quf-latn-pe',
  qug: 'qug-latn-ec',
  qui: 'qui-latn-us',
  quk: 'quk-latn-pe',
  qul: 'qul-latn-bo',
  qum: 'qum-latn-gt',
  qun: 'qun-latn-us',
  qup: 'qup-latn-pe',
  quq: 'quq-latn-es',
  qur: 'qur-latn-pe',
  qus: 'qus-latn-ar',
  quv: 'quv-latn-gt',
  quw: 'quw-latn-ec',
  qux: 'qux-latn-pe',
  quy: 'quy-latn-pe',
  qva: 'qva-latn-pe',
  qvc: 'qvc-latn-pe',
  qve: 'qve-latn-pe',
  qvh: 'qvh-latn-pe',
  qvi: 'qvi-latn-ec',
  qvj: 'qvj-latn-ec',
  qvl: 'qvl-latn-pe',
  qvm: 'qvm-latn-pe',
  qvn: 'qvn-latn-pe',
  qvo: 'qvo-latn-pe',
  qvp: 'qvp-latn-pe',
  qvs: 'qvs-latn-pe',
  qvw: 'qvw-latn-pe',
  qvz: 'qvz-latn-ec',
  qwa: 'qwa-latn-pe',
  qwc: 'qwc-latn-pe',
  qwh: 'qwh-latn-pe',
  qwm: 'qwm-latn-ru',
  'qwm-cyrl': 'qwm-cyrl-ru',
  'qwm-runr': 'qwm-runr-ru',
  qws: 'qws-latn-pe',
  qwt: 'qwt-latn-us',
  qxa: 'qxa-latn-pe',
  qxc: 'qxc-latn-pe',
  qxh: 'qxh-latn-pe',
  qxl: 'qxl-latn-ec',
  qxn: 'qxn-latn-pe',
  qxo: 'qxo-latn-pe',
  qxp: 'qxp-latn-pe',
  qxq: 'qxq-arab-ir',
  qxr: 'qxr-latn-ec',
  qxt: 'qxt-latn-pe',
  qxu: 'qxu-latn-pe',
  qxw: 'qxw-latn-pe',
  qya: 'qya-latn-001',
  qyp: 'qyp-latn-us',
  raa: 'raa-deva-np',
  rab: 'rab-deva-np',
  rac: 'rac-latn-id',
  rad: 'rad-latn-vn',
  raf: 'raf-deva-np',
  rag: 'rag-latn-ke',
  rah: 'rah-beng-in',
  'rah-latn': 'rah-latn-in',
  rai: 'rai-latn-zz',
  raj: 'raj-deva-in',
  rak: 'rak-latn-pg',
  ram: 'ram-latn-br',
  ran: 'ran-latn-id',
  rao: 'rao-latn-zz',
  rap: 'rap-latn-cl',
  rar: 'rar-latn-ck',
  rav: 'rav-deva-np',
  raw: 'raw-latn-mm',
  rax: 'rax-latn-ng',
  ray: 'ray-latn-pf',
  raz: 'raz-latn-id',
  rbb: 'rbb-mymr-mm',
  rbk: 'rbk-latn-ph',
  rbl: 'rbl-latn-ph',
  rbp: 'rbp-latn-au',
  rcf: 'rcf-latn-re',
  rdb: 'rdb-arab-ir',
  rea: 'rea-latn-pg',
  reb: 'reb-latn-id',
  ree: 'ree-latn-my',
  reg: 'reg-latn-tz',
  rei: 'rei-orya-in',
  'rei-telu': 'rei-telu-in',
  rej: 'rej-latn-id',
  rel: 'rel-latn-zz',
  rem: 'rem-latn-pe',
  ren: 'ren-latn-vn',
  res: 'res-latn-zz',
  ret: 'ret-latn-id',
  rey: 'rey-latn-bo',
  rga: 'rga-latn-vu',
  rgn: 'rgn-latn-it',
  rgr: 'rgr-latn-pe',
  rgs: 'rgs-latn-vn',
  rgu: 'rgu-latn-id',
  rhg: 'rhg-rohg-mm',
  rhp: 'rhp-latn-pg',
  ria: 'ria-latn-in',
  rif: 'rif-latn-ma',
  ril: 'ril-latn-mm',
  rim: 'rim-latn-tz',
  rin: 'rin-latn-ng',
  rir: 'rir-latn-id',
  rit: 'rit-latn-au',
  riu: 'riu-latn-id',
  rjg: 'rjg-latn-id',
  rji: 'rji-deva-np',
  rjs: 'rjs-deva-np',
  rka: 'rka-khmr-kh',
  rkb: 'rkb-latn-br',
  rkh: 'rkh-latn-ck',
  rki: 'rki-mymr-mm',
  rkm: 'rkm-latn-bf',
  rkt: 'rkt-beng-bd',
  rkw: 'rkw-latn-au',
  rm: 'rm-latn-ch',
  rma: 'rma-latn-ni',
  rmb: 'rmb-latn-au',
  rmc: 'rmc-latn-sk',
  rmd: 'rmd-latn-dk',
  rme: 'rme-latn-gb',
  rmf: 'rmf-latn-fi',
  rmg: 'rmg-latn-no',
  rmh: 'rmh-latn-id',
  rmi: 'rmi-armn-am',
  rmk: 'rmk-latn-pg',
  rml: 'rml-latn-pl',
  'rml-cyrl': 'rml-cyrl-by',
  rmm: 'rmm-latn-id',
  rmn: 'rmn-latn-rs',
  'rmn-cyrl': 'rmn-cyrl-bg',
  'rmn-grek': 'rmn-grek-gr',
  rmo: 'rmo-latn-ch',
  rmp: 'rmp-latn-pg',
  rmq: 'rmq-latn-es',
  rmt: 'rmt-arab-ir',
  rmu: 'rmu-latn-se',
  rmw: 'rmw-latn-gb',
  rmx: 'rmx-latn-vn',
  rmz: 'rmz-mymr-in',
  rn: 'rn-latn-bi',
  rna: 'rna-latn-zz',
  rnd: 'rnd-latn-cd',
  rng: 'rng-latn-mz',
  rnl: 'rnl-latn-in',
  rnn: 'rnn-latn-id',
  rnr: 'rnr-latn-au',
  rnw: 'rnw-latn-tz',
  ro: 'ro-latn-ro',
  rob: 'rob-latn-id',
  roc: 'roc-latn-vn',
  rod: 'rod-latn-ng',
  roe: 'roe-latn-pg',
  rof: 'rof-latn-tz',
  rog: 'rog-latn-vn',
  rol: 'rol-latn-ph',
  rom: 'rom-latn-ro',
  'rom-cyrl': 'rom-cyrl-ro',
  roo: 'roo-latn-zz',
  rop: 'rop-latn-au',
  ror: 'ror-latn-id',
  rou: 'rou-latn-td',
  row: 'row-latn-id',
  rpn: 'rpn-latn-vu',
  rpt: 'rpt-latn-pg',
  rri: 'rri-latn-sb',
  rro: 'rro-latn-zz',
  rrt: 'rrt-latn-au',
  rsk: 'rsk-cyrl-rs',
  rtc: 'rtc-latn-mm',
  rth: 'rth-latn-id',
  rtm: 'rtm-latn-fj',
  rtw: 'rtw-deva-in',
  ru: 'ru-cyrl-ru',
  rub: 'rub-latn-ug',
  ruc: 'ruc-latn-ug',
  rue: 'rue-cyrl-ua',
  ruf: 'ruf-latn-tz',
  rug: 'rug-latn-sb',
  rui: 'rui-latn-tz',
  ruk: 'ruk-latn-ng',
  ruo: 'ruo-latn-hr',
  rup: 'rup-latn-ro',
  'rup-grek': 'rup-grek-gr',
  ruq: 'ruq-latn-gr',
  rut: 'rut-cyrl-ru',
  'rut-latn': 'rut-latn-az',
  ruu: 'ruu-latn-my',
  ruy: 'ruy-latn-ng',
  ruz: 'ruz-latn-ng',
  rw: 'rw-latn-rw',
  rwa: 'rwa-latn-pg',
  rwk: 'rwk-latn-tz',
  rwl: 'rwl-latn-tz',
  rwm: 'rwm-latn-ug',
  rwo: 'rwo-latn-zz',
  rwr: 'rwr-deva-in',
  rxd: 'rxd-latn-au',
  rxw: 'rxw-latn-au',
  ryu: 'ryu-kana-jp',
  sa: 'sa-deva-in',
  saa: 'saa-latn-td',
  sab: 'sab-latn-pa',
  sac: 'sac-latn-us',
  sad: 'sad-latn-tz',
  sae: 'sae-latn-br',
  saf: 'saf-latn-gh',
  sah: 'sah-cyrl-ru',
  saj: 'saj-latn-id',
  sak: 'sak-latn-ga',
  sam: 'sam-samr-ps',
  'sam-hebr': 'sam-hebr-ps',
  'sam-syrc': 'sam-syrc-ps',
  sao: 'sao-latn-id',
  saq: 'saq-latn-ke',
  sar: 'sar-latn-bo',
  sas: 'sas-latn-id',
  sat: 'sat-olck-in',
  sau: 'sau-latn-id',
  sav: 'sav-latn-sn',
  saw: 'saw-latn-id',
  sax: 'sax-latn-vu',
  say: 'say-latn-ng',
  saz: 'saz-saur-in',
  sba: 'sba-latn-zz',
  sbb: 'sbb-latn-sb',
  sbc: 'sbc-latn-pg',
  sbd: 'sbd-latn-bf',
  sbe: 'sbe-latn-zz',
  sbg: 'sbg-latn-id',
  sbh: 'sbh-latn-pg',
  sbi: 'sbi-latn-pg',
  sbj: 'sbj-latn-td',
  sbk: 'sbk-latn-tz',
  sbl: 'sbl-latn-ph',
  sbm: 'sbm-latn-tz',
  sbn: 'sbn-arab-pk',
  sbo: 'sbo-latn-my',
  sbp: 'sbp-latn-tz',
  sbq: 'sbq-latn-pg',
  sbr: 'sbr-latn-id',
  sbs: 'sbs-latn-na',
  sbt: 'sbt-latn-id',
  sbu: 'sbu-tibt-in',
  'sbu-deva': 'sbu-deva-in',
  sbv: 'sbv-latn-it',
  sbw: 'sbw-latn-ga',
  sbx: 'sbx-latn-id',
  sby: 'sby-latn-zm',
  sbz: 'sbz-latn-cf',
  sc: 'sc-latn-it',
  scb: 'scb-latn-vn',
  sce: 'sce-latn-cn',
  'sce-arab': 'sce-arab-cn',
  scf: 'scf-latn-pa',
  scg: 'scg-latn-id',
  sch: 'sch-latn-in',
  sci: 'sci-latn-lk',
  sck: 'sck-deva-in',
  scl: 'scl-arab-zz',
  scn: 'scn-latn-it',
  sco: 'sco-latn-gb',
  scp: 'scp-deva-np',
  scs: 'scs-latn-ca',
  'scs-cans': 'scs-cans-ca',
  sct: 'sct-laoo-la',
  scu: 'scu-takr-in',
  scv: 'scv-latn-ng',
  scw: 'scw-latn-ng',
  scx: 'scx-grek-it',
  sd: 'sd-arab-pk',
  'sd-deva': 'sd-deva-in',
  'sd-in': 'sd-deva-in',
  'sd-khoj': 'sd-khoj-in',
  'sd-sind': 'sd-sind-in',
  sda: 'sda-latn-id',
  sdb: 'sdb-arab-iq',
  sdc: 'sdc-latn-it',
  sde: 'sde-latn-ng',
  sdf: 'sdf-arab-iq',
  sdg: 'sdg-arab-af',
  sdh: 'sdh-arab-ir',
  sdj: 'sdj-latn-cg',
  sdk: 'sdk-latn-pg',
  sdn: 'sdn-latn-it',
  sdo: 'sdo-latn-my',
  sdq: 'sdq-latn-id',
  sds: 'sds-arab-tn',
  sdu: 'sdu-latn-id',
  sdx: 'sdx-latn-my',
  se: 'se-latn-no',
  sea: 'sea-latn-my',
  seb: 'seb-latn-ci',
  sec: 'sec-latn-ca',
  sed: 'sed-latn-vn',
  see: 'see-latn-us',
  sef: 'sef-latn-ci',
  seg: 'seg-latn-tz',
  seh: 'seh-latn-mz',
  sei: 'sei-latn-mx',
  sej: 'sej-latn-pg',
  sek: 'sek-latn-ca',
  'sek-cans': 'sek-cans-ca',
  sel: 'sel-cyrl-ru',
  sen: 'sen-latn-bf',
  seo: 'seo-latn-pg',
  sep: 'sep-latn-bf',
  seq: 'seq-latn-bf',
  ser: 'ser-latn-us',
  ses: 'ses-latn-ml',
  set: 'set-latn-id',
  seu: 'seu-latn-id',
  sev: 'sev-latn-ci',
  sew: 'sew-latn-pg',
  sey: 'sey-latn-ec',
  sez: 'sez-latn-mm',
  sfe: 'sfe-latn-ph',
  sfm: 'sfm-plrd-cn',
  sfw: 'sfw-latn-gh',
  sg: 'sg-latn-cf',
  sga: 'sga-ogam-ie',
  sgb: 'sgb-latn-ph',
  sgc: 'sgc-latn-ke',
  sgd: 'sgd-latn-ph',
  sge: 'sge-latn-id',
  sgh: 'sgh-cyrl-tj',
  'sgh-arab': 'sgh-arab-af',
  'sgh-latn': 'sgh-latn-tj',
  sgi: 'sgi-latn-cm',
  sgj: 'sgj-deva-in',
  sgm: 'sgm-latn-ke',
  sgp: 'sgp-latn-in',
  sgr: 'sgr-arab-ir',
  sgs: 'sgs-latn-lt',
  sgt: 'sgt-tibt-bt',
  sgu: 'sgu-latn-id',
  sgw: 'sgw-ethi-zz',
  sgy: 'sgy-arab-af',
  sgz: 'sgz-latn-zz',
  sha: 'sha-latn-ng',
  shb: 'shb-latn-br',
  shc: 'shc-latn-cd',
  shd: 'shd-arab-pk',
  she: 'she-latn-et',
  shg: 'shg-latn-bw',
  shh: 'shh-latn-us',
  shi: 'shi-tfng-ma',
  shj: 'shj-latn-sd',
  shk: 'shk-latn-zz',
  shm: 'shm-arab-ir',
  shn: 'shn-mymr-mm',
  sho: 'sho-latn-ng',
  shp: 'shp-latn-pe',
  shq: 'shq-latn-zm',
  shr: 'shr-latn-cd',
  shs: 'shs-latn-ca',
  sht: 'sht-latn-us',
  shu: 'shu-arab-zz',
  shv: 'shv-arab-om',
  shw: 'shw-latn-sd',
  shy: 'shy-latn-dz',
  'shy-arab': 'shy-arab-dz',
  'shy-tfng': 'shy-tfng-dz',
  shz: 'shz-latn-ml',
  si: 'si-sinh-lk',
  sia: 'sia-cyrl-ru',
  sib: 'sib-latn-my',
  sid: 'sid-latn-et',
  sie: 'sie-latn-zm',
  sif: 'sif-latn-bf',
  sig: 'sig-latn-zz',
  sih: 'sih-latn-nc',
  sii: 'sii-latn-in',
  sij: 'sij-latn-pg',
  sik: 'sik-latn-br',
  sil: 'sil-latn-zz',
  sim: 'sim-latn-zz',
  sip: 'sip-tibt-in',
  siq: 'siq-latn-pg',
  sir: 'sir-latn-ng',
  sis: 'sis-latn-us',
  siu: 'siu-latn-pg',
  siv: 'siv-latn-pg',
  siw: 'siw-latn-pg',
  six: 'six-latn-pg',
  siy: 'siy-arab-ir',
  siz: 'siz-arab-eg',
  sja: 'sja-latn-co',
  sjb: 'sjb-latn-id',
  sjd: 'sjd-cyrl-ru',
  sje: 'sje-latn-se',
  sjg: 'sjg-latn-td',
  sjl: 'sjl-latn-in',
  sjm: 'sjm-latn-ph',
  sjp: 'sjp-deva-in',
  'sjp-beng': 'sjp-beng-in',
  sjr: 'sjr-latn-zz',
  sjt: 'sjt-cyrl-ru',
  sju: 'sju-latn-se',
  sjw: 'sjw-latn-us',
  sk: 'sk-latn-sk',
  ska: 'ska-latn-us',
  skb: 'skb-thai-th',
  skc: 'skc-latn-zz',
  skd: 'skd-latn-us',
  ske: 'ske-latn-vu',
  skf: 'skf-latn-br',
  skg: 'skg-latn-mg',
  skh: 'skh-latn-id',
  ski: 'ski-latn-id',
  skj: 'skj-deva-np',
  skm: 'skm-latn-pg',
  skn: 'skn-latn-ph',
  sko: 'sko-latn-id',
  skp: 'skp-latn-my',
  skq: 'skq-latn-bf',
  skr: 'skr-arab-pk',
  sks: 'sks-latn-zz',
  skt: 'skt-latn-cd',
  sku: 'sku-latn-vu',
  skv: 'skv-latn-id',
  skw: 'skw-latn-gy',
  skx: 'skx-latn-id',
  sky: 'sky-latn-sb',
  skz: 'skz-latn-id',
  sl: 'sl-latn-si',
  slc: 'slc-latn-co',
  sld: 'sld-latn-zz',
  slg: 'slg-latn-id',
  slh: 'slh-latn-us',
  sli: 'sli-latn-pl',
  slj: 'slj-latn-br',
  sll: 'sll-latn-zz',
  slm: 'slm-latn-ph',
  sln: 'sln-latn-us',
  slp: 'slp-latn-id',
  slq: 'slq-arab-ir',
  slr: 'slr-latn-cn',
  slu: 'slu-latn-id',
  slw: 'slw-latn-pg',
  slx: 'slx-latn-cd',
  sly: 'sly-latn-id',
  slz: 'slz-latn-id',
  sm: 'sm-latn-ws',
  sma: 'sma-latn-se',
  smb: 'smb-latn-pg',
  smc: 'smc-latn-pg',
  smd: 'smd-latn-ao',
  smf: 'smf-latn-pg',
  smg: 'smg-latn-pg',
  smh: 'smh-yiii-cn',
  smj: 'smj-latn-se',
  smk: 'smk-latn-ph',
  sml: 'sml-latn-ph',
  smn: 'smn-latn-fi',
  smp: 'smp-samr-il',
  smq: 'smq-latn-zz',
  smr: 'smr-latn-id',
  sms: 'sms-latn-fi',
  smt: 'smt-latn-in',
  smu: 'smu-khmr-kh',
  smw: 'smw-latn-id',
  smx: 'smx-latn-cd',
  smy: 'smy-arab-ir',
  smz: 'smz-latn-pg',
  sn: 'sn-latn-zw',
  snb: 'snb-latn-my',
  snc: 'snc-latn-zz',
  sne: 'sne-latn-my',
  snf: 'snf-latn-sn',
  sng: 'sng-latn-cd',
  'sng-brai': 'sng-brai-cd',
  sni: 'sni-latn-pe',
  snj: 'snj-latn-cf',
  snk: 'snk-latn-ml',
  snl: 'snl-latn-ph',
  snm: 'snm-latn-ug',
  snn: 'snn-latn-co',
  sno: 'sno-latn-us',
  snp: 'snp-latn-zz',
  snq: 'snq-latn-ga',
  snr: 'snr-latn-pg',
  sns: 'sns-latn-vu',
  snu: 'snu-latn-id',
  snv: 'snv-latn-my',
  snw: 'snw-latn-gh',
  snx: 'snx-latn-zz',
  sny: 'sny-latn-zz',
  snz: 'snz-latn-pg',
  so: 'so-latn-so',
  soa: 'soa-tavt-th',
  'soa-thai': 'soa-thai-th',
  sob: 'sob-latn-id',
  soc: 'soc-latn-cd',
  sod: 'sod-latn-cd',
  soe: 'soe-latn-cd',
  sog: 'sog-sogd-uz',
  soi: 'soi-deva-np',
  sok: 'sok-latn-zz',
  sol: 'sol-latn-pg',
  soo: 'soo-latn-cd',
  sop: 'sop-latn-cd',
  soq: 'soq-latn-zz',
  sor: 'sor-latn-td',
  sos: 'sos-latn-bf',
  sou: 'sou-thai-th',
  sov: 'sov-latn-pw',
  sow: 'sow-latn-pg',
  sox: 'sox-latn-cm',
  soy: 'soy-latn-zz',
  soz: 'soz-latn-tz',
  spb: 'spb-latn-id',
  spc: 'spc-latn-ve',
  spd: 'spd-latn-zz',
  spe: 'spe-latn-pg',
  spg: 'spg-latn-my',
  spi: 'spi-latn-id',
  spk: 'spk-latn-pg',
  spl: 'spl-latn-zz',
  spm: 'spm-latn-pg',
  spn: 'spn-latn-py',
  spo: 'spo-latn-us',
  spp: 'spp-latn-ml',
  spq: 'spq-latn-pe',
  spr: 'spr-latn-id',
  sps: 'sps-latn-zz',
  spt: 'spt-tibt-in',
  spv: 'spv-orya-in',
  sq: 'sq-latn-al',
  sqa: 'sqa-latn-ng',
  sqh: 'sqh-latn-ng',
  sqm: 'sqm-latn-cf',
  sqo: 'sqo-arab-ir',
  sqq: 'sqq-laoo-la',
  sqt: 'sqt-arab-ye',
  'sqt-latn': 'sqt-latn-ye',
  squ: 'squ-latn-ca',
  sr: 'sr-cyrl-rs',
  'sr-me': 'sr-latn-me',
  'sr-ro': 'sr-latn-ro',
  'sr-ru': 'sr-latn-ru',
  'sr-tr': 'sr-latn-tr',
  sra: 'sra-latn-pg',
  srb: 'srb-sora-in',
  sre: 'sre-latn-id',
  srf: 'srf-latn-pg',
  srg: 'srg-latn-ph',
  srh: 'srh-arab-cn',
  sri: 'sri-latn-co',
  srk: 'srk-latn-my',
  srl: 'srl-latn-id',
  srm: 'srm-latn-sr',
  srn: 'srn-latn-sr',
  sro: 'sro-latn-it',
  srq: 'srq-latn-bo',
  srr: 'srr-latn-sn',
  srs: 'srs-latn-ca',
  srt: 'srt-latn-id',
  sru: 'sru-latn-br',
  srv: 'srv-latn-ph',
  srw: 'srw-latn-id',
  srx: 'srx-deva-in',
  sry: 'sry-latn-pg',
  srz: 'srz-arab-ir',
  ss: 'ss-latn-za',
  ssb: 'ssb-latn-ph',
  ssc: 'ssc-latn-tz',
  ssd: 'ssd-latn-zz',
  sse: 'sse-latn-ph',
  'sse-arab': 'sse-arab-ph',
  ssf: 'ssf-latn-tw',
  ssg: 'ssg-latn-zz',
  ssh: 'ssh-arab-ae',
  ssj: 'ssj-latn-pg',
  ssl: 'ssl-latn-gh',
  ssm: 'ssm-latn-my',
  ssn: 'ssn-latn-ke',
  sso: 'sso-latn-pg',
  ssq: 'ssq-latn-id',
  sss: 'sss-laoo-la',
  'sss-thai': 'sss-thai-th',
  sst: 'sst-latn-pg',
  ssu: 'ssu-latn-pg',
  ssv: 'ssv-latn-vu',
  ssx: 'ssx-latn-pg',
  ssy: 'ssy-latn-er',
  ssz: 'ssz-latn-pg',
  st: 'st-latn-za',
  sta: 'sta-latn-zm',
  stb: 'stb-latn-ph',
  ste: 'ste-latn-id',
  stf: 'stf-latn-pg',
  stg: 'stg-latn-vn',
  sth: 'sth-latn-ie',
  sti: 'sti-latn-vn',
  'sti-kh': 'sti-latn-kh',
  stj: 'stj-latn-bf',
  stk: 'stk-latn-zz',
  stl: 'stl-latn-nl',
  stm: 'stm-latn-pg',
  stn: 'stn-latn-sb',
  sto: 'sto-latn-ca',
  stp: 'stp-latn-mx',
  stq: 'stq-latn-de',
  str: 'str-latn-ca',
  sts: 'sts-arab-af',
  stt: 'stt-latn-vn',
  stv: 'stv-ethi-et',
  'stv-arab': 'stv-arab-et',
  stw: 'stw-latn-fm',
  sty: 'sty-cyrl-ru',
  su: 'su-latn-id',
  sua: 'sua-latn-zz',
  sub: 'sub-latn-cd',
  suc: 'suc-latn-ph',
  sue: 'sue-latn-zz',
  sug: 'sug-latn-pg',
  sui: 'sui-latn-pg',
  suj: 'suj-latn-tz',
  suk: 'suk-latn-tz',
  suo: 'suo-latn-pg',
  suq: 'suq-latn-et',
  'suq-ethi': 'suq-ethi-et',
  sur: 'sur-latn-zz',
  sus: 'sus-latn-gn',
  sut: 'sut-latn-ni',
  suv: 'suv-latn-in',
  'suv-beng': 'suv-beng-in',
  'suv-deva': 'suv-deva-in',
  suw: 'suw-latn-tz',
  suy: 'suy-latn-br',
  suz: 'suz-deva-np',
  sv: 'sv-latn-se',
  sva: 'sva-geor-ge',
  'sva-cyrl': 'sva-cyrl-ge',
  'sva-latn': 'sva-latn-ge',
  svb: 'svb-latn-pg',
  svc: 'svc-latn-vc',
  sve: 'sve-latn-id',
  svm: 'svm-latn-it',
  svs: 'svs-latn-sb',
  sw: 'sw-latn-tz',
  swb: 'swb-arab-yt',
  swc: 'swc-latn-cd',
  swf: 'swf-latn-cd',
  swg: 'swg-latn-de',
  swi: 'swi-hani-cn',
  swj: 'swj-latn-ga',
  swk: 'swk-latn-mw',
  swm: 'swm-latn-pg',
  swo: 'swo-latn-br',
  swp: 'swp-latn-zz',
  swq: 'swq-latn-cm',
  swr: 'swr-latn-id',
  sws: 'sws-latn-id',
  swt: 'swt-latn-id',
  swu: 'swu-latn-id',
  swv: 'swv-deva-in',
  sww: 'sww-latn-vu',
  swx: 'swx-latn-br',
  swy: 'swy-latn-td',
  sxb: 'sxb-latn-ke',
  sxe: 'sxe-latn-ga',
  sxn: 'sxn-latn-id',
  sxr: 'sxr-latn-tw',
  sxs: 'sxs-latn-ng',
  sxu: 'sxu-latn-de',
  'sxu-runr': 'sxu-runr-de',
  sxw: 'sxw-latn-zz',
  sya: 'sya-latn-id',
  syb: 'syb-latn-ph',
  syc: 'syc-syrc-tr',
  syi: 'syi-latn-ga',
  syk: 'syk-latn-ng',
  syl: 'syl-beng-bd',
  sym: 'sym-latn-bf',
  syn: 'syn-syrc-ir',
  syo: 'syo-latn-kh',
  syr: 'syr-syrc-iq',
  sys: 'sys-latn-td',
  syw: 'syw-deva-np',
  syx: 'syx-latn-ga',
  sza: 'sza-latn-my',
  szb: 'szb-latn-id',
  szc: 'szc-latn-my',
  szd: 'szd-latn-my',
  szg: 'szg-latn-cd',
  szl: 'szl-latn-pl',
  szn: 'szn-latn-id',
  szp: 'szp-latn-id',
  szv: 'szv-latn-cm',
  szw: 'szw-latn-id',
  szy: 'szy-latn-tw',
  ta: 'ta-taml-in',
  taa: 'taa-latn-us',
  tab: 'tab-cyrl-ru',
  tac: 'tac-latn-mx',
  tad: 'tad-latn-id',
  tae: 'tae-latn-br',
  taf: 'taf-latn-br',
  tag: 'tag-latn-sd',
  taj: 'taj-deva-np',
  tak: 'tak-latn-ng',
  tal: 'tal-latn-zz',
  tan: 'tan-latn-zz',
  tao: 'tao-latn-tw',
  tap: 'tap-latn-cd',
  taq: 'taq-latn-zz',
  tar: 'tar-latn-mx',
  tas: 'tas-latn-vn',
  tau: 'tau-latn-us',
  tav: 'tav-latn-co',
  taw: 'taw-latn-pg',
  tax: 'tax-latn-td',
  tay: 'tay-latn-tw',
  'tay-hans': 'tay-hans-tw',
  'tay-hant': 'tay-hant-tw',
  taz: 'taz-latn-sd',
  tba: 'tba-latn-br',
  tbc: 'tbc-latn-zz',
  tbd: 'tbd-latn-zz',
  tbe: 'tbe-latn-sb',
  tbf: 'tbf-latn-zz',
  tbg: 'tbg-latn-zz',
  tbh: 'tbh-latn-au',
  tbi: 'tbi-latn-sd',
  tbj: 'tbj-latn-pg',
  tbk: 'tbk-tagb-ph',
  'tbk-hano': 'tbk-hano-ph',
  'tbk-latn': 'tbk-latn-ph',
  tbl: 'tbl-latn-ph',
  tbm: 'tbm-latn-cd',
  tbn: 'tbn-latn-co',
  tbo: 'tbo-latn-zz',
  tbp: 'tbp-latn-id',
  tbs: 'tbs-latn-pg',
  tbt: 'tbt-latn-cd',
  tbu: 'tbu-latn-mx',
  tbv: 'tbv-latn-pg',
  tbw: 'tbw-latn-ph',
  tbx: 'tbx-latn-pg',
  tby: 'tby-latn-id',
  tbz: 'tbz-latn-zz',
  tca: 'tca-latn-br',
  tcb: 'tcb-latn-us',
  tcc: 'tcc-latn-tz',
  tcd: 'tcd-latn-gh',
  tce: 'tce-latn-ca',
  tcf: 'tcf-latn-mx',
  tcg: 'tcg-latn-id',
  tch: 'tch-latn-tc',
  tci: 'tci-latn-zz',
  tck: 'tck-latn-ga',
  tcm: 'tcm-latn-id',
  tcn: 'tcn-tibt-np',
  tco: 'tco-mymr-mm',
  tcp: 'tcp-latn-mm',
  tcq: 'tcq-latn-id',
  tcs: 'tcs-latn-au',
  tcu: 'tcu-latn-mx',
  tcw: 'tcw-latn-mx',
  tcx: 'tcx-taml-in',
  tcy: 'tcy-knda-in',
  tcz: 'tcz-latn-in',
  tda: 'tda-tfng-ne',
  'tda-arab': 'tda-arab-ne',
  'tda-latn': 'tda-latn-ne',
  tdb: 'tdb-deva-in',
  'tdb-beng': 'tdb-beng-in',
  'tdb-kthi': 'tdb-kthi-in',
  tdc: 'tdc-latn-co',
  tdd: 'tdd-tale-cn',
  tde: 'tde-latn-ml',
  tdg: 'tdg-deva-np',
  tdh: 'tdh-deva-np',
  tdi: 'tdi-latn-id',
  tdj: 'tdj-latn-id',
  tdk: 'tdk-latn-ng',
  tdl: 'tdl-latn-ng',
  tdm: 'tdm-latn-gy',
  tdn: 'tdn-latn-id',
  tdo: 'tdo-latn-ng',
  tdq: 'tdq-latn-ng',
  tdr: 'tdr-latn-vn',
  tds: 'tds-latn-id',
  tdt: 'tdt-latn-tl',
  tdu: 'tdu-latn-my',
  tdv: 'tdv-latn-ng',
  tdx: 'tdx-latn-mg',
  tdy: 'tdy-latn-ph',
  te: 'te-telu-in',
  tea: 'tea-latn-my',
  teb: 'teb-latn-ec',
  tec: 'tec-latn-ke',
  ted: 'ted-latn-zz',
  tee: 'tee-latn-mx',
  teg: 'teg-latn-ga',
  teh: 'teh-latn-ar',
  tei: 'tei-latn-pg',
  tek: 'tek-latn-cd',
  tem: 'tem-latn-sl',
  ten: 'ten-latn-co',
  teo: 'teo-latn-ug',
  tep: 'tep-latn-mx',
  teq: 'teq-latn-sd',
  ter: 'ter-latn-br',
  tes: 'tes-java-id',
  tet: 'tet-latn-tl',
  teu: 'teu-latn-ug',
  tev: 'tev-latn-id',
  tew: 'tew-latn-us',
  tex: 'tex-latn-ss',
  tey: 'tey-latn-sd',
  tfi: 'tfi-latn-zz',
  tfn: 'tfn-latn-us',
  tfo: 'tfo-latn-id',
  tfr: 'tfr-latn-pa',
  tft: 'tft-latn-id',
  tg: 'tg-cyrl-tj',
  'tg-arab': 'tg-arab-pk',
  'tg-pk': 'tg-arab-pk',
  tga: 'tga-latn-ke',
  tgb: 'tgb-latn-my',
  tgc: 'tgc-latn-zz',
  tgd: 'tgd-latn-ng',
  tge: 'tge-deva-np',
  tgf: 'tgf-tibt-bt',
  tgh: 'tgh-latn-tt',
  tgi: 'tgi-latn-pg',
  tgj: 'tgj-latn-in',
  tgn: 'tgn-latn-ph',
  tgo: 'tgo-latn-zz',
  tgp: 'tgp-latn-vu',
  tgq: 'tgq-latn-my',
  tgs: 'tgs-latn-vu',
  tgt: 'tgt-latn-ph',
  'tgt-hano': 'tgt-hano-ph',
  'tgt-tagb': 'tgt-tagb-ph',
  tgu: 'tgu-latn-zz',
  tgv: 'tgv-latn-br',
  tgw: 'tgw-latn-ci',
  tgx: 'tgx-latn-ca',
  tgy: 'tgy-latn-ss',
  tgz: 'tgz-latn-au',
  th: 'th-thai-th',
  thd: 'thd-latn-au',
  the: 'the-deva-np',
  thf: 'thf-deva-np',
  thh: 'thh-latn-mx',
  thi: 'thi-tale-la',
  thk: 'thk-latn-ke',
  thl: 'thl-deva-np',
  thm: 'thm-thai-th',
  thp: 'thp-latn-ca',
  'thp-dupl': 'thp-dupl-ca',
  thq: 'thq-deva-np',
  thr: 'thr-deva-np',
  ths: 'ths-deva-np',
  tht: 'tht-latn-ca',
  thu: 'thu-latn-ss',
  thv: 'thv-latn-dz',
  'thv-arab': 'thv-arab-dz',
  'thv-tfng': 'thv-tfng-dz',
  thy: 'thy-latn-ng',
  thz: 'thz-latn-ne',
  'thz-tfng': 'thz-tfng-ne',
  ti: 'ti-ethi-et',
  tic: 'tic-latn-sd',
  tif: 'tif-latn-zz',
  tig: 'tig-ethi-er',
  tih: 'tih-latn-my',
  tii: 'tii-latn-cd',
  tij: 'tij-deva-np',
  tik: 'tik-latn-zz',
  til: 'til-latn-us',
  tim: 'tim-latn-zz',
  tin: 'tin-cyrl-ru',
  tio: 'tio-latn-zz',
  tip: 'tip-latn-id',
  tiq: 'tiq-latn-bf',
  tis: 'tis-latn-ph',
  tit: 'tit-latn-co',
  tiu: 'tiu-latn-ph',
  tiv: 'tiv-latn-ng',
  tiw: 'tiw-latn-au',
  tix: 'tix-latn-us',
  tiy: 'tiy-latn-ph',
  tja: 'tja-latn-lr',
  tjg: 'tjg-latn-id',
  tji: 'tji-latn-cn',
  tjj: 'tjj-latn-au',
  tjl: 'tjl-mymr-mm',
  tjn: 'tjn-latn-ci',
  tjo: 'tjo-arab-dz',
  tjp: 'tjp-latn-au',
  tjs: 'tjs-latn-cn',
  tju: 'tju-latn-au',
  tjw: 'tjw-latn-au',
  tk: 'tk-latn-tm',
  tka: 'tka-latn-br',
  tkb: 'tkb-deva-in',
  tkd: 'tkd-latn-tl',
  tke: 'tke-latn-mz',
  tkf: 'tkf-latn-br',
  tkg: 'tkg-latn-mg',
  tkl: 'tkl-latn-tk',
  tkp: 'tkp-latn-sb',
  tkq: 'tkq-latn-ng',
  tkr: 'tkr-latn-az',
  tks: 'tks-arab-ir',
  tkt: 'tkt-deva-np',
  tku: 'tku-latn-mx',
  tkv: 'tkv-latn-pg',
  tkw: 'tkw-latn-sb',
  tkx: 'tkx-latn-id',
  tkz: 'tkz-latn-vn',
  tl: 'tl-latn-ph',
  tla: 'tla-latn-mx',
  tlb: 'tlb-latn-id',
  tlc: 'tlc-latn-mx',
  tld: 'tld-latn-id',
  tlf: 'tlf-latn-zz',
  tlg: 'tlg-latn-id',
  tli: 'tli-latn-us',
  'tli-cyrl': 'tli-cyrl-us',
  tlj: 'tlj-latn-ug',
  tlk: 'tlk-latn-id',
  tll: 'tll-latn-cd',
  tlm: 'tlm-latn-vu',
  tln: 'tln-latn-id',
  tlp: 'tlp-latn-mx',
  tlq: 'tlq-latn-mm',
  tlr: 'tlr-latn-sb',
  tls: 'tls-latn-vu',
  tlt: 'tlt-latn-id',
  tlu: 'tlu-latn-id',
  tlv: 'tlv-latn-id',
  tlx: 'tlx-latn-zz',
  tly: 'tly-latn-az',
  tma: 'tma-latn-td',
  tmb: 'tmb-latn-vu',
  tmc: 'tmc-latn-td',
  tmd: 'tmd-latn-pg',
  tme: 'tme-latn-br',
  tmf: 'tmf-latn-py',
  tmg: 'tmg-latn-id',
  tmh: 'tmh-latn-ne',
  tmi: 'tmi-latn-vu',
  tmj: 'tmj-latn-id',
  tmk: 'tmk-deva-np',
  tml: 'tml-latn-id',
  tmm: 'tmm-latn-vn',
  tmn: 'tmn-latn-id',
  tmo: 'tmo-latn-my',
  tmq: 'tmq-latn-pg',
  tmr: 'tmr-syrc-il',
  tmt: 'tmt-latn-vu',
  tmu: 'tmu-latn-id',
  tmv: 'tmv-latn-cd',
  tmw: 'tmw-latn-my',
  tmy: 'tmy-latn-zz',
  tmz: 'tmz-latn-ve',
  tn: 'tn-latn-za',
  tna: 'tna-latn-bo',
  tnb: 'tnb-latn-co',
  tnc: 'tnc-latn-co',
  tnd: 'tnd-latn-co',
  tng: 'tng-latn-td',
  tnh: 'tnh-latn-zz',
  tni: 'tni-latn-id',
  tnk: 'tnk-latn-vu',
  tnl: 'tnl-latn-vu',
  tnm: 'tnm-latn-id',
  tnn: 'tnn-latn-vu',
  tno: 'tno-latn-bo',
  tnp: 'tnp-latn-vu',
  tnq: 'tnq-latn-pr',
  tnr: 'tnr-latn-sn',
  tns: 'tns-latn-pg',
  tnt: 'tnt-latn-id',
  tnv: 'tnv-cakm-bd',
  tnw: 'tnw-latn-id',
  tnx: 'tnx-latn-sb',
  tny: 'tny-latn-tz',
  to: 'to-latn-to',
  tob: 'tob-latn-ar',
  toc: 'toc-latn-mx',
  tod: 'tod-latn-gn',
  tof: 'tof-latn-zz',
  tog: 'tog-latn-mw',
  toh: 'toh-latn-mz',
  toi: 'toi-latn-zm',
  toj: 'toj-latn-mx',
  tok: 'tok-latn-001',
  tol: 'tol-latn-us',
  tom: 'tom-latn-id',
  too: 'too-latn-mx',
  top: 'top-latn-mx',
  toq: 'toq-latn-zz',
  tor: 'tor-latn-cd',
  tos: 'tos-latn-mx',
  tou: 'tou-latn-vn',
  tov: 'tov-arab-ir',
  tow: 'tow-latn-us',
  tox: 'tox-latn-pw',
  toy: 'toy-latn-id',
  toz: 'toz-latn-cm',
  tpa: 'tpa-latn-pg',
  tpc: 'tpc-latn-mx',
  tpe: 'tpe-latn-bd',
  'tpe-beng': 'tpe-beng-bd',
  tpf: 'tpf-latn-id',
  tpg: 'tpg-latn-id',
  tpi: 'tpi-latn-pg',
  tpj: 'tpj-latn-py',
  tpk: 'tpk-latn-br',
  tpl: 'tpl-latn-mx',
  tpm: 'tpm-latn-zz',
  tpn: 'tpn-latn-br',
  tpp: 'tpp-latn-mx',
  tpr: 'tpr-latn-br',
  tpt: 'tpt-latn-mx',
  tpu: 'tpu-khmr-kh',
  tpv: 'tpv-latn-mp',
  tpx: 'tpx-latn-mx',
  tpy: 'tpy-latn-br',
  tpz: 'tpz-latn-zz',
  tqb: 'tqb-latn-br',
  tql: 'tql-latn-vu',
  tqm: 'tqm-latn-pg',
  tqn: 'tqn-latn-us',
  tqo: 'tqo-latn-zz',
  tqp: 'tqp-latn-pg',
  tqt: 'tqt-latn-mx',
  tqu: 'tqu-latn-sb',
  tqw: 'tqw-latn-us',
  tr: 'tr-latn-tr',
  tra: 'tra-arab-af',
  trb: 'trb-latn-pg',
  trc: 'trc-latn-mx',
  tre: 'tre-latn-id',
  trf: 'trf-latn-tt',
  trg: 'trg-hebr-il',
  trh: 'trh-latn-pg',
  tri: 'tri-latn-sr',
  trj: 'trj-latn-td',
  trl: 'trl-latn-gb',
  trm: 'trm-arab-af',
  trn: 'trn-latn-bo',
  tro: 'tro-latn-in',
  trp: 'trp-latn-in',
  'trp-beng': 'trp-beng-in',
  trq: 'trq-latn-mx',
  trr: 'trr-latn-pe',
  trs: 'trs-latn-mx',
  trt: 'trt-latn-id',
  tru: 'tru-latn-tr',
  trv: 'trv-latn-tw',
  trw: 'trw-arab-pk',
  trx: 'trx-latn-my',
  try: 'try-latn-in',
  trz: 'trz-latn-br',
  ts: 'ts-latn-za',
  tsa: 'tsa-latn-cg',
  tsb: 'tsb-latn-et',
  tsc: 'tsc-latn-mz',
  tsd: 'tsd-grek-gr',
  tsf: 'tsf-deva-np',
  tsg: 'tsg-latn-ph',
  tsh: 'tsh-latn-cm',
  tsi: 'tsi-latn-ca',
  tsj: 'tsj-tibt-bt',
  tsl: 'tsl-latn-vn',
  tsp: 'tsp-latn-bf',
  tsr: 'tsr-latn-vu',
  tst: 'tst-latn-ml',
  tsu: 'tsu-latn-tw',
  tsv: 'tsv-latn-ga',
  tsw: 'tsw-latn-zz',
  tsx: 'tsx-latn-pg',
  tsz: 'tsz-latn-mx',
  tt: 'tt-cyrl-ru',
  ttb: 'ttb-latn-ng',
  ttc: 'ttc-latn-gt',
  ttd: 'ttd-latn-zz',
  tte: 'tte-latn-zz',
  ttf: 'ttf-latn-cm',
  tth: 'tth-laoo-la',
  tti: 'tti-latn-id',
  ttj: 'ttj-latn-ug',
  ttk: 'ttk-latn-co',
  ttl: 'ttl-latn-zm',
  ttm: 'ttm-latn-ca',
  ttn: 'ttn-latn-id',
  tto: 'tto-laoo-la',
  ttp: 'ttp-latn-id',
  ttr: 'ttr-latn-zz',
  tts: 'tts-thai-th',
  ttt: 'ttt-latn-az',
  ttu: 'ttu-latn-pg',
  ttv: 'ttv-latn-pg',
  ttw: 'ttw-latn-my',
  tty: 'tty-latn-id',
  tua: 'tua-latn-pg',
  tub: 'tub-latn-us',
  tuc: 'tuc-latn-pg',
  tud: 'tud-latn-br',
  tue: 'tue-latn-co',
  tuf: 'tuf-latn-co',
  tug: 'tug-latn-td',
  tuh: 'tuh-latn-zz',
  tui: 'tui-latn-cm',
  tuj: 'tuj-latn-id',
  tul: 'tul-latn-zz',
  tum: 'tum-latn-mw',
  tun: 'tun-latn-us',
  tuo: 'tuo-latn-br',
  tuq: 'tuq-latn-zz',
  tus: 'tus-latn-ca',
  tuu: 'tuu-latn-us',
  tuv: 'tuv-latn-ke',
  tux: 'tux-latn-br',
  tuy: 'tuy-latn-ke',
  tuz: 'tuz-latn-bf',
  tva: 'tva-latn-sb',
  tvd: 'tvd-latn-zz',
  tve: 'tve-latn-id',
  tvk: 'tvk-latn-vu',
  tvl: 'tvl-latn-tv',
  tvm: 'tvm-latn-id',
  tvn: 'tvn-mymr-mm',
  tvo: 'tvo-latn-id',
  tvs: 'tvs-latn-ke',
  tvt: 'tvt-latn-in',
  tvu: 'tvu-latn-zz',
  tvw: 'tvw-latn-id',
  tvx: 'tvx-latn-tw',
  twa: 'twa-latn-us',
  twb: 'twb-latn-ph',
  twd: 'twd-latn-nl',
  twe: 'twe-latn-id',
  twf: 'twf-latn-us',
  twg: 'twg-latn-id',
  twh: 'twh-latn-zz',
  twl: 'twl-latn-mz',
  twm: 'twm-deva-in',
  twn: 'twn-latn-cm',
  two: 'two-latn-bw',
  twp: 'twp-latn-pg',
  twq: 'twq-latn-ne',
  twr: 'twr-latn-mx',
  twt: 'twt-latn-br',
  twu: 'twu-latn-id',
  tww: 'tww-latn-pg',
  twx: 'twx-latn-mz',
  twy: 'twy-latn-id',
  txa: 'txa-latn-my',
  txe: 'txe-latn-id',
  txg: 'txg-tang-cn',
  txi: 'txi-latn-br',
  txj: 'txj-latn-ng',
  txm: 'txm-latn-id',
  txn: 'txn-latn-id',
  txo: 'txo-toto-in',
  txq: 'txq-latn-id',
  txs: 'txs-latn-id',
  txt: 'txt-latn-id',
  txu: 'txu-latn-br',
  txx: 'txx-latn-my',
  txy: 'txy-latn-mg',
  ty: 'ty-latn-pf',
  tya: 'tya-latn-zz',
  tye: 'tye-latn-ng',
  tyh: 'tyh-latn-vn',
  tyi: 'tyi-latn-cg',
  tyj: 'tyj-latn-vn',
  tyl: 'tyl-latn-vn',
  tyn: 'tyn-latn-id',
  typ: 'typ-latn-au',
  tyr: 'tyr-tavt-vn',
  tys: 'tys-latn-vn',
  tyt: 'tyt-latn-vn',
  'tyt-tavt': 'tyt-tavt-vn',
  tyu: 'tyu-latn-bw',
  tyv: 'tyv-cyrl-ru',
  tyx: 'tyx-latn-cg',
  tyy: 'tyy-latn-ng',
  tyz: 'tyz-latn-vn',
  tzh: 'tzh-latn-mx',
  tzj: 'tzj-latn-gt',
  tzl: 'tzl-latn-001',
  tzm: 'tzm-latn-ma',
  tzn: 'tzn-latn-id',
  tzo: 'tzo-latn-mx',
  tzx: 'tzx-latn-pg',
  uam: 'uam-latn-br',
  uar: 'uar-latn-pg',
  uba: 'uba-latn-ng',
  ubi: 'ubi-latn-td',
  ubl: 'ubl-latn-ph',
  ubr: 'ubr-latn-pg',
  ubu: 'ubu-latn-zz',
  uda: 'uda-latn-ng',
  ude: 'ude-cyrl-ru',
  udg: 'udg-mlym-in',
  udi: 'udi-aghb-ru',
  udj: 'udj-latn-id',
  udl: 'udl-latn-cm',
  udm: 'udm-cyrl-ru',
  udu: 'udu-latn-sd',
  ues: 'ues-latn-id',
  ufi: 'ufi-latn-pg',
  ug: 'ug-arab-cn',
  'ug-cyrl': 'ug-cyrl-kz',
  'ug-kz': 'ug-cyrl-kz',
  'ug-mn': 'ug-cyrl-mn',
  uga: 'uga-ugar-sy',
  ugb: 'ugb-latn-au',
  uge: 'uge-latn-sb',
  ugh: 'ugh-cyrl-ru',
  ugo: 'ugo-thai-th',
  uha: 'uha-latn-ng',
  uhn: 'uhn-latn-id',
  uis: 'uis-latn-pg',
  uiv: 'uiv-latn-cm',
  uji: 'uji-latn-ng',
  uk: 'uk-cyrl-ua',
  uka: 'uka-latn-id',
  ukg: 'ukg-latn-pg',
  ukh: 'ukh-latn-cf',
  uki: 'uki-orya-in',
  ukk: 'ukk-latn-mm',
  ukp: 'ukp-latn-ng',
  ukq: 'ukq-latn-ng',
  uku: 'uku-latn-ng',
  ukv: 'ukv-latn-ss',
  ukw: 'ukw-latn-ng',
  uky: 'uky-latn-au',
  ula: 'ula-latn-ng',
  ulb: 'ulb-latn-ng',
  ulc: 'ulc-cyrl-ru',
  ule: 'ule-latn-ar',
  ulf: 'ulf-latn-id',
  uli: 'uli-latn-fm',
  ulk: 'ulk-latn-au',
  ulm: 'ulm-latn-id',
  uln: 'uln-latn-pg',
  ulu: 'ulu-latn-id',
  ulw: 'ulw-latn-ni',
  uma: 'uma-latn-us',
  umb: 'umb-latn-ao',
  umd: 'umd-latn-au',
  umg: 'umg-latn-au',
  umi: 'umi-latn-my',
  umm: 'umm-latn-ng',
  umn: 'umn-latn-mm',
  umo: 'umo-latn-br',
  ump: 'ump-latn-au',
  umr: 'umr-latn-au',
  ums: 'ums-latn-id',
  una: 'una-latn-pg',
  und: 'en-latn-us',
  'und-002': 'en-latn-ng',
  'und-003': 'en-latn-us',
  'und-005': 'pt-latn-br',
  'und-009': 'en-latn-au',
  'und-011': 'en-latn-ng',
  'und-013': 'es-latn-mx',
  'und-014': 'sw-latn-tz',
  'und-015': 'ar-arab-eg',
  'und-017': 'sw-latn-cd',
  'und-018': 'en-latn-za',
  'und-019': 'en-latn-us',
  'und-021': 'en-latn-us',
  'und-029': 'es-latn-cu',
  'und-030': 'zh-hans-cn',
  'und-034': 'hi-deva-in',
  'und-035': 'id-latn-id',
  'und-039': 'it-latn-it',
  'und-053': 'en-latn-au',
  'und-054': 'en-latn-pg',
  'und-057': 'en-latn-gu',
  'und-061': 'sm-latn-ws',
  'und-142': 'zh-hans-cn',
  'und-143': 'uz-latn-uz',
  'und-145': 'ar-arab-sa',
  'und-150': 'ru-cyrl-ru',
  'und-151': 'ru-cyrl-ru',
  'und-154': 'en-latn-gb',
  'und-155': 'de-latn-de',
  'und-202': 'en-latn-ng',
  'und-419': 'es-latn-419',
  'und-ad': 'ca-latn-ad',
  'und-adlm': 'ff-adlm-gn',
  'und-ae': 'ar-arab-ae',
  'und-af': 'fa-arab-af',
  'und-aghb': 'udi-aghb-ru',
  'und-ahom': 'aho-ahom-in',
  'und-al': 'sq-latn-al',
  'und-am': 'hy-armn-am',
  'und-ao': 'pt-latn-ao',
  'und-aq': 'und-latn-aq',
  'und-ar': 'es-latn-ar',
  'und-arab': 'ar-arab-eg',
  'und-arab-cc': 'ms-arab-cc',
  'und-arab-cn': 'ug-arab-cn',
  'und-arab-gb': 'ur-arab-gb',
  'und-arab-id': 'ms-arab-id',
  'und-arab-in': 'ur-arab-in',
  'und-arab-kh': 'cja-arab-kh',
  'und-arab-mm': 'rhg-arab-mm',
  'und-arab-mn': 'kk-arab-mn',
  'und-arab-mu': 'ur-arab-mu',
  'und-arab-ng': 'ha-arab-ng',
  'und-arab-pk': 'ur-arab-pk',
  'und-arab-tg': 'apd-arab-tg',
  'und-arab-th': 'mfa-arab-th',
  'und-arab-tj': 'fa-arab-tj',
  'und-arab-tr': 'apc-arab-tr',
  'und-arab-yt': 'swb-arab-yt',
  'und-armi': 'arc-armi-ir',
  'und-armn': 'hy-armn-am',
  'und-as': 'sm-latn-as',
  'und-at': 'de-latn-at',
  'und-avst': 'ae-avst-ir',
  'und-aw': 'nl-latn-aw',
  'und-ax': 'sv-latn-ax',
  'und-az': 'az-latn-az',
  'und-ba': 'bs-latn-ba',
  'und-bali': 'ban-bali-id',
  'und-bamu': 'bax-bamu-cm',
  'und-bass': 'bsq-bass-lr',
  'und-batk': 'bbc-batk-id',
  'und-bd': 'bn-beng-bd',
  'und-be': 'nl-latn-be',
  'und-beng': 'bn-beng-bd',
  'und-bf': 'fr-latn-bf',
  'und-bg': 'bg-cyrl-bg',
  'und-bh': 'ar-arab-bh',
  'und-bhks': 'sa-bhks-in',
  'und-bi': 'rn-latn-bi',
  'und-bj': 'fr-latn-bj',
  'und-bl': 'fr-latn-bl',
  'und-bn': 'ms-latn-bn',
  'und-bo': 'es-latn-bo',
  'und-bopo': 'zh-bopo-tw',
  'und-bq': 'pap-latn-bq',
  'und-br': 'pt-latn-br',
  'und-brah': 'pka-brah-in',
  'und-brai': 'fr-brai-fr',
  'und-bt': 'dz-tibt-bt',
  'und-bugi': 'bug-bugi-id',
  'und-buhd': 'bku-buhd-ph',
  'und-bv': 'und-latn-bv',
  'und-by': 'be-cyrl-by',
  'und-cakm': 'ccp-cakm-bd',
  'und-cans': 'iu-cans-ca',
  'und-cari': 'xcr-cari-tr',
  'und-cd': 'sw-latn-cd',
  'und-cf': 'fr-latn-cf',
  'und-cg': 'fr-latn-cg',
  'und-ch': 'de-latn-ch',
  'und-cham': 'cjm-cham-vn',
  'und-cher': 'chr-cher-us',
  'und-chrs': 'xco-chrs-uz',
  'und-ci': 'fr-latn-ci',
  'und-cl': 'es-latn-cl',
  'und-cm': 'fr-latn-cm',
  'und-cn': 'zh-hans-cn',
  'und-co': 'es-latn-co',
  'und-copt': 'cop-copt-eg',
  'und-cp': 'und-latn-cp',
  'und-cpmn': 'und-cpmn-cy',
  'und-cpmn-cy': 'und-cpmn-cy',
  'und-cprt': 'grc-cprt-cy',
  'und-cr': 'es-latn-cr',
  'und-cu': 'es-latn-cu',
  'und-cv': 'pt-latn-cv',
  'und-cw': 'pap-latn-cw',
  'und-cy': 'el-grek-cy',
  'und-cyrl': 'ru-cyrl-ru',
  'und-cyrl-al': 'mk-cyrl-al',
  'und-cyrl-ba': 'sr-cyrl-ba',
  'und-cyrl-ge': 'ab-cyrl-ge',
  'und-cyrl-gr': 'mk-cyrl-gr',
  'und-cyrl-md': 'uk-cyrl-md',
  'und-cyrl-ro': 'bg-cyrl-ro',
  'und-cyrl-sk': 'uk-cyrl-sk',
  'und-cyrl-tr': 'kbd-cyrl-tr',
  'und-cyrl-xk': 'sr-cyrl-xk',
  'und-cz': 'cs-latn-cz',
  'und-de': 'de-latn-de',
  'und-deva': 'hi-deva-in',
  'und-deva-bt': 'ne-deva-bt',
  'und-deva-fj': 'hif-deva-fj',
  'und-deva-mu': 'bho-deva-mu',
  'und-deva-pk': 'btv-deva-pk',
  'und-diak': 'dv-diak-mv',
  'und-dj': 'aa-latn-dj',
  'und-dk': 'da-latn-dk',
  'und-do': 'es-latn-do',
  'und-dogr': 'doi-dogr-in',
  'und-dupl': 'fr-dupl-fr',
  'und-dz': 'ar-arab-dz',
  'und-ea': 'es-latn-ea',
  'und-ec': 'es-latn-ec',
  'und-ee': 'et-latn-ee',
  'und-eg': 'ar-arab-eg',
  'und-egyp': 'egy-egyp-eg',
  'und-eh': 'ar-arab-eh',
  'und-elba': 'sq-elba-al',
  'und-elym': 'arc-elym-ir',
  'und-er': 'ti-ethi-er',
  'und-es': 'es-latn-es',
  'und-et': 'am-ethi-et',
  'und-ethi': 'am-ethi-et',
  'und-eu': 'en-latn-ie',
  'und-ez': 'de-latn-ez',
  'und-fi': 'fi-latn-fi',
  'und-fo': 'fo-latn-fo',
  'und-fr': 'fr-latn-fr',
  'und-ga': 'fr-latn-ga',
  'und-ge': 'ka-geor-ge',
  'und-geor': 'ka-geor-ge',
  'und-gf': 'fr-latn-gf',
  'und-gh': 'ak-latn-gh',
  'und-gl': 'kl-latn-gl',
  'und-glag': 'cu-glag-bg',
  'und-gn': 'fr-latn-gn',
  'und-gong': 'wsg-gong-in',
  'und-gonm': 'esg-gonm-in',
  'und-goth': 'got-goth-ua',
  'und-gp': 'fr-latn-gp',
  'und-gq': 'es-latn-gq',
  'und-gr': 'el-grek-gr',
  'und-gran': 'sa-gran-in',
  'und-grek': 'el-grek-gr',
  'und-grek-tr': 'bgx-grek-tr',
  'und-gs': 'und-latn-gs',
  'und-gt': 'es-latn-gt',
  'und-gujr': 'gu-gujr-in',
  'und-guru': 'pa-guru-in',
  'und-gw': 'pt-latn-gw',
  'und-hanb': 'zh-hanb-tw',
  'und-hang': 'ko-hang-kr',
  'und-hani': 'zh-hani-cn',
  'und-hano': 'hnn-hano-ph',
  'und-hans': 'zh-hans-cn',
  'und-hant': 'zh-hant-tw',
  'und-hant-ca': 'yue-hant-ca',
  'und-hebr': 'he-hebr-il',
  'und-hebr-se': 'yi-hebr-se',
  'und-hebr-ua': 'yi-hebr-ua',
  'und-hebr-us': 'yi-hebr-us',
  'und-hira': 'ja-hira-jp',
  'und-hk': 'zh-hant-hk',
  'und-hluw': 'hlu-hluw-tr',
  'und-hm': 'und-latn-hm',
  'und-hmng': 'hnj-hmng-la',
  'und-hmnp': 'hnj-hmnp-us',
  'und-hn': 'es-latn-hn',
  'und-hr': 'hr-latn-hr',
  'und-ht': 'ht-latn-ht',
  'und-hu': 'hu-latn-hu',
  'und-hung': 'hu-hung-hu',
  'und-ic': 'es-latn-ic',
  'und-id': 'id-latn-id',
  'und-il': 'he-hebr-il',
  'und-in': 'hi-deva-in',
  'und-iq': 'ar-arab-iq',
  'und-ir': 'fa-arab-ir',
  'und-is': 'is-latn-is',
  'und-it': 'it-latn-it',
  'und-ital': 'ett-ital-it',
  'und-jamo': 'ko-jamo-kr',
  'und-java': 'jv-java-id',
  'und-jo': 'ar-arab-jo',
  'und-jp': 'ja-jpan-jp',
  'und-jpan': 'ja-jpan-jp',
  'und-kali': 'eky-kali-mm',
  'und-kana': 'ja-kana-jp',
  'und-kawi': 'kaw-kawi-id',
  'und-ke': 'sw-latn-ke',
  'und-kg': 'ky-cyrl-kg',
  'und-kh': 'km-khmr-kh',
  'und-khar': 'pra-khar-pk',
  'und-khmr': 'km-khmr-kh',
  'und-khoj': 'sd-khoj-in',
  'und-kits': 'zkt-kits-cn',
  'und-km': 'ar-arab-km',
  'und-knda': 'kn-knda-in',
  'und-kore': 'ko-kore-kr',
  'und-kp': 'ko-kore-kp',
  'und-kr': 'ko-kore-kr',
  'und-kthi': 'bho-kthi-in',
  'und-kw': 'ar-arab-kw',
  'und-kz': 'ru-cyrl-kz',
  'und-la': 'lo-laoo-la',
  'und-lana': 'nod-lana-th',
  'und-laoo': 'lo-laoo-la',
  'und-laoo-au': 'hnj-laoo-au',
  'und-laoo-cn': 'hnj-laoo-cn',
  'und-laoo-fr': 'hnj-laoo-fr',
  'und-laoo-gf': 'hnj-laoo-gf',
  'und-laoo-mm': 'hnj-laoo-mm',
  'und-laoo-sr': 'hnj-laoo-sr',
  'und-laoo-th': 'hnj-laoo-th',
  'und-laoo-us': 'hnj-laoo-us',
  'und-laoo-vn': 'hnj-laoo-vn',
  'und-latn-af': 'tk-latn-af',
  'und-latn-am': 'ku-latn-am',
  'und-latn-cn': 'za-latn-cn',
  'und-latn-cy': 'tr-latn-cy',
  'und-latn-dz': 'fr-latn-dz',
  'und-latn-et': 'en-latn-et',
  'und-latn-ge': 'ku-latn-ge',
  'und-latn-ir': 'tk-latn-ir',
  'und-latn-km': 'fr-latn-km',
  'und-latn-ma': 'fr-latn-ma',
  'und-latn-mk': 'sq-latn-mk',
  'und-latn-mm': 'kac-latn-mm',
  'und-latn-mo': 'pt-latn-mo',
  'und-latn-mr': 'fr-latn-mr',
  'und-latn-ru': 'krl-latn-ru',
  'und-latn-sy': 'fr-latn-sy',
  'und-latn-tn': 'fr-latn-tn',
  'und-latn-tw': 'trv-latn-tw',
  'und-latn-ua': 'pl-latn-ua',
  'und-lb': 'ar-arab-lb',
  'und-lepc': 'lep-lepc-in',
  'und-li': 'de-latn-li',
  'und-limb': 'lif-limb-in',
  'und-lina': 'lab-lina-gr',
  'und-linb': 'grc-linb-gr',
  'und-lisu': 'lis-lisu-cn',
  'und-lk': 'si-sinh-lk',
  'und-ls': 'st-latn-ls',
  'und-lt': 'lt-latn-lt',
  'und-lu': 'fr-latn-lu',
  'und-lv': 'lv-latn-lv',
  'und-ly': 'ar-arab-ly',
  'und-lyci': 'xlc-lyci-tr',
  'und-lydi': 'xld-lydi-tr',
  'und-ma': 'ar-arab-ma',
  'und-mahj': 'hi-mahj-in',
  'und-maka': 'mak-maka-id',
  'und-mand': 'myz-mand-ir',
  'und-mani': 'xmn-mani-cn',
  'und-marc': 'bo-marc-cn',
  'und-mc': 'fr-latn-mc',
  'und-md': 'ro-latn-md',
  'und-me': 'sr-latn-me',
  'und-medf': 'dmf-medf-ng',
  'und-mend': 'men-mend-sl',
  'und-merc': 'xmr-merc-sd',
  'und-mero': 'xmr-mero-sd',
  'und-mf': 'fr-latn-mf',
  'und-mg': 'mg-latn-mg',
  'und-mk': 'mk-cyrl-mk',
  'und-ml': 'bm-latn-ml',
  'und-mlym': 'ml-mlym-in',
  'und-mm': 'my-mymr-mm',
  'und-mn': 'mn-cyrl-mn',
  'und-mo': 'zh-hant-mo',
  'und-modi': 'mr-modi-in',
  'und-mong': 'mn-mong-cn',
  'und-mq': 'fr-latn-mq',
  'und-mr': 'ar-arab-mr',
  'und-mroo': 'mro-mroo-bd',
  'und-mt': 'mt-latn-mt',
  'und-mtei': 'mni-mtei-in',
  'und-mu': 'mfe-latn-mu',
  'und-mult': 'skr-mult-pk',
  'und-mv': 'dv-thaa-mv',
  'und-mx': 'es-latn-mx',
  'und-my': 'ms-latn-my',
  'und-mymr': 'my-mymr-mm',
  'und-mymr-in': 'kht-mymr-in',
  'und-mymr-th': 'mnw-mymr-th',
  'und-mz': 'pt-latn-mz',
  'und-na': 'af-latn-na',
  'und-nagm': 'unr-nagm-in',
  'und-nand': 'sa-nand-in',
  'und-narb': 'xna-narb-sa',
  'und-nbat': 'arc-nbat-jo',
  'und-nc': 'fr-latn-nc',
  'und-ne': 'ha-latn-ne',
  'und-newa': 'new-newa-np',
  'und-ni': 'es-latn-ni',
  'und-nkoo': 'man-nkoo-gn',
  'und-nl': 'nl-latn-nl',
  'und-no': 'nb-latn-no',
  'und-np': 'ne-deva-np',
  'und-nshu': 'zhx-nshu-cn',
  'und-ogam': 'sga-ogam-ie',
  'und-olck': 'sat-olck-in',
  'und-om': 'ar-arab-om',
  'und-orkh': 'otk-orkh-mn',
  'und-orya': 'or-orya-in',
  'und-osge': 'osa-osge-us',
  'und-osma': 'so-osma-so',
  'und-ougr': 'oui-ougr-143',
  'und-pa': 'es-latn-pa',
  'und-palm': 'arc-palm-sy',
  'und-pauc': 'ctd-pauc-mm',
  'und-pe': 'es-latn-pe',
  'und-perm': 'kv-perm-ru',
  'und-pf': 'fr-latn-pf',
  'und-pg': 'tpi-latn-pg',
  'und-ph': 'fil-latn-ph',
  'und-phag': 'lzh-phag-cn',
  'und-phli': 'pal-phli-ir',
  'und-phlp': 'pal-phlp-cn',
  'und-phnx': 'phn-phnx-lb',
  'und-pk': 'ur-arab-pk',
  'und-pl': 'pl-latn-pl',
  'und-plrd': 'hmd-plrd-cn',
  'und-pm': 'fr-latn-pm',
  'und-pr': 'es-latn-pr',
  'und-prti': 'xpr-prti-ir',
  'und-ps': 'ar-arab-ps',
  'und-pt': 'pt-latn-pt',
  'und-pw': 'pau-latn-pw',
  'und-py': 'gn-latn-py',
  'und-qa': 'ar-arab-qa',
  'und-qo': 'en-latn-dg',
  'und-re': 'fr-latn-re',
  'und-rjng': 'rej-rjng-id',
  'und-ro': 'ro-latn-ro',
  'und-rohg': 'rhg-rohg-mm',
  'und-rs': 'sr-cyrl-rs',
  'und-ru': 'ru-cyrl-ru',
  'und-runr': 'non-runr-se',
  'und-rw': 'rw-latn-rw',
  'und-sa': 'ar-arab-sa',
  'und-samr': 'smp-samr-il',
  'und-sarb': 'xsa-sarb-ye',
  'und-saur': 'saz-saur-in',
  'und-sc': 'fr-latn-sc',
  'und-sd': 'ar-arab-sd',
  'und-se': 'sv-latn-se',
  'und-sgnw': 'ase-sgnw-us',
  'und-shaw': 'en-shaw-gb',
  'und-shrd': 'sa-shrd-in',
  'und-si': 'sl-latn-si',
  'und-sidd': 'sa-sidd-in',
  'und-sind': 'sd-sind-in',
  'und-sinh': 'si-sinh-lk',
  'und-sj': 'nb-latn-sj',
  'und-sk': 'sk-latn-sk',
  'und-sm': 'it-latn-sm',
  'und-sn': 'fr-latn-sn',
  'und-so': 'so-latn-so',
  'und-sogd': 'sog-sogd-uz',
  'und-sogo': 'sog-sogo-uz',
  'und-sora': 'srb-sora-in',
  'und-soyo': 'cmg-soyo-mn',
  'und-sr': 'nl-latn-sr',
  'und-st': 'pt-latn-st',
  'und-sund': 'su-sund-id',
  'und-sv': 'es-latn-sv',
  'und-sy': 'ar-arab-sy',
  'und-sylo': 'syl-sylo-bd',
  'und-syrc': 'syr-syrc-iq',
  'und-tagb': 'tbw-tagb-ph',
  'und-takr': 'doi-takr-in',
  'und-tale': 'tdd-tale-cn',
  'und-talu': 'khb-talu-cn',
  'und-taml': 'ta-taml-in',
  'und-tang': 'txg-tang-cn',
  'und-tavt': 'blt-tavt-vn',
  'und-td': 'fr-latn-td',
  'und-telu': 'te-telu-in',
  'und-tf': 'fr-latn-tf',
  'und-tfng': 'zgh-tfng-ma',
  'und-tg': 'fr-latn-tg',
  'und-tglg': 'fil-tglg-ph',
  'und-th': 'th-thai-th',
  'und-thaa': 'dv-thaa-mv',
  'und-thai': 'th-thai-th',
  'und-thai-cn': 'lcp-thai-cn',
  'und-thai-kh': 'kdt-thai-kh',
  'und-thai-la': 'kdt-thai-la',
  'und-tibt': 'bo-tibt-cn',
  'und-tirh': 'mai-tirh-in',
  'und-tj': 'tg-cyrl-tj',
  'und-tk': 'tkl-latn-tk',
  'und-tl': 'pt-latn-tl',
  'und-tm': 'tk-latn-tm',
  'und-tn': 'ar-arab-tn',
  'und-tnsa': 'nst-tnsa-in',
  'und-to': 'to-latn-to',
  'und-toto': 'txo-toto-in',
  'und-tr': 'tr-latn-tr',
  'und-tv': 'tvl-latn-tv',
  'und-tw': 'zh-hant-tw',
  'und-tz': 'sw-latn-tz',
  'und-ua': 'uk-cyrl-ua',
  'und-ug': 'sw-latn-ug',
  'und-ugar': 'uga-ugar-sy',
  'und-uy': 'es-latn-uy',
  'und-uz': 'uz-latn-uz',
  'und-va': 'it-latn-va',
  'und-vaii': 'vai-vaii-lr',
  'und-ve': 'es-latn-ve',
  'und-vith': 'sq-vith-al',
  'und-vn': 'vi-latn-vn',
  'und-vu': 'bi-latn-vu',
  'und-wara': 'hoc-wara-in',
  'und-wcho': 'nnp-wcho-in',
  'und-wf': 'fr-latn-wf',
  'und-ws': 'sm-latn-ws',
  'und-xk': 'sq-latn-xk',
  'und-xpeo': 'peo-xpeo-ir',
  'und-xsux': 'akk-xsux-iq',
  'und-ye': 'ar-arab-ye',
  'und-yezi': 'ku-yezi-ge',
  'und-yiii': 'ii-yiii-cn',
  'und-yt': 'fr-latn-yt',
  'und-zanb': 'cmg-zanb-mn',
  'und-zw': 'sn-latn-zw',
  une: 'une-latn-ng',
  ung: 'ung-latn-au',
  uni: 'uni-latn-pg',
  unk: 'unk-latn-br',
  unm: 'unm-latn-us',
  unn: 'unn-latn-au',
  unr: 'unr-beng-in',
  'unr-deva': 'unr-deva-np',
  'unr-np': 'unr-deva-np',
  unu: 'unu-latn-pg',
  unx: 'unx-beng-in',
  unz: 'unz-latn-id',
  uok: 'uok-latn-zz',
  uon: 'uon-latn-tw',
  upi: 'upi-latn-pg',
  upv: 'upv-latn-vu',
  ur: 'ur-arab-pk',
  ura: 'ura-latn-pe',
  urb: 'urb-latn-br',
  urc: 'urc-latn-au',
  ure: 'ure-latn-bo',
  urf: 'urf-latn-au',
  urg: 'urg-latn-pg',
  urh: 'urh-latn-ng',
  uri: 'uri-latn-zz',
  urk: 'urk-thai-th',
  urm: 'urm-latn-pg',
  urn: 'urn-latn-id',
  uro: 'uro-latn-pg',
  urp: 'urp-latn-br',
  urr: 'urr-latn-vu',
  urt: 'urt-latn-zz',
  uru: 'uru-latn-br',
  urv: 'urv-latn-pg',
  urw: 'urw-latn-zz',
  urx: 'urx-latn-pg',
  ury: 'ury-latn-id',
  urz: 'urz-latn-br',
  usa: 'usa-latn-zz',
  ush: 'ush-arab-pk',
  usi: 'usi-latn-bd',
  'usi-beng': 'usi-beng-bd',
  usk: 'usk-latn-cm',
  usp: 'usp-latn-gt',
  uss: 'uss-latn-ng',
  usu: 'usu-latn-pg',
  uta: 'uta-latn-ng',
  ute: 'ute-latn-us',
  uth: 'uth-latn-zz',
  utp: 'utp-latn-sb',
  utr: 'utr-latn-zz',
  utu: 'utu-latn-pg',
  uum: 'uum-grek-ge',
  'uum-cyrl': 'uum-cyrl-ge',
  uur: 'uur-latn-vu',
  uve: 'uve-latn-nc',
  uvh: 'uvh-latn-zz',
  uvl: 'uvl-latn-zz',
  uwa: 'uwa-latn-au',
  uya: 'uya-latn-ng',
  uz: 'uz-latn-uz',
  'uz-af': 'uz-arab-af',
  'uz-arab': 'uz-arab-af',
  'uz-cn': 'uz-cyrl-cn',
  uzs: 'uzs-arab-af',
  vaa: 'vaa-taml-in',
  vae: 'vae-latn-cf',
  vaf: 'vaf-arab-ir',
  vag: 'vag-latn-zz',
  vah: 'vah-deva-in',
  vai: 'vai-vaii-lr',
  vaj: 'vaj-latn-na',
  val: 'val-latn-pg',
  vam: 'vam-latn-pg',
  van: 'van-latn-zz',
  vao: 'vao-latn-vu',
  vap: 'vap-latn-in',
  var: 'var-latn-mx',
  vas: 'vas-deva-in',
  'vas-gujr': 'vas-gujr-in',
  vau: 'vau-latn-cd',
  vav: 'vav-deva-in',
  'vav-gujr': 'vav-gujr-in',
  vay: 'vay-deva-np',
  vbb: 'vbb-latn-id',
  vbk: 'vbk-latn-ph',
  ve: 've-latn-za',
  vec: 'vec-latn-it',
  vem: 'vem-latn-ng',
  veo: 'veo-latn-us',
  vep: 'vep-latn-ru',
  ver: 'ver-latn-ng',
  vgr: 'vgr-arab-pk',
  vi: 'vi-latn-vn',
  vic: 'vic-latn-sx',
  vid: 'vid-latn-tz',
  vif: 'vif-latn-cg',
  vig: 'vig-latn-bf',
  vil: 'vil-latn-ar',
  vin: 'vin-latn-tz',
  vit: 'vit-latn-ng',
  viv: 'viv-latn-zz',
  vka: 'vka-latn-au',
  vkj: 'vkj-latn-td',
  vkk: 'vkk-latn-id',
  vkl: 'vkl-latn-id',
  vkm: 'vkm-latn-br',
  vkn: 'vkn-latn-ng',
  vko: 'vko-latn-id',
  vkp: 'vkp-latn-in',
  'vkp-deva': 'vkp-deva-in',
  vkt: 'vkt-latn-id',
  vku: 'vku-latn-au',
  vkz: 'vkz-latn-ng',
  vlp: 'vlp-latn-vu',
  vls: 'vls-latn-be',
  vma: 'vma-latn-au',
  vmb: 'vmb-latn-au',
  vmc: 'vmc-latn-mx',
  vmd: 'vmd-knda-in',
  vme: 'vme-latn-id',
  vmf: 'vmf-latn-de',
  vmg: 'vmg-latn-pg',
  vmh: 'vmh-arab-ir',
  vmi: 'vmi-latn-au',
  vmj: 'vmj-latn-mx',
  vmk: 'vmk-latn-mz',
  vml: 'vml-latn-au',
  vmm: 'vmm-latn-mx',
  vmp: 'vmp-latn-mx',
  vmq: 'vmq-latn-mx',
  vmr: 'vmr-latn-mz',
  vms: 'vms-latn-id',
  vmu: 'vmu-latn-au',
  vmw: 'vmw-latn-mz',
  vmx: 'vmx-latn-mx',
  vmy: 'vmy-latn-mx',
  vmz: 'vmz-latn-mx',
  vnk: 'vnk-latn-sb',
  vnm: 'vnm-latn-vu',
  vnp: 'vnp-latn-vu',
  vo: 'vo-latn-001',
  vor: 'vor-latn-ng',
  vot: 'vot-latn-ru',
  vra: 'vra-latn-vu',
  vro: 'vro-latn-ee',
  vrs: 'vrs-latn-sb',
  vrt: 'vrt-latn-vu',
  vto: 'vto-latn-id',
  vum: 'vum-latn-ga',
  vun: 'vun-latn-tz',
  vut: 'vut-latn-zz',
  vwa: 'vwa-latn-cn',
  'vwa-mymr': 'vwa-mymr-cn',
  wa: 'wa-latn-be',
  waa: 'waa-latn-us',
  wab: 'wab-latn-pg',
  wac: 'wac-latn-us',
  wad: 'wad-latn-id',
  wae: 'wae-latn-ch',
  waf: 'waf-latn-br',
  wag: 'wag-latn-pg',
  wah: 'wah-latn-id',
  wai: 'wai-latn-id',
  waj: 'waj-latn-zz',
  wal: 'wal-ethi-et',
  wam: 'wam-latn-us',
  wan: 'wan-latn-zz',
  wap: 'wap-latn-gy',
  waq: 'waq-latn-au',
  war: 'war-latn-ph',
  was: 'was-latn-us',
  wat: 'wat-latn-pg',
  wau: 'wau-latn-br',
  wav: 'wav-latn-ng',
  waw: 'waw-latn-br',
  wax: 'wax-latn-pg',
  way: 'way-latn-sr',
  waz: 'waz-latn-pg',
  wba: 'wba-latn-ve',
  wbb: 'wbb-latn-id',
  wbe: 'wbe-latn-id',
  wbf: 'wbf-latn-bf',
  wbh: 'wbh-latn-tz',
  wbi: 'wbi-latn-tz',
  wbj: 'wbj-latn-tz',
  wbk: 'wbk-arab-af',
  wbl: 'wbl-latn-pk',
  'wbl-arab': 'wbl-arab-af',
  'wbl-cyrl': 'wbl-cyrl-tj',
  wbm: 'wbm-latn-cn',
  wbp: 'wbp-latn-au',
  wbq: 'wbq-telu-in',
  wbr: 'wbr-deva-in',
  wbt: 'wbt-latn-au',
  wbv: 'wbv-latn-au',
  wbw: 'wbw-latn-id',
  wca: 'wca-latn-br',
  wci: 'wci-latn-zz',
  wdd: 'wdd-latn-ga',
  wdg: 'wdg-latn-pg',
  wdj: 'wdj-latn-au',
  wdk: 'wdk-latn-au',
  wdt: 'wdt-latn-ca',
  wdu: 'wdu-latn-au',
  wdy: 'wdy-latn-au',
  wec: 'wec-latn-ci',
  wed: 'wed-latn-pg',
  weg: 'weg-latn-au',
  weh: 'weh-latn-cm',
  wei: 'wei-latn-pg',
  wem: 'wem-latn-bj',
  weo: 'weo-latn-id',
  wep: 'wep-latn-de',
  wer: 'wer-latn-zz',
  wes: 'wes-latn-cm',
  wet: 'wet-latn-id',
  weu: 'weu-latn-mm',
  wew: 'wew-latn-id',
  wfg: 'wfg-latn-id',
  wga: 'wga-latn-au',
  wgb: 'wgb-latn-pg',
  wgg: 'wgg-latn-au',
  wgi: 'wgi-latn-zz',
  wgo: 'wgo-latn-id',
  wgu: 'wgu-latn-au',
  wgy: 'wgy-latn-au',
  wha: 'wha-latn-id',
  whg: 'whg-latn-zz',
  whk: 'whk-latn-id',
  whu: 'whu-latn-id',
  wib: 'wib-latn-zz',
  wic: 'wic-latn-us',
  wie: 'wie-latn-au',
  wif: 'wif-latn-au',
  wig: 'wig-latn-au',
  wih: 'wih-latn-au',
  wii: 'wii-latn-pg',
  wij: 'wij-latn-au',
  wik: 'wik-latn-au',
  wil: 'wil-latn-au',
  wim: 'wim-latn-au',
  win: 'win-latn-us',
  wir: 'wir-latn-br',
  wiu: 'wiu-latn-zz',
  wiv: 'wiv-latn-zz',
  wiy: 'wiy-latn-us',
  wja: 'wja-latn-zz',
  wji: 'wji-latn-zz',
  wka: 'wka-latn-tz',
  wkd: 'wkd-latn-id',
  wkr: 'wkr-latn-au',
  wkw: 'wkw-latn-au',
  wky: 'wky-latn-au',
  wla: 'wla-latn-pg',
  wlg: 'wlg-latn-au',
  wlh: 'wlh-latn-tl',
  wli: 'wli-latn-id',
  wlm: 'wlm-latn-gb',
  wlo: 'wlo-arab-id',
  wlr: 'wlr-latn-vu',
  wls: 'wls-latn-wf',
  wlu: 'wlu-latn-au',
  wlv: 'wlv-latn-ar',
  wlw: 'wlw-latn-id',
  wlx: 'wlx-latn-gh',
  wma: 'wma-latn-ng',
  wmb: 'wmb-latn-au',
  wmc: 'wmc-latn-pg',
  wmd: 'wmd-latn-br',
  wme: 'wme-deva-np',
  wmh: 'wmh-latn-tl',
  wmi: 'wmi-latn-au',
  wmm: 'wmm-latn-id',
  wmn: 'wmn-latn-nc',
  wmo: 'wmo-latn-zz',
  wms: 'wms-latn-id',
  wmt: 'wmt-latn-au',
  wmw: 'wmw-latn-mz',
  'wmw-arab': 'wmw-arab-mz',
  wmx: 'wmx-latn-pg',
  wnb: 'wnb-latn-pg',
  wnc: 'wnc-latn-zz',
  wnd: 'wnd-latn-au',
  wne: 'wne-arab-pk',
  wng: 'wng-latn-id',
  wni: 'wni-arab-km',
  wnk: 'wnk-latn-id',
  wnm: 'wnm-latn-au',
  wnn: 'wnn-latn-au',
  wno: 'wno-latn-id',
  wnp: 'wnp-latn-pg',
  wnu: 'wnu-latn-zz',
  wnw: 'wnw-latn-us',
  wny: 'wny-latn-au',
  wo: 'wo-latn-sn',
  woa: 'woa-latn-au',
  wob: 'wob-latn-zz',
  woc: 'woc-latn-pg',
  wod: 'wod-latn-id',
  woe: 'woe-latn-fm',
  wof: 'wof-latn-gm',
  'wof-arab': 'wof-arab-gm',
  wog: 'wog-latn-pg',
  woi: 'woi-latn-id',
  wok: 'wok-latn-cm',
  wom: 'wom-latn-ng',
  won: 'won-latn-cd',
  woo: 'woo-latn-id',
  wor: 'wor-latn-id',
  wos: 'wos-latn-zz',
  wow: 'wow-latn-id',
  wpc: 'wpc-latn-ve',
  wrb: 'wrb-latn-au',
  wrg: 'wrg-latn-au',
  wrh: 'wrh-latn-au',
  wri: 'wri-latn-au',
  wrk: 'wrk-latn-au',
  wrl: 'wrl-latn-au',
  wrm: 'wrm-latn-au',
  wro: 'wro-latn-au',
  wrp: 'wrp-latn-id',
  wrr: 'wrr-latn-au',
  wrs: 'wrs-latn-zz',
  wru: 'wru-latn-id',
  wrv: 'wrv-latn-pg',
  wrw: 'wrw-latn-au',
  wrx: 'wrx-latn-id',
  wrz: 'wrz-latn-au',
  wsa: 'wsa-latn-id',
  wsg: 'wsg-gong-in',
  wsi: 'wsi-latn-vu',
  wsk: 'wsk-latn-zz',
  wsr: 'wsr-latn-pg',
  wss: 'wss-latn-gh',
  wsu: 'wsu-latn-br',
  wsv: 'wsv-arab-af',
  wtf: 'wtf-latn-pg',
  wth: 'wth-latn-au',
  wti: 'wti-latn-et',
  wtk: 'wtk-latn-pg',
  wtm: 'wtm-deva-in',
  wtw: 'wtw-latn-id',
  'wtw-bugi': 'wtw-bugi-id',
  wua: 'wua-latn-au',
  wub: 'wub-latn-au',
  wud: 'wud-latn-tg',
  wul: 'wul-latn-id',
  wum: 'wum-latn-ga',
  wun: 'wun-latn-tz',
  wur: 'wur-latn-au',
  wut: 'wut-latn-pg',
  wuu: 'wuu-hans-cn',
  wuv: 'wuv-latn-zz',
  wux: 'wux-latn-au',
  wuy: 'wuy-latn-id',
  wwa: 'wwa-latn-zz',
  wwb: 'wwb-latn-au',
  wwo: 'wwo-latn-vu',
  wwr: 'wwr-latn-au',
  www: 'www-latn-cm',
  wxw: 'wxw-latn-au',
  wyb: 'wyb-latn-au',
  wyi: 'wyi-latn-au',
  wym: 'wym-latn-pl',
  wyn: 'wyn-latn-us',
  wyr: 'wyr-latn-br',
  wyy: 'wyy-latn-fj',
  xaa: 'xaa-latn-es',
  xab: 'xab-latn-ng',
  xai: 'xai-latn-br',
  xaj: 'xaj-latn-br',
  xak: 'xak-latn-ve',
  xal: 'xal-cyrl-ru',
  xam: 'xam-latn-za',
  xan: 'xan-ethi-et',
  xao: 'xao-latn-vn',
  xar: 'xar-latn-pg',
  xas: 'xas-cyrl-ru',
  xat: 'xat-latn-br',
  xau: 'xau-latn-id',
  xav: 'xav-latn-br',
  xaw: 'xaw-latn-us',
  xay: 'xay-latn-id',
  xbb: 'xbb-latn-au',
  xbd: 'xbd-latn-au',
  xbe: 'xbe-latn-au',
  xbg: 'xbg-latn-au',
  xbi: 'xbi-latn-zz',
  xbj: 'xbj-latn-au',
  xbm: 'xbm-latn-fr',
  xbn: 'xbn-latn-my',
  xbp: 'xbp-latn-au',
  xbr: 'xbr-latn-id',
  xbw: 'xbw-latn-br',
  xby: 'xby-latn-au',
  xch: 'xch-latn-us',
  xco: 'xco-chrs-uz',
  xcr: 'xcr-cari-tr',
  xda: 'xda-latn-au',
  xdk: 'xdk-latn-au',
  xdo: 'xdo-latn-ao',
  xdq: 'xdq-cyrl-ru',
  xdy: 'xdy-latn-id',
  xed: 'xed-latn-cm',
  xeg: 'xeg-latn-za',
  xem: 'xem-latn-id',
  xer: 'xer-latn-br',
  xes: 'xes-latn-zz',
  xet: 'xet-latn-br',
  xeu: 'xeu-latn-pg',
  xgb: 'xgb-latn-ci',
  xgd: 'xgd-latn-au',
  xgg: 'xgg-latn-au',
  xgi: 'xgi-latn-au',
  xgm: 'xgm-latn-au',
  xgu: 'xgu-latn-au',
  xgw: 'xgw-latn-au',
  xh: 'xh-latn-za',
  xhe: 'xhe-arab-pk',
  xhm: 'xhm-khmr-kh',
  xhv: 'xhv-latn-vn',
  xii: 'xii-latn-za',
  xin: 'xin-latn-gt',
  xir: 'xir-latn-br',
  xis: 'xis-orya-in',
  xiy: 'xiy-latn-br',
  xjb: 'xjb-latn-au',
  xjt: 'xjt-latn-au',
  xka: 'xka-arab-pk',
  xkb: 'xkb-latn-bj',
  xkc: 'xkc-arab-ir',
  xkd: 'xkd-latn-id',
  xke: 'xke-latn-id',
  xkg: 'xkg-latn-ml',
  xkj: 'xkj-arab-ir',
  xkl: 'xkl-latn-id',
  xkn: 'xkn-latn-id',
  xkp: 'xkp-arab-ir',
  xkq: 'xkq-latn-id',
  xkr: 'xkr-latn-br',
  xks: 'xks-latn-id',
  xkt: 'xkt-latn-gh',
  xku: 'xku-latn-cg',
  xkv: 'xkv-latn-bw',
  xkw: 'xkw-latn-id',
  xkx: 'xkx-latn-pg',
  xky: 'xky-latn-my',
  xkz: 'xkz-latn-bt',
  xla: 'xla-latn-zz',
  xlc: 'xlc-lyci-tr',
  xld: 'xld-lydi-tr',
  xly: 'xly-elym-ir',
  xma: 'xma-latn-so',
  xmb: 'xmb-latn-cm',
  xmc: 'xmc-latn-mz',
  xmd: 'xmd-latn-cm',
  xmf: 'xmf-geor-ge',
  xmg: 'xmg-latn-cm',
  xmh: 'xmh-latn-au',
  xmj: 'xmj-latn-cm',
  xmm: 'xmm-latn-id',
  xmn: 'xmn-mani-cn',
  xmo: 'xmo-latn-br',
  xmp: 'xmp-latn-au',
  xmq: 'xmq-latn-au',
  xmr: 'xmr-merc-sd',
  xmt: 'xmt-latn-id',
  xmu: 'xmu-latn-au',
  xmv: 'xmv-latn-mg',
  xmw: 'xmw-latn-mg',
  xmx: 'xmx-latn-id',
  xmy: 'xmy-latn-au',
  xmz: 'xmz-latn-id',
  xna: 'xna-narb-sa',
  xnb: 'xnb-latn-tw',
  xni: 'xni-latn-au',
  xnj: 'xnj-latn-tz',
  xnk: 'xnk-latn-au',
  xnm: 'xnm-latn-au',
  xnn: 'xnn-latn-ph',
  xnq: 'xnq-latn-mz',
  xnr: 'xnr-deva-in',
  xnt: 'xnt-latn-us',
  xnu: 'xnu-latn-au',
  xny: 'xny-latn-au',
  xnz: 'xnz-latn-eg',
  'xnz-arab': 'xnz-arab-eg',
  xoc: 'xoc-latn-ng',
  xod: 'xod-latn-id',
  xog: 'xog-latn-ug',
  xoi: 'xoi-latn-pg',
  xok: 'xok-latn-br',
  xom: 'xom-latn-sd',
  'xom-ethi': 'xom-ethi-et',
  xon: 'xon-latn-zz',
  xoo: 'xoo-latn-br',
  xop: 'xop-latn-pg',
  xor: 'xor-latn-br',
  xow: 'xow-latn-pg',
  xpa: 'xpa-latn-au',
  xpb: 'xpb-latn-au',
  xpd: 'xpd-latn-au',
  xpf: 'xpf-latn-au',
  xpg: 'xpg-grek-tr',
  xph: 'xph-latn-au',
  xpi: 'xpi-ogam-gb',
  xpj: 'xpj-latn-au',
  xpk: 'xpk-latn-br',
  xpl: 'xpl-latn-au',
  xpm: 'xpm-cyrl-ru',
  xpn: 'xpn-latn-br',
  xpo: 'xpo-latn-mx',
  xpq: 'xpq-latn-us',
  xpr: 'xpr-prti-ir',
  xpt: 'xpt-latn-au',
  xpv: 'xpv-latn-au',
  xpw: 'xpw-latn-au',
  xpx: 'xpx-latn-au',
  xpz: 'xpz-latn-au',
  xra: 'xra-latn-br',
  xrb: 'xrb-latn-zz',
  xrd: 'xrd-latn-au',
  xre: 'xre-latn-br',
  xrg: 'xrg-latn-au',
  xri: 'xri-latn-br',
  xrm: 'xrm-cyrl-ru',
  xrn: 'xrn-cyrl-ru',
  xrr: 'xrr-latn-it',
  xru: 'xru-latn-au',
  xrw: 'xrw-latn-pg',
  xsa: 'xsa-sarb-ye',
  xsb: 'xsb-latn-ph',
  xse: 'xse-latn-id',
  xsh: 'xsh-latn-ng',
  xsi: 'xsi-latn-zz',
  xsm: 'xsm-latn-zz',
  xsn: 'xsn-latn-ng',
  xsp: 'xsp-latn-pg',
  xsq: 'xsq-latn-mz',
  xsr: 'xsr-deva-np',
  xss: 'xss-cyrl-ru',
  xsu: 'xsu-latn-ve',
  xsy: 'xsy-latn-tw',
  xta: 'xta-latn-mx',
  xtb: 'xtb-latn-mx',
  xtc: 'xtc-latn-sd',
  xtd: 'xtd-latn-mx',
  xte: 'xte-latn-id',
  xth: 'xth-latn-au',
  xti: 'xti-latn-mx',
  xtj: 'xtj-latn-mx',
  xtl: 'xtl-latn-mx',
  xtm: 'xtm-latn-mx',
  xtn: 'xtn-latn-mx',
  xtp: 'xtp-latn-mx',
  xts: 'xts-latn-mx',
  xtt: 'xtt-latn-mx',
  xtu: 'xtu-latn-mx',
  xtv: 'xtv-latn-au',
  xtw: 'xtw-latn-br',
  xty: 'xty-latn-mx',
  xub: 'xub-taml-in',
  'xub-knda': 'xub-knda-in',
  'xub-mlym': 'xub-mlym-in',
  xud: 'xud-latn-au',
  xuj: 'xuj-taml-in',
  xul: 'xul-latn-au',
  xum: 'xum-latn-it',
  'xum-ital': 'xum-ital-it',
  xun: 'xun-latn-au',
  xuo: 'xuo-latn-td',
  xut: 'xut-latn-au',
  xuu: 'xuu-latn-na',
  xve: 'xve-ital-it',
  xvi: 'xvi-arab-af',
  xvn: 'xvn-latn-es',
  xvo: 'xvo-latn-it',
  xvs: 'xvs-latn-it',
  xwa: 'xwa-latn-br',
  xwd: 'xwd-latn-au',
  xwe: 'xwe-latn-zz',
  xwj: 'xwj-latn-au',
  xwk: 'xwk-latn-au',
  xwl: 'xwl-latn-bj',
  xwo: 'xwo-cyrl-ru',
  xwr: 'xwr-latn-id',
  xwt: 'xwt-latn-au',
  xww: 'xww-latn-au',
  xxb: 'xxb-latn-gh',
  xxk: 'xxk-latn-id',
  xxm: 'xxm-latn-au',
  xxr: 'xxr-latn-br',
  xxt: 'xxt-latn-id',
  xya: 'xya-latn-au',
  xyb: 'xyb-latn-au',
  xyj: 'xyj-latn-au',
  xyk: 'xyk-latn-au',
  xyl: 'xyl-latn-br',
  xyt: 'xyt-latn-au',
  xyy: 'xyy-latn-au',
  xzh: 'xzh-marc-cn',
  xzp: 'xzp-latn-mx',
  yaa: 'yaa-latn-pe',
  yab: 'yab-latn-br',
  yac: 'yac-latn-id',
  yad: 'yad-latn-pe',
  yae: 'yae-latn-ve',
  yaf: 'yaf-latn-cd',
  yag: 'yag-latn-cl',
  yai: 'yai-cyrl-tj',
  yaj: 'yaj-latn-cf',
  yak: 'yak-latn-us',
  yal: 'yal-latn-gn',
  'yal-arab': 'yal-arab-gn',
  yam: 'yam-latn-zz',
  yan: 'yan-latn-ni',
  yao: 'yao-latn-mz',
  yap: 'yap-latn-fm',
  yaq: 'yaq-latn-mx',
  yar: 'yar-latn-ve',
  yas: 'yas-latn-zz',
  yat: 'yat-latn-zz',
  yau: 'yau-latn-ve',
  yav: 'yav-latn-cm',
  yaw: 'yaw-latn-br',
  yax: 'yax-latn-ao',
  yay: 'yay-latn-zz',
  yaz: 'yaz-latn-zz',
  yba: 'yba-latn-zz',
  ybb: 'ybb-latn-cm',
  ybe: 'ybe-latn-cn',
  'ybe-ougr': 'ybe-ougr-cn',
  ybh: 'ybh-deva-np',
  ybi: 'ybi-deva-np',
  ybj: 'ybj-latn-ng',
  ybl: 'ybl-latn-ng',
  ybm: 'ybm-latn-pg',
  ybn: 'ybn-latn-br',
  ybo: 'ybo-latn-pg',
  ybx: 'ybx-latn-pg',
  yby: 'yby-latn-zz',
  ycl: 'ycl-latn-cn',
  ycn: 'ycn-latn-co',
  yda: 'yda-latn-au',
  yde: 'yde-latn-pg',
  ydg: 'ydg-arab-pk',
  ydk: 'ydk-latn-pg',
  yea: 'yea-mlym-in',
  'yea-knda': 'yea-knda-in',
  yec: 'yec-latn-de',
  yee: 'yee-latn-pg',
  yei: 'yei-latn-cm',
  yej: 'yej-grek-il',
  yel: 'yel-latn-cd',
  yer: 'yer-latn-zz',
  yes: 'yes-latn-ng',
  yet: 'yet-latn-id',
  yeu: 'yeu-telu-in',
  yev: 'yev-latn-pg',
  yey: 'yey-latn-bw',
  yga: 'yga-latn-au',
  ygi: 'ygi-latn-au',
  ygl: 'ygl-latn-pg',
  ygm: 'ygm-latn-pg',
  ygp: 'ygp-plrd-cn',
  ygr: 'ygr-latn-zz',
  ygu: 'ygu-latn-au',
  ygw: 'ygw-latn-zz',
  yhd: 'yhd-hebr-il',
  yi: 'yi-hebr-001',
  yia: 'yia-latn-au',
  yig: 'yig-yiii-cn',
  yih: 'yih-hebr-de',
  yii: 'yii-latn-au',
  yij: 'yij-latn-au',
  yil: 'yil-latn-au',
  yim: 'yim-latn-in',
  yir: 'yir-latn-id',
  yis: 'yis-latn-pg',
  yiv: 'yiv-yiii-cn',
  yka: 'yka-latn-ph',
  'yka-arab': 'yka-arab-ph',
  ykg: 'ykg-cyrl-ru',
  yki: 'yki-latn-id',
  ykk: 'ykk-latn-pg',
  ykm: 'ykm-latn-pg',
  yko: 'yko-latn-zz',
  ykr: 'ykr-latn-pg',
  yky: 'yky-latn-cf',
  yla: 'yla-latn-pg',
  ylb: 'ylb-latn-pg',
  yle: 'yle-latn-zz',
  ylg: 'ylg-latn-zz',
  yli: 'yli-latn-id',
  yll: 'yll-latn-zz',
  ylr: 'ylr-latn-au',
  ylu: 'ylu-latn-pg',
  yly: 'yly-latn-nc',
  ymb: 'ymb-latn-pg',
  yme: 'yme-latn-pe',
  ymg: 'ymg-latn-cd',
  ymk: 'ymk-latn-mz',
  'ymk-arab': 'ymk-arab-mz',
  yml: 'yml-latn-zz',
  ymm: 'ymm-latn-so',
  ymn: 'ymn-latn-id',
  ymo: 'ymo-latn-pg',
  ymp: 'ymp-latn-pg',
  yna: 'yna-plrd-cn',
  ynd: 'ynd-latn-au',
  yng: 'yng-latn-cd',
  ynk: 'ynk-cyrl-ru',
  ynl: 'ynl-latn-pg',
  ynq: 'ynq-latn-ng',
  yns: 'yns-latn-cd',
  ynu: 'ynu-latn-co',
  yo: 'yo-latn-ng',
  yob: 'yob-latn-pg',
  yog: 'yog-latn-ph',
  yoi: 'yoi-jpan-jp',
  yok: 'yok-latn-us',
  yol: 'yol-latn-gb',
  yom: 'yom-latn-cd',
  yon: 'yon-latn-zz',
  yot: 'yot-latn-ng',
  yoy: 'yoy-thai-th',
  yra: 'yra-latn-pg',
  yrb: 'yrb-latn-zz',
  yre: 'yre-latn-zz',
  yrk: 'yrk-cyrl-ru',
  yrl: 'yrl-latn-br',
  yrm: 'yrm-latn-au',
  yro: 'yro-latn-br',
  yrs: 'yrs-latn-id',
  yrw: 'yrw-latn-pg',
  yry: 'yry-latn-au',
  ysd: 'ysd-yiii-cn',
  ysn: 'ysn-yiii-cn',
  ysp: 'ysp-yiii-cn',
  ysr: 'ysr-cyrl-ru',
  yss: 'yss-latn-zz',
  ysy: 'ysy-plrd-cn',
  ytw: 'ytw-latn-pg',
  yty: 'yty-latn-au',
  yua: 'yua-latn-mx',
  yub: 'yub-latn-au',
  yuc: 'yuc-latn-us',
  yud: 'yud-hebr-il',
  yue: 'yue-hant-hk',
  'yue-cn': 'yue-hans-cn',
  'yue-hans': 'yue-hans-cn',
  yuf: 'yuf-latn-us',
  yug: 'yug-cyrl-ru',
  yui: 'yui-latn-co',
  yuj: 'yuj-latn-zz',
  yul: 'yul-latn-cf',
  yum: 'yum-latn-us',
  yun: 'yun-latn-ng',
  yup: 'yup-latn-co',
  yuq: 'yuq-latn-bo',
  yur: 'yur-latn-us',
  yut: 'yut-latn-zz',
  yuw: 'yuw-latn-zz',
  yux: 'yux-cyrl-ru',
  yuz: 'yuz-latn-bo',
  yva: 'yva-latn-id',
  yvt: 'yvt-latn-ve',
  ywa: 'ywa-latn-pg',
  ywg: 'ywg-latn-au',
  ywn: 'ywn-latn-br',
  ywq: 'ywq-plrd-cn',
  'ywq-yiii': 'ywq-yiii-cn',
  ywr: 'ywr-latn-au',
  ywu: 'ywu-plrd-cn',
  'ywu-yiii': 'ywu-yiii-cn',
  yww: 'yww-latn-au',
  yxa: 'yxa-latn-au',
  yxg: 'yxg-latn-au',
  yxl: 'yxl-latn-au',
  yxm: 'yxm-latn-au',
  yxu: 'yxu-latn-au',
  yxy: 'yxy-latn-au',
  yyr: 'yyr-latn-au',
  yyu: 'yyu-latn-pg',
  za: 'za-latn-cn',
  zaa: 'zaa-latn-mx',
  zab: 'zab-latn-mx',
  zac: 'zac-latn-mx',
  zad: 'zad-latn-mx',
  zae: 'zae-latn-mx',
  zaf: 'zaf-latn-mx',
  zag: 'zag-latn-sd',
  zah: 'zah-latn-ng',
  zaj: 'zaj-latn-tz',
  zak: 'zak-latn-tz',
  zam: 'zam-latn-mx',
  zao: 'zao-latn-mx',
  zap: 'zap-latn-mx',
  zaq: 'zaq-latn-mx',
  zar: 'zar-latn-mx',
  zas: 'zas-latn-mx',
  zat: 'zat-latn-mx',
  zau: 'zau-tibt-in',
  'zau-arab': 'zau-arab-in',
  zav: 'zav-latn-mx',
  zaw: 'zaw-latn-mx',
  zax: 'zax-latn-mx',
  zay: 'zay-latn-et',
  'zay-ethi': 'zay-ethi-et',
  zaz: 'zaz-latn-ng',
  zba: 'zba-arab-001',
  zbc: 'zbc-latn-my',
  zbe: 'zbe-latn-my',
  zbt: 'zbt-latn-id',
  zbu: 'zbu-latn-ng',
  zbw: 'zbw-latn-my',
  zca: 'zca-latn-mx',
  zch: 'zch-hani-cn',
  zdj: 'zdj-arab-km',
  zea: 'zea-latn-nl',
  zeg: 'zeg-latn-pg',
  zeh: 'zeh-hani-cn',
  zen: 'zen-tfng-mr',
  'zen-arab': 'zen-arab-mr',
  zga: 'zga-latn-tz',
  zgb: 'zgb-hani-cn',
  zgh: 'zgh-tfng-ma',
  zgm: 'zgm-hani-cn',
  zgn: 'zgn-hani-cn',
  zgr: 'zgr-latn-pg',
  zh: 'zh-hans-cn',
  'zh-au': 'zh-hant-au',
  'zh-bn': 'zh-hant-bn',
  'zh-bopo': 'zh-bopo-tw',
  'zh-gb': 'zh-hant-gb',
  'zh-gf': 'zh-hant-gf',
  'zh-hanb': 'zh-hanb-tw',
  'zh-hant': 'zh-hant-tw',
  'zh-hk': 'zh-hant-hk',
  'zh-id': 'zh-hant-id',
  'zh-mo': 'zh-hant-mo',
  'zh-pa': 'zh-hant-pa',
  'zh-pf': 'zh-hant-pf',
  'zh-ph': 'zh-hant-ph',
  'zh-sr': 'zh-hant-sr',
  'zh-th': 'zh-hant-th',
  'zh-tw': 'zh-hant-tw',
  'zh-us': 'zh-hant-us',
  'zh-vn': 'zh-hant-vn',
  zhd: 'zhd-hani-cn',
  'zhd-latn': 'zhd-latn-vn',
  zhi: 'zhi-latn-ng',
  zhn: 'zhn-latn-cn',
  'zhn-hani': 'zhn-hani-cn',
  zhw: 'zhw-latn-cm',
  zhx: 'zhx-nshu-cn',
  zia: 'zia-latn-zz',
  zik: 'zik-latn-pg',
  zil: 'zil-latn-gn',
  zim: 'zim-latn-td',
  zin: 'zin-latn-tz',
  ziw: 'ziw-latn-tz',
  ziz: 'ziz-latn-ng',
  zka: 'zka-latn-id',
  zkb: 'zkb-cyrl-ru',
  zkd: 'zkd-latn-mm',
  zko: 'zko-cyrl-ru',
  zkp: 'zkp-latn-br',
  zkt: 'zkt-kits-cn',
  zku: 'zku-latn-au',
  zkz: 'zkz-cyrl-ru',
  zla: 'zla-latn-cd',
  zlj: 'zlj-hani-cn',
  'zlj-latn': 'zlj-latn-cn',
  zlm: 'zlm-latn-tg',
  zln: 'zln-hani-cn',
  zlq: 'zlq-hani-cn',
  zma: 'zma-latn-au',
  zmb: 'zmb-latn-cd',
  zmc: 'zmc-latn-au',
  zmd: 'zmd-latn-au',
  zme: 'zme-latn-au',
  zmf: 'zmf-latn-cd',
  zmg: 'zmg-latn-au',
  zmh: 'zmh-latn-pg',
  zmi: 'zmi-latn-my',
  zmj: 'zmj-latn-au',
  zmk: 'zmk-latn-au',
  zml: 'zml-latn-au',
  zmm: 'zmm-latn-au',
  zmn: 'zmn-latn-ga',
  zmo: 'zmo-latn-sd',
  zmp: 'zmp-latn-cd',
  zmq: 'zmq-latn-cd',
  zmr: 'zmr-latn-au',
  zms: 'zms-latn-cd',
  zmt: 'zmt-latn-au',
  zmu: 'zmu-latn-au',
  zmv: 'zmv-latn-au',
  zmw: 'zmw-latn-cd',
  zmx: 'zmx-latn-cg',
  zmy: 'zmy-latn-au',
  zmz: 'zmz-latn-cd',
  zna: 'zna-latn-td',
  zne: 'zne-latn-zz',
  zng: 'zng-latn-vn',
  znk: 'znk-latn-au',
  zns: 'zns-latn-ng',
  zoc: 'zoc-latn-mx',
  zoh: 'zoh-latn-mx',
  zom: 'zom-latn-in',
  zoo: 'zoo-latn-mx',
  zoq: 'zoq-latn-mx',
  zor: 'zor-latn-mx',
  zos: 'zos-latn-mx',
  zpa: 'zpa-latn-mx',
  zpb: 'zpb-latn-mx',
  zpc: 'zpc-latn-mx',
  zpd: 'zpd-latn-mx',
  zpe: 'zpe-latn-mx',
  zpf: 'zpf-latn-mx',
  zpg: 'zpg-latn-mx',
  zph: 'zph-latn-mx',
  zpi: 'zpi-latn-mx',
  zpj: 'zpj-latn-mx',
  zpk: 'zpk-latn-mx',
  zpl: 'zpl-latn-mx',
  zpm: 'zpm-latn-mx',
  zpn: 'zpn-latn-mx',
  zpo: 'zpo-latn-mx',
  zpp: 'zpp-latn-mx',
  zpq: 'zpq-latn-mx',
  zpr: 'zpr-latn-mx',
  zps: 'zps-latn-mx',
  zpt: 'zpt-latn-mx',
  zpu: 'zpu-latn-mx',
  zpv: 'zpv-latn-mx',
  zpw: 'zpw-latn-mx',
  zpx: 'zpx-latn-mx',
  zpy: 'zpy-latn-mx',
  zpz: 'zpz-latn-mx',
  zqe: 'zqe-hani-cn',
  'zqe-latn': 'zqe-latn-cn',
  zrn: 'zrn-latn-td',
  zro: 'zro-latn-ec',
  zrp: 'zrp-hebr-fr',
  zrs: 'zrs-latn-id',
  zsa: 'zsa-latn-pg',
  zsr: 'zsr-latn-mx',
  zsu: 'zsu-latn-pg',
  zte: 'zte-latn-mx',
  ztg: 'ztg-latn-mx',
  ztl: 'ztl-latn-mx',
  ztm: 'ztm-latn-mx',
  ztn: 'ztn-latn-mx',
  ztp: 'ztp-latn-mx',
  ztq: 'ztq-latn-mx',
  zts: 'zts-latn-mx',
  ztt: 'ztt-latn-mx',
  ztu: 'ztu-latn-mx',
  ztx: 'ztx-latn-mx',
  zty: 'zty-latn-mx',
  zu: 'zu-latn-za',
  zua: 'zua-latn-ng',
  zuh: 'zuh-latn-pg',
  zum: 'zum-arab-om',
  zun: 'zun-latn-us',
  zuy: 'zuy-latn-cm',
  zyg: 'zyg-hani-cn',
  zyj: 'zyj-latn-cn',
  'zyj-hani': 'zyj-hani-cn',
  zyn: 'zyn-hani-cn',
  zyp: 'zyp-latn-mm',
  zza: 'zza-latn-tr',
  zzj: 'zzj-hani-cn'
};

/**
 * @typedef {import('bcp-47').Warning} Warning
 * @typedef {import('bcp-47').Schema} Schema
 * @typedef {import('bcp-47').Extension} Extension
 *
 * @typedef Options
 *   Configuration (optional).
 * @property {boolean} [forgiving]
 *   Passed to `bcp-47` as `options.forgiving`.
 * @property {Warning} [warning]
 *   Passed to `bcp-47` as `options.warning`.
 *
 *   One additional warning is given:
 *
 *   | code | reason                                                     |
 *   | :--- | :--------------------------------------------------------- |
 *   | 7    | Deprecated region `CURRENT`, expected one of `SUGGESTIONS` |
 *
 *   This warning is only given if the region cannot be automatically fixed
 *   (when regions split into multiple regions).
 */


const own = {}.hasOwnProperty;

/**
 * @param {Schema} base
 * @param {Partial<Schema>} changes
 * @returns {Schema}
 */
function merge(base, changes) {
  if (!base.language) base.language = changes.language;
  if (!base.script) base.script = changes.script;
  if (!base.region) base.region = changes.region;
  if (changes.variants) base.variants.push(...changes.variants);

  return base
}

/**
 * Mostly like:
 * <https://github.com/formatjs/formatjs/blob/a15e757/packages/intl-locale/index.ts#L254>
 * But doesn’t crash.
 *
 * @param {Schema} schema
 * @returns {string}
 */
function addLikelySubtags(schema) {
  const {language, script, region} = schema;
  /** @type {string|undefined} */
  let match;

  if (
    script &&
    region &&
    (match = likely[stringify({language, script, region})])
  ) {
    schema.script = undefined;
    schema.region = undefined;
  } else if (script && (match = likely[stringify({language, script})])) {
    schema.script = undefined;
  } else if (region && (match = likely[stringify({language, region})])) {
    schema.region = undefined;
  } else if (language && (match = likely[language])) ;

  if (match) {
    schema.language = undefined;
    merge(schema, parse(match));
  }

  return stringify(schema)
}

/**
 * @param {Schema} schema
 */
function removeLikelySubtags(schema) {
  addLikelySubtags(schema);

  const {language, script, region} = schema;

  if (!language) return schema

  const maxLocale = stringify({language, script, region});

  if (maxLocale === addLikelySubtags(parse(language))) {
    schema.script = undefined;
    schema.region = undefined;
  } else if (
    region &&
    maxLocale === addLikelySubtags(parse(language + '-' + region))
  ) {
    schema.script = undefined;
  } else if (
    script &&
    maxLocale === addLikelySubtags(parse(language + '-' + script))
  ) {
    schema.region = undefined;
  }

  return schema
}

/**
 * Normalize the given BCP 47 tag according to Unicode CLDR suggestions.
 *
 * @param {string} tag
 *   BCP 47 tag.
 * @param {Options} [options]
 *   Configuration (optional).
 * @returns {string}
 *   Normal, canonical, and pretty BCP 47 tag.
 */
function bcp47Normalize(tag, options) {
  const settings = options || {};
  // 1. normalize and lowercase the tag (`sgn-be-fr` -> `sfb`).
  const schema = parse(String(tag || '').toLowerCase(), settings);
  const value = stringify(schema);

  if (!value) {
    return value
  }

  let index = -1;

  // 2. Do fancy, expensive replaces (`ha-latn-gh` -> `ha-gh`).
  while (++index < matches.length) {
    let from = matches[index].from;

    if (from.slice(0, 4) === 'und-' && schema.language) {
      from = schema.language + from.slice(3);
    }

    if (extendedFilter(value, from).length > 0) {
      replace(schema, from, matches[index].to);
    }
  }

  // 3. Do basic field replaces (`en-840` -> `en-us`).
  index = -1;

  while (++index < fields$1.length) {
    if (remove(schema, fields$1[index].from.field, fields$1[index].from.value)) {
      add(schema, fields$1[index].to.field, fields$1[index].to.value);
    }
  }

  // 4. Minimize.
  removeLikelySubtags(schema);

  // 5. Sort variants, and sort extensions on singleton.
  schema.variants.sort();
  schema.extensions.sort(compareSingleton);

  // 6. Warn if fields (currently only regions) should be updated but have
  // multiple choices.
  if (settings.warning) {
    /** @type {keyof many} */
    let key;

    for (key in many) {
      if (own.call(many, key)) {
        const map = many[key];
        const value = schema[key];
        if (value && own.call(map, value)) {
          const replacements = map[value];
          settings.warning(
            'Deprecated ' +
              key +
              ' `' +
              value +
              '`, expected one of `' +
              replacements.join('`, `') +
              '`',
            -1,
            7
          );
        }
      }
    }
  }

  // 7. Add proper casing back.
  // Format script (ISO 15924) as titlecase (example: `Latn`):
  if (schema.script) {
    schema.script =
      schema.script.charAt(0).toUpperCase() + schema.script.slice(1);
  }

  // Format region (ISO 3166) as uppercase (note: this doesn’t affect numeric
  // codes, which is fine):
  if (schema.region) {
    schema.region = schema.region.toUpperCase();
  }

  return stringify(schema)
}

/**
 * @param {Schema} schema
 * @param {string} from
 * @param {string} to
 * @returns {void}
 */
function replace(schema, from, to) {
  const left = parse(from);
  const right = parse(to);
  /** @type {Array<string>} */
  const removed = [];
  /** @type {string|null|undefined} */
  const lang = left.language;
  /** @type {keyof schema} */
  let key;

  // Remove values from `from`:
  for (key in left) {
    if (own.call(left, key)) {
      const value = left[key];
      if (value && remove(schema, key, value)) {
        removed.push(key);
      }
    }
  }

  // Add values from `to`:
  for (key in right) {
    if (own.call(right, key)) {
      const value = right[key];
      // Only add values that are defined on `to`, and that were either removed by
      // `from` or are currently empty.
      if (lang && value && (removed.includes(key) || !schema[key])) {
        add(schema, key, key === 'language' && value === 'und' ? lang : value);
      }
    }
  }
}

/**
 * @param {Schema} object
 * @param {keyof Schema} key
 * @param {string|Array<string>|Array<Extension>} value
 * @returns {boolean}
 */
function remove(object, key, value) {
  let removed = false;
  /** @type {string|Array<string>|Array<Extension>|null|undefined} */
  let result;

  if (value) {
    const current = object[key];
    result = current;

    if (Array.isArray(current)) {
      result = [];
      let index = -1;

      while (++index < current.length) {
        const item = current[index];

        // @ts-expect-error: TS can’t handle the two lists.
        if (value.includes(item)) {
          removed = true;
        } else {
          // @ts-expect-error: TS can’t handle the two lists.
          result.push(item);
        }
      }
    } else if (current === value) {
      result = null;
      removed = true;
    }

    // @ts-expect-error: Assume the value matches.
    object[key] = result;
  }

  return removed
}

/**
 * @param {Schema} object
 * @param {keyof Schema} key
 * @param {string|Array<string>|Array<Extension>} value
 * @returns {void}
 */
function add(object, key, value) {
  /** @type {string|Array<string>|Array<Extension>|null|undefined} */
  const current = object[key];

  if (Array.isArray(current)) {
    const list = Array.isArray(value) ? value : [value];
    /** @type {number} */
    let index = -1;

    while (++index < list.length) {
      const item = list[index];

      // @ts-expect-error: TS can’t handle the two lists.
      if (!current.includes(item)) {
        // @ts-expect-error: TS can’t handle the two lists.
        current.push(item);
      }
    }
  } else {
    // @ts-expect-error: Assume the value matches.
    object[key] = value;
  }
}

/**
 * @param {Extension} left
 * @param {Extension} right
 * @returns {number}
 */
function compareSingleton(left, right) {
  if (left.singleton > right.singleton) {
    return 1
  }

  if (left.singleton < right.singleton) {
    return -1
  }

  // It is invalid to have more than one extension with the same singleton so
  // we should never reach this code.
  return 0
}

/**
 * @typedef {import('hast').Root} Root
 */


const fields = ['hrefLang', 'lang', 'srcLang', 'xmlLang'];

/**
 * Minify language attributes.
 *
 * @returns
 *   Transform.
 */
function rehypeMinifyLanguage() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      let index = -1;

      while (++index < fields.length) {
        const prop = fields[index];
        const value = node.properties[prop];

        if (typeof value === 'string') {
          // BCP 47 tags are case-insensitive, but in this project we prefer
          // lowercase which *should* help GZIP.
          node.properties[prop] = (bcp47Normalize(value) || value).toLowerCase();
        }
      }
    });
  }
}

/**
 * @typedef {import('hast').Root} Root
 */


const clean$2 = new CleanCSS();

const prefix$2 = '@media ';
const suffix$2 = '{i{color:red}}';

/**
 * Minify media attributes.
 *
 * @returns
 *   Transform.
 */
function rehypeMinifyMediaAttribute() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      const props = node.properties;

      if (
        props &&
        (node.tagName === 'link' ||
          node.tagName === 'source' ||
          node.tagName === 'style')
      ) {
        let value = props.media;

        if (typeof value === 'string') {
          try {
            const output = clean$2.minify(prefix$2 + value + suffix$2);
            value = output.styles.slice(prefix$2.length, -suffix$2.length);
            /* c8 ignore next -- in a try/catch for potential future third party errors */
          } catch {}

          props.media = value === 'all' || !value ? undefined : value;
        }
      }
    });
  }
}

/**
 * @typedef {import('hast').Root} Root
 */


const clean$1 = new CleanCSS();

const prefix$1 = '*{color:';
const suffix$1 = '}';

/**
 * Minify color attributes.
 *
 * @returns
 *   Transform.
 */
function rehypeMinifyMetaColor() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      if (
        node.tagName === 'meta' &&
        (node.properties.name === 'msapplication-TileColor' ||
          node.properties.name === 'theme-color')
      ) {
        let value = node.properties.content;

        if (typeof value === 'string') {
          try {
            const output = clean$1.minify(prefix$1 + value + suffix$1);
            value = output.styles.slice(prefix$1.length, -suffix$1.length);
            /* c8 ignore next -- in a try/catch for potential future third party errors */
          } catch {}

          node.properties.content = value;
        }
      }
    });
  }
}

/**
 * @typedef {import('hast').Root} Root
 */


const lists = new Set([
  'viewport',
  'keywords',
  'robots',
  'apple-itunes-app',
  'apple-media-service-subscription'
]);

/**
 * Minify `content` attributes on `meta` elements.
 *
 * @returns
 *   Transform.
 */
function rehypeMinifyMetaContent() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      if (node.tagName === 'meta') {
        let value = node.properties.content;

        if (typeof value === 'string') {
          const name = node.properties.name;

          if (name === 'viewport') {
            value = value
              .replace(/(\d+\.\d+)/, function (d) {
                return String(Number(d))
              })
              .replace(/user-scalable=\s*yes/, '');
            // Fall through.
          }

          if (typeof name === 'string' && lists.has(name)) {
            value = stringify$2(parse$3(value), {padLeft: false});
          }

          node.properties.content = value;
        }
      }
    });
  }
}

/**
 * @typedef {import('hast').Root} Root
 */


const clean = new CleanCSS();

const prefix = '*{';
const suffix = '}';

/**
 * Minify `style` attributes.
 *
 * @returns
 *   Transform.
 */
function rehypeMinifyStyleAttribute() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      let value = node.properties.style;

      if (typeof value === 'string') {
        try {
          const output = clean.minify(prefix + value + suffix).styles;
          value = output ? output.slice(prefix.length, -suffix.length) : value;
          /* c8 ignore next -- in a try/catch for potential future third party errors */
        } catch {}

        node.properties.style = value || undefined;
      }
    });
  }
}

/**
 * Check if a node is a *embedded content*.
 *
 * @param value
 *   Thing to check (typically `Node`).
 * @returns
 *   Whether `value` is an element considered embedded content.
 *
 *   The elements `audio`, `canvas`, `embed`, `iframe`, `img`, `math`,
 *   `object`, `picture`, `svg`, and `video` are embedded content.
 */
const embedded = convertElement(
  /**
   * @param element
   * @returns {element is {tagName: 'audio' | 'canvas' | 'embed' | 'iframe' | 'img' | 'math' | 'object' | 'picture' | 'svg' | 'video'}}
   */
  function (element) {
    return (
      element.tagName === 'audio' ||
      element.tagName === 'canvas' ||
      element.tagName === 'embed' ||
      element.tagName === 'iframe' ||
      element.tagName === 'img' ||
      element.tagName === 'math' ||
      element.tagName === 'object' ||
      element.tagName === 'picture' ||
      element.tagName === 'svg' ||
      element.tagName === 'video'
    )
  }
);

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 */


/**
 * Generate an assertion from a test.
 *
 * Useful if you’re going to test many nodes, for example when creating a
 * utility where something else passes a compatible test.
 *
 * The created function is a bit faster because it expects valid input only:
 * a `node`, `index`, and `parent`.
 *
 * @param {Test} test
 *   *   when nullish, checks if `node` is a `Node`.
 *   *   when `string`, works like passing `(node) => node.type === test`.
 *   *   when `function` checks if function passed the node is true.
 *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
 *   *   when `array`, checks if any one of the subtests pass.
 * @returns {Check}
 *   An assertion.
 */
const convert =
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
   *   ((test?: Test) => Check)
   * )}
   */
  (
    /**
     * @param {Test} [test]
     * @returns {Check}
     */
    function (test) {
      if (test === null || test === undefined) {
        return ok
      }

      if (typeof test === 'function') {
        return castFactory(test)
      }

      if (typeof test === 'object') {
        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)
      }

      if (typeof test === 'string') {
        return typeFactory(test)
      }

      throw new Error('Expected function, string, or object as test')
    }
  );

/**
 * @param {Array<Props | TestFunction | string>} tests
 * @returns {Check}
 */
function anyFactory(tests) {
  /** @type {Array<Check>} */
  const checks = [];
  let index = -1;

  while (++index < tests.length) {
    checks[index] = convert(tests[index]);
  }

  return castFactory(any)

  /**
   * @this {unknown}
   * @type {TestFunction}
   */
  function any(...parameters) {
    let index = -1;

    while (++index < checks.length) {
      if (checks[index].apply(this, parameters)) return true
    }

    return false
  }
}

/**
 * Turn an object into a test for a node with a certain fields.
 *
 * @param {Props} check
 * @returns {Check}
 */
function propsFactory(check) {
  const checkAsRecord = /** @type {Record<string, unknown>} */ (check);

  return castFactory(all)

  /**
   * @param {Node} node
   * @returns {boolean}
   */
  function all(node) {
    const nodeAsRecord = /** @type {Record<string, unknown>} */ (
      /** @type {unknown} */ (node)
    );

    /** @type {string} */
    let key;

    for (key in check) {
      if (nodeAsRecord[key] !== checkAsRecord[key]) return false
    }

    return true
  }
}

/**
 * Turn a string into a test for a node with a certain type.
 *
 * @param {string} check
 * @returns {Check}
 */
function typeFactory(check) {
  return castFactory(type)

  /**
   * @param {Node} node
   */
  function type(node) {
    return node && node.type === check
  }
}

/**
 * Turn a custom test into a test for a node that passes that test.
 *
 * @param {TestFunction} testFunction
 * @returns {Check}
 */
function castFactory(testFunction) {
  return check

  /**
   * @this {unknown}
   * @type {Check}
   */
  function check(value, index, parent) {
    return Boolean(
      looksLikeANode(value) &&
        testFunction.call(
          this,
          value,
          typeof index === 'number' ? index : undefined,
          parent || undefined
        )
    )
  }
}

function ok() {
  return true
}

/**
 * @param {unknown} value
 * @returns {value is Node}
 */
function looksLikeANode(value) {
  return value !== null && typeof value === 'object' && 'type' in value
}

// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
const blocks = [
  'address', // Flow content.
  'article', // Sections and headings.
  'aside', // Sections and headings.
  'blockquote', // Flow content.
  'body', // Page.
  'br', // Contribute whitespace intrinsically.
  'caption', // Similar to block.
  'center', // Flow content, legacy.
  'col', // Similar to block.
  'colgroup', // Similar to block.
  'dd', // Lists.
  'dialog', // Flow content.
  'dir', // Lists, legacy.
  'div', // Flow content.
  'dl', // Lists.
  'dt', // Lists.
  'figcaption', // Flow content.
  'figure', // Flow content.
  'footer', // Flow content.
  'form', // Flow content.
  'h1', // Sections and headings.
  'h2', // Sections and headings.
  'h3', // Sections and headings.
  'h4', // Sections and headings.
  'h5', // Sections and headings.
  'h6', // Sections and headings.
  'head', // Page.
  'header', // Flow content.
  'hgroup', // Sections and headings.
  'hr', // Flow content.
  'html', // Page.
  'legend', // Flow content.
  'li', // Block-like.
  'li', // Similar to block.
  'listing', // Flow content, legacy
  'main', // Flow content.
  'menu', // Lists.
  'nav', // Sections and headings.
  'ol', // Lists.
  'optgroup', // Similar to block.
  'option', // Similar to block.
  'p', // Flow content.
  'plaintext', // Flow content, legacy
  'pre', // Flow content.
  'section', // Sections and headings.
  'summary', // Similar to block.
  'table', // Similar to block.
  'tbody', // Similar to block.
  'td', // Block-like.
  'td', // Similar to block.
  'tfoot', // Similar to block.
  'th', // Block-like.
  'th', // Similar to block.
  'thead', // Similar to block.
  'tr', // Similar to block.
  'ul', // Lists.
  'wbr', // Contribute whitespace intrinsically.
  'xmp' // Flow content, legacy
];

const content$1 = [
  // Form.
  'button',
  'input',
  'select',
  'textarea'
];

const skippable$1 = [
  'area',
  'base',
  'basefont',
  'dialog',
  'datalist',
  'head',
  'link',
  'meta',
  'noembed',
  'noframes',
  'param',
  'rp',
  'script',
  'source',
  'style',
  'template',
  'track',
  'title'
];

/**
 * @typedef {import('hast').Nodes} Nodes
 * @typedef {import('hast').Parents} Parents
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Text} Text
 */


/** @type {Options} */
const emptyOptions$1 = {};
const ignorableNode = convert(['doctype', 'comment']);

/**
 * Minify whitespace.
 *
 * @param {Options | null | undefined} [options]
 *   Configuration (optional).
 * @returns
 *   Transform.
 */
function rehypeMinifyWhitespace(options) {
  const settings = options || emptyOptions$1;
  const collapse = collapseFactory(
    settings.newlines ? replaceNewlines : replaceWhitespace
  );

  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    minify$1(tree, {collapse, whitespace: 'normal'});
  }
}

/**
 * @param {Nodes} node
 *   Node.
 * @param {State} state
 *   Info passed around.
 * @returns {Result}
 *   Result.
 */
function minify$1(node, state) {
  if ('children' in node) {
    const settings = {...state};

    if (node.type === 'root' || blocklike(node)) {
      settings.before = true;
      settings.after = true;
    }

    settings.whitespace = inferWhiteSpace(node, state);

    return all$1(node, settings)
  }

  if (node.type === 'text') {
    if (state.whitespace === 'normal') {
      return minifyText(node, state)
    }

    // Naïve collapse, but no trimming:
    if (state.whitespace === 'nowrap') {
      node.value = state.collapse(node.value);
    }

    // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor
    // trimmed.
  }

  return {ignore: ignorableNode(node), stripAtStart: false, remove: false}
}

/**
 * @param {Text} node
 *   Node.
 * @param {State} state
 *   Info passed around.
 * @returns {Result}
 *   Result.
 */
function minifyText(node, state) {
  const value = state.collapse(node.value);
  const result = {ignore: false, stripAtStart: false, remove: false};
  let start = 0;
  let end = value.length;

  if (state.before && removable(value.charAt(0))) {
    start++;
  }

  if (start !== end && removable(value.charAt(end - 1))) {
    if (state.after) {
      end--;
    } else {
      result.stripAtStart = true;
    }
  }

  if (start === end) {
    result.remove = true;
  } else {
    node.value = value.slice(start, end);
  }

  return result
}

/**
 * @param {Parents} parent
 *   Node.
 * @param {State} state
 *   Info passed around.
 * @returns {Result}
 *   Result.
 */
function all$1(parent, state) {
  let before = state.before;
  const after = state.after;
  const children = parent.children;
  let length = children.length;
  let index = -1;

  while (++index < length) {
    const result = minify$1(children[index], {
      ...state,
      after: collapsableAfter(children, index, after),
      before
    });

    if (result.remove) {
      children.splice(index, 1);
      index--;
      length--;
    } else if (!result.ignore) {
      before = result.stripAtStart;
    }

    // If this element, such as a `<select>` or `<img>`, contributes content
    // somehow, allow whitespace again.
    if (content(children[index])) {
      before = false;
    }
  }

  return {ignore: false, stripAtStart: Boolean(before || after), remove: false}
}

/**
 * @param {Array<Nodes>} nodes
 *   Nodes.
 * @param {number} index
 *   Index.
 * @param {boolean | undefined} [after]
 *   Whether there is a break after `nodes` (default: `false`).
 * @returns {boolean | undefined}
 *   Whether there is a break after the node at `index`.
 */
function collapsableAfter(nodes, index, after) {
  while (++index < nodes.length) {
    const node = nodes[index];
    let result = inferBoundary(node);

    if (result === undefined && 'children' in node && !skippable(node)) {
      result = collapsableAfter(node.children, -1);
    }

    if (typeof result === 'boolean') {
      return result
    }
  }

  return after
}

/**
 * Infer two types of boundaries:
 *
 * 1. `true` — boundary for which whitespace around it does not contribute
 *    anything
 * 2. `false` — boundary for which whitespace around it *does* contribute
 *
 * No result (`undefined`) is returned if it is unknown.
 *
 * @param {Nodes} node
 *   Node.
 * @returns {boolean | undefined}
 *   Boundary.
 */
function inferBoundary(node) {
  if (node.type === 'element') {
    if (content(node)) {
      return false
    }

    if (blocklike(node)) {
      return true
    }

    // Unknown: either depends on siblings if embedded or metadata, or on
    // children.
  } else if (node.type === 'text') {
    if (!whitespace$1(node)) {
      return false
    }
  } else if (!ignorableNode(node)) {
    return false
  }
}

/**
 * Infer whether a node is skippable.
 *
 * @param {Nodes} node
 *   Node.
 * @returns {boolean}
 *   Whether `node` is skippable.
 */
function content(node) {
  return embedded(node) || isElement(node, content$1)
}

/**
 * See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
 *
 * @param {Nodes} node
 *   Node.
 * @returns {boolean}
 *   Whether `node` is block-like.
 */
function blocklike(node) {
  return isElement(node, blocks)
}

/**
 * @param {Parents} node
 *   Node.
 * @returns {boolean}
 *   Whether `node` is skippable.
 */
function skippable(node) {
  return (
    Boolean(node.type === 'element' && node.properties.hidden) ||
    ignorableNode(node) ||
    isElement(node, skippable$1)
  )
}

/**
 * @param {string} character
 *   Character.
 * @returns {boolean}
 *   Whether `character` is removable.
 */
function removable(character) {
  return character === ' ' || character === '\n'
}

/**
 * @type {Collapse}
 */
function replaceNewlines(value) {
  const match = /\r?\n|\r/.exec(value);
  return match ? match[0] : ' '
}

/**
 * @type {Collapse}
 */
function replaceWhitespace() {
  return ' '
}

/**
 * @param {Collapse} replace
 * @returns {Collapse}
 *   Collapse.
 */
function collapseFactory(replace) {
  return collapse

  /**
   * @type {Collapse}
   */
  function collapse(value) {
    return String(value).replace(/[\t\n\v\f\r ]+/g, replace)
  }
}

/**
 * We don’t need to support void elements here (so `nobr wbr` -> `normal` is
 * ignored).
 *
 * @param {Parents} node
 *   Node.
 * @param {State} state
 *   Info passed around.
 * @returns {Whitespace}
 *   Whitespace.
 */
function inferWhiteSpace(node, state) {
  if ('tagName' in node && node.properties) {
    switch (node.tagName) {
      // Whitespace in script/style, while not displayed by CSS as significant,
      // could have some meaning in JS/CSS, so we can’t touch them.
      case 'listing':
      case 'plaintext':
      case 'script':
      case 'style':
      case 'xmp': {
        return 'pre'
      }

      case 'nobr': {
        return 'nowrap'
      }

      case 'pre': {
        return node.properties.wrap ? 'pre-wrap' : 'pre'
      }

      case 'td':
      case 'th': {
        return node.properties.noWrap ? 'nowrap' : state.whitespace
      }

      case 'textarea': {
        return 'pre-wrap'
      }
    }
  }

  return state.whitespace
}

/**
 * @type {Record<string, Array<string> | null>}
 */
const schema$3 = {
  acceptCharset: ['form'],
  autoComplete: ['form'],
  charSet: ['meta', 'script'],
  contentEditable: null,
  crossOrigin: ['audio', 'img', 'link', 'script', 'video'],
  dir: null,
  draggable: null,
  dropzone: null,
  encType: ['form'],
  formEncType: ['button', 'input'],
  formMethod: ['button', 'input'],
  inputMode: ['input', 'textarea'],
  kind: ['track'],
  method: ['form'],
  preload: ['audio', 'video'],
  referrerPolicy: ['a', 'area', 'iframe', 'img', 'link'],
  sandbox: ['iframe'],
  spellCheck: null,
  scope: ['th'],
  shape: ['area'],
  sizes: ['link'],
  step: ['input'],
  translate: null,
  type: [
    'a',
    'link',
    'button',
    'embed',
    'object',
    'script',
    'source',
    'style',
    'input',
    'menu',
    'menuitem'
  ],
  wrap: ['textarea']
};

/**
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('hast').Root} Root
 */


/**
 * Normalize casing of attributes.
 *
 * @returns
 *   Transform.
 */
function rehypeNormalizeAttributeValueCase() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      /** @type {string} */
      let prop;

      for (prop in node.properties) {
        if (
          node.properties[prop] &&
          Object.hasOwn(schema$3, prop) &&
          isElement(node, schema$3[prop])
        ) {
          node.properties[prop] = minify(node.properties[prop]);
        }
      }
    });
  }
}

/**
 * @param {PropertyValue} value
 *   Value.
 * @returns {PropertyValue}
 *   Value.
 */
function minify(value) {
  return Array.isArray(value) ? all(value) : one(value)
}

/**
 * @param {Objects} value
 *   Value.
 * @returns {Objects}
 *   Value.
 */
function all(value) {
  let index = -1;
  /** @type {Objects} */
  const result = [];

  while (++index < value.length) {
    // @ts-expect-error: kind in -> kind out.
    result[index] = one(value[index]);
  }

  return result
}

/**
 * @param {Primitives} value
 *   Value.
 * @returns {Primitives}
 *   Value.
 */
function one(value) {
  return typeof value === 'string' ? value.toLowerCase() : value
}

/**
 * @typedef {import('hast').Nodes} Nodes
 */

const re = /^\[if[ \t\f\n\r]+[^\]]+]|<!\[endif]$/;

/**
 * Check if a node is a conditional comment.
 *
 * @param {Nodes} node
 *   Node to check.
 * @returns {boolean}
 *   Whether `node` is a conditional comment.
 */
function isConditionalComment(node) {
  return node.type === 'comment' && re.test(node.value)
}

/**
 * @typedef {import('hast').Root} Root
 *
 * @typedef Options
 *   Configuration.
 * @property {boolean | null | undefined} [removeConditional=false]
 *   Remove conditional comments (default: `false`); the default is to leave
 *   them.
 */


/** @type {Options} */
const emptyOptions = {};

/**
 * Remove comments (except conditional comments).
 *
 * @param {Options | null | undefined} [options]
 *   Configuration (optional).
 * @returns
 *   Transform.
 */
function rehypeRemoveComments(options) {
  const settings = options || emptyOptions;

  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'comment', function (node, index, parent) {
      if (
        typeof index === 'number' &&
        parent &&
        (settings.removeConditional || !isConditionalComment(node))
      ) {
        parent.children.splice(index, 1);
        return index
      }
    });
  }
}

/** @type {Record<string, Array<string> | string | null>} */
const schema$2 = {
  acceptCharset: 'form',
  accessKey: null,
  className: null,
  dropzone: null,
  htmlFor: 'output',
  headers: ['td', 'th'],
  itemProp: null,
  itemRef: null,
  itemType: null,
  sandbox: 'iframe',
  sizes: 'link'
};

/**
 * @typedef {import('hast').Root} Root
 */


/**
 * Remove duplicates in attributes values.
 *
 * @returns
 *   Transform.
 */
function rehypeRemoveDuplicateAttributeValues() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      /** @type {string} */
      let prop;

      for (prop in node.properties) {
        if (Object.hasOwn(node.properties, prop)) {
          const value = node.properties[prop];

          if (
            Object.hasOwn(schema$2, prop) &&
            isElement(node, schema$2[prop]) &&
            Array.isArray(value)
          ) {
            node.properties[prop] = [...new Set(value)];
          }
        }
      }
    });
  }
}

/** @type {Record<string, Array<string> | string | null>} */
const schema$1 = {
  abbr: 'th',
  accept: 'input',
  acceptCharset: 'form',
  accessKey: null,
  action: 'form',
  charSet: ['meta', 'script'],
  className: null,
  cols: 'textarea',
  colSpan: ['td', 'th'],
  coords: 'area',
  dir: null,
  dirname: ['input', 'textarea'],
  dropzone: null,
  headers: ['td', 'th'],
  htmlFor: ['label', 'output'],
  form: [
    'button',
    'fieldset',
    'input',
    'keygen',
    'object',
    'output',
    'select',
    'textarea'
  ],
  formAction: ['button', 'input'],
  height: ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video'],
  high: 'meter',
  href: 'link',
  icon: 'menuitem',
  id: null,
  itemProp: null,
  itemRef: null,
  itemType: null,
  list: 'input',
  low: 'meter',
  manifest: 'html',
  max: ['meter', 'progress'],
  maxLength: ['input', 'textarea'],
  menu: 'button',
  min: 'meter',
  minLength: ['input', 'textarea'],
  name: [
    'button',
    'fieldset',
    'input',
    'keygen',
    'output',
    'select',
    'textarea',
    'form',
    'map',
    'meta',
    'param',
    'slot'
  ],
  optimum: 'meter',
  pattern: 'input',
  ping: ['a', 'area'],
  placeholder: ['input', 'textarea'],
  poster: 'video',
  rel: ['a', 'area', 'link'],
  rows: 'textarea',
  rowSpan: ['td', 'th'],
  size: ['input', 'select'],
  span: ['col', 'colgroup'],
  src: [
    'audio',
    'embed',
    'iframe',
    'img',
    'input',
    'script',
    'source',
    'track',
    'video'
  ],
  start: 'ol',
  style: null,
  tabIndex: null,
  type: [
    'a',
    'link',
    'button',
    'embed',
    'object',
    'script',
    'source',
    'style',
    'input',
    'menu',
    'menuitem',
    'ol'
  ],
  useMap: ['img', 'object'],
  value: ['button', 'input', 'li'],
  width: ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video']
};

/**
 * @typedef {import('hast').Root} Root
 */


/**
 * Remove empty attributes.
 *
 * @returns
 *   Transform.
 */
function rehypeRemoveEmptyAttribute() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      /** @type {string} */
      let prop;

      for (prop in node.properties) {
        if (Object.hasOwn(node.properties, prop)) {
          const value = node.properties[prop];

          if (
            (value === '' || (Array.isArray(value) && value.length === 0)) &&
            (isEventHandler(prop) ||
              (Object.hasOwn(schema$1, prop) && isElement(node, schema$1[prop])))
          ) {
            node.properties[prop] = undefined;
          }
        }
      }
    });
  }
}

/**
 * @typedef {import('hast').Root} Root
 */


/**
 * Remove the contents of external JavaScript `<script>`s.
 *
 * @returns
 *   Transform.
 */
function rehypeRemoveExternalScriptContent() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      if (isJavaScript(node) && node.properties.src) {
        node.children = [];
      }
    });
  }
}

/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Parents} Parents
 */


/**
 * Remove `meta[http-equiv=content-language]` and
 * `meta[http-equiv=content-type]`.
 *
 * @returns
 *   Transform.
 */
function rehypeRemoveMetaHttpEquiv() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    /** @type {Element | undefined} */
    let html;
    /** @type {Element | undefined} */
    let head;
    /** @type {Element | undefined} */
    let charSet;
    /** @type {Element | undefined} */
    let contentType;
    /** @type {Element | undefined} */
    let contentLanguage;
    /** @type {Parents | undefined} */
    let contentTypeParent;
    /** @type {Parents | undefined} */
    let contentLanguageParent;

    visit(tree, 'element', function (node, _, parent) {
      // Stop walking as we only need the `head`.
      if (node.tagName === 'body') {
        return false
      }

      switch (node.tagName) {
        case 'html': {
          html = node;
          break
        }

        case 'head': {
          head = node;
          break
        }

        case 'meta': {
          if (node.properties.charSet) {
            charSet = node;
          } else if (
            node.properties.httpEquiv &&
            Array.isArray(node.properties.httpEquiv)
          ) {
            const value = stringify$1(node.properties.httpEquiv).toLowerCase();

            if (value === 'content-language') {
              contentLanguage = node;
              contentLanguageParent = parent;
            } else if (value === 'content-type') {
              contentType = node;
              contentTypeParent = parent;
            }
          }

          break
        }
        // No default
      }
    });

    // `meta` has precedence over `html[lang]`:
    // <https://html.spec.whatwg.org/#the-lang-and-xml:lang-attributes:pragma-set-default-language>
    if (html && contentLanguage && contentLanguageParent) {
      html.properties.lang = contentLanguage.properties.content;
      contentLanguageParent.children.splice(
        contentLanguageParent.children.indexOf(contentLanguage),
        1
      );
    }

    // `meta` has precedence over `meta[charset]`.
    if (contentTypeParent && contentType) {
      const value = String(contentType.properties.content).replace(
        /^.+charset=/i,
        ''
      );

      if (charSet) {
        charSet.properties.charSet = value;
        contentTypeParent.children.splice(
          contentTypeParent.children.indexOf(contentType),
          1
        );
      } else if (head) {
        head.children.unshift({
          type: 'element',
          tagName: 'meta',
          properties: {charSet: value},
          children: []
        });

        contentTypeParent.children.splice(
          contentTypeParent.children.indexOf(contentType),
          1
        );
      }
    }
  }
}

/**
 * @typedef {import('hast').Root} Root
 */


/**
 * Remove `type` and `language` attributes on JavaScript scripts.
 *
 * @returns
 *   Transform.
 */
function rehypeRemoveScriptTypeJavaScript() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      if (isJavaScript(node)) {
        if ('type' in node.properties) {
          node.properties.type = undefined;
        }

        if ('language' in node.properties) {
          node.properties.language = undefined;
        }
      }
    });
  }
}

/**
 * @typedef {import('hast').Nodes} Nodes
 */


/**
 * Check whether a hast node is a `<link>` that references CSS.
 *
 * Returns `true` if `node` is a `<link>` element with a `rel` list that
 * contains `'stylesheet'` and has no `type`, an empty `type`, or `'text/css'`
 * as its `type`.
 *
 * @param {Nodes} node
 *   Node to check.
 * @returns {boolean}
 *   Whether `node` is a CSS link.
 */
function isCssLink(node) {
  if (node.type !== 'element' || node.tagName !== 'link') {
    return false
  }

  const rel = node.properties.rel;

  if (!rel || !Array.isArray(rel) || !rel.includes('stylesheet')) {
    return false
  }

  const value = collapseWhiteSpace(String(node.properties.type || ''), {
    style: 'html',
    trim: true
  }).toLowerCase();

  return value === '' || value === 'text/css'
}

/**
 * @typedef {import('hast').Root} Root
 */


/**
 * Remove `type` attributes on CSS `<style>`s and `<link>`s.
 *
 * @returns
 *   Transform.
 */
function rehypeRemoveStyleTypeCss() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    visit(tree, 'element', function (node) {
      if ('type' in node.properties && (isCssLink(node) || isCssStyle(node))) {
        node.properties.type = undefined;
      }
    });
  }
}

/** @type {Record<string, Array<string> | string | null>} */
const schema = {
  accept: 'input',
  className: null,
  dropzone: null,
  htmlFor: 'output',
  headers: ['td', 'th'],
  itemProp: null,
  itemRef: null,
  itemType: null,
  ping: ['a', 'area'],
  rel: ['a', 'area', 'link'],
  sandbox: 'iframe',
  sizes: 'link'
};

/**
 * @typedef {import('hast').Root} Root
 */


/**
 * Sort attribute values.
 *
 * @returns
 *   Transform.
 */
function rehypeSortAttributeValues() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    // Map of properties to property values to counts.
    /** @type {Map<string, Map<number | string, number>>} */
    const counts = new Map();
    // List of all arrays, with their property names, so we don’t walk twice.
    /** @type {Array<[string, Array<number | string>]>} */
    const queues = [];

    visit(tree, 'element', function (node) {
      /** @type {string} */
      let prop;

      for (prop in node.properties) {
        if (Object.hasOwn(node.properties, prop)) {
          const value = node.properties[prop];

          if (
            Object.hasOwn(schema, prop) &&
            isElement(node, schema[prop]) &&
            Array.isArray(value)
          ) {
            add(prop, value);
          }
        }
      }
    });

    flush();

    /**
     * @param {string} prop
     *   Property name.
     * @param {Array<number | string>} values
     *   Values.
     * @returns {undefined}
     *   Nothing.
     */
    function add(prop, values) {
      let index = -1;
      let cache = counts.get(prop);

      if (!cache) {
        cache = new Map();
        counts.set(prop, cache);
      }

      while (++index < values.length) {
        const value = values[index];
        cache.set(value, (cache.get(value) || 0) + 1);
      }

      queues.push([prop, values]);
    }

    /**
     * @returns {undefined}
     *   Nothing.
     */
    function flush() {
      /** @type {Map<string, Array<number | string>>} */
      const caches = new Map();

      for (const [prop, cache] of counts) {
        caches.set(
          prop,
          [...cache.entries()]
            .sort(function (a, b) {
              return b[1] - a[1] || compare$1(String(a[0]), String(b[0]), 0)
            })
            .map(function (d) {
              return d[0]
            })
        );
      }

      let index = -1;

      while (++index < queues.length) {
        const queue = queues[index];
        const cache = caches.get(queue[0]);
        if (cache) {
          queue[1].sort(function (a, b) {
            return cache.indexOf(a) - cache.indexOf(b)
          });
        }
      }
    }
  }
}

/**
 * This would create an infinite loop if `a` and `b` could be equal, but the
 * list we operate on only has unique values.
 *
 * @param {string} a
 *   Left value.
 * @param {string} b
 *   Right value.
 * @param {number} index
 *   Current index in values.
 * @returns {number}
 *   Order.
 */
function compare$1(a, b, index) {
  return (
    (a.charCodeAt(index) || 0) - (b.charCodeAt(index) || 0) ||
    compare$1(a, b, index + 1)
  )
}

/**
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('hast').Root} Root
 */


/**
 * Sort attributes.
 *
 * @returns
 *   Transform.
 */
function rehypeSortAttributes() {
  /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */
  return function (tree) {
    // Map of tag names to property names to counts.
    /** @type {Map<string, Map<string, number>>} */
    const counts = new Map();

    visit(tree, 'element', function (node) {
      let cache = counts.get(node.tagName);

      if (!cache) {
        cache = new Map();
        counts.set(node.tagName, cache);
      }

      /** @type {string} */
      let prop;

      for (prop in node.properties) {
        if (Object.hasOwn(node.properties, prop)) {
          cache.set(prop, (cache.get(prop) || 0) + 1);
        }
      }
    });

    const caches = optimize();

    visit(tree, 'element', function (node) {
      const cache = caches.get(node.tagName);

      if (cache) {
        /** @type {Array<string>} */
        const keys = [];
        /** @type {Properties} */
        const result = {};
        let index = -1;
        /** @type {string} */
        let prop;

        for (prop in node.properties) {
          if (Object.hasOwn(node.properties, prop)) {
            keys.push(prop);
          }
        }

        keys.sort(function (a, b) {
          return cache.indexOf(a) - cache.indexOf(b)
        });

        while (++index < keys.length) {
          result[keys[index]] = node.properties[keys[index]];
        }

        node.properties = result;
      }
    });

    /**
     * @returns
     *   Optimized caches.
     */
    function optimize() {
      // Map of tag names to sorted property names.
      /** @type {Map<string, Array<string>>} */
      const caches = new Map();

      for (const [name, properties] of counts.entries()) {
        caches.set(
          name,
          [...properties.entries()]
            .sort(function (a, b) {
              return b[1] - a[1] || compare(String(a[0]), String(b[0]), 0)
            })
            .map(function (d) {
              return d[0]
            })
        );
      }

      return caches
    }
  }
}

/**
 * This would create an infinite loop if `a` and `b` could be equal, but the
 * list we operate on only has unique values.
 *
 * @param {string} a
 *   Left value.
 * @param {string} b
 *   Right value.
 * @param {number} index
 *   Current index in values.
 * @returns {number}
 *   Order.
 */
function compare(a, b, index) {
  return (
    (a.charCodeAt(index) || 0) - (b.charCodeAt(index) || 0) ||
    compare(a, b, index + 1)
  )
}

/**
 * rehype preset to minify HTML.
 *
 * ## What is this?
 *
 * This package is a [unified](https://github.com/unifiedjs/unified)
 * ([rehype](https://github.com/rehypejs/rehype)) preset to minify HTML.
 *
 * ## When should I use this?
 *
 * You can use this preset when you want to improve the size of HTML documents.
 *
 * ## API
 *
 * ### `unified().use(rehypePresetMinify)`
 *
 * Preset to minify HTML
 * ([`Preset`](https://github.com/unifiedjs/unified#preset)).
 *
 * You can reconfigure plugins in presets by using them afterwards with different
 * options.
 *
 * @example
 *   {"processor": {"fragment": false}}
 *   <!doctype html>
 *   <html lang="en-GB">
 *     <head>
 *       <meta charset="utf-8">
 *       <meta http-equiv="content-language" content="en-US">
 *       <script src="index.js" type="text/javascript" language="javascript">
 *         alert(true);
 *       </script>
 *       <link rel="stylesheet" href="index.css" type="text/css">
 *       <title>Foo  &amp;  bar</title>
 *     </head>
 *     <body>
 *       <h1 class="foo foo">bar  bar</h1>
 *       <p id="alfred" id="alfred">  <strong>foo</strong> <em>bar</em> </p>
 *       <button type="BUTTON" onclick="javascript:return false">Alpha</button>
 *     </body>
 *   </html>
 */


const settings = {
  allowParseErrors: true,
  bogusComments: true,
  characterReferences: {
    omitOptionalSemicolons: true,
    useShortestReferences: true
  },
  closeEmptyElements: true,
  collapseEmptyAttributes: true,
  omitOptionalTags: true,
  preferUnquoted: true,
  quoteSmart: true,
  tightAttributes: true,
  tightCommaSeparatedLists: true,
  tightDoctype: true,
  tightSelfClosing: true
};

const plugins = [
  rehypeMinifyAttributeWhitespace,
  rehypeMinifyCssStyle,
  // Note: `rehypeRemoveMetaHttpEquiv` goes before
  // `rehypeMinifyEnumeratedAttribute`, as the latter might minify things further.
  rehypeRemoveMetaHttpEquiv,
  rehypeMinifyEnumeratedAttribute,
  rehypeMinifyEventHandler,
  rehypeMinifyJavaScriptScript,
  rehypeMinifyJavaScriptUrl,
  rehypeMinifyJsonScript,
  rehypeMinifyLanguage,
  rehypeMinifyMediaAttribute,
  rehypeMinifyMetaColor,
  rehypeMinifyMetaContent,
  rehypeMinifyStyleAttribute,
  rehypeMinifyWhitespace,
  rehypeNormalizeAttributeValueCase,
  rehypeRemoveComments,
  rehypeRemoveDuplicateAttributeValues,
  rehypeRemoveEmptyAttribute,
  rehypeRemoveExternalScriptContent,
  rehypeRemoveScriptTypeJavaScript,
  rehypeRemoveStyleTypeCss,
  rehypeSortAttributeValues,
  rehypeSortAttributes
];

/**
 * Preset to minify HTML.
 *
 * @type {import('unified').Preset}
 */
const rehypePresetMinify = {plugins, settings};

export { rehypePresetMinify as default };
